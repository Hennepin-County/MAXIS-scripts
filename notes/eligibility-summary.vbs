'Required for statistical purposes==========================================================================================
name_of_script = "NOTES - ELIGIBILITY SUMMARY.vbs"
start_time = timer
STATS_counter = 1               'sets the stats counter at one
STATS_manualtime = 60          	'manual run time in seconds
STATS_denomination = "C"        'C is for each case
'END OF stats block=========================================================================================================
'LOADING FUNCTIONS LIBRARY FROM GITHUB REPOSITORY===========================================================================
IF IsEmpty(FuncLib_URL) = TRUE THEN	'Shouldn't load FuncLib if it already loaded once
	IF run_locally = FALSE or run_locally = "" THEN	   'If the scripts are set to run locally, it skips this and uses an FSO below.
		IF use_master_branch = TRUE THEN			   'If the default_directory is C:\DHS-MAXIS-Scripts\Script Files, you're probably a scriptwriter and should use the master branch.
			FuncLib_URL = "https://raw.githubusercontent.com/Hennepin-County/MAXIS-scripts/master/MASTER%20FUNCTIONS%20LIBRARY.vbs"
		Else											'Everyone else should use the release branch.
			FuncLib_URL = "https://raw.githubusercontent.com/Hennepin-County/MAXIS-scripts/master/MASTER%20FUNCTIONS%20LIBRARY.vbs"
		End if
		SET req = CreateObject("Msxml2.XMLHttp.6.0")				'Creates an object to get a FuncLib_URL
		req.open "GET", FuncLib_URL, FALSE							'Attempts to open the FuncLib_URL
		req.send													'Sends request
		IF req.Status = 200 THEN									'200 means great success
			Set fso = CreateObject("Scripting.FileSystemObject")	'Creates an FSO
			Execute req.responseText								'Executes the script code
		ELSE														'Error message
			critical_error_msgbox = MsgBox ("Something has gone wrong. The Functions Library code stored on GitHub was not able to be reached." & vbNewLine & vbNewLine &_
                                            "FuncLib URL: " & FuncLib_URL & vbNewLine & vbNewLine &_
                                            "The script has stopped. Please check your Internet connection. Consult a scripts administrator with any questions.", _
                                            vbOKonly + vbCritical, "BlueZone Scripts Critical Error")
            StopScript
		END IF
	ELSE
		FuncLib_URL = "C:\MAXIS-scripts\MASTER FUNCTIONS LIBRARY.vbs"
		Set run_another_script_fso = CreateObject("Scripting.FileSystemObject")
		Set fso_command = run_another_script_fso.OpenTextFile(FuncLib_URL)
		text_from_the_other_script = fso_command.ReadAll
		fso_command.Close
		Execute text_from_the_other_script
	END IF
END IF
'END FUNCTIONS LIBRARY BLOCK================================================================================================
'CHANGELOG BLOCK ===========================================================================================================
'Starts by defining a changelog array
changelog = array()

'INSERT ACTUAL CHANGES HERE, WITH PARAMETERS DATE, DESCRIPTION, AND SCRIPTWRITER. **ENSURE THE MOST RECENT CHANGE GOES ON TOP!!**
'Example: call changelog_update("01/01/2000", "The script has been updated to fix a typo on the initial dialog.", "Jane Public, Oak County")
call changelog_update("12/11/2024", "Additional handling for GRH cases: ##~## - Review of Supportive Housing Disregard Errors##~## - Allow for a single past month approval.##~##", "Casey Love, Hennepin County")
call changelog_update("09/04/2024", "Updates to policy and functionality in three areas:##~## ##~## - MFIP Special Diets to better separate MSA and MFIP information and identify benefit month.##~## ##~## - Update to Remedial Care HC Deduction policy from clarification provided.##~## ##~## - Added support for GRHs budgets to include the Supportive Housing Disregard information.##~## ##~##As with any new functionality, these may not work exactly as expected and we rely on reports to identify errors in the functionality. Please reach out with any questions or issues.##~##", "Casey Love, Hennepin County")
call changelog_update("08/12/2024", "Enhanced handling for MFIP Special Diets to allow for better reading of the case scenario and to handle for more than one member receiving the benefit.", "Casey Love, Hennepin County")
call changelog_update("07/24/2024", "BUG FIX for Health Care Cases with Retro Months prior to the date of application.", "Casey Love, Hennepin County")
call changelog_update("07/01/2024", "Initial development for NOTES - Eligibility Summary is complete and the script is no longer in testing. Future enhancements can be completed as needs are identified.##~## ##~##NOTES - Eiligibility Summary now allows for additional information to be entered for approvals that are prorated or FIATed. The Notes about FIAT are mandatory but the ones about proration are optional.##~## ##~## * * * NOTES - Eligiblity Summary is now the only script to CASE/NOTE approvals. * * * ##~##", "Casey Love, Hennpin County")
call changelog_update("06/26/2024", "Additional supports added:##~## - Include Vendor Information on MFIP issuances.##~## - Updated the phrasing to identify instances where the script is run on a case twice in a day to be clearer.##~##", "Casey Love, Hennpin County")
call changelog_update("05/31/2024", "Additional supports added:##~## - CASE/NOTE of MFIP Special Diet MONY/CHCK Issuances.##~## - Update to Thrifty Food Plan and Calculation Display.##~## - Update to the phrasing of beudgets that are not accurate.##~## ##~##Eligibility Summary is now preppared to be the only script to support the CASE/NOTE of approvals.", "Casey Love, Hennpin County")
call changelog_update("05/08/2024", "New support to display Expedited approvals more accurately, ensuring we are only documenting information for months that will be issued.##~####~##Additional information to have clearer information about ineligible results due to non-cooperation and cases where there is not a limit to shelter expense.", "Casey Love, Hennpin County")
call changelog_update("03/15/2024", "Additional support added to check for 'U' code on REVW and MONT.", "Megan Geissler, Hennepin County")
call changelog_update("03/15/2024", "Updated the dialogs and CASE NOTE information with some details for ##~## - If a program is closed for a death, the date of death will be listed in the dialog and CASE/NOTE.##~## - For HC programs, if ineligible due to death, the eff date in the CAE/NOTE header will be for the date of death.##~## - Added some additional support around Designated Providers##~## - Removed 'Denied' and 'Closed' indicators from the HC CASE/NOTE Headers because they were not reliable. THIS IS TEMPORARY and will be returned when more support is built.##~##", "Casey Love, Hennpin County")
call changelog_update("03/08/2024", "Updates to support for ELIG/HC functionality to provide additional information and process guidance ##~## - Added date for 1503 Form. ##~## - Review for Remedial Care Bills when member is in a GRH Facility but is not active GRH.##~## ##~##Please report any issues or question on this script run if you find them.", "Casey Love, Hennepin County")
call changelog_update("01/05/2024", "Verification Requests can be sent less than 10 days ago if the program is also ineligible for 'FAIL TO FILE' for a HRF or REVW process in the month being assessed.##~## ##~##All other instances still require that verifications reqests are given at least 10 days from the date being sent for a case to be approved as ineligible for failing verifications.##~## ##~##This is also true if a program is ineligible for other reasons, as long as verifications are failed, we need to give residents at least 10 days before denying for failing verification requirements.##~##", "Casey Love, Hennepin County")
call changelog_update("09/19/2023", "BUG FIX for GRH cases. Previously not all payement information was being entered into CASE/NOTE. You will now see each month of vendor information entered into the CASE/NOTE. This may cause GRH CASE/NOTEs to be much longer than they were before.##~##", "Casey Love, Hennepin County")
call changelog_update("07/18/2023", "BUG FIX for for EGA ineligble results. Case note was reflecting incorrect 200% FPG. This is now resolved.", "Ilse Ferris, Hennepin County")
call changelog_update("12/21/2022", "Additional Program Support Added: ELIG/DWP - for DWP Approvals.##~####~##The script can now support determinations made in: ##~##ELIG/DWP ##~##ELIG/HC ##~##ELIG/SNAP ##~##ELIG/MFIP ##~##ELIG/GA ##~##ELIG/MSA ##~##ELIG/GRH ##~##ELIG/EMER ##~##ELIG/DENY ##~##REPT/PND2 Denials.##~## ##~##All programs are now supported by Eligibility Summary. Please continue to provide feedback and report any concerns.", "Casey Love, Hennepin County")
call changelog_update("03/09/2023", "BUG FIX for GRH in adding a WCOM if GRH is closed using PACT. The WCOm was not being added when it should have been and it is now functioning.", "Casey Love, Hennepin County")
call changelog_update("12/21/2022", "Additional Program Support Added: ELIG/HC - for Health Care Approvals - MA and MSP based programs.##~####~##The script can now support determinations made in: ##~##ELIG/HC ##~##ELIG/SNAP ##~##ELIG/MFIP ##~##ELIG/GA ##~##ELIG/MSA ##~##ELIG/GRH ##~##ELIG/EMER ##~##ELIG/DENY ##~##REPT/PND2 Denials.##~## ##~##We are still working on ELIG/DWP.", "Casey Love, Hennepin County")
call changelog_update("10/04/2022", "The script will now provide instruction on interacting with the dialog if there is more than one approval package. This is an informative message only.##~##", "Casey Love, Hennepin County")
call changelog_update("09/29/2022", "Added support for allocations in MFIP budgets to display them in the budget and to enter them clearly in CASE/NOTE. MFIP approvals will initiate a testing response for the time being to ensure the functionality is working accurately.##~####~##Please provide any feedback you have about the script functionality or display in dialog or CASE/NOTE, your input is crucial..", "Casey Love, Hennepin County")
call changelog_update("09/26/2022", "Additional Program support added: ELIG/GRH - for Housing Support Approvals.##~## ##~##The script can now support determinations made in: ##~##ELIG/SNAP ##~##ELIG/MFIP ##~##ELIG/GA ##~##ELIG/MSA ##~##ELIG/GRH ##~##ELIG/EMER ##~##ELIG/DENY ##~##REPT/PND2 Denials.##~## ##~##We are still working on ELIG/HC and ELIG/DWP.", "Casey Love, Hennepin County")
call changelog_update("09/14/2022", "Functionality added to EMER functionality:##~## - Add text to dialog of current SUA (Standard Utility Allowance) amounts for reference.##~## - Functionality to support Bus Ticket approvals as these do not have MONY/CHCKs issued.##~##", "Casey Love, Hennepin County")
call changelog_update("09/14/2022", "SPECIAL FUNCTIONALITY ADDED##~## ##~##This script will work on approvals for SNAP and MFIP in 10/22 where the background results were generated by the DHS MASS Change run on 09/10/2022.##~## ##~##If the 'Process Date' for SNAP or MFIP were on 09/10/22 and you are approving 10/22 benefits, you do not need to run the case through background before approving the results. This is special handling to support the DHS Generated Eligibility Results.##~##", "Casey Love, Hennepin County")
call changelog_update("08/30/2022", "Additional Program support added: ELIG/DENY - for Cash Denials.##~## ##~##The script can now support determinations made in: ##~##ELIG/SNAP ##~##ELIG/MFIP ##~##ELIG/GA ##~##ELIG/MSA ##~##ELIG/EMER ##~##ELIG/DENY ##~##REPT/PND2 Denials.##~## ##~##We are still working on ELIG/GRH, ELIG/HC, and ELIG/DWP.", "Casey Love, Hennepin County")
call changelog_update("08/19/2022", "Additional Program support added: ELIG/MSA and ELIG/EMER.##~## ##~##The script can now support determinations made in: ##~##ELIG/SNAP ##~##ELIG/MFIP ##~##ELIG/GA ##~##ELIG/MSA ##~##ELIG/EMER ##~##REPT/PND2 Denials.##~## ##~##We are still working on ELIG/DENY, ELIG/GRH, ELIG/HC, and ELIG/DWP.", "Casey Love, Hennepin County")
call changelog_update("07/21/2022", "TESTING UPDATE ##~## ##~##CASE NOTE Added - for REVW Completion. If an approval is completed and that program has a REVW code of 'A', the script will create a seperate CASE/NOTE to document the completion of the RERVW.##~##", "Casey Love, Hennepin County")
call changelog_update("07/19/2022", "TESTING UPDATE ##~## ##~##MFIP ELIGIBILITY APPROVALS are now handled in the script run!##~## ##~##This script now handles for SNAP and MFIP Approvals in ELIG. It will also handle for denials from REPT/PND2.##~## ##~##As MFIP fucntionality is new, there may be bugs, please let us know if anything doesn't work or seems weird in the wording.##~## ##~##We will be continuing to add new programs to the functionality. Please note that while MFIP works, Cash Denials do NOT work.##~## ##~##The error reporting default will be turned off for SNAP only cases as that functionality seems to be well tested. Please send a report on a SNAP only approval case if you run in to any issues or errors.##~##", "Casey Love, Hennepin County")
call changelog_update("07/12/2022", "TESTING UPDATE ##~## ##~##We have added some detail to the end message about the actions the script has taken and the status of the case.##~## ##~##Adjustments made to the script layout that should help to speed up some of the script runs. We know this script takes a bit of time to gather the details needed, but we hope the level of detail and the small amount of input required in the script balances these longer run times.##~##", "Casey Love, Hennepin County")
call changelog_update("07/08/2022", "The SNAP CASE/NOTE format has been updated to be a little clearer and cleaner. Review the new format of the CASE/NOTE and let us know what you think.##~## ##~##Remember that for now the script only works for SNAP approvals and denials on REPT/PND2. MFIP functionality should be available soon.", "Casey Love, Hennepin County")
call changelog_update("07/05/2022", "Initial version.", "Casey Love, Hennepin County")

'Actually displays the changelog. This function uses a text file located in the My Documents folder. It stores the name of the script file and a description of the most recent viewed change.
changelog_display
'END CHANGELOG BLOCK =======================================================================================================

' REVIEW BLOCK --- These are the possibilities for completing QC Reviews -------
QCR_random_SNAP_approvals = False
QCR_random_MFIP_approvals = False
QCR_random_DWP_approvals = False
QCR_random_MSA_approvals = False
QCR_random_GA_approvals = False
QCR_random_GRH_approvals = False
QCR_random_HC_approvals = False
QCR_random_EMER_approvals = False
QCR_random_DENY_approvals = False
QCR_SNAP_ABAWD_30_09_Eligible = True
	QCR_SNAP_ABAWD_30_09_String = " "
QCR_SNAP_ABAWD_30_10_All = False
QCR_SNAP_Homeless_SHELTER_Expense_All = True
	SNAP_Homeless_SHELTER_Expense_Min = 179.66
QCR_UHFS_SHEL_Expense = True
	QCR_UHFS_SHEL_Potential_Error = False
QCR_HC_with_Remedial_Care_Deduction = True
	QCR_HC_Remedial_Care_Review_Needed = False
QCR_MSA_Shelter_Needy = True
	QCR_MSA_Shelter_Needy_Amount = ""
QCR_MSA_SSI_Ended = True
	QCR_MSA_SSI_Ended_String = ""
' ------------------------------------------------------------------------------

function ensure_variable_is_a_number(variable)
	variable = trim(variable)
	If variable = "" Then variable = 0
	variable = variable * 1
	variable = variable + 0
end function

' - No proof provided for relationship with m04. No verification provided for
'asset (account and car). No proof of applying for UC                        '

function enter_verif_missing_header(verif_header)
	If verif_header = False Then
		Call write_variable_in_CASE_NOTE("=============================================================================")
		Call write_variable_in_CASE_NOTE("Information not verified on this case:")
		verif_header = True
	End If
end function

function detail_action_that_led_to_approval(current_prog, process_completed, changes_string)
	process_completed = ""
	changes_string = ""

	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 351, 235, "What triggered the need for an Approval"
	DropListBox 115, 85, 230, 45, "Select One..."+chr(9)+"Application (new program request)"+chr(9)+"Renewal or Review"+chr(9)+"Monthly Report"+chr(9)+"Change Reported"+chr(9)+"Policy Change"+chr(9)+"Appeal"+chr(9)+"Correction", process_being_completed
	CheckBox 20, 150, 50, 10, "Income", income_change_checkbox
	CheckBox 20, 160, 50, 10, "Assets", assets_change_checkbox
	CheckBox 20, 170, 50, 10, "Expenses", expense_change_checkbox
	CheckBox 20, 180, 50, 10, "Housing", housing_change_checkbox
	CheckBox 95, 150, 50, 10, "Address", address_change_checkbox
	CheckBox 95, 160, 70, 10, "HH Composition", hh_comp_change_checkbox
	CheckBox 95, 170, 50, 10, "Relationship", relationship_change_checkbox
	CheckBox 95, 180, 90, 10, "Required Participation", participation_change_checkbox
	CheckBox 200, 150, 85, 10, "Time Limit Reached", time_limit_change_checkbox
	CheckBox 200, 160, 65, 10, "Policy Change", policy_change_checkbox
	CheckBox 200, 170, 85, 10, "Correction or Review", correction_change_checkbox
	CheckBox 200, 180, 50, 10, "Appeal", appeal_change_checkbox
	ButtonGroup ButtonPressed
		PushButton 230, 215, 115, 15, "Return to Approval Detail", return_btn
	Text 10, 10, 180, 10, "You have completed an approval for " & current_prog & " today."
	Text 10, 25, 335, 30, "Details of the information used to make an eligibility determination should be entered in a separate CASE/NOTE with full detail and explanation. NOTES - Eligibility Summary is only intended to document the details of the approval, not why the approval was necessary."
	Text 10, 60, 210, 20, "To create cohesiveness with previous CASE/NOTEs, you can indicate why you are processing the approval today."
	Text 10, 90, 105, 10, "Reason Approval was needed:"
	GroupBox 10, 110, 335, 85, "Information Changed"
	Text 20, 125, 245, 10, "A previous detailed CASE/NOTE exists explaining the following changes:"
	Text 20, 135, 105, 10, "(Check all changes that apply)"
	Text 15, 200, 320, 10, "REMINDER - The information from these details are insufficient to document changes in a case."
	EndDialog

	dialog Dialog1

	If process_being_completed <> "Select One..." Then process_completed = "Process Completed: " & process_being_completed
	changes_string = "Information updated in processing: "

	If income_change_checkbox = checked Then changes_string = changes_string & "Income, "
	If assets_change_checkbox = checked Then changes_string = changes_string & "Assets, "
	If expense_change_checkbox = checked Then changes_string = changes_string & "Expenses, "
	If housing_change_checkbox = checked Then changes_string = changes_string & "Housing Information, "
	If address_change_checkbox = checked Then changes_string = changes_string & "Address, "
	If hh_comp_change_checkbox = checked Then changes_string = changes_string & "Household Composition, "
	If relationship_change_checkbox = checked Then changes_string = changes_string & "Relationship, "
	If participation_change_checkbox = checked Then changes_string = changes_string & "Participation in a Required Program, "
	If time_limit_change_checkbox = checked Then changes_string = changes_string & "Time Limit Reached, "
	If policy_change_checkbox = checked Then changes_string = changes_string & "Policy has Changed, "
	If correction_change_checkbox = checked Then changes_string = changes_string & "Correcting the Case, "
	If appeal_change_checkbox = checked Then changes_string = changes_string & "Appeal"

	If changes_string = "Information updated in processing: " Then changes_string = ""
	changes_string = trim(changes_string)
	If right(changes_string, 1) = "," Then changes_string = left(changes_string, len(changes_string)-1)
end function

function determine_mfip_counted_amount(gross_amount, counted_amount)
	counted_amount = gross_amount
	If counted_amount = "" Then counted_amount = 0
	If gross_amount = "" Then gross_amount = 0
	counted_amount = counted_amount*1

	counted_amount = counted_amount - 65
	counted_amount = counted_amount/2

	If counted_amount < 0 Then counted_amount = 0
	counted_amount = FormatNumber(counted_amount, 2, -1, 0, -1)
	gross_amount = FormatNumber(gross_amount, 2, -1, 0, -1)
	' MsgBox "gross_amount - " & gross_amount & vbCr & "counted_amount - " & counted_amount
end function

function supportive_housing_disregard_error(supportive_housing_applies)
	Dialog1 = ""
	dlg_len = 160
	If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_vendor_number_one <> "" and GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_vendor_number_two <> "" Then dlg_len = 185
	BeginDialog Dialog1, 0, 0, 276, 200, "GRH/HS Supportive Housing Disregard Appears in Error"

		If supportive_housing_applies = True Then Text 65, 5, 160, 20, "It appears this case should have a supportive housing disregard applied."
		If supportive_housing_applies = False Then Text 65, 5, 160, 20, "This case appears to have the supportive housing disregard applied when it should not.."
		Text 20, 35, 165, 10, "GHR/HS Budget Type: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_memb_elig_type_info
		Text 45, 45, 105, 10, " RSDI Income: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_RSDI_income
		Text 25, 55, 100, 10, "Other UNEA Income: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_other_unearned_income
		Text 20, 65, 165, 10, "Supportive Housing Disregard: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_supp_hsg_disregard
		If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_vendor_number_one <> "" Then
			Text 25, 85, 160, 10, "Vendor: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_name
			Text 35, 95, 130, 10, "Health Dept Licensing: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_1_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_2_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_3_code
			y_pos = 115
		End If
		If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_vendor_number_two <> "" Then
			Text 25, 110, 160, 10, "Vendor: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_name
			Text 35, 120, 130, 10, "Health Dept Licensing: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_1_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_2_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_3_code
			y_pos = 140
		End If
		Text 10, y_pos, 90, 10, "The script will now end."
		Text 10, y_pos+10, 260, 10, "Please resolve the eligibility, then reapprove before running the script again."
		Text 10, y_pos+25, 260, 10, "The script will send a report to the script writers that this error triggered."
		Text 10, y_pos+35, 260, 10, "Enter any details to report to the script writers (not required):"
		EditBox 10, y_pos+45, 260, 15, error_details_from_worker
		ButtonGroup ButtonPressed
			OkButton 220, y_pos+65, 50, 15
	EndDialog

	dialog Dialog1

	error_details_from_worker = trim(error_details_from_worker)
	script_run_lowdown = script_run_lowdown & vbCr & "INFORMATION FROM WORKER: " & error_details_from_worker & vbCr
	script_run_lowdown = script_run_lowdown & vbCr & "supportive_housing_applies - " & supportive_housing_applies
	script_run_lowdown = script_run_lowdown & vbCr & "GHR/HS Budget Type: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_memb_elig_type_info
	script_run_lowdown = script_run_lowdown & vbCr & "RSDI Income: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_RSDI_income
	script_run_lowdown = script_run_lowdown & vbCr & "Other UNEA Income: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_other_unearned_income
	script_run_lowdown = script_run_lowdown & vbCr & "Supportive Housing Disregard: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_supp_hsg_disregard
	If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_vendor_number_one <> "" Then
		script_run_lowdown = script_run_lowdown & vbCr & "Vendor: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_name
		script_run_lowdown = script_run_lowdown & vbCr & "Health Dept Licensing: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_1_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_2_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_3_code
	End If
	If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_budg_vendor_number_two <> "" Then
		script_run_lowdown = script_run_lowdown & vbCr & "Vendor: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_name
		script_run_lowdown = script_run_lowdown & vbCr & "Health Dept Licensing: " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_1_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_2_code & " " & GRH_ELIG_APPROVALS(grh_elig_months_count).grh_vendor_one_health_dept_license_3_code
	End If
	bzt_email = "HSPH.EWS.BlueZoneScripts@hennepin.us"
	subject_of_email = "ELIG SUMM -- Ended for GRH Supportive Housing Error - Case " & MAXIS_case_number & " (Automated Report)"
    full_text = "Script Run occurred on " & date & " at " & time

	full_text = full_text & vbCr & "ACTIVE PROGRAMS: " & list_active_programs
	full_text = full_text & vbCr & "ACTIVE PROGRAMS: " & list_pending_programs & vbCr

	full_text = full_text & vbCr & "numb_DWP_versions - " & numb_DWP_versions
	full_text = full_text & vbCr & "numb_MFIP_versions - " & numb_MFIP_versions
	full_text = full_text & vbCr & "numb_MSA_versions - " & numb_MSA_versions
	full_text = full_text & vbCr & "numb_GA_versions - " & numb_GA_versions
	full_text = full_text & vbCr & "numb_CASH_denial_versions - " & numb_CASH_denial_versions
	full_text = full_text & vbCr & "numb_GRH_versions - " & numb_GRH_versions
	full_text = full_text & vbCr & "numb_SNAP_versions - " & numb_SNAP_versions

	full_text = full_text & vbCr & vbCr & "Sent by: " & worker_signature

	If script_run_lowdown <> "" Then full_text = full_text & vbCr & vbCr & "All Script Run Details:" & vbCr & script_run_lowdown
	attachment_here = ""

	Call create_outlook_email("", bzt_email, "", "", subject_of_email, 1, False, "", "", False, "", full_text, True, attachment_here, True)

	close_msg = "Script run ended due to an apparent error in the GRH approval for supportive housing."
	close_msg = close_msg & vbCr & "Script cannot continue with this error."
	close_msg = close_msg & vbCr & vbCr & "An email has been sent to the script writers at HSPH.EWS.BlueZoneScripts@hennepin.us that this error was hit. If you have additional questions or concerns about this functionality, connect with the script writers at this email."
	call script_end_procedure(close_msg)
end function

function write_long_variable_in_DENY_note(variable)
	spaces_58 = "                                                          "
	spaces_78 = "                                                                              "
	If len(variable) < 59 Then
		Call write_variable_in_CASE_NOTE("    DENY Reason  : " & variable)
	Else
		reason_array = split(variable, " ")
		row_1_reason = ""
		row_2_reason = "                  "
		row_3_reason = "                  "
		row_4_reason = "                  "
		row_5_reason = "                  "

		for each word in reason_array
			If len(row_1_reason) + len(word) + 1 < 59 Then
				row_1_reason = row_1_reason & " " & word
			ElseIf len(row_2_reason) + len(word) + 1 < 78 Then
				row_1_reason = left(row_1_reason & spaces_58, 58)
				row_2_reason = row_2_reason & " " & word
			ElseIf len(row_3_reason) + len(word) + 1 < 78 Then
				row_2_reason = left(row_2_reason & spaces_78, 77)
				row_3_reason = row_3_reason & " " & word
			ElseIf len(row_4_reason) + len(word) + 1 < 78 Then
				row_3_reason = left(row_3_reason & spaces_78, 77)
				row_4_reason = row_4_reason & " " & word
			ElseIf len(row_5_reason) + len(word) + 1 < 78 Then
				row_4_reason = left(row_4_reason & spaces_78, 77)
				row_5_reason = row_5_reason & " " & word
			End If
		next
		Call write_variable_in_CASE_NOTE("    DENY Reason  :" & row_1_reason)
		If row_2_reason <> "                  " Then Call write_variable_in_CASE_NOTE(row_2_reason)
		If row_3_reason <> "                  " Then Call write_variable_in_CASE_NOTE(row_3_reason)
		If row_4_reason <> "                  " Then Call write_variable_in_CASE_NOTE(row_4_reason)
		If row_5_reason <> "                  " Then Call write_variable_in_CASE_NOTE(row_5_reason)
	End If
end function

function write_long_variable_with_indent(header, variable)
	If trim(variable) <> "" Then
		length_of_header = len(header)
		length_for_writing = 78 - length_of_header-1
		short_spaces = ""
		For i=1 to length_for_writing
			short_spaces = short_spaces & " "
		Next
		indent = ""
		For i=1 to length_of_header
			indent = indent & " "
		Next
		If len(variable) <= length_for_writing Then
			Call write_variable_in_CASE_NOTE(header & variable)
		Else
			reason_array = split(variable, " ")
			row_1_reason = ""
			row_2_reason = ""
			row_3_reason = ""
			row_4_reason = ""
			row_5_reason = ""
			row_6_reason = ""
			row_7_reason = ""
			row_8_reason = ""
			row_9_reason = ""
			row_10_reason = ""
			row_11_reason = ""

			for each word in reason_array
				If len(row_1_reason) + len(word) + 1 <= length_for_writing Then
					row_1_reason = row_1_reason & " " & word
				ElseIf len(row_2_reason) + len(word) + 1 <= length_for_writing Then
					row_1_reason = left(row_1_reason & short_spaces, length_for_writing)
					row_2_reason = row_2_reason & " " & word
				ElseIf len(row_3_reason) + len(word) + 1 <= length_for_writing Then
					row_2_reason = left(row_2_reason & short_spaces, length_for_writing)
					row_3_reason = row_3_reason & " " & word
				ElseIf len(row_4_reason) + len(word) + 1 <= length_for_writing Then
					row_3_reason = left(row_3_reason & short_spaces, length_for_writing)
					row_4_reason = row_4_reason & " " & word
				ElseIf len(row_5_reason) + len(word) + 1 <= length_for_writing Then
					row_4_reason = left(row_4_reason & short_spaces, length_for_writing)
					row_5_reason = row_5_reason & " " & word
				ElseIf len(row_6_reason) + len(word) + 1 <= length_for_writing Then
					row_5_reason = left(row_5_reason & short_spaces, length_for_writing)
					row_6_reason = row_6_reason & " " & word
				ElseIf len(row_7_reason) + len(word) + 1 <= length_for_writing Then
					row_6_reason = left(row_6_reason & short_spaces, length_for_writing)
					row_7_reason = row_7_reason & " " & word
				ElseIf len(row_8_reason) + len(word) + 1 <= length_for_writing Then
					row_7_reason = left(row_7_reason & short_spaces, length_for_writing)
					row_8_reason = row_8_reason & " " & word
				ElseIf len(row_9_reason) + len(word) + 1 <= length_for_writing Then
					row_8_reason = left(row_8_reason & short_spaces, length_for_writing)
					row_9_reason = row_9_reason & " " & word
				ElseIf len(row_10_reason) + len(word) + 1 <= length_for_writing Then
					row_9_reason = left(row_9_reason & short_spaces, length_for_writing)
					row_10_reason = row_10_reason & " " & word
				ElseIf len(row_11_reason) + len(word) + 1 <= length_for_writing Then
					row_10_reason = left(row_10_reason & short_spaces, length_for_writing)
					row_11_reason = row_11_reason & " " & word
				End If
			next
			Call write_variable_in_CASE_NOTE(header & row_1_reason)
			If row_2_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_2_reason)
			If row_3_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_3_reason)
			If row_4_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_4_reason)
			If row_5_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_5_reason)
			If row_6_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_6_reason)
			If row_7_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_7_reason)
			If row_8_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_8_reason)
			If row_9_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_9_reason)
			If row_10_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_10_reason)
			If row_11_reason <> "" Then Call write_variable_in_CASE_NOTE(indent & row_11_reason)
		End If
	End If
end function

function display_approval_packages_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 401, 320, "Approval Packages"
	  Text 150, 10, 125, 10, "What are Approval Packages?"
	  GroupBox 10, 25, 370, 10, ""
	  Text 10, 45, 225, 10, "They are groups of months for a program that share budget details."
	  Text 25, 60, 315, 10, "The script reviews the APPROVED versions of the program and assesses if there are changes."
	  Text 25, 70, 50, 10, "It will look at:"
	  Text 35, 85, 70, 10, "Eligibility Result"
	  Text 35, 95, 70, 10, "Budget Cycle"
	  Text 35, 105, 70, 10, "Income"
	  Text 35, 115, 95, 10, "Household Composition"
	  Text 35, 125, 95, 10, "Entitlement "
	  Text 25, 140, 205, 20, "If these are the same from month to month, the script groups these approval months together as an 'Approval Package'."
	  GroupBox 10, 165, 370, 10, ""
	  Text 20, 185, 175, 10, "There may only be one 'Approval Package' listed. "
	  Text 30, 200, 295, 10, "If there is only one month in the approval, there will only be one 'Approval Package'."
	  Text 30, 215, 295, 10, "If the budget for all months match, there will only be one 'Approval Package'."
	  GroupBox 10, 230, 370, 10, ""
	  Text 20, 250, 285, 20, "If there are multiple 'Approval Packages', you can navigate between them using the buttons in the top right corner of the Approval Dialog."
	  Text 30, 270, 270, 10, "The package currently displayed will be listed in 'Text' and cannot be pressed."
	  Text 30, 285, 340, 10, "Other packages will be a button and pressing them will display the detail of that 'Approval Package'."
	  ButtonGroup ButtonPressed
		OkButton 345, 300, 50, 15
	EndDialog

	dialog Dialog1

	ButtonPressed = unique_approval_explain_btn

end function

function display_snap_deductions_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 386, 285, "SNAP Deductions"
	  Text 155, 10, 100, 10, "SNAP Deductions Detail"
	  GroupBox 10, 20, 370, 10, ""
	  GroupBox 10, 40, 370, 30, " Standard . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard
	  Text 25, 55, 180, 10, "A standard deduction is applied to all SNAP Budgets."
	  GroupBox 10, 80, 370, 35, " Earned Inc . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned
	  Text 25, 95, 215, 20, "A deduction of 20% of the Budgeted Earned Income on the case is applied for SNAP."
	  GroupBox 10, 125, 370, 40, "Medical . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical
	  Text 25, 140, 245, 10, "Certain SNAP cases can have a Medical Deduction of verified Expenses."
	  Text 25, 150, 245, 10, "All details of FMED should be reviewed in the CM."
	  GroupBox 10, 175, 370, 40, "Dependent Care . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care
	  Text 25, 190, 180, 10, "Care of a dependent can be used a SNAP deduction."
	  Text 25, 200, 180, 10, "Dependent Care Expenses are declaratory."
	  GroupBox 10, 225, 370, 30, " Child Support . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses
	  Text 25, 240, 245, 10, "Court Ordered Child Support Expense can be allowed as a deduction."
	  ButtonGroup ButtonPressed
	    OkButton 330, 260, 50, 15
	    PushButton 290, 50, 85, 15, "CM 0018.21", cm_18_21_btn
	    PushButton 290, 95, 85, 15, "CM 0018.18", cm_18_18_btn
	    PushButton 290, 140, 85, 15, "CM 0018.12", cm_18_12_btn
	    PushButton 290, 190, 85, 15, "CM 0018.09", cm_18_09_btn
	    PushButton 290, 235, 85, 15, "CM 0018.33", cm_18_33_btn
	EndDialog

	Do

		dialog Dialog1

		If ButtonPressed = cm_18_21_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_001821"
		If ButtonPressed = cm_18_18_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_001818"
		If ButtonPressed = cm_18_12_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_001812"
		If ButtonPressed = cm_18_09_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_001809"
		If ButtonPressed = cm_18_33_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_001833"
	Loop until ButtonPressed = -1
	ButtonPressed = deductions_detail_btn
end function

function display_snap_shelter_expenses()

	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 386, 165, "SNAP Deductions"
	  Text 145, 10, 100, 10, "SNAP Shelter Expense Detail"
	  GroupBox 10, 20, 370, 10, ""
	  Text 10, 40, 315, 10, "The amounts listed on the Approval Package Dialog is only the amount budgeted in ELIG/FS."
	  Text 10, 55, 340, 10, "If this is not the amount reported by the resident, review STAT coding and complete a new approval."
	  GroupBox 10, 75, 175, 75, "Housing Expense . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_housing_exp_total
	  Text 20, 90, 150, 10, "Rent/Mortgage . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_rent_mort
	  Text 20, 100, 150, 10, "Property Tax . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_prop_tax
	  Text 20, 110, 150, 10, "House Insurance $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_home_ins
	  Text 20, 120, 150, 10, "Other . . . . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_other
	  GroupBox 190, 75, 190, 65, "Utility Expense . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_utilities_exp_total
	  Text 200, 90, 150, 10, "Electricity . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_electricity
	  Text 200, 100, 135, 10, "Heat/Air . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_heat_ac
	  Text 200, 110, 150, 10, "Phone . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_phone
	  ButtonGroup ButtonPressed
	    OkButton 330, 145, 50, 15
	    PushButton 95, 130, 85, 15, "CM 0018.15", cm_18_15_btn
	    PushButton 290, 120, 85, 15, "CM 0018.15.09", cm_18_15_09_btn
	EndDialog

	Do
		dialog Dialog1

		If ButtonPressed = cm_18_15_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_001815"
		If ButtonPressed = cm_18_15_09_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=CM_00181509"
	Loop until ButtonPressed = -1
	ButtonPressed = shel_exp_detail_btn
end function

function define_dwp_elig_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "DWP Approval Packages"
	  ButtonGroup ButtonPressed
		GroupBox 460, 10, 85, 140, "DWP Approvals"
		If DWP_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or DWP_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
			Text 10, 350, 550, 10, "NOTES: " & DWP_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & DWP_UNIQUE_APPROVALS(changes_for_note, approval_selected)
		End If

		detail_grp_len = 10
		grp_y_pos = 350
		y_pos = 360
		dwp_prorate_date = ""
		For approval = 0 to UBound(DWP_ELIG_APPROVALS)
			If InStr(DWP_UNIQUE_APPROVALS(months_in_approval, approval_selected), DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				display_benefit = False
				If DWP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = "" Then
					display_benefit = True
				ElseIf InStr(DWP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected), DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					display_benefit = True
				End If
				If display_benefit = True Then
					'PRORATED REASON FUNCTIONALITY
					If DWP_ELIG_APPROVALS(approval).dwp_elig_prorated_date <> "" Then
						dwp_prorate_date = DWP_ELIG_APPROVALS(approval).dwp_elig_prorated_date
						y_pos = y_pos-20
						grp_y_pos = grp_y_pos-20
					End If
				End If
			End If
		Next
		If DWP_ELIG_APPROVALS(elig_ind).dwp_case_source_of_info = "FIAT" Then
			y_pos = y_pos-20
			grp_y_pos = grp_y_pos-20

			Text 15, y_pos+5, 85, 10, "DWP FIATed - Reason:"
			EditBox 100, y_pos, 440, 15, DWP_UNIQUE_APPROVALS(fiat_reason, approval_selected)
			y_pos = y_pos + 20
			detail_grp_len = detail_grp_len + 20
		End If
		If dwp_prorate_date <> "" Then
			Text 15, y_pos+5, 115, 10, "DWP Prorated (" & dwp_prorate_date & "). Reason:"
			EditBox 130, y_pos, 410, 15, DWP_UNIQUE_APPROVALS(proration_reason, approval_selected)
			y_pos = y_pos + 20
			detail_grp_len = detail_grp_len + 20
		End If

		If detail_grp_len <> 10 Then
			GroupBox 10, grp_y_pos, 540, detail_grp_len, "Approval Explanations"
		End If

		Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
		DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - budget is Accurate"+chr(9)+"No - do not CASE/NOTE this information", DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

		If DWP_ELIG_APPROVALS(elig_ind).dwp_autoclosed_for_time_limit = True or DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit = "FAILED" Then
			GroupBox 5, 10, 450, 45, "DWP Closed "
			Text 15, 25, 150, 10, "DWP has reached the 4 Month Time Limit."
			Text 15, 35, 200, 10, "As of " & DWP_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " there are no more months of DWP available."
		Else
			If DWP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then

				GroupBox 5, 10, 425, 140, "Budget Detail"
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income = "FAILED" Then
					Text 250, 10, 200, 10, "Income Exceeds the Income Limit of $ " &  DWP_ELIG_APPROVALS(elig_ind).dwp_elig_initial_family_wage_level
				End If
				Text 20, 35, 120, 10, "Rent/Mortgage .  .  .  .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_rent_mortgage
				Text 20, 45, 120, 10, "Property Tax .  .  .  .  .  .   $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_property_tax
				Text 20, 55, 120, 10, "House Insurance .  .  .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_house_insurance
				Text 20, 65, 120, 10, "Electricity .  .  .  .  .  .  .  . $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_electricity
				Text 20, 75, 120, 10, "Heating/Air .  .  .  .  .  .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_heat_air
				Text 20, 85, 120, 10, "Water/Sewer/Grbg .  .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_water_sewer_garbage
				Text 20, 95, 120, 10, "Telephone .  .  .  .  .  .  .   $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_phone
				Text 20, 105, 120, 10, "Other .  .  .  .  .  .  .  .  .  .   $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_other
				GroupBox 10, 20, 135, 115, "Housing and Utility Expense"
				Text 35, 120, 100, 10, "Total Shelter Costs: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_total_shelter_costs
				GroupBox 150, 20, 135, 100, "DWP Countable Income"
				Text 160, 35, 120, 10, "Earned Income  .   .   .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income
				Text 160, 45, 120, 10, "Unearned Income .   .   .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income
				Text 160, 55, 120, 10, "Deemed Income .   .   .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_deemed_income
				Text 160, 65, 120, 10, "CSES Exclusion .   .   .  .  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_child_support_exclusion
				Text 175, 80, 105, 10, "Budget Month Total: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_budget_month_total
				Text 205, 95, 75, 10, " Prior Low: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_prior_low
				Text 160, 105, 120, 10, " DWP Countable Income: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_countable_income
				GroupBox 290, 20, 135, 125, "DWP Grant Calculation"
				Text 305, 35, 100, 10, "Total Shelter Costs: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_total_shelter_costs
				Text 300, 45, 110, 10, "+     Personal Needs: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_personal_needs
				Text 300, 60, 110, 10, "=    Total DWP Need: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_total_DWP_need
				Text 300, 70, 110, 10, "-   Countable Income: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_countable_income
				Text 305, 85, 105, 10, "=         Unmet Need: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unmet_need
				Text 315, 95, 95, 10, "DWP Max Grant: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_max_grant
				Text 330, 110, 80, 10, "DWP Grant: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_grant
				Text 330, 120, 85, 10, "  Shelter Benefit: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_summary_shelter_benefit_portion
				Text 330, 130, 85, 10, "Personal Needs: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_summary_personal_needs_portion
			End If

			If DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "INELIGIBLE" Then
				y_pos = 10
				If DWP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then y_pos = 150
				GroupBox 5, y_pos, 450, 80, "Approval Detail"
				y_pos = y_pos + 10
				Text 15, y_pos, 80, 10, " Result:   " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result
				' y_pos = y_pos + 10
				Text 100, y_pos, 300, 10, "Months in Approval: " & replace(DWP_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")
				y_pos = y_pos + 15

				Text 15, y_pos, 110, 10, "APPL Withdrawn:    " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_application_withdrawn
				Text 125, y_pos, 110, 10, "Eligible Child:          " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_eligible_child
				Text 235, y_pos, 110, 10, "MFIP Conversion:  " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_MFIP_conversion
				Text 345, y_pos, 100, 10, "Asset Transfer:     " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_transfer_of_assets
				y_pos = y_pos + 10
				Text 15, y_pos, 110, 10, "Asset:                      " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_assets
				Text 125, y_pos, 110, 10, "ES Disqual:            " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_ES_disqualification
				Text 235, y_pos, 110, 10, "Residence:            " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_residence
				Text 345, y_pos, 100, 10, "Verification:          " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_verif
				y_pos = y_pos + 10
				Text 15, y_pos, 110, 10, "CS Disqual:              " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_CS_disqualification
				Text 125, y_pos, 110, 10, "Fail Cooperation:    " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_fail_coop
				Text 235, y_pos, 110, 10, "Strike:                    " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_strike
				Text 345, y_pos, 100, 10, "New Spouse Income: " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_new_spouse_income
				y_pos = y_pos + 10
				Text 15, y_pos, 110, 10, "Death of Applicant:  " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_death_of_applicant
				Text 125, y_pos, 110, 10, "Four Month Limit:    " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit
				Text 235, y_pos, 110, 10, "TANF Time Limit:   " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_TANF_time_limit
				y_pos = y_pos + 10
				Text 15, y_pos, 110, 10, "Duplicate Assist:       " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_dupl_assistance
				Text 125, y_pos, 110, 10, "Initial Income:         " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income
				y_pos = y_pos + 15

				GroupBox 5, y_pos, 450, 40, "Ineligible Details"
				y_pos = y_pos + 15
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_verif = "FAILED" or DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_fail_coop = "FAILED" Then
					Text 15, y_pos, 165, 10, "What is the date the verification request was sent? "
					Editbox 180, y_pos-5, 50, 15, DWP_UNIQUE_APPROVALS(verif_request_date, approval_selected)
					Text 235, y_pos, 150, 10, "(due date is 10 days from this request date)"
					PushButton 370, y_pos-5, 15, 15, "!", verif_tips_and_tricks_btn
					y_pos = y_pos + 20

					If show_pact = True Then
						Text 15, y_pos, 120, 10, "List PACT reason(s) for ineligibility: "
						Editbox 130, y_pos-5, 310, 15, DWP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)
						y_pos = y_pos + 10
						Text 130, y_pos, 300, 10, "Phrase this for residents as this detail will be added to the WCOM."
					End If
				ElseIf  DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_death_of_applicant = "FAILED" Then
					Text 15, y_pos, 300, 20, "This case is ineligible because the applicant died on " & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & "."
				Else
					Text 15, y_pos, 300, 20, "This case is ineligible because it hasn't met the requirements for DWP Eligibility. The case tests above show what requirements have not been met."
				End if
				end_of_y_pos = y_pos + 5
			End If
		End If

		If DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "ELIGIBLE" Then
			GroupBox 5, 155, 540, 65, "DWP Benefits Issued for the Approval Package"
			app_y_pos = 170
			' app_y_pos = 150
			app_x_pos = 10
			For approval = 0 to UBound(DWP_ELIG_APPROVALS)
				If InStr(DWP_UNIQUE_APPROVALS(months_in_approval, approval_selected), DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					Text app_x_pos, app_y_pos, 250, 10, DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year & " - $ " & DWP_ELIG_APPROVALS(approval).dwp_case_summary_net_grant_amount & " (Shelter: $ " & DWP_ELIG_APPROVALS(approval).dwp_case_summary_shelter_benefit_portion & " - Personal Needs: $ " & DWP_ELIG_APPROVALS(approval).dwp_case_summary_personal_needs_portion & ")"
					app_y_pos = app_y_pos + 10
					If DWP_ELIG_APPROVALS(approval).dwp_mony_check_found = True Then
						for each_trans = 0 to UBound(DWP_ELIG_APPROVALS(approval).dwp_check_program)
							Text app_x_pos+5, app_y_pos, 275, 10, DWP_ELIG_APPROVALS(approval).dwp_check_issue_date(each_trans) & " CHCK - $ " & DWP_ELIG_APPROVALS(approval).dwp_check_transaction_amount(each_trans) & " paid to " & DWP_ELIG_APPROVALS(approval).dwp_check_vendor_name(each_trans) & " for " & DWP_ELIG_APPROVALS(approval).dwp_check_payment_reason(each_trans)
							app_y_pos = app_y_pos + 10
						next
					End If
					If DWP_ELIG_APPROVALS(approval).dwp_vnda_found = True Then
						for each_auth = 0 To UBound(DWP_ELIG_APPROVALS(approval).dwp_vnda_vendor_number)
							Text app_x_pos+5, app_y_pos, 275, 10, "Vendor Auth - $ " & DWP_ELIG_APPROVALS(approval).dwp_vnda_payment_amount(each_auth) & " to be paid to " & DWP_ELIG_APPROVALS(approval).dwp_vnda_vendor_name(each_auth) & " for " & DWP_ELIG_APPROVALS(approval).dwp_vnda_expense_type_info(each_auth)
							app_y_pos = app_y_pos + 10
						next
					End If
					' Text app_x_pos, app_y_pos, 200, 10,
					' Text app_x_pos, app_y_pos+10, 200, 10,
					' app_y_pos = app_y_pos + 10
					If app_y_pos >= 210 Then
						app_y_pos = 170
						app_x_pos = app_x_pos + 275
					End If
				End If
			Next
		End If

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn
		PushButton 490, 155, 50, 10, "View ELIG", nav_stat_elig_btn

		y_pos = 25
		for each_app = 0 to UBound(DWP_UNIQUE_APPROVALS, 2)
			If DWP_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = DWP_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF DWP_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = DWP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
			Else
				month_display = DWP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & DWP_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			' If each_app = approval_selected Then display_detail = month_display
			If each_app = approval_selected Then
				Text 470, y_pos+2, 75, 13, month_display
			Else
				PushButton 465, y_pos, 75, 13, month_display, DWP_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			y_pos = y_pos + 15
		next
		PushButton 465, 110, 75, 20, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 130, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

		If DWP_ELIG_APPROVALS(elig_ind).dwp_autoclosed_for_time_limit = False and DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit <> "FAILED" Then
			y_pos = 220
			If end_of_y_pos <> "" Then y_pos = end_of_y_pos
			GroupBox 5, y_pos, 540, income_box_len, "Income"	'205'
			y_pos = y_pos + 10

			Text 10, y_pos, 155, 10, "Total GROSS EARNED Income:   $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income	'215'
			Text 300, y_pos, 155, 10, "Total GROSS UNEARNED Income:   $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income
			y_pos = y_pos + 15
			y_pos_2 = y_pos
			' y_pos = 230
			' y_pos_2 = 230
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
					If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_one_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_counted_amt(each_memb) & " Counted Income"
					End If
					y_pos = y_pos + 20
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
					If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_two_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_counted_amt(each_memb) & " Counted Income"
					End If
					y_pos = y_pos + 20
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
					If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_three_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_counted_amt(each_memb) & " Counted Income"
					End If
					y_pos = y_pos + 20
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
					If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_four_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_counted_amt(each_memb) & " Counted Income"
					End If
					y_pos = y_pos + 20
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
					If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_five_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_counted_amt(each_memb) & " Counted Income"
					End If
					y_pos = y_pos + 20
				End If

				If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_mfip_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
					If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
					End If
					y_pos = y_pos + 20
				End If
				If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_mfip_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
					If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
					End If
					y_pos = y_pos + 20
				End If
				If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_mfip(each_memb) = True Then
					Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_mfip_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
					If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
						Text 40, y_pos+10, 200, 10, "Verification NOT Received."
					Else
						Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
					End If
					y_pos = y_pos + 20
				End If

				If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_mfip(each_memb) = True Then
					Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_mfip_gross_amt(each_memb)
					y_pos_2 = y_pos_2 + 10
					If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
						Text 330, y_pos_2, 200, 10, "Verification NOT Received."
						y_pos_2 = y_pos_2 + 10
					End If
				End If
				If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_mfip(each_memb) = True Then
					Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_mfip_gross_amt(each_memb)
					y_pos_2 = y_pos_2 + 10
					If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
						Text 330, y_pos_2, 200, 10, "Verification NOT Received."
						y_pos_2 = y_pos_2 + 10
					End If
				End If
				If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_mfip(each_memb) = True Then
					Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_mfip_gross_amt(each_memb)
					y_pos_2 = y_pos_2 + 10
					If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
						Text 330, y_pos_2, 200, 10, "Verification NOT Received."
						y_pos_2 = y_pos_2 + 10
					End If
				End If
				If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_mfip(each_memb) = True Then
					Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_mfip_gross_amt(each_memb)
					y_pos_2 = y_pos_2 + 10
					If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
						Text 330, y_pos_2, 200, 10, "Verification NOT Received."
						y_pos_2 = y_pos_2 + 10
					End If
				End If
				If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_mfip(each_memb) = True Then
					Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_mfip_gross_amt(each_memb)
					y_pos_2 = y_pos_2 + 10
					If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
						Text 330, y_pos_2, 200, 10, "Verification NOT Received."
						y_pos_2 = y_pos_2 + 10
					End If
				End If
			Next
		End If
	EndDialog
end function

function define_mf_special_diet_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "MFIP Special DIET"
		ButtonGroup ButtonPressed
			Text 10, 370, 165, 10, "Confirm you have reviewed the check approval:"
			DropListBox 175, 365, 155, 45, "Indicate if the Check is Accurate"+chr(9)+"Yes - check is Accurate"+chr(9)+"No - do not CASE/NOTE this information", SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month)

			GroupBox 5, 10, 285, 85, "MONY/CHCK Issued for MFIP Special Diets"
			Text 15, 30, 75, 10, "Issue Date: " & MFIP_ELIG_APPROVALS(elig_select).MFSD_check_issue_date
			Text 95, 30, 100, 10, "Number of Checks: " & MFIP_ELIG_APPROVALS(elig_select).MFSD_check_count
			Text 15, 45, 240, 10, "Check Amount: $ " & FormatNumber(MFIP_ELIG_APPROVALS(elig_select).MFSD_check_transaction_amount, 2, -1, 0, -1)
			Text 15, 60, 240, 10, "Benefit Period: " & MFIP_ELIG_APPROVALS(elig_select).MFSD_check_from_date & " - " & MFIP_ELIG_APPROVALS(elig_select).MFSD_check_to_date
			Text 15, 75, 240, 10, "Payment Reason: " & MFIP_ELIG_APPROVALS(elig_select).MFSD_check_payment_reason

			y_pos = 115
			grp_len = 40
			for each_memb = 0 to UBound(STAT_INFORMATION(month_select).stat_memb_ref_numb)
				If STAT_INFORMATION(month_select).stat_diet_exists(each_memb) = True Then
					If STAT_INFORMATION(month_select).stat_diet_mf_type_code_one(each_memb) <> "" Then
						Text 15, y_pos, 240, 10, "MEMB " & STAT_INFORMATION(month_select).stat_memb_ref_numb(each_memb) & " - " & "DIET Type: " & STAT_INFORMATION(month_select).stat_diet_mf_type_info_one(each_memb)
						Text 25, y_pos + 15, 100, 10, "Amount: $ " & FormatNumber(STAT_INFORMATION(month_select).stat_diet_mf_amount_one(each_memb), 2, -1, 0, -1)
						Text 125, y_pos + 15, 100, 10, "Verif: " & STAT_INFORMATION(month_select).stat_diet_mf_verif_one(each_memb)
						grp_len = grp_len + 25
						y_pos = y_pos + 30
					End If
					If STAT_INFORMATION(month_select).stat_diet_mf_type_code_two(each_memb) <> "" Then
						Text 15, y_pos, 240, 10, "MEMB " & STAT_INFORMATION(month_select).stat_memb_ref_numb(each_memb) & " - " & "DIET Type: " & STAT_INFORMATION(month_select).stat_diet_mf_type_info_one(each_memb)
						Text 25, y_pos + 15, 100, 10, "Amount: $ " & FormatNumber(STAT_INFORMATION(month_select).stat_diet_mf_amount_two(each_memb), 2, -1, 0, -1)
						Text 125, y_pos + 15, 100, 10, "Verif: " & STAT_INFORMATION(month_select).stat_diet_mf_verif_two(each_memb)
						grp_len = grp_len + 25
						y_pos = y_pos + 30
					End If
				End If
			next
			GroupBox 5, 100, 285, grp_len, "MFIP Special Diet for this Case"

			If MFIP_ELIG_APPROVALS(elig_select).MFSD_overlap_exists = True Then Text 10, y_pos, 400, 10, "DIETS OVERLAP - The check issued is for the diet that gives the largest benefit. These amounts are not combined."

			If MFIP_ELIG_APPROVALS(elig_select).MFSD_diet_info_missing = True Then
				Text 10, 120+grp_len, 300, 10, "It appears there are additional diets that are not listed on STAT/DIET "
				Text 10, 130+grp_len, 300, 10, "but are inclueded in the check."
				Text 10, 145+grp_len, 125, 10, "Detail the information about the DIETs:"
				EditBox 10, 155+grp_len, 280, 15, hold_missing_diet_note
			End If
			PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn
	EndDialog
end function

function define_mfip_elig_dialog()
	snap_notes_showed = False
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "MFIP Approval Packages"
	  ButtonGroup ButtonPressed
		GroupBox 460, 10, 85, 165, "MFIP Approvals"
		If MFIP_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or MFIP_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
			Text 10, 350, 550, 10, "NOTES: " & MFIP_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & MFIP_UNIQUE_APPROVALS(changes_for_note, approval_selected)
		End If

		detail_grp_len = 10
		grp_y_pos = 350
		y_pos = 360
		mfip_prorate_date = ""
		For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
			If InStr(MFIP_UNIQUE_APPROVALS(months_in_approval, approval_selected), MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				display_benefit = False
				If MFIP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = "" Then
					display_benefit = True
				ElseIf InStr(MFIP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected), MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					display_benefit = True
				End If
				If display_benefit = True Then
					'PRORATED REASON FUNCTIONALITY
					If MFIP_ELIG_APPROVALS(approval).mfip_case_budg_prorate_date <> "" Then
						mfip_prorate_date = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_prorate_date
						y_pos = y_pos-20
						grp_y_pos = grp_y_pos-20
					End If
				End If
			End If
		Next

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_source_of_info = "FIAT" Then
			y_pos = y_pos-20
			grp_y_pos = grp_y_pos-20

			Text 15, y_pos+5, 85, 10, "MFIP FIATed - Reason:"
			EditBox 100, y_pos, 440, 15, MFIP_UNIQUE_APPROVALS(fiat_reason, approval_selected)
			y_pos = y_pos + 20
			detail_grp_len = detail_grp_len + 20
		End If
		If mfip_prorate_date <> "" Then
			Text 15, y_pos+5, 115, 10, "MFIP Prorated (" & mfip_prorate_date & "). Reason:"
			EditBox 130, y_pos, 410, 15, MFIP_UNIQUE_APPROVALS(proration_reason, approval_selected)
			y_pos = y_pos + 20
			detail_grp_len = detail_grp_len + 20
		End If

		If detail_grp_len <> 10 Then
			GroupBox 10, grp_y_pos, 540, detail_grp_len, "Approval Explanations"
		End If
		Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
		DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - budget is Accurate"+chr(9)+"No - do not CASE/NOTE this information", MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

		If MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then

			GroupBox 5, 10, 285, 65, "Approval Detail"
			Text 15, 20, 150, 10, "Monthly Need . . . . . . . . . .  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_need
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_unearned_income_exists = False Then Text 15, 30, 150, 10, "Unearned Income . . . . . . . . .  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unearned_income & "  ( - )"
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_unearned_income_exists = True Then PushButton 10, 28, 150, 12, "Unearned Income . . . . . . .  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unearned_income & "  ( - )", MFIP_UNIQUE_APPROVALS(btn_uei, approval_selected)

			If MFIP_ELIG_APPROVALS(elig_ind).mfip_deemed_income_exists = False Then Text 15, 40, 150, 10, "Deemed Income . . . . . . . . . .  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deemed_income & "  ( - )"
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_deemed_income_exists = True Then PushButton 10, 38, 150, 12, "Deemed Income . . . . . . . . . .  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deemed_income & "  ( - )", MFIP_UNIQUE_APPROVALS(btn_deem, approval_selected)

			Text 15, 50, 150, 10, "Child Support Exclusion . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_cses_exclusion & "  ( + )"
			Text 15, 60, 150, 10, "Unmet Need . . . . . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need

			Text 205, 20, 80, 10, " Result:   " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result
			Text 165, 30, 120, 40, "Months in Approval: " & replace(MFIP_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")

			GroupBox 5, 75, 140,  55, "Cash Amount Calculation"
			Text 15, 85, 125, 10, "Cash Portion . . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need_cash_portion
			Text 15, 95, 125, 10, "Subsidy Reduction . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deduction_subsidy_tribal_cses & "  ( - )"
			Text 15, 105, 125, 10, "Sanction . . . . . . . . . . . . $ " ''& MFIP_ELIG_APPROVALS(elig_ind).snap_benefit_monthly_fs_allot & "  ( - )"
			Text 15, 115, 125, 10, "Cash Issuance . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_cash_after_sanc_portion

			GroupBox 150, 75, 140,  55, "Food Amount Calculation"
			Text 160, 85, 125, 10, "Food Portion . . . . . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_food_portion
			Text 160, 95, 125, 10, "Food Portion Deduction . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_food_portion_deduction & "  ( - )"
			Text 160, 105, 125, 10, "Food Issuance . . . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_fed_food_benefit

			GroupBox 300, 10, 150, 85, "Determining Monthly Need"
			Text 305, 20, 130, 10, "Family Wage Level . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_family_wage_level
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_earned_income_exists = False Then Text 305, 30, 130, 10, "Earned Income . . . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_earned_income & "  ( - )"
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_earned_income_exists = True Then PushButton 300, 28, 135, 12, "Earned Income . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_earned_income & "  ( - )", MFIP_UNIQUE_APPROVALS(btn_ei, approval_selected)
			Text 305, 40, 130, 10, "Difference . . . . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_wage_level_earned_inc_difference
			Text 305, 50, 130, 10, "Transitional Standard . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_transitional_standard
			Text 305, 62, 140, 15, "Montly Need is the smaller of the Transitional standard and the Difference."
			Text 305, 80, 130, 10, "Monthly Need . . . . . . . . $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_need

			GroupBox 300, 95, 150, 35,	"Household Composition"
			Text 310, 105, 100, 10, "Caregivers: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_asst_unit_caregivers
			Text 310, 115, 100, 10, "Children: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_asst_unit_children

		Else
			GroupBox 5, 10, 450, 90, "Approval Detail"
			Text 15, 20, 80, 10, " Result:   " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result
			Text 15, 30, 120, 40, "Months in Approval: " & replace(MFIP_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")

			Text 15, 45, 110, 10, "APPL Withdrawn:    " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_appl_withdraw
			Text 15, 55, 110, 10, "Asset:                      " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_asset
			Text 15, 65, 110, 10, "Death of Applicant: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_death_applicant
			Text 15, 75, 110, 10, "Duplicate Assist:     " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_dupl_assist
			Text 15, 85, 110, 10, "Eligible Child:          " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_elig_child

			Text 125, 45, 110, 10, "Fail Cooperation:      " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_coop
			Text 125, 55, 110, 10, "Fail to File:               " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_file
			Text 125, 65, 110, 10, "Initial Income:          " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_initial_income
			Text 125, 75, 110, 10, "Minor Lvg Arrang.:   " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_minor_liv_arrange
			Text 125, 85, 110, 10, "Monthly Income:      " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_monthly_income

			Text 235, 45, 110, 10, "Post 60 DISQ:     " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_post_60_disq
			Text 235, 55, 110, 10, "Residence:          " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_residence
			Text 235, 65, 110, 10, "Sanction Limit:     " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_sanction_limit
			Text 235, 75, 110, 10, "Strike:                  " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_strike
			Text 235, 85, 110, 10, "TANF Time Limit: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_TANF_time_limit

			Text 345, 45, 100, 10, "Asset Transfer:     " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_transfer_asset
			Text 345, 55, 100, 10, "Verification:          " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_verif
			Text 345, 65, 100, 10, "New Spouse Income: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_275_new_spouse_income
			Text 345, 75, 100, 10, "Fail QC Coop:       " & MFIP_ELIG_APPROVALS(elig_ind).mfip_fs_case_test_fail_coop_snap_qc

			GroupBox 5, 105, 450, 70, "Ineligible Details"
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_verif = "FAILED" or (MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_coop = "FAILED" and STAT_INFORMATION(month_ind).stat_pact_exists = True) Then
				Text 15, 120, 165, 10, "What is the date the verification request was sent? "
				Editbox 180, 115, 50, 15, MFIP_UNIQUE_APPROVALS(verif_request_date, approval_selected)
				Text 235, 120, 150, 10, "(due date is 10 days from this request date)"
				PushButton 370, 115, 15, 15, "!", verif_tips_and_tricks_btn

				If show_pact = True Then
					Text 15, 140, 120, 10, "List PACT reason(s) for ineligibility: "
					Editbox 130, 135, 310, 15, MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)
					Text 130, 150, 300, 10, "Phrase this for residents as this detail will be added to the WCOM."
				End If
			ElseIf MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_death_applicant = "FAILED" Then
				Text 15, 125, 300, 20, "This case is ineligible because the applicant died on " & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & "."
			Else
				Text 15, 125, 300, 20, "This case is ineligible because it hasn't met the requirements for MFIP Eligibility. The case tests above show what requirements have not been met."
			End if
			If MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = True Then
				Text 15, 150, 50, 10, "SNAP Notes:"
				EditBox 65, 145, 385, 15, MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected)
				Text 65, 160, 385, 10, "When MFIP is Ineligible, we should assess SNAP. Explain your SNAP review/assessment here."
				snap_notes_showed = True
			End If

		End if

		If MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then PushButton 390, 115, 50, 10, "View ELIG", nav_stat_elig_btn
		If MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then PushButton 235, 60, 50, 10, "View ELIG", nav_stat_elig_btn

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn

		y_pos = 25
		for each_app = 0 to UBound(MFIP_UNIQUE_APPROVALS, 2)
			If MFIP_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = MFIP_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF MFIP_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = MFIP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
			Else
				month_display = MFIP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & MFIP_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			' If each_app = approval_selected Then display_detail = month_display
			If each_app = approval_selected Then
				Text 470, y_pos+2, 75, 13, month_display
			Else
				PushButton 465, y_pos, 75, 13, month_display, MFIP_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			y_pos = y_pos + 15
		next
		PushButton 465, 135, 75, 20, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 155, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

		y_pos = 135
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_counted_memb_allocation_exists = True or MFIP_ELIG_APPROVALS(elig_ind).mfip_deemer_allocation_exists = True Then
			Text 5, 135, 445, 10, "*** This case has ALLOCATION as a part of the Budget Calculation ****          Review the details in the Income Pop-Ups - Buttons Above"
			Text 5, 145, 100, 110, "Explain Allocation Details in full:"
			EditBox 5, 155, 445, 15, MFIP_UNIQUE_APPROVALS(allocation_notes, approval_selected)
			' Text app_x_pos, app_y_pos+10, 200, 10, "      Review the details in the Income Pop-Ups - Buttons Amove"
			y_pos = 175
		End If

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "ELIGIBLE" Then
			grp_len = 65
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_sig_change = True Then
				y_pos = y_pos-2
				Text 10, y_pos, 200, 10, "*  *  *  Significant Change Approved  *  *  *"
				If MFIP_ELIG_APPROVALS(elig_ind).mfsc_month_one_of_sig_change = "" Then
					Text 300, y_pos, 120, 10, "Sig Change Month: " & MFIP_ELIG_APPROVALS(elig_ind).mfsc_month_two_of_sig_change
				ElseIF MFIP_ELIG_APPROVALS(elig_ind).mfsc_month_two_of_sig_change = "" Then
					Text 300, y_pos, 120, 10, "Sig Change Month: " & MFIP_ELIG_APPROVALS(elig_ind).mfsc_month_one_of_sig_change
				Else
					Text 300, y_pos, 145, 10, "Sig Change Months: " & MFIP_ELIG_APPROVALS(elig_ind).mfsc_month_one_of_sig_change & " and " & MFIP_ELIG_APPROVALS(elig_ind).mfsc_month_two_of_sig_change
				End If
				Text 10, y_pos+10, 400, 10, "Total Budget Month Income $ " & MFIP_ELIG_APPROVALS(elig_ind).mfsc_budg_mo_total_inc  & "     ---      Total Payment Month Income $ " & MFIP_ELIG_APPROVALS(elig_ind).mfsc_pay_mo_total_inc
				y_pos = y_pos + 22
				grp_len = 45
			End If
			GroupBox 5, y_pos, 445, grp_len, "MFIP Benefits Issued for the Approval Package"
			app_y_pos = y_pos + 15
			' app_y_pos = 150
			app_x_pos = 10
			For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
				If InStr(MFIP_UNIQUE_APPROVALS(months_in_approval, approval_selected), MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					Text app_x_pos, app_y_pos, 200, 10, MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year & " - $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_net_grant_amount & " - (Ca: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_cash_portion & " F: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_food_portion & " HG: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_housing_grant & ")"
					' Text app_x_pos, app_y_pos+10, 200, 10, "            (Ca: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_cash_portion & " F: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_food_portion & " HG: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_summary_housing_grant & ")"
					app_y_pos = app_y_pos + 10

					If MFIP_ELIG_APPROVALS(approval).mfip_mony_check_found = True Then
						for each_trans = 0 to UBound(MFIP_ELIG_APPROVALS(approval).mfip_check_program)
							Text app_x_pos+5, app_y_pos, 275, 10, MFIP_ELIG_APPROVALS(approval).mfip_check_issue_date(each_trans) & " CHCK - $ " & MFIP_ELIG_APPROVALS(approval).mfip_check_transaction_amount(each_trans) & " paid to " & MFIP_ELIG_APPROVALS(approval).mfip_check_vendor_name(each_trans) & " for " & MFIP_ELIG_APPROVALS(approval).mfip_check_payment_reason(each_trans)
							app_y_pos = app_y_pos + 10
						next
					End If
					If MFIP_ELIG_APPROVALS(approval).mfip_vnda_found = True Then
						' MsgBox "IN IT!"
						for each_auth = 0 To UBound(MFIP_ELIG_APPROVALS(approval).mfip_vnda_vendor_number)
							' MsgBox "MFIP_ELIG_APPROVALS(approval).mfip_vnda_total_payment_amount(each_auth) - " & MFIP_ELIG_APPROVALS(approval).mfip_vnda_total_payment_amount(each_auth)
							Text app_x_pos+5, app_y_pos, 275, 10, "Vendor Auth - $ " & MFIP_ELIG_APPROVALS(approval).mfip_vnda_total_payment_amount(each_auth) & " to be paid to " & MFIP_ELIG_APPROVALS(approval).mfip_vnda_vendor_name(each_auth) & " for " & MFIP_ELIG_APPROVALS(approval).mfip_vnda_expense_type_info(each_auth)
							app_y_pos = app_y_pos + 10
						next
					End If

					If app_y_pos >= 190 Then
						app_y_pos = 150
						app_x_pos = app_x_pos + 220
					End If
				End If
			Next
			y_pos = y_pos + grp_len + 5
		Else
			y_pos = y_pos + 15
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_initial_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Intial Income Limit of " &  MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_family_wage_level & " (which is the same as the Family Wage Level)."
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_monthly_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Monthly MFIP Standard and no benefit to be issued."
			If MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = True and snap_notes_showed = False Then
				Text 15, 170, 50, 10, "SNAP Notes:"
				EditBox 65, 165, 385, 15, MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected)
				Text 65, 180, 385, 10, "When MFIP is Ineligible, we should assess SNAP. Explain your SNAP review/assessment here."
			End If
			y_pos = y_pos + 55

		End If

		GroupBox 5, y_pos, 540, income_box_len, "Income"	'205'
		y_pos = y_pos + 10

		Text 10, y_pos, 155, 10, "Total GROSS EARNED Income:   $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_earned_income	'215'
		Text 300, y_pos, 155, 10, "Total GROSS UNEARNED Income:   $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unearned_income
		y_pos = y_pos + 15
		y_pos_2 = y_pos
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_one_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_counted_amt(each_memb) & " Counted Income"
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_two_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_counted_amt(each_memb) & " Counted Income"
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_three_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_counted_amt(each_memb) & " Counted Income"
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_four_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_counted_amt(each_memb) & " Counted Income"
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_five_main_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_counted_amt(each_memb) & " Counted Income"
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_mfip_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "RETRO" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_retro_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_retro_expenses(each_memb)
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "PROSP" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_mfip_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "RETRO" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_retro_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_retro_expenses(each_memb)
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "PROSP" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_mfip(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_mfip_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "RETRO" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_retro_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_retro_expenses(each_memb)
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "PROSP" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_mfip(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_mfip_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_mfip(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_mfip_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_mfip(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_mfip_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_mfip(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_mfip_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_mfip(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_mfip_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
		Next
	EndDialog
end function


function define_msa_elig_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "MSA Approval Packages"
	  GroupBox 460, 10, 85, 165, "MSA Approvals"
	  If MSA_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or MSA_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
		Text 10, 350, 550, 10, "NOTES: " & MSA_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & MSA_UNIQUE_APPROVALS(changes_for_note, approval_selected)
	  End If

	  detail_grp_len = 10
	  grp_y_pos = 350
	  y_pos = 360
	  'MSA has no proration handling

	  If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_source_of_info = "FIAT" Then
		y_pos = y_pos-20
		grp_y_pos = grp_y_pos-20

		Text 15, y_pos+5, 85, 10, "MSA FIATed - Reason:"
		EditBox 100, y_pos, 440, 15, MSA_UNIQUE_APPROVALS(fiat_reason, approval_selected)
		y_pos = y_pos + 20
		detail_grp_len = detail_grp_len + 20
	  End If

	  If detail_grp_len <> 10 Then
		GroupBox 10, grp_y_pos, 540, detail_grp_len, "Approval Explanations"
 	  End If

	  Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
	  DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - budget is Accurate"+chr(9)+"No - do not CASE/NOTE this information", MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

	  If MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
	  	  Select Case MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_budg_type
			  Case "SSI TYPE"
				  GroupBox 5, 10, 445, 120, "Approval Detail - SSI Type MSA"
				  ' Text 15, 20, 150, 10, "GA Individual Benefit Calculation"
				  Text 15, 20, 150, 10, "SSI Standard (FBR) . . . . . .  $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_ssi_standard_fbr
				  Text 15, 30, 150, 10, "Disregard . . . . . . . . . . . . . . .$ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_standard_disregard & "  ( - )"
				  Text 15, 40, 150, 10, "Net Income . . . . . . . . . .  . . .$ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_income

				  Text 15, 55, 150, 10, "Need Standard . . . . . . . . . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_need_standard
				  Text 15, 65, 150, 10, "Net Income . . . . . . . . . . . . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_income & "  ( - )"
				  Text 15, 75, 150, 10, "MSA Grant . . . . . . . . . . . . . . . . . .$ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_msa_grant

				  y_pos = 20

			  Case "Non-SSI TYPE"
			  	  GroupBox 5, 10, 445, 120, "Approval Detail - Non-SSI Type MSA"

				  Text 15, 20, 150, 10, "Unearned income . . . . . . . . .  $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_unearned_income
				  Text 15, 30, 150, 10, "Deemed Income . . . . . . . . . . .$ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_deemed_income & "  ( + )"
				  Text 15, 40, 150, 10, "Standard Disregard . . . . .  . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_standard_disregard & "  ( - )"
				  Text 15, 50, 150, 10, "Net Unearned Income . . . .  . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_unearned_income
				  Text 15, 60, 150, 10, "Net Earned Income . . . . . .  . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_earned_income & "  ( + )"
				  Text 15, 70, 150, 10, "Net Income . . . . . . . . . . . .  . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_income

				  Text 205, 20, 150, 10, "Need Standard . . . . . . . . . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_need_standard
				  Text 205, 30, 150, 10, "Net Income . . . . . . . . . . . . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_income & "  ( - )"
				  Text 205, 40, 150, 10, "MSA Grant . . . . . . . . . . . . . . . . . .$ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_msa_grant

				  y_pos = 55
		  End Select

		  grp_len = 60
		  For each_spec_need = 0 to UBound(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info)
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info(each_spec_need) <> "" Then grp_len = grp_len + 10
		  Next
		  If grp_len = 60 Then grp_len = 70

		  GroupBox 200, y_pos, 200, grp_len, "Needs Standard Calculation"
		  y_pos = y_pos + 10
		  Text 205, y_pos, 150, 10, "Special Needs Supplements:"
		  y_pos = y_pos + 10
		  For each_spec_need = 0 to UBound(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info)
		  	If MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info(each_spec_need) <> "" Then
				Text 210, y_pos, 150, 10, MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info(each_spec_need)
				Text 315, y_pos, 50, 10,"$ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_amount(each_spec_need)
				y_pos = y_pos + 10
			End If
		  Next
		  If (MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_budg_type = "SSI TYPE" and y_pos = 40) OR (MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_budg_type = "Non-SSI TYPE" and y_pos = 75) Then
		  	Text 210, y_pos, 150, 10, "No Special Needs Supplements Added"
			y_pos = y_pos + 10
		  End If
		  y_pos = y_pos + 5
		  Text 205, y_pos, 190, 10, "Basic needs Assistance Standard: . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_basic_needs_assistance_standard
		  y_pos = y_pos + 10
		  Text 205, y_pos, 190, 10, "Special needs . . . . . . . . . . . . . . . . . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_special_needs
		  y_pos = y_pos + 10
		  Text 205, y_pos, 190, 10, "Household Total Needs . . . . . . . . . . . . . . $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_household_total_needs

		  Text 55, 90, 80, 10, " Result:  " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result
		  Text 15, 105, 160, 20, "Months in Approval:  " & replace(MSA_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")
	  Else
		GroupBox 5, 10, 450, 90, "Approval Detail"
		Text 15, 20, 80, 10, " Result:   " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result
		Text 165, 20, 120, 30, "Months in Approval: " & replace(MSA_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")

		Text 15, 45, 110, 10, "Aplicant Elig:             " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_applicant_eligible
		Text 15, 55, 110, 10, "APPL Withdrawn:     " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_application_withdrawn
		Text 15, 65, 110, 10, "Elig Member:             " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_eligible_member
		Text 15, 75, 110, 10, "Fail to File:                 " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_fail_file
		Text 15, 85, 110, 10, "Gross Income:           " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_gross_income

		Text 175, 45, 150, 10, "Prosp Net Income:             " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_net_income
		Text 175, 55, 150, 10, "Residence:                        " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_residence
		Text 175, 65, 150, 10, "Asset:                                " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_assets
		Text 175, 75, 150, 10, "Retro Net Income:             " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_retro_net_income
		Text 175, 85, 150, 10, "Verification:                        " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_verif

		GroupBox 5, 105, 450, 60, "Ineligible Details"
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_verif = "FAILED" Then
			Text 15, 120, 165, 10, "What is the date the verification request was sent? "
			Editbox 180, 115, 50, 15, MSA_UNIQUE_APPROVALS(verif_request_date, approval_selected)
			Text 235, 120, 150, 10, "(due date is 10 days from this request date)"
			PushButton 370, 115, 15, 15, "!", verif_tips_and_tricks_btn
		Else
			Text 15, 125, 300, 20, "This case is ineligible because it hasn't met the requirements for GA Eligibility. The case tests above show what requirements have not been met."
		End if

	  End if

	  ButtonGroup ButtonPressed
		If MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then PushButton 390, 80, 50, 10, "View ELIG", nav_stat_elig_btn
		If MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then PushButton 145, 90, 50, 10, "View ELIG", nav_stat_elig_btn

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn

		y_pos = 25
		for each_app = 0 to UBound(MSA_UNIQUE_APPROVALS, 2)
			If MSA_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = MSA_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF MSA_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = MSA_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
			Else
				month_display = MSA_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & MSA_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			' If each_app = approval_selected Then display_detail = month_display
			If each_app = approval_selected Then
				Text 470, y_pos+2, 75, 13, month_display
			Else
				PushButton 465, y_pos, 75, 13, month_display, MSA_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			y_pos = y_pos + 15
		next
		PushButton 465, 135, 75, 20, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 155, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
			GroupBox 5, 135, 445, 65, "MSA Benefits Issued for the Approval Package"
			app_y_pos = 150
			app_x_pos = 10
			For approval = 0 to UBound(MSA_ELIG_APPROVALS)
				If InStr(MSA_UNIQUE_APPROVALS(months_in_approval, approval_selected), MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					Text app_x_pos, app_y_pos, 200, 10, MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year & " - $ " & MSA_ELIG_APPROVALS(approval).msa_elig_summ_current_payment
					app_y_pos = app_y_pos + 10
					If app_y_pos = 190 Then
						app_y_pos = 150
						app_x_pos = app_x_pos + 150
					End If
				End If
			Next			'NOTE that MSA is not prorated
		Else
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_gross_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Monthly MSA Standard and no benefit to be issued."
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_net_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Monthly MSA Standard and no benefit to be issued."
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_retro_net_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Monthly MSA Standard and no benefit to be issued."
		End If

		GroupBox 5, 205, 540, income_box_len, "Income"

		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_budg_type = "Non-SSI TYPE" Then
			Text 10, 215, 155, 10, "Total NET EARNED Income:   $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_earned_income
			Text 300, 215, 155, 10, "Total NET UNEARNED Income:   $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_unearned_income
		Else
			Text 10, 215, 155, 10, "Earned Income Not reviewed in Budget"
			Text 300, 215, 155, 10, "Total SSI Standard (FBR) Income:   $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_ssi_standard_fbr
		End If

		y_pos = 230
		y_pos_2 = 230
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_one_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_two_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_three_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_four_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_five_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_msa(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_msa(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_msa(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_msa(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_msa(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_msa(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
		Next
	EndDialog
end function

function define_ga_elig_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "GA Approval Packages"
	  GroupBox 460, 10, 85, 165, "GA Approvals"
	  If GA_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or GA_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
		  Text 10, 350, 550, 10, "NOTES: " & GA_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & GA_UNIQUE_APPROVALS(changes_for_note, approval_selected)
	  End If

	  detail_grp_len = 10
	  grp_y_pos = 350
	  y_pos = 360
	  ga_prorate_date = ""
	  For approval = 0 to UBound(GA_ELIG_APPROVALS)
		If InStr(GA_UNIQUE_APPROVALS(months_in_approval, approval_selected), GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
			display_benefit = False
			If GA_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = "" Then
				display_benefit = True
			ElseIf InStr(GA_UNIQUE_APPROVALS(limit_benefit_months, approval_selected), GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				display_benefit = True
			End If
			If display_benefit = True Then
				'PRORATED REASON FUNCTIONALITY
	  			If ga_prorate_date = "" Then
					If GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_from <> "" Then
						ga_prorate_date = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_from
						y_pos = y_pos-20
						grp_y_pos = grp_y_pos-20
					ElseIf GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_to <> "" Then
						ga_prorate_date = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_to
						y_pos = y_pos-20
						grp_y_pos = grp_y_pos-20
					End If
				End If
			End If
		End If
	  Next

	  If ga_prorate_date <> "" Then
		Text 15, y_pos+5, 115, 10, "GA Prorated (" & ga_prorate_date & "). Reason:"
		EditBox 130, y_pos, 410, 15, GA_UNIQUE_APPROVALS(proration_reason, approval_selected)
		y_pos = y_pos + 20
		detail_grp_len = detail_grp_len + 20
	  End If

	  If detail_grp_len <> 10 Then
		GroupBox 10, grp_y_pos, 540, detail_grp_len, "Approval Explanations"
 	  End If
	  Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
	  DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - budget is Accurate"+chr(9)+"No - do not CASE/NOTE this information", GA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

	  If GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
	  	  If GA_ELIG_APPROVALS(elig_ind).ga_elig_faci_file_unit_type_code = " " Then 				'If this is _, it means the budget is INDVIDUAL based'
		  	  GroupBox 5, 10, 285, 80, "Approval Detail - GA Individual Benefit Calculation"
			  ' Text 15, 20, 150, 10, "GA Individual Benefit Calculation"
			  Text 15, 20, 150, 10, "Payment Standard . . . . . . . . .  $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_payment_standard
			  Text 15, 30, 150, 10, "Total Countable Income . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_countable_income & "  ( - )"
			  Text 15, 40, 150, 10, "Payment Subtotal . . . . . . . . . .  $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_payment_subtotal

		  Else
		  	  GroupBox 5, 10, 285, 80, "Approval Detail - Personal Needs Benefit Calculation (Facility)"
		  	  ' Text 15, 20, 150, 10, "Personal Needs Benefit Calculation (Facility)"
			  Text 15, 20, 150, 10, "Payment Standard . . . . . . . . . .  $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_pers_needs_payment_standard
			  Text 15, 30, 150, 10, "Total Countable Income . . . . . . . . .  $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_countable_income & "  ( - )"
			  Text 15, 40, 150, 10, "Payment Subtotal . . . . . . . . . .  $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_pers_needs_payment_subtotal

		  End if

		  Text 205, 20, 80, 10, " Result:   " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result
		  Text 205, 30, 80, 10, " Action:   " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_action_info
		  Text 205, 40, 80, 10, " Reason:   " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info
		  Text 165, 55, 120, 30, "Months in Approval: " & replace(GA_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")

		  Text 15, 55, 150, 10, "Household Unit Size - " & GA_ELIG_APPROVALS(elig_ind).ga_elig_memb_hh_count
		  Text 15, 65, 100, 10, "Countable Assets: " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_countable_assets
		  Text 15, 75, 100, 10, "Maximum Assets: " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_maximum_assets

		  GroupBox 300, 10, 150, 120, "Countable Income Calculation"
		  Text 305, 25, 145, 10, "Gross Wages/Salary . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_gross_wages
		  Text 305, 35, 145, 10, "Self Employment . . . . . . . . . .$ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_gross_self_emp
		  Text 305, 45, 145, 10, "Total Earned Income . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income
		  Text 305, 55, 145, 10, "Standard EI Disregard . . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_standard_EI_disregard & "  ( - )"
		  Text 305, 65, 145, 10, "EI Disregard (" & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_earned_income_disregard_percent & "%) . . . . . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_earned_income_disregard_amount & "  ( - )"
		  Text 305, 75, 145, 10, "Net Earned Income . . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_net_earned_income
		  Text 305, 85, 145, 10, "Unearned Income . . . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_unearned_income
		  Text 305, 95, 145, 10, "Counted School Income . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_counted_school_income
		  Text 305, 105, 145, 10, "Deemed Income . . . . . . . . . $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_deemed_income
		  Text 305, 115, 145, 10, "Total Counteable Income . . .$ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_countable_income
	  Else
		GroupBox 5, 10, 450, 90, "Approval Detail"
		Text 15, 20, 80, 10, " Result:   " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result
		Text 110, 20, 140, 10, " Action:   " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_action_info
		Text 110, 30, 140, 10, " Reason:   " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info
		Text 250, 20, 120, 30, "Months in Approval: " & replace(GA_UNIQUE_APPROVALS(months_in_approval, approval_selected), "~", ", ")

		Text 15, 45, 110, 10, "APPL Withdrawn:    " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_appl_withdrawn
		Text 15, 55, 110, 10, "Duplicate Assist:     " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_dupl_assistance
		Text 15, 65, 110, 10, "Fail Cooperation:      " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_coop
		Text 15, 75, 110, 10, "Fail to File:               " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_file
		Text 15, 85, 110, 10, "Eligible Member:       " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_eligible_member

		Text 175, 45, 150, 10, "Residence:                        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_residence
		Text 175, 55, 150, 10, "Asset:                                " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_assets
		Text 175, 65, 150, 10, "Eligible for Other Program:  " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_eligible_other_prgm
		Text 175, 75, 150, 10, "Verification:                        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_verif
		Text 175, 85, 150, 10, "Lump Sum Payment:          " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_lump_sum_payment

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_verif = "FAILED" OR GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info = "No Proof Given" Then
			GroupBox 5, 105, 450, 85, "Ineligible Details"
			Text 15, 120, 165, 10, "What is the date the verification request was sent? "
			Editbox 180, 115, 50, 15, GA_UNIQUE_APPROVALS(verif_request_date, approval_selected)
			Text 235, 120, 150, 10, "(due date is 10 days from this request date)"
			PushButton 370, 115, 15, 15, "!", verif_tips_and_tricks_btn
			Text 15, 130, 175, 10, "Detail the Verifications NOT Received and Needed:"
			EditBox 15, 140, 430, 15, GA_UNIQUE_APPROVALS(verif_request_details, approval_selected)
			y_pos = 160
		Else
			GroupBox 5, 105, 450, 65, "Ineligible Details"
			Text 15, 120, 250, 20, "This case is ineligible because it hasn't met the requirements for GA Eligibility. The case tests above show what requirements have not been met."
			y_pos = 140
		End if
		Text 15, y_pos, 150, 10, "Explain details of reason for denial:"
		EditBox 15, y_pos+10, 430, 15, GA_UNIQUE_APPROVALS(inelig_details_notes, approval_selected)

	  End if

	  ButtonGroup ButtonPressed
		If GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then PushButton 390, 80, 50, 10, "View ELIG", nav_stat_elig_btn
		If GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then PushButton 235, 75, 50, 10, "View ELIG", nav_stat_elig_btn

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn

		y_pos = 25
		for each_app = 0 to UBound(GA_UNIQUE_APPROVALS, 2)
			If GA_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = GA_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF GA_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = GA_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
			Else
				month_display = GA_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & GA_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			' If each_app = approval_selected Then display_detail = month_display
			If each_app = approval_selected Then
				Text 470, y_pos+2, 75, 13, month_display
			Else
				PushButton 465, y_pos, 75, 13, month_display, GA_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			y_pos = y_pos + 15
		next
		PushButton 465, 135, 75, 20, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 155, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result = "ELIGIBLE" Then
			GroupBox 5, 95, 285, 35, "Basis of ELIGIBILITY"
			y_pos = 105
			for each_memb = 0 to UBound(GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs)
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_code(each_memb) = "A" Then
					Text 15, y_pos, 250, 10, "MEMB " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " - " & GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_elig_basis_info(each_memb)
					y_pos =y_pos + 10
				End If
			Next

			GroupBox 5, 135, 445, 65, "GA Benefits Issued for the Approval Package"
			app_y_pos = 150
			app_x_pos = 10
			For approval = 0 to UBound(GA_ELIG_APPROVALS)
				If InStr(GA_UNIQUE_APPROVALS(months_in_approval, approval_selected), GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					Text app_x_pos, app_y_pos, 200, 10, GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year & " - $ " & GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_ga_grant_amount
					app_y_pos = app_y_pos + 10
					If app_y_pos = 190 Then
						app_y_pos = 150
						app_x_pos = app_x_pos + 220
					End If
				End If
			Next
		Else
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_prosp_net_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Monthly GA Standard and no benefit to be issued."
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_retro_net_income = "FAILED" Then Text 15, 150, 400, 10, "*** Income Exceeds the Monthly GA Standard and no benefit to be issued."
		End If

		GroupBox 5, 205, 540, income_box_len, "Income"

		Text 10, 215, 155, 10, "Total GROSS EARNED Income:   $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income
		Text 300, 215, 155, 10, "Total GROSS UNEARNED Income:   $ " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_net_earned_income

		y_pos = 230
		y_pos_2 = 230
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_ga_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_one_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_ga_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_two_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_ga_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_three_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_ga_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_four_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_ga_gross_amt(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_five_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_ga_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle = "RETRO" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_retro_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_retro_expenses(each_memb)
					If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle = "PROSP" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_ga_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle = "RETRO" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_retro_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_retro_expenses(each_memb)
					If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle = "PROSP" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_ga(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_ga_gross_amt(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle = "RETRO" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_retro_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_retro_expenses(each_memb)
					If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle = "PROSP" Then Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_ga(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_ga_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_ga(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_ga_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_ga(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_ga_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_ga(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_ga_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_ga(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_ga_gross_amt(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
		Next
	EndDialog
end function

function define_deny_elig_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "CASH Denial Approval Packages"
	  ButtonGroup ButtonPressed
		If DENY_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or DENY_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
			Text 10, 350, 550, 10, "NOTES: " & DENY_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & DENY_UNIQUE_APPROVALS(changes_for_note, approval_selected)
		End If

	    y_pos = 25

		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_details_exists = False Then dwp_grp_len = 25
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_details_exists = True Then
			dwp_grp_len = 25
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_application_withdrawn = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_assets = "FAILED" Then dwp_grp_len = dwp_grp_len + 70
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_CS_disqualification = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_death_of_applicant = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_dupl_assistance = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_eligible_child = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_ES_disqualification = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_fail_coop = "FAILED" Then dwp_grp_len = dwp_grp_len + 10

			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_applied_other_benefits = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_provide_requested_info = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_IEVS = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_vendor_info = "FAILED" Then dwp_grp_len = dwp_grp_len + 10

			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_four_month_limit = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_initial_income = "FAILED" Then dwp_grp_len = dwp_grp_len + 50
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_MFIP_conversion = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_residence = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_strike = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_TANF_time_limit = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_transfer_of_assets = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_verif = "FAILED" Then dwp_grp_len = dwp_grp_len + 20
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_new_spouse_income = "FAILED" Then dwp_grp_len = dwp_grp_len + 10
		End If
		If TEMP_VAR_cash_family_or_adult = "Family" Then dwp_grp_len = dwp_grp_len + 25

		GroupBox 10, y_pos, 440, dwp_grp_len, "DWP"
		y_pos = y_pos + 10
		Text 20, y_pos, 425, 10, "Denial Reason: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_reason_info
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_details_exists = False Then
			y_pos = y_pos + 10
			If TEMP_VAR_cash_family_or_adult = "Adult" Then y_pos = y_pos + 10
		Else
			y_pos = y_pos + 10

			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_application_withdrawn = "FAILED" Then
				Text 20, y_pos, 425, 10, "The Cash request has been Withdrawn"
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_assets = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household is over the asset limit for DWP (and all Cash Programs)."
				y_pos = y_pos + 10

				Text 30, y_pos, 425, 10, "CASH Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_CASH
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "ACCT Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_ACCT
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "SECU Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_SECU
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "CARS Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_CARS
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "SPON Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_SPON
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "Total Assets:         $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_total & "                          Asset Maximum: $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_maximum
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_CS_disqualification = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has not complied with Child Support Requirements."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_death_of_applicant = "FAILED" Then
				Text 20, y_pos, 425, 10, "Applicant on this case has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & ")."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_dupl_assistance = "FAILED" Then
				Text 20, y_pos, 425, 10, "The members of this household are receiving Cash Assistance on another case."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_eligible_child = "FAILED" Then
				If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_or_dwp = "MFIP" Then Text 20, y_pos, 425, 10, "This household was assessed for MFIP as the Family Cash Program."
				If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_or_dwp <> "MFIP" Then Text 20, y_pos, 425, 10, "This household does not have a child that meets the requirements for family cash benefits."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_ES_disqualification = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has not complied with the Employment Services Requirements."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_fail_coop = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has not complied with all requirements for Family Cash Assistance."
				y_pos = y_pos + 10

				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_applied_other_benefits = "FAILED" Then
					Text 30, y_pos, 425, 10, "Failed to apply for other benefits."
					y_pos = y_pos + 10
				End If
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_provide_requested_info = "FAILED" Then
					Text 30, y_pos, 425, 10, "Failed to provide requested information."
					y_pos = y_pos + 10
				End If
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_IEVS = "FAILED" Then
					Text 30, y_pos, 425, 10, "Failed to cooperate with the IEVS process."
					y_pos = y_pos + 10
				End If
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_vendor_info = "FAILED" Then
					Text 30, y_pos, 425, 10, "Failed to provide vendor information."
					y_pos = y_pos + 10
				End If
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_four_month_limit = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has used all 4 DWP months."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_initial_income = "FAILED" Then
				Text 20, y_pos, 425, 10, "Household Income exceeds the Initial Income Level (Family Wage Level)."
				y_pos = y_pos + 10

				Text 30, y_pos, 425, 10, "Counted Earned Income:         $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_counted_earned_income & "                          Dependent Care Expense:   (-) $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_dependent_care_expense
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "Counted Unearned Income:     $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_counted_unearned_income
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "Counted Deemed Income:        $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_counted_deemed_income & "                          Child Support Exclusion:       (-) $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_child_support_exclusion
				y_pos = y_pos + 10
				Text 30, y_pos, 425, 10, "Total Counted Income:             $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_total_counted_income & "                          Family Wage Level: $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_family_wage_level
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_MFIP_conversion = "FAILED" Then
				Text 20, y_pos, 425, 10, "This case is better served by the MFIP program and is unlikely to benefit from DWP."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_residence = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has not met state residency requirements."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_strike = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has a member on strike and is not eligiblity for public assistance."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_TANF_time_limit = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has used all TANF months and is not eligible for an extension."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_transfer_of_assets = "FAILED" Then
				Text 20, y_pos, 425, 10, "The members of this household have transferred assets in a way that does not comply with cash assistance rules."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_verif = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has not provided required verifications."
				y_pos = y_pos + 10
				verifs_missing = ""
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_ACCT = "FAILED" Then verifs_missing = verifs_missing & ", Bank Account"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_BUSI = "FAILED" Then verifs_missing = verifs_missing & ", Self Employment Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_CARS = "FAILED" Then verifs_missing = verifs_missing & ", Vehicle"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_JOBS = "FAILED" Then verifs_missing = verifs_missing & ", Job Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_MEMB_dob = "FAILED" Then verifs_missing = verifs_missing & ", Date of Birth of all Household Members"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_MEMB_id = "FAILED" Then verifs_missing = verifs_missing & ", Identity of Adults"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_PARE = "FAILED" Then verifs_missing = verifs_missing & ", Relationship of Children to Adults"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_PREG = "FAILED" Then verifs_missing = verifs_missing & ", Pregnancy"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_RBIC = "FAILED" Then verifs_missing = verifs_missing & ", Roomer/Boarder Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_ADDR = "FAILED" Then verifs_missing = verifs_missing & ", Address"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_SCHL = "FAILED" Then verifs_missing = verifs_missing & ", School Attendance"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_SECU = "FAILED" Then verifs_missing = verifs_missing & ", Security Asset"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_SPON = "FAILED" Then verifs_missing = verifs_missing & ", Sponsor Income or Assets"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_UNEA = "FAILED" Then verifs_missing = verifs_missing & ", Unearned Income"
				If left(verifs_missing, 1) = "," Then verifs_missing = right(verifs_missing, len(verifs_missing)-2)
				Text 25, y_pos, 420, 10, "Verifications missing: " & verifs_missing
				y_pos = y_pos + 10
			End If
			If TEMP_VAR_cash_family_or_adult = "Adult" Then y_pos = y_pos + 10
		End If
		If TEMP_VAR_cash_family_or_adult = "Family" Then
			Text 25, y_pos, 250, 10, "Explain the details of the reason for DWP denial:"
			y_pos = y_pos + 10
			EditBox 25, y_pos, 420, 15, TEMP_VAR_deny_dwp_elig_explanation
			y_pos = y_pos + 20
		End If

		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_details_exists = False Then mfip_grp_len = 25
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_details_exists = True Then
			mfip_grp_len = 25
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_appl_withdraw = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_asset = "FAILED" Then mfip_grp_len = mfip_grp_len + 70
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_death_applicant = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_dupl_assist = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_elig_child = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_fail_coop = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_fail_file = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_initial_income = "FAILED" Then mfip_grp_len = mfip_grp_len + 50
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_minor_liv_arrange = "FAILED" Then mfip_grp_len = mfip_grp_len + 10

			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_monthly_income = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_post_60_disq = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_residence = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_sanction_limit = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_strike = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_TANF_time_limit = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_transfer_asset = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_verif = "FAILED" Then mfip_grp_len = mfip_grp_len + 20
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_275_new_spouse_income = "FAILED" Then mfip_grp_len = mfip_grp_len + 10
		End If
		If TEMP_VAR_cash_family_or_adult = "Family" Then mfip_grp_len = mfip_grp_len + 25
		GroupBox 10, y_pos, 440, mfip_grp_len, "MFIP"
		y_pos = y_pos + 10
		Text 20, y_pos, 425, 10, "Denial Reason: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_reason_info
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_details_exists = False Then
			y_pos = y_pos + 10
			If TEMP_VAR_cash_family_or_adult = "Adult" Then y_pos = y_pos + 10
		Else
			y_pos = y_pos + 10

			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_appl_withdraw = "FAILED" Then
				Text 20, y_pos, 425, 10, "The Cash request has been Withdrawn."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_asset = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household is over the asset limit for DWP (and all Cash Programs)."
				y_pos = y_pos + 10

				Text 30, y_pos, 400, 10, "CASH Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_CASH
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "ACCT Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_ACCT
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "SECU Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_SECU
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "CARS Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_CARS
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "SPON Assets:       $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_SPON
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "Total Assets:         $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_total & "                          Asset Maximum: $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_max
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_death_applicant = "FAILED" Then
				Text 20, y_pos, 425, 10, "Applicant on this case has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & ")."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_dupl_assist = "FAILED" Then
				Text 20, y_pos, 425, 10, "The members of this household are receiving Cash Assistance on another case."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_elig_child = "FAILED" Then
				If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_or_dwp = "DWP" Then Text 20, y_pos, 425, 10, "This household was assessed for DWP as the Family Cash Program."
				If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_or_dwp <> "DWP" Then Text 20, y_pos, 425, 10, "This household does not have a child that meets the requirements for family cash benefits."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_fail_coop = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has not complied with all requirements for Family Cash Assistance."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_fail_file = "FAILED" Then
				Text 20, y_pos, 425, 10, "This case has failed to complete a required report process."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_initial_income = "FAILED" Then
				Text 20, y_pos, 425, 10, "Household Income exceeds the Initial Income Level (Family Wage Level)."
				y_pos = y_pos + 10

				Text 30, y_pos, 400, 10, "Counted Earned Income:         $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_earned & "                          Dependent Care Expense:   (-) $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_deoendant_care
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "Counted Unearned Income:     $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_unearned
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "Counted Deemed Income:        $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_deemed & "                          Child Support Exclusion:       (-) $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_cses_exclusion
				y_pos = y_pos + 10
				Text 30, y_pos, 400, 10, "Total Counted Income:             $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_total & "                          Family Wage Level: $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_family_wage_level
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_minor_liv_arrange = "FAILED" Then
				Text 20, y_pos, 425, 10, "This minors on this case do not meet the required living arrangement review."
				y_pos = y_pos + 10
			End If

			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_monthly_income = "FAILED" Then
				Text 20, y_pos, 425, 10, "Household Income exceeds the Monthly Income Limit."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_post_60_disq = "FAILED" Then
				Text 20, y_pos, 425, 10, "Member(s) of this household have been disqualified during TANF extension months."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_residence = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has not met state residency requirements."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_sanction_limit = "FAILED" Then
				Text 20, y_pos, 425, 10, "Member(s) of this household have reached the sanction limit."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_strike = "FAILED" Then
				Text 20, y_pos, 425, 10, "his household has a member on strike and is not eligiblity for public assistance."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_TANF_time_limit = "FAILED" Then
				Text 20, y_pos, 425, 10, "This household has used all TANF months and is not eligible for an extension."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_transfer_asset = "FAILED" Then
				Text 20, y_pos, 425, 10, "The members of this household have transferred assets in a way that does not comply with cash assistance rules."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_verif = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has not provided required verifications."
				y_pos = y_pos + 10
				verifs_missing = ""
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_ACCT = "FAILED" Then verifs_missing = verifs_missing & ", Bank Account"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_BUSI = "FAILED" Then verifs_missing = verifs_missing & ", Self Employment Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_CARS = "FAILED" Then verifs_missing = verifs_missing & ", Vehicle"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_JOBS = "FAILED" Then verifs_missing = verifs_missing & ", Job Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_MEMB_dob = "FAILED" Then verifs_missing = verifs_missing & ", Date of Birth of all Household Members"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_MEMB_id = "FAILED" Then verifs_missing = verifs_missing & ", Identity of Adults"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_PARE = "FAILED" Then verifs_missing = verifs_missing & ", Relationship of Children to Adults"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_PREG = "FAILED" Then verifs_missing = verifs_missing & ", Pregnancy"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_RBIC = "FAILED" Then verifs_missing = verifs_missing & ", Roomer/Boarder Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_ADDR = "FAILED" Then verifs_missing = verifs_missing & ", Address"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_SCHL = "FAILED" Then verifs_missing = verifs_missing & ", School Attendance"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_SECU = "FAILED" Then verifs_missing = verifs_missing & ", Security Asset"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_SPON = "FAILED" Then verifs_missing = verifs_missing & ", Sponsor Income or Assets"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_UNEA = "FAILED" Then verifs_missing = verifs_missing & ", Unearned Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_MEMI = "FAILED" Then verifs_missing = verifs_missing & ", State Residence"
				If left(verifs_missing, 1) = "," Then verifs_missing = right(verifs_missing, len(verifs_missing)-2)
				Text 25, y_pos, 420, 10, "Verifications missing: " & verifs_missing
				y_pos = y_pos + 10
			End If
			If TEMP_VAR_cash_family_or_adult = "Adult" Then y_pos = y_pos + 10
		End If
		If TEMP_VAR_cash_family_or_adult = "Family" Then
			Text 25, y_pos, 250, 10, "Explain the details of the reason for MFIP denial:"
			y_pos = y_pos + 10
			EditBox 25, y_pos, 420, 15, TEMP_VAR_deny_mfip_elig_explanation
			y_pos = y_pos + 20
		End If

		DENY_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info = "Verification" Then CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_details_exists = True
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_details_exists = False Then msa_grp_len = 25
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_details_exists = True Then
			msa_grp_len = 25
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_applicant_eligible = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_application_withdrawn = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_eligible_member = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_fail_file = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_gross_income = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_net_income = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_residence = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_assets = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_retro_net_income = "FAILED" Then msa_grp_len = msa_grp_len + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info = "Verification" Then msa_grp_len = msa_grp_len + 25
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif = "FAILED" Then msa_grp_len = msa_grp_len + 20
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_gross_income = "FAILED" Then DENY_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_net_income = "FAILED" Then DENY_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_retro_net_income = "FAILED" Then DENY_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
			If DENY_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then msa_grp_len = msa_grp_len + 20
		End If
		If TEMP_VAR_cash_family_or_adult = "Adult" Then msa_grp_len = msa_grp_len + 25
		GroupBox 10, y_pos, 440, msa_grp_len, "MSA"
		y_pos = y_pos + 10
		Text 20, y_pos, 425, 10, "Denial Reason: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_details_exists = False Then
			y_pos = y_pos + 10
			If TEMP_VAR_cash_family_or_adult = "Family" Then y_pos = y_pos + 10
		Else
			y_pos = y_pos + 10

			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_applicant_eligible = "FAILED" Then
				Text 20, y_pos, 425, 10, "The applicant is not MSA Eligibile"
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_application_withdrawn = "FAILED" Then
				Text 20, y_pos, 425, 10, "The application has been withdrawn."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_eligible_member = "FAILED" Then
				Text 20, y_pos, 425, 10, "There is no household member eligible for MSA."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_fail_file = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has not completed a report."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_gross_income = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has exceeded the Gross Income Limit."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_net_income = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has exceeded the Net Income Limit"
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_residence = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has does not have 30 days of MN residency."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_assets = "FAILED" Then
				Text 20, y_pos, 425, 10, "The houshold has assets that exceed the asset limit."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_retro_net_income = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has exceeded the Net Income Limit."
				y_pos = y_pos + 10
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif = "FAILED" Then
				Text 20, y_pos, 425, 10, "The household has not provided required verifications."
				y_pos = y_pos + 10
				verifs_missing = ""
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_acct = "FAILED" Then verifs_missing = verifs_missing & ", Bank Account"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_addr = "FAILED" Then verifs_missing = verifs_missing & ", Address"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_busi = "FAILED" Then verifs_missing = verifs_missing & ", Self Employment Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_cars = "FAILED" Then verifs_missing = verifs_missing & ", Vehicle"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_jobs = "FAILED" Then verifs_missing = verifs_missing & ", Job Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_lump = "FAILED" Then verifs_missing = verifs_missing & ", Lump Sum Income"
				' If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_pact = "FAILED" Then verifs_missing = verifs_missing & ", "
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_rbic = "FAILED" Then verifs_missing = verifs_missing & ", Roomer/Boarder Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_secu = "FAILED" Then verifs_missing = verifs_missing & ", Security Asset"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_spon = "FAILED" Then verifs_missing = verifs_missing & ", Sponsor Income or Assets"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_stin = "FAILED" Then verifs_missing = verifs_missing & ", Student Income"
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_unea = "FAILED" Then verifs_missing = verifs_missing & ", Unearned Income"
				If left(verifs_missing, 1) = "," Then verifs_missing = right(verifs_missing, len(verifs_missing)-2)
				Text 25, y_pos, 420, 10, "Verifications missing: " & verifs_missing
				y_pos = y_pos + 10
			End If

			If DENY_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
				Text 25, y_pos, 420, 10, "MSA Need Standard: $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_budg_need_standard
				y_pos = y_pos + 10
				Text 25, y_pos, 420, 10, "MSA Net Income: $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_budg_net_income
				y_pos = y_pos + 10
			End If

			If TEMP_VAR_cash_family_or_adult = "Family" Then y_pos = y_pos + 10
		End If
		If TEMP_VAR_cash_family_or_adult = "Adult" Then
			Text 25, y_pos, 250, 10, "Explain the details of the reason for MSA denial:"
			y_pos = y_pos + 10
			EditBox 25, y_pos, 420, 15, TEMP_VAR_deny_msa_elig_explanation
			y_pos = y_pos + 20
		End If

		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_details_exists = False Then ga_grp_len = 25
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_details_exists = True Then
			ga_grp_len = 50
		End If
		If TEMP_VAR_cash_family_or_adult = "Adult" Then ga_grp_len = ga_grp_len + 25
		GroupBox 10, y_pos, 440, ga_grp_len, "GA"
		y_pos = y_pos + 10
		Text 20, y_pos, 425, 10, "Denial Reason: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_details_exists = False Then
			y_pos = y_pos + 10
			If TEMP_VAR_cash_family_or_adult = "Family" Then y_pos = y_pos + 10
		Else
			y_pos = y_pos + 10
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Net Income" Then Text 25, y_pos, 250, 10, "Explain Details of Case Income and Income Limits."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Verification" Then Text 25, y_pos, 250, 10, "Explain Verifications not Received."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Non Cooperation" Then Text 25, y_pos, 250, 10, "Detail the Non-Cooperation Information."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Other Benefits" Then Text 25, y_pos, 250, 10, "Detail the Other Benefits that Cause Ineligibility."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Assets" Then Text 25, y_pos, 250, 10, "Detail the Assets Information."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Transfer of Resource" Then Text 25, y_pos, 250, 10, "Explain the Transfer."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Disqualify" Then Text 25, y_pos, 250, 10, "Detail the Information about the Disqualification."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Fail to File" Then Text 25, y_pos, 250, 10, "Explain the Report that was Incomplete."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Eligible Other Benefits" Then Text 25, y_pos, 250, 10, "Detail the Other Benefits the Household is Eligible For."
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Lump Sum" Then Text 25, y_pos, 250, 10, "Detail the Lump Sum Income."

			y_pos = y_pos + 10
		End If

		If TEMP_VAR_cash_family_or_adult = "Adult" Then
			Text 25, y_pos, 250, 10, "Explain the details of the reason for GA denial:"
			y_pos = y_pos + 10
			EditBox 25, y_pos, 420, 15, TEMP_VAR_deny_ga_elig_explanation
			y_pos = y_pos + 20
		End If


		If DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True Then
			Text 10, y_pos, 300, 10, "The denial was due to verifications not recieved. Detail the verification request."
			y_pos = y_pos + 15

			Text 15, y_pos, 165, 10, "What is the date the verification request was sent? "
			Editbox 180, y_pos - 5, 50, 15, DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected)
			Text 235, y_pos, 150, 10, "(due date is 10 days from this request date)"
		Else
			y_pos = y_pos + 10
			Text 15, y_pos, 185, 10, "If a verification request was sent, what date was it sent? "
			Editbox 200, y_pos - 5, 50, 15, DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected)
			Text 255, y_pos, 150, 10, "(due date is 10 days from this request date)"
		End If
		y_pos = y_pos + 20
		Text 15, y_pos, 50, 10, "Verifs Detail:"
		Editbox 65, y_pos-5, 475, 15, DENY_UNIQUE_APPROVALS(verif_request_details, approval_selected)
		y_pos = y_pos + 15
		If STAT_INFORMATION(month_ind).stat_prog_cash_I_status = "DENY" Then
			Text 460, 10, 75, 10, "   Application Date: "
			Text 460, 20, 75, 10, "      " & STAT_INFORMATION(month_ind).stat_prog_cash_I_appl_date
			GroupBox 460, 30, 85, 145, "DENY Approvals"
			y_pos_side = 45
		ElseIf STAT_INFORMATION(month_ind).stat_prog_cash_II_status = "DENY" Then
			Text 460, 10, 75, 10, "   Application Date: "
			Text 460, 20, 75, 10, "      " & STAT_INFORMATION(month_ind).stat_prog_cash_II_appl_date
			GroupBox 460, 30, 85, 145, "DENY Approvals"
			y_pos_side = 45
		Else
			GroupBox 460, 10, 85, 165, "DENY Approvals"
			y_pos_side = 25
		End If

		Text 10, 370, 175, 10, "Confirm you have reviewed the approval for accuracy:"
		DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - approval is Accurate"+chr(9)+"No - do not CASE/NOTE this information", DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn
		for each_app = 0 to UBound(DENY_UNIQUE_APPROVALS, 2)
			If DENY_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = DENY_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF DENY_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = DENY_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
			Else
				month_display = DENY_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & DENY_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			' If each_app = approval_selected Then display_detail = month_display
			If each_app = approval_selected Then
				Text 470, y_pos_side+2, 75, 13, month_display
			Else
				PushButton 465, y_pos_side, 75, 13, month_display, DENY_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			y_pos_side = y_pos_side + 15
		next

		Text 10, 10, 180, 10, "This case is not eligible for any CASH Program."
		Text 175, 10, 50, 10, "Case Type:"
		DropListBox 215, 5, 50, 15, "Family"+chr(9)+"Adult", TEMP_VAR_cash_family_or_adult
		PushButton 275, 10, 50, 10, "Reload", reload_btn
		PushButton 400, 10, 50, 10, "View ELIG", nav_stat_elig_btn
		PushButton 465, 135, 75, 20, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 155, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

		GroupBox 5, y_pos, 540, income_box_len, "Income"
		y_pos = y_pos + 15

		Text 10, y_pos, 155, 10, "GROSS EARNED Income: "'' & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income
		Text 300, y_pos, 155, 10, "GROSS UNEARNED Income: "'' & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_net_earned_income

		y_pos = y_pos + 10
		y_pos_2 = y_pos
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_one_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_two_job_ended(each_memb) = False Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_two_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_three_job_ended(each_memb) = False Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_three_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_four_job_ended(each_memb) = False Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_four_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_five_job_ended(each_memb) = False Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb) & " - Gross Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_five_main_pay_freq(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_busi_one_inc_end_date(each_memb) = "" Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_busi_two_inc_end_date(each_memb) = "" Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_busi_three_inc_end_date(each_memb) = "" Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_one_inc_end_date(each_memb) = "" Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_two_inc_end_date(each_memb) = "" Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_three_inc_end_date(each_memb) = "" Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_four_inc_end_date(each_memb) = "" Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_five_inc_end_date(each_memb) = "" Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
		Next
	EndDialog
end function

function define_grh_elig_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "HS/GRH Approval Packages"
	  ButtonGroup ButtonPressed

		GroupBox 460, 10, 85, 105, "HS/GRH Approvals"
		If GRH_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or GRH_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
			Text 10, 350, 550, 10, "NOTES: " & GRH_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & GRH_UNIQUE_APPROVALS(changes_for_note, approval_selected)
		End If

		detail_grp_len = 10
		grp_y_pos = 350
		y_pos = 360
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_source_of_info = "FIAT" Then
			y_pos = y_pos-20
			grp_y_pos = grp_y_pos-20

			Text 15, y_pos+5, 85, 10, "GRH FIATed - Reason:"
			EditBox 100, y_pos, 440, 15, GRH_UNIQUE_APPROVALS(fiat_reason, approval_selected)
			y_pos = y_pos + 20
			detail_grp_len = detail_grp_len + 20
		End If

		If detail_grp_len <> 10 Then
			GroupBox 10, grp_y_pos, 540, detail_grp_len, "Approval Explanations"
		End If
		Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
		DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - approval is Accurate"+chr(9)+"No - do not CASE/NOTE this information", GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

		If GRH_UNIQUE_APPROVALS(last_mo_const, approval_selected) = "" Then
			month_display = GRH_UNIQUE_APPROVALS(first_mo_const, approval_selected)
		ElseIF GRH_UNIQUE_APPROVALS(last_mo_const, approval_selected) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
			month_display = GRH_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - Ongoing"
		Else
			month_display = GRH_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - " & GRH_UNIQUE_APPROVALS(last_mo_const, approval_selected)
		End if
		Text 15, 22, 430, 10, "*-*-*-* Resident: MEMB " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_ref_numb & " - " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_full_name & " is " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result & " for Housing Support (GRH) for " & month_display & " *-*-*-*"

		y_pos = 10
		If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "SSI" Then budget_grp_bx_len = 100
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "MFIP" Then budget_grp_bx_len = 85
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Aged" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Adult" Then budget_grp_bx_len = 120
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" Then budget_grp_bx_len = 130
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Residential Treatment" Then budget_grp_bx_len = 100

			GroupBox 5, y_pos, 445, budget_grp_bx_len, "Budget Detail - Budget Type: " &  GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info
			y_pos = y_pos + 15
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info <> "Residential Treatment" Then
				Text 15, y_pos+10, 150, 10, "GROSS INCOME"
				Text 225, y_pos+10, 150, 10, "DEDUCTIONS"
			End If
			y_pos = y_pos + 20

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "SSI" Then
				Text 20, y_pos, 185, 10, "SSI Standard (FBR) .  .  . + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_SSI_standard_fbr
				Text 20, y_pos+10, 185, 10, "Other PA Grant .  .  .  .  .  + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_other_countable_PA_grant

				Text 15, y_pos+20, 150, 10, "COUNTABLE INCOME"
				Text 20, y_pos+30, 185, 10, "Total Deductions  .  .  .   -  $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_deductions
				Text 20, y_pos+40, 185, 10, "Supp. Hsg Disregard   .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard
				If GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_needed, approval_selected) = True Then Text 145, y_pos+40, 75, 10, "*** WCOM to be sent"
				Text 20, y_pos+50, 185, 10, "Counted Income .  .  .  .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income

				Text 230, y_pos, 185, 10, "PASS Disregard .  .  .  .  .  . - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_PASS_disregard
				Text 230, y_pos+10, 185, 10, "Personal Needs .  .  .  .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_personal_needs
				Text 230, y_pos+20, 185, 10, "Prior Income Reduction .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_prior_inc_reduce
				Text 230, y_pos+30, 185, 10, "Inc Unavail 1st Month .  .  . - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_inc_unavail_1st_month
			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "MFIP" Then
				Text 20, y_pos, 185, 10, "MFIP Standard for One .  .  .  + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_MFIP_standard_for_one

				Text 15, y_pos+15, 150, 10, "COUNTABLE INCOME"
				Text 20, y_pos+25, 185, 10, "Total Deductions  .  .  .   -  $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_deductions
				Text 20, y_pos+35, 185, 10, "Counted Income .  .  .  .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income

				Text 230, y_pos, 185, 10, "Personal Needs .  .  .  .  .  .  .  .  .- $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_personal_needs
				Text 230, y_pos+10, 185, 10, "Prior Income Reduction .  .  .  .  . - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_prior_inc_reduce
				Text 230, y_pos+20, 185, 10, "Inc Unavail 1st Month .  .  .  .  .  .- $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_inc_unavail_1st_month
				y_pos = y_pos + 15
			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Aged" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Adult" Then
				Text 20, y_pos, 185, 10, "RSDI .  .  .  .  .  .  .  .   + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_RSDI_income
				Text 20, y_pos+10, 185, 10, "Other Unearned  .  .  . + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_other_unearned_income
				Text 20, y_pos+20, 185, 10, "Earned  .  .  .  .  .  .  .  .+ $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income
				Text 20, y_pos+30, 185, 10, "Total Income  .  .  .  .  .= $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_income

				Text 15, y_pos+40, 150, 10, "COUNTABLE INCOME"
				Text 20, y_pos+50, 185, 10, "Total Deductions  .  .  .   -  $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_deductions
				Text 20, y_pos+60, 185, 10, "Supp. Hsg Disregard   .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard
				If GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_needed, approval_selected) = True Then Text 145, y_pos+60, 75, 10, "*** WCOM to be sent"
				Text 20, y_pos+70, 185, 10, "Counted Income .  .  .  .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income

				ded_y_pos = 45
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" Then
					Text 230, ded_y_pos, 185, 10, "Student EI Disregard .  .  .  .  .  . - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_student_EI_disregard
					ded_y_pos = ded_y_pos + 10
				End If
				Text 230, ded_y_pos, 185, 10, "Stdrd EI Disregard .  .  .  .  .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_standard_EI_disregard
				ded_y_pos = ded_y_pos + 10
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" Then
					Text 230, ded_y_pos, 185, 10, "Impairment Work Expense .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_impairment_work_expense
					ded_y_pos = ded_y_pos + 10
				End If
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Adult" Then
					Text 230, ded_y_pos, 185, 10, "Earned Inc Subtotal  .  .  .  .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income_subtotal
					ded_y_pos = ded_y_pos + 10
				End If
				Text 230, ded_y_pos, 185, 10, "Earned Inc Disregard 50% .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income_50_perc_disregard
				ded_y_pos = ded_y_pos + 10
				Text 230, ded_y_pos, 185, 10, "Personal Needs .  .  .  .  .  .  .  .  .- $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_personal_needs
				ded_y_pos = ded_y_pos + 10
				Text 230, ded_y_pos, 185, 10, "Child Support Expense .  .  .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_child_support_expense
				ded_y_pos = ded_y_pos + 10
				Text 230, ded_y_pos, 185, 10, "Child Unmet Need .  .  .  .  .  .  .   - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_child_unmet_need
				ded_y_pos = ded_y_pos + 10
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Aged" Then
					Text 230, ded_y_pos, 185, 10, "EW Spousal Allocation .  .  .  .  .  - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_EW_spousal_allocation
					ded_y_pos = ded_y_pos + 10
				End If
				Text 230, ded_y_pos, 185, 10, "Prior Income Reduction .  .  .  .  . - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_prior_inc_reduce
				ded_y_pos = ded_y_pos + 10
				Text 230, ded_y_pos, 185, 10, "Inc Unavail 1st Month .  .  .  .  .  .- $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_inc_unavail_1st_month
				ded_y_pos = ded_y_pos + 10

			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Residential Treatment" Then
				y_pos = y_pos - 10
				Text 20, y_pos, 400, 10, "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
				Text 20, y_pos+10, 400, 10, "                                                  NO PERSON BUDGET FOR RESIDENTAL TREATMENT ELIG TYPE"
				Text 20, y_pos+20, 400, 10, "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
				Text 15, y_pos+35, 150, 10, "GROSS INCOME"
				Text 20, y_pos+45, 185, 10, "Total Income .  .  .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_income

				Text 225, y_pos+35, 150, 10, "COUNTABLE INCOME"
				Text 230, y_pos+45, 185, 10, "Total Deductions  .  .  .   -  $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_deductions
				Text 230, y_pos+55, 185, 10, "Counted Income .  .  .  .  = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income
			End if
			y_pos = y_pos + budget_grp_bx_len - 30
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Residential Treatment" Then y_pos = y_pos + 10
		Else
			'QUESTION - does this ever come up when ELIG?'
		End If
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "INELIGIBLE" Then
			inelig_grp_box = 85
			If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then inelig_grp_box = 60
			GroupBox 5, y_pos, 445, inelig_grp_box, "Case Test Detail - HS/GRH INELIGIBLE"
			If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then y_pos =y_pos + 30
			If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then y_pos = y_pos + 15
			Text 15, y_pos, 150, 10, "APPL Withdrawn/Clt Req:     " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_application_withdrawn
			Text 15, y_pos+10, 150, 10, "PBEN Cooperation:                " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_pben_coop
			Text 15, y_pos+20, 150, 10, "Elig thru other Pgm:                " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_elig_thru_other_program
			Text 15, y_pos+30, 150, 10, "Fail to File:                              " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file

			Text 175, y_pos, 150, 10, "Placement:                 " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_placement
			Text 175, y_pos+10, 150, 10, "State Residence:       " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_state_residence
			Text 175, y_pos+20, 150, 10, "Asset:                         " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_assets
			Text 175, y_pos+30, 150, 10, "Death of Applicant:    " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_death_of_applicant

			Text 310, y_pos, 130, 10, "ELIG Type:         " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_elig_type
			Text 310, y_pos+10, 130, 10, "Income:              " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_income
			Text 310, y_pos+20, 130, 10, "Setting:               " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_setting
			Text 310, y_pos+30, 130, 10, "Verification:         " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif

			If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then
				inelig_det_grp_y_pos = y_pos + 60
				y_pos = y_pos + 75
			Else
				inelig_det_grp_y_pos = y_pos + 50
				y_pos = y_pos + 60
			End If

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file = "FAILED" or GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_assets = "FAILED" or GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif = "FAILED" Then
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file = "FAILED" Then
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file_sr = "FAILED" Then
						Text 15, y_pos, 165, 10, "FAILED - SIX MONTH REPORT Incomplete."
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file_er = "FAILED" Then
						Text 15, y_pos, 165, 10, "FAILED - REVIEW Incomplete."
						y_pos = y_pos + 10
					End If
				End If

				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_assets = "FAILED" Then
					Text 15, y_pos, 250, 10, "This case has exceeded the Asset Limit for Housing Support (GRH)"
					y_pos = y_pos + 10
					Text 20, y_pos, 165, 10, "Asset Total: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_asset_total
					y_pos = y_pos + 10
					Text 20, y_pos, 165, 10, "Asset Limit: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_asset_limit
					y_pos = y_pos + 10
				End If

				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif = "FAILED" Then
					Text 15, y_pos, 250, 10, "Verification(s) not received and required for Housing Support (GRH):"
					y_pos = y_pos + 10
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_ACCT = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Bank Acccount Verification - ACCT"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_BUSI = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Self Employment Income Verification - BUSI"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_CARS = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Vehicle Verification - CARS"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_DISA = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Disability Verification - DISA"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_JOBS = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Earned Income Verification - JOBS"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_LUMP = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Lump Sum Verification - LUMP"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_MEMB_id = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Resident ID - MEMB"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_MEMB_dob = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Resident Date of Birth - MEMB"
						y_pos = y_pos + 10
					End If

					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_PACT = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Close/Deny - PACT"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_PBEN = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Potential Benefits APPL - PBEN"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_RBIC = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Room/Boarder Income Verification - RBIC"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_SECU = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Securities Verification - SECU"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_STIN = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Student Income Verification - STIN"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_UNEA = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Unearned Income Verification - UNEA"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_TRTX_housing_instability = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - Housing Instability Verification - TRTX"
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_TRTX_psn_rate_2 = "FAILED" Then
						Text 20, y_pos, 165, 10, "FAILED - PSN Rate 2 - TRTX"
						y_pos = y_pos + 10
					End If

					Text 15, y_pos+5, 165, 10, "What is the date the verification request was sent? "
					Editbox 180, y_pos, 50, 15, GRH_UNIQUE_APPROVALS(verif_request_date, approval_selected)
					Text 235, y_pos+5, 150, 10, "(due date is 10 days from this request date)"
					PushButton 370, y_pos, 15, 15, "!", verif_tips_and_tricks_btn
					y_pos = y_pos + 20

					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_PACT = "FAILED" Then
						Text 15, y_pos, 120, 10, "List PACT reason(s) for ineligibility: "
						Editbox 130, y_pos-5, 310, 15, GRH_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)
						y_pos = y_pos + 10
						Text 130, y_pos, 300, 10, "Phrase this for residents as this detail will be added to the WCOM."
						y_pos = y_pos + 10
					End If
				End If

			Else
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_death_of_applicant = "FAILED" Then
					Text 15, y_pos, 300, 20, "The applicant for Housing Support (GRH) had died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & ") and no eligibility exists."
					y_pos = y_pos + 10
				ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_state_residence = "FAILED" Then
					Text 15, y_pos, 350, 20, "The applicant for Housing Support (GRH) does not meet state residency requirement and no eligibility exists."
					y_pos = y_pos + 10
				ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_income = "FAILED" Then
					Text 15, y_pos, 400, 20, "The applicant is ineligible for Housing Support (GRH) because their income exceeds the limit. Counted Income: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income
					y_pos = y_pos + 10
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_one <> "" Then
						Text 20, y_pos, 400, 20, "Facility: " & GRH_ELIG_APPROVALS(elig_ind).grh_vendor_one_name & " (Room/Board/DOC) Cost: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_room_board_doc_one & "  --  Client Obligation is $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_client_obligation_one
						y_pos = y_pos + 10
					End If
					If GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_two <> "" Then
						Text 20, y_pos, 400, 20, "Facility: " & GRH_ELIG_APPROVALS(elig_ind).grh_vendor_two_name & " (Room/Board/DOC) Cost: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_room_board_doc_two & "  --  Client Obligation is $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_client_obligation_two
						y_pos = y_pos + 10
					End If

				Else
					Text 15, y_pos, 310, 20, "This case is ineligible because it hasn't met the requirements for Housing Support (GRH) Eligibility. The case tests above show what requirements have not been met."
					y_pos = y_pos + 20
				End If
			End if
			Text 15, y_pos, 150, 10, "Explain details of reason for denial:"
			EditBox 15, y_pos+10, 430, 15, GRH_UNIQUE_APPROVALS(inelig_details_notes, approval_selected)
			y_pos = y_pos + 30

			GroupBox 5, inelig_det_grp_y_pos, 445, y_pos-inelig_det_grp_y_pos+5, "Ineligible Details"
			y_pos = y_pos + 10

		End If

		If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then PushButton 390, 80, 50, 10, "View ELIG", nav_stat_elig_btn
		If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then PushButton 395, budget_grp_bx_len-5, 50, 10, "View ELIG", nav_stat_elig_btn
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "ELIGIBLE" AND (GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_one <> "" or GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_two <> "") Then
			GroupBox 5, y_pos, 540, 90, "HS/GRH Vendor Payments"
			y_pos = y_pos+10

			GroupBox 10, y_pos, 260, 75, "VENDOR ONE:   " & GRH_ELIG_APPROVALS(elig_ind).grh_vendor_one_name
			Text 15, y_pos+10, 150, 10, " Vendor Number: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_vendor_number_one
			Text 15, y_pos+20, 150, 10, "        Total Days: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_one
			Text 15, y_pos+30, 150, 10, "          Rate Limit: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_vnd2_rate_limit_one
			Text 15, y_pos+40, 150, 10, "    Rm/Brd/DOC: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_room_board_doc_one
			Text 15, y_pos+50, 150, 10, "      Income Test: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_income_test_one
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_amount_already_issued_one <> "" Then Text 15, y_pos+60, 100, 10, "(Amt Already Issued) " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_amount_already_issued_one
			Text 155, y_pos+10, 100, 10, "PAYMENT: "
			Text 155, y_pos+20, 100, 10, "GRH (State) AMT: + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_grh_state_amount_one
			Text 155, y_pos+30, 100, 10, "     County Liability: + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_county_liability_one
			Text 155, y_pos+40, 100, 10, "   Counted Income: - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income
			Text 155, y_pos+50, 100, 10, "      Total Payment: = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_total_one
			Text 155, y_pos+60, 110, 10, "    Client Obligation:   $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_client_obligation_one

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_two <> "" Then
				GroupBox 280, y_pos, 260, 75, "VENDOR TWO:   " & GRH_ELIG_APPROVALS(elig_ind).grh_vendor_two_name
				Text 285, y_pos+10, 150, 10, " Vendor Number: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_vendor_number_two
				Text 285, y_pos+20, 150, 10, "        Total Days: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_two
				Text 285, y_pos+30, 150, 10, "          Rate Limit: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_vnd2_rate_limit_two
				Text 285, y_pos+40, 150, 10, "    Rm/Brd/DOC: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_room_board_doc_two
				Text 285, y_pos+50, 150, 10, "      Income Test: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_income_test_two
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_amount_already_issued_two <> "" Then Text 285, y_pos+60, 100, 10, "(Amt Already Issued  $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_amount_already_issued_two & ")"
				Text 425, y_pos+10, 100, 10, "PAYMENT: "
				Text 425, y_pos+20, 100, 10, "GRH (State) AMT: + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_grh_state_amount_two
				Text 425, y_pos+30, 100, 10, "     County Liability: + $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_county_liability_two
				Text 425, y_pos+40, 100, 10, "   Counted Income: - $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income
				Text 425, y_pos+50, 100, 10, "      Total Payment: = $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_payment_total_two
				Text 425, y_pos+60, 110, 10, "    Client Obligation:   $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_client_obligation_two

			End If
			y_pos = y_pos +85
		End If

		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "ELIGIBLE" AND GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_one = "" AND GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_two = "" Then
			GroupBox 5, y_pos, 540, 30, "HS/GRH Vendor Payments"
			y_pos = y_pos+15
			Text 15, y_pos, 250, 10, "********* NO VENDOR INFORMATION FOUND IN ELIG *********"
			y_pos = y_pos+20
		End if

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn

		apprvs_y_pos = 25
		for each_app = 0 to UBound(GRH_UNIQUE_APPROVALS, 2)
			If GRH_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = GRH_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF GRH_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = GRH_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
			Else
				month_display = GRH_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & GRH_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			If each_app = approval_selected Then
				Text 470, apprvs_y_pos+2, 70, 13, month_display
			Else
				PushButton 465, apprvs_y_pos, 75, 13, month_display, GRH_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			apprvs_y_pos = apprvs_y_pos + 15
		next
		PushButton 465, 80, 75, 15, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 100, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

		GroupBox 5, y_pos, 540, income_box_len, "Income"
		y_pos = y_pos + 15

		Text 10, y_pos, 155, 10, "GROSS EARNED Income: "'' & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income
		Text 300, y_pos, 155, 10, "GROSS UNEARNED Income: "'' & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_net_earned_income

		y_pos = y_pos + 10
		y_pos_2 = y_pos
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					y_pos = y_pos - 10
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					y_pos = y_pos - 10
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					y_pos = y_pos - 10
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					y_pos = y_pos - 10
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					y_pos = y_pos - 10
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_busi_one_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_busi_two_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_busi_three_counted_for_grh(each_memb) = True Then
				Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
				If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
					Text 40, y_pos+10, 200, 10, "Verification NOT Received."
				Else
					Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
				End If
				y_pos = y_pos + 20
			End If

			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_one_counted_for_grh(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_two_counted_for_grh(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_three_counted_for_grh(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_four_counted_for_grh(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_unea_five_counted_for_grh(each_memb) = True Then
				Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
				y_pos_2 = y_pos_2 + 10
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					Text 330, y_pos_2, 200, 10, "Verification NOT Received."
					y_pos_2 = y_pos_2 + 10
				End If
			End If

		Next
		If ei_count = 0 Then
			Text 15, y_pos, 275, 10, "No EARNED Income counted for Housing Support (GRH)."
			y_pos = y_pos + 10
		End If
		If unea_count = 0 Then
			Text 305, y_pos_2, 235, 10, "No UNEARNED Income counted for Housing Support (GRH)."
			y_pos_2 = y_pos_2 + 10
		End if
	EndDialog
end function

function define_hc_elig_dialog()
	Dialog1 = ""
	faci_comm_form_needed = False
	BeginDialog Dialog1, 0, 0, 555, 385, "HC Approval Packages"

	  ButtonGroup ButtonPressed

		GroupBox 455, 10, 95, 110, "HC Approvals"
		If HC_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or HC_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
			Text 10, 350, 550, 10, "NOTES: " & HC_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & HC_UNIQUE_APPROVALS(changes_for_note, approval_selected)
		End If
		Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
		DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - approval is Accurate"+chr(9)+"No - do not CASE/NOTE this information", HC_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

		y_pos = 10
		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "MA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "IMD" Then
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) = "" Then GroupBox 15, y_pos+10, 130, 50, "Eligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected)
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) <> "" Then GroupBox 15, y_pos+10, 130, 50, "Eligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - " & HC_UNIQUE_APPROVALS(last_mo_const, approval_selected)

				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "L" Then faci_comm_form_needed = True

				dp_option_selected = False
				If STAT_INFORMATION(month_ind).no_stat_data = False Then
					For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
						If STAT_INFORMATION(month_ind).stat_hcmi_spdwn_option(each_memb) = "DP" Then dp_option_selected = True
						If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_spdn_option(memb_ind) = "DP" Then dp_option_selected = True
					Next
				End If
				If dp_option_selected = True Then
					Text 265, y_pos+25, 75, 10, "Desig Prov:"
					EditBox 300, y_pos+20, 100, 15, HC_UNIQUE_APPROVALS(designated_provider_info, approval_selected)
				End If

				Text 25, y_pos+25, 115, 10, "Elig Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_basis(memb_ind)
			    If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard(memb_ind) <> "_" Then
					Text 25, y_pos+35, 115, 10, "Standard: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard_percent(memb_ind) & "% FPG"
				    Text 30, y_pos+45, 95, 10, "Method: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind)
				Else
					Text 30, y_pos+35, 95, 10, "Method: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind)
				End If


				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver(memb_ind) <> "_" Then
					GroupBox 15, y_pos+65, 130, 30, "Waiver Approved"
					Text 20, y_pos+80, 120, 10, "Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver_detail(memb_ind)
					' x_pos = x_pos + 140
				End If
				x_pos = 155

				If HC_ELIG_APPROVALS(elig_ind).LTC_spenddown_exists(memb_ind) = True and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" Then
					If dp_option_selected = False Then GroupBox x_pos, y_pos+10, 150, 50, "LTC Spenddown Exists"
					If dp_option_selected = True Then GroupBox x_pos, y_pos+10, 275, 50, "LTC Spenddown Exists"
					Text x_pos+5, y_pos+25, 140, 10, "Spenddown Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ltc_spdn_type_info(memb_ind)
					Text x_pos+5, y_pos+35, 140, 10, "Method: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ltc_spdn_method_info(memb_ind)
					Text x_pos+5, y_pos+45, 140, 10, "Spenddown Amount $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ltc_spdn_amount(memb_ind)
				ElseIf HC_ELIG_APPROVALS(elig_ind).EW_spenddown_exists(memb_ind) = True and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_obligation(hc_prog_count) <> "0.00" Then
					If dp_option_selected = False Then GroupBox x_pos, y_pos+10, 125, 50, "EW Waiver Obligation Exists"
					If dp_option_selected = True Then GroupBox x_pos, y_pos+10, 250, 50, "EW Waiver Obligation Exists"
					Text x_pos+5, y_pos+25, 115, 10, "Spenddown Type: "
					Text x_pos+5, y_pos+35, 110, 10, HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_type_info(memb_ind)
					Text x_pos+5, y_pos+45, 115, 10, "Waiver Obligation $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_obligation(memb_ind)

				ElseIf HC_ELIG_APPROVALS(elig_ind).community_spenddown_exists(memb_ind) = True and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" Then
					If dp_option_selected = False Then GroupBox x_pos, y_pos+10, 125, 80, "Spenddown Exists"
					If dp_option_selected = True Then GroupBox x_pos, y_pos+10, 250, 80, "Spenddown Exists"
					Text x_pos+5, y_pos+25, 75, 10, "Spenddown Type: "
					Text x_pos+5, y_pos+35, 110, 10, HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_mobl_type(memb_ind)
					Text x_pos+5, y_pos+45, 115, 10, "Spenddown Amount $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_spenddown(memb_ind)
					' y_pos = y_pos + 35
				End If
				'REMEDIAL CARE UPDATES
				If HC_ELIG_APPROVALS(elig_ind).community_spenddown_exists(memb_ind) = True and trim(HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_counted_bills(memb_ind)) <> "0.00" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" Then
					Text x_pos+5, y_pos+55, 115, 10, "Counted Bills: $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_counted_bills(memb_ind)
					Text x_pos+5, y_pos+65, 115, 10, "Recipient Amount: $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_recipient_amount(memb_ind)
					Text x_pos+5, y_pos+75, 115, 10, "Spenddown Balance: $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_balance(memb_ind)
					' Text 300, y_pos+65, 120, 10, "Satisfaction Date: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_satisfaction_date(memb_ind)
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" Then
					GroupBox 290, y_pos+10, 155, 50, "Emergency Medical Assistance - EMA"
					If STAT_INFORMATION(month_ind).no_stat_data = True Then Text 295, y_pos+25, 145, 10, "HC Retro Month Request"
					If STAT_INFORMATION(month_ind).no_stat_data = False Then
						For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
							If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
								' Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
								Text 295, y_pos+25, 145, 10, "Emergency: " & STAT_INFORMATION(month_ind).stat_emma_med_emer_info(each_memb)
								Text 295, y_pos+35, 145, 10, "Health Consequence: " & STAT_INFORMATION(month_ind).stat_emma_health_cons_info(each_memb)
								If STAT_INFORMATION(month_ind).stat_emma_end_date(each_memb) = "" Then Text 295, y_pos+45, 145, 10, "Begin Date: " & STAT_INFORMATION(month_ind).stat_emma_begin_date(each_memb)
								If STAT_INFORMATION(month_ind).stat_emma_end_date(each_memb) <> "" Then Text 295, y_pos+45, 145, 10, "Begin Date: " & STAT_INFORMATION(month_ind).stat_emma_begin_date(each_memb) & "   - End Date: " & STAT_INFORMATION(month_ind).stat_emma_end_date(each_memb)
							End If
						Next
					End If
				End If
				y_pos = y_pos + 65
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver(memb_ind) <> "_" OR (HC_ELIG_APPROVALS(elig_ind).community_spenddown_exists(memb_ind) = True and trim(HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_counted_bills(memb_ind)) <> "0.00" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP") Then y_pos = y_pos + 35

				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) = "DP" Then
					' GroupBox 15, y_pos+60, 130, 30, "MA - EPD"
					GroupBox 15, y_pos, 430, 40, "MA - EPD"
					Text 20, y_pos+15, 400, 10, "Income for Prem Calc x Premium Percentage = Sliding Fee Premium:   $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_counted_income_for_prem_calc(memb_ind) & " x " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_premium_percent(memb_ind) & " = $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_sliding_fee_premium(memb_ind)
					Text 20, y_pos+25, 400, 10, "Sliding Fee Premium + UI Obligation = Total Premium:                           $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_sliding_fee_premium(memb_ind) & " + $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_ui_obligation(memb_ind) & " = $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_premium(memb_ind)

					' Text 20, y_pos+15, 150, 10, "Income for Prem Calc .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_counted_income_for_prem_calc(memb_ind)
					' Text 20, y_pos+25, 150, 10, "Premium Percentage .  . (x) " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_premium_percent(memb_ind)
					' Text 20, y_pos+35, 150, 10, "Sliding Fee Premium .  . (=) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_sliding_fee_premium(memb_ind)
					' Text 20, y_pos+45, 150, 10, "UI Obligation .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_ui_obligation(memb_ind)
					Text 350, y_pos+25, 95, 10, "TOTAL PREMIUM $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_premium(memb_ind)
					y_pos = y_pos + 45
				End If
			End If

			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "INELIGIBLE" Then
				Text 20, y_pos+20, 125, 10, "Reason for Ineligibility: "
				add_to_y_pos = 35
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_absence(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is not in the home. -ABSENT"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assets(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & "  has exceeded the Asset Limit. -ASSETS"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is not a part of this household. -ASSISTANCE UNIT"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_citizenship(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not meet citizenship requirement. -CITIZENSHIP"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Not all cooperation requirements have been met. -COOPERATION"
					add_to_y_pos = add_to_y_pos + 10
					' EMReadScreen hc_prog_elig_test_coop_pben_cash(hc_prog_count), 			6, 10, 31
					' EMReadScreen hc_prog_elig_test_coop_pben_smrt(hc_prog_count), 			6, 11, 31
					' EMReadScreen hc_prog_elig_test_coop_pben(hc_prog_count), 				6, 10, 28
					' EMReadScreen hc_prog_elig_test_coop_fail_provide_info(hc_prog_count), 	6, 11, 28
					' EMReadScreen hc_prog_elig_test_coop_IEVS(hc_prog_count), 				6, 12, 28
					' EMReadScreen hc_prog_elig_test_coop_medical_support(hc_prog_count), 	6, 13, 28
					' EMReadScreen hc_prog_elig_test_coop_other_health_ins(hc_prog_count), 	6, 14, 28
					' EMReadScreen hc_prog_elig_test_coop_SSN(hc_prog_count), 				6, 15, 28
					' EMReadScreen hc_prog_elig_test_coop_third_party_liability(hc_prog_count), 6, 16, 28
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_correctional_faci(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is in a correctional facility. -CORRECT FACI"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind) = "FAILED" Then
					If STAT_INFORMATION(month_ind).no_stat_data = False Then
						For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
							If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
								Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " had died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(each_memb) & "). -DEATH"
								add_to_y_pos = add_to_y_pos + 10
							End If
						Next
					End If
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_elig_other_prog(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is eligible for another program. - ELIG OTHR PRGM"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Review/Report process has not been completed."
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_IMD(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is in an IMD. -IMD"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has exceeded the Income Limit. -INCOME"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_elig(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is Medicare Eligble. -MEDI ELIG"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_MNSure_system(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Health Care is being processed for MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " in MNSure. - MNSURE"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_Obligation_one_mo(memb_ind) = "FAILED" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_obligation_six_mo(memb_ind) = "FAILED"Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has not met the spenddown obligation. -OBLIGATION"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_other_health_ins(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has not complied with the requirements for Other Health Insurance. -OHI"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_parent(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not meet the Parent basis. - PARENT"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_residence(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "This case has not met MN Residency requirements. -RESIDENCE"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Not all VERIFICATIONS have been provided. -VERIFICATION"
					add_to_y_pos = add_to_y_pos + 10
					Text 20, y_pos+add_to_y_pos+5, 165, 10, "What is the date the verification request was sent? "
					Editbox 185, y_pos+add_to_y_pos, 50, 15, HC_UNIQUE_APPROVALS(verif_request_date, approval_selected)
					Text 240, y_pos+add_to_y_pos+5, 150, 10, "(due date is 10 days from this request date)"
					add_to_y_pos = add_to_y_pos + 15
					Text 20, y_pos+add_to_y_pos, 175, 10, "Detail the Verifications NOT Received and Needed:"
					EditBox 20, y_pos+add_to_y_pos+10, 420, 15, HC_UNIQUE_APPROVALS(verif_request_details, approval_selected)
					add_to_y_pos = add_to_y_pos + 25
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Request for Health Care has been withdrawn or requested closed. -WITHDRAWAL"
					add_to_y_pos = add_to_y_pos + 10
				End If
				add_to_y_pos = add_to_y_pos - 5
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) = "" Then GroupBox 15, y_pos+10, 430, add_to_y_pos, "Ineligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected)
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) <> "" Then GroupBox 15, y_pos+10, 430, add_to_y_pos, "Ineligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - " & HC_UNIQUE_APPROVALS(last_mo_const, approval_selected)
				y_pos = y_pos + add_to_y_pos

				Text 15, y_pos+15, 90, 10, "Absence .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_absence(memb_ind)
			    Text 15, y_pos+25, 90, 10, "Assets  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assets(memb_ind)
			    Text 15, y_pos+35, 90, 10, "Asst Unit Mbr .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind)
			    Text 15, y_pos+45, 90, 10, "Citizenship.  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_citizenship(memb_ind)
			    Text 15, y_pos+55, 90, 10, "Cooperation .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop(memb_ind)

				Text 125, y_pos+15, 90, 10, "Correct Faci .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_correctional_faci(memb_ind)
			    Text 125, y_pos+25, 90, 10, "Death .  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind)
			    Text 125, y_pos+35, 90, 10, "Elig othr Prgm  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_elig_other_prog(memb_ind)
			    Text 125, y_pos+45, 90, 10, "Fail to File .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind)
			    Text 125, y_pos+55, 90, 10, "IMD .  .  .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_IMD(memb_ind)

			    Text 235, y_pos+15, 100, 10, "Income - Bgt Pd . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind)
				Text 235, y_pos+25, 110, 10, "Mdeicare Elig . .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_elig(memb_ind)
			    Text 235, y_pos+35, 120, 10, "MNSure System . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_MNSure_system(memb_ind)
			    Text 235, y_pos+45, 130, 10, "Oblgn - 1 mo .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_Obligation_one_mo(memb_ind)
			    Text 235, y_pos+55, 140, 10, "Oblgn - 6 mo .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_obligation_six_mo(memb_ind)

				Text 340, y_pos+15, 100, 10, "Othr Health Ins .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_other_health_ins(memb_ind)
			    Text 340, y_pos+25, 100, 10, "Parent .  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_parent(memb_ind)
			    Text 340, y_pos+35, 100, 10, "Residence .  .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_residence(memb_ind)
			    Text 340, y_pos+45, 100, 10, "Verification .  .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind)
			    Text 340, y_pos+55, 100, 10, "Withdraw .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind)

				y_pos = y_pos + 70
			End If
			If HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
				If y_pos = 65 Then y_pos = 75

				bugd_grp_box_y_pos = y_pos
				If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) <> "" Then
					Text 20, y_pos+10, 295, 10, "Income COUNTED from MEMBS: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_members_whose_income_counts_list(memb_ind)
					y_pos = y_pos + 15
					If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "ABUD" Then
						Text 20, y_pos+10, 135, 10, "Unearned Inc .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
						Text 20, y_pos+20, 135, 10, "Excld UNEA  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind) ''& "(-)"
						Text 20, y_pos+30, 135, 10, "UNEA Deduct  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind) ''& "(-)"
						Text 20, y_pos+75, 135, 10, "Net Unearned Inc  .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind)

						Text 175, y_pos+10, 135, 10, "Earned Inc .  .  .  .  .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind)
						Text 175, y_pos+20, 135, 10, "Excld Earned .  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind) ''& "(-)"
						Text 175, y_pos+30, 135, 10, "Wrk Exp Deduct .  .  .   (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_work_exp_deduction(memb_ind)
						Text 175, y_pos+40, 135, 10, "EI Disregard .  .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_disregard(memb_ind)
						Text 175, y_pos+50, 135, 10, "Dpdnt Care  .  .  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_dependent_care(memb_ind)
						Text 175, y_pos+60, 135, 10, "Earned Deduct  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind) ''& "(-)"
						Text 175, y_pos+75, 135, 10, "Net Earned Inc  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind)

						Text 315, y_pos+55, 135, 10, "CSES Deduct  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_child_sup_deduction(memb_ind)
						Text 315, y_pos+65, 135, 10, "Deemed Income .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_income(memb_ind)
						Text 315, y_pos+75, 135, 10, "Total Net Income .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
						Text 315, y_pos+85, 135, 10, "Income Standard .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind)

						y_pos = y_pos + 110
					ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "BBUD" Then
						Text 20, y_pos+10, 135, 10, "Unearned Inc .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
					    Text 20, y_pos+20, 135, 10, "Deemed UNEA .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind) ''& "(+)"
					    Text 20, y_pos+30, 135, 10, "Excld UNEA  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind) ''& "(-)"
					    Text 20, y_pos+40, 135, 10, "UNEA Deduct  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind) ''& "(-)"
					    Text 20, y_pos+55, 135, 10, "Net Unearned Inc  .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind)

					    Text 175, y_pos+10, 135, 10, "Earned Inc .  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind)
					    Text 175, y_pos+20, 135, 10, "Deemed Earned .  .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind)'' & "(+)"
					    Text 175, y_pos+30, 135, 10, "Excld Earned .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind) ''& "(-)"
					    Text 175, y_pos+40, 135, 10, "Earned Deduct  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind) ''& "(-)"
					    Text 175, y_pos+55, 135, 10, "Net Earned Inc  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind)

					    Text 315, y_pos+55, 135, 10, "Total Net Income .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
					    Text 315, y_pos+65, 135, 10, "Income Standard .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind)
						y_pos = y_pos + 90
					ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "CBUD" Then
						Text 20, y_pos+10, 135, 10, "Unearned Inc .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
						Text 20, y_pos+20, 135, 10, "Deemed UNEA .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind) ''& "(+)"
						Text 20, y_pos+30, 135, 10, "Excld UNEA  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind) ''& "(-)"
						Text 20, y_pos+45, 135, 10, "Net Unearned Inc  .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind)

						Text 175, y_pos+10, 135, 10, "Earned Inc .  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind)
						Text 175, y_pos+20, 135, 10, "Excld Earned .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind) ''& "(-)"
						Text 175, y_pos+45, 135, 10, "Net Earned Inc  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind)

						Text 315, y_pos+45, 135, 10, "Deemed Earned .  .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind)'' & "(+)"
						Text 315, y_pos+55, 135, 10, "Total Net Income .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
						Text 315, y_pos+65, 135, 10, "Income Standard .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind)
						y_pos = y_pos + 90
					ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "EBUD" Then
						Text 20, y_pos+10, 135, 10, "Unearned Inc .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
						Text 20, y_pos+20, 135, 10, "Deemed UNEA .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind) ''& "(+)"
						Text 20, y_pos+30, 135, 10, "Excld UNEA  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind) ''& "(-)"
						Text 20, y_pos+40, 135, 10, "UNEA Deduct  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind) ''& "(-)"
						Text 20, y_pos+55, 135, 10, "Net Unearned Inc  .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind)

						Text 175, y_pos+10, 135, 10, "Earned Inc .  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind)
						Text 175, y_pos+20, 135, 10, "Deemed Earned .  .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind)'' & "(+)"
						Text 175, y_pos+30, 135, 10, "Excld Earned .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind) ''& "(-)"
						Text 175, y_pos+40, 135, 10, "Earned Deduct  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind) ''& "(-)"
						Text 175, y_pos+55, 135, 10, "Net Earned Inc  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind)

						Text 315, y_pos+55, 135, 10, "Total Net Income .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
						Text 315, y_pos+65, 135, 10, "Income Standard .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind)
						y_pos = y_pos + 90
					ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "LBUD" Then
						Text 20, y_pos+10, 135, 10, "Gross Unearned Inc .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
						Text 20, y_pos+20, 135, 10, "Countable Earned Inc  .  .   $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_subtotal_countable_income(memb_ind)
						' Text 175, y_pos+55, 130, 10, "Net Earned Inc  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind)
						Text 20, y_pos+30, 135, 10, "VA Aid & Attend  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_va_aid_attendincome(memb_ind)
						Text 20, y_pos+40, 135, 10, "Tot Countable Inc  .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_countable_income(memb_ind)

						Text 175, y_pos+10, 135, 10, "LTC Exclsn  .  .  .  .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_LTC_exclusions(memb_ind)
						Text 175, y_pos+20, 135, 10, "Medicare Premium  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_medicare_premium(memb_ind)
						Text 175, y_pos+30, 135, 10, "Pers/Cloth Needs  .  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_person_clothing_needs(memb_ind)
						Text 175, y_pos+40, 135, 10, "Home Maint Allow  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_maint_needs_allowance(memb_ind)
						Text 175, y_pos+50, 135, 10, "Guard/Rep Payee Fee  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_guardian_rep_payee_fee(memb_ind)
						Text 175, y_pos+60, 135, 10, "Spousal Allocation  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_spousal_allocation(memb_ind)
						Text 175, y_pos+70, 135, 10, "Family Allocation  .  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_family_allocation(memb_ind)
						Text 175, y_pos+80, 135, 10, "Health Ins Prem  .  .  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_health_ins_premium(memb_ind)
						Text 175, y_pos+90, 135, 10, "Other Med Expense  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_medical_expense(memb_ind)
						Text 175, y_pos+100, 135, 10, "SSI 1611 Benefits  .  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_SSI_1611_benefit(memb_ind)
						Text 175, y_pos+110, 135, 10, "Other Deductions  .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_deductions(memb_ind)

						Text 315, y_pos+110, 135, 10, "Total Net Income .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
						Text 315, y_pos+120, 135, 10, "LTC Spenddown .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_LTC_spenddown(memb_ind)
						y_pos = y_pos + 145
					ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "SBUD" Then
						Text 20, y_pos+10, 135, 10, "Gross Unearned Inc .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
						Text 20, y_pos+20, 135, 10, "Countable Earned Inc  .  .   $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_countable_earned_income(memb_ind)
						' Text 175, y_pos+55, 130, 10, "Net Earned Inc  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_subtotal_countable_income(memb_ind)
						Text 20, y_pos+30, 135, 10, "VA Aid & Attend  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_va_aid_attendincome(memb_ind)
						Text 20, y_pos+40, 135, 10, "Tot Countable Inc  .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_countable_income(memb_ind)

						Text 175, y_pos+10, 135, 10, "LTC Exclsn  .  .  .  .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_LTC_exclusions(memb_ind)
						Text 175, y_pos+20, 135, 10, "Medicare Premium  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_medicare_premium(memb_ind)
						' Text 175, y_pos+30, 125, 10, "Pers/Cloth Needs  .  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_person_clothing_needs(memb_ind)
						Text 175, y_pos+40, 135, 10, "Home Maint Allow  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_maint_needs_allowance(memb_ind)
						Text 175, y_pos+50, 135, 10, "Guard/Rep Payee Fee  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_guardian_rep_payee_fee(memb_ind)
						Text 175, y_pos+60, 135, 10, "Spousal Allocation  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_spousal_allocation(memb_ind)
						Text 175, y_pos+70, 135, 10, "Family Allocation  .  .  .  .  .  (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_family_allocation(memb_ind)
						Text 175, y_pos+80, 135, 10, "Health Ins Prem  .  .  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_health_ins_premium(memb_ind)
						Text 175, y_pos+90, 135, 10, "Other Med Expense  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_medical_expense(memb_ind)
						Text 175, y_pos+100, 135, 10, "SSI 1611 Benefits  .  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_SSI_1611_benefit(memb_ind)
						Text 175, y_pos+110, 135, 10, "Other Deductions  .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_deductions(memb_ind)

						Text 315, y_pos+110, 135, 10, "Total Net Income .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
						Text 315, y_pos+120, 135, 10, "Waiver Obligation .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_waiver_obligation(memb_ind)
						y_pos = y_pos + 145

					End If
				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "X" Then
					Text 20, y_pos+15, 295, 10, "HC Eligibility has no budget calculation (Method X)."
					Text 20, y_pos+25, 295, 10, "Member has HC Eligibility tied to other program eligibility."
					y_pos = y_pos + 50
				End If

				GroupBox 15, bugd_grp_box_y_pos, 430, y_pos-bugd_grp_box_y_pos-10, "BUDGET DETAILS"
			Else
				y_pos = y_pos + 5
			End If
			'TODO - add details of ASSETS, COOP, FAIL TO FILE, OBLIGATION, VERIFICATION
			' grp_hgt = 0
			' If HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then grp_hgt = grp_hgt + 140
			' If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) = "DP" Then grp_hgt = grp_hgt + 55
			' If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "INELIGIBLE" Then grp_hgt = grp_hgt + 55
			GroupBox 10, 10, 440, y_pos-15, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_elig_full_name(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) & " for " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind)
			If faci_comm_form_needed = True Then
				HC_UNIQUE_APPROVALS(l_budg, approval_selected) = True
				Text 275, 10, 125, 10, "Facility Communication Form Sent Date:"		'script is no longer referencing a specific form as HC process is not documented and has diverged from DHS forms
				EditBox 400, 5, 45, 15, date_of_3050
			End If
			If STAT_INFORMATION(month_ind).no_stat_data = True Then Text 200, 10, 120, 10, "HC Retro Month Request"
		End If

		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "SLMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QI1" Then
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) = "" Then GroupBox 15, y_pos+10, 130, 40, "Eligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected)
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) <> "" Then GroupBox 15, y_pos+10, 130, 40, "Eligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - " & HC_UNIQUE_APPROVALS(last_mo_const, approval_selected)
				' Text 25, y_pos+25, 95, 10, "Elig Type: DQ - Disability"
				' Text 25, y_pos+35, 95, 10, "Standard: Q - 100% FPG"
				Text 25, y_pos+25, 115, 10, "Elig Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_basis(memb_ind)
			    Text 25, y_pos+35, 115, 10, "Standard: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard_percent(memb_ind) & "% FPG"
				y_pos = y_pos + 55
			End If

			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "INELIGIBLE" Then
				Text 20, y_pos+20, 125, 10, "Reason for Ineligibility: "
				add_to_y_pos = 35
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_absence(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is not in the home. -ABSENT"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_after_processing_month(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "This month is prior to the processing month (is a RETRO Month). -AFTER PRCSG MO"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assets(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & "  has exceeded the Asset Limit. -ASSETS"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is not a part of this household. -ASSISTANCE UNIT"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_basis_for_other_prog(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has a basis for another program. -BASIS OTHR PRGM"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_citizenship(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not meet citizenship requirement. -CITIZENSHIP"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Not all cooperation requirements have been met. -COOPERATION"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_correctional_faci(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is in a correctional facility. -CORRECT FACI"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If STAT_INFORMATION(month_ind).no_stat_data = False Then
					If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind) = "FAILED" Then
						For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
							If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
								Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " had died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(each_memb) & "). -DEATH"
								add_to_y_pos = add_to_y_pos + 10
							End If
						Next
					End If
				End If

				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Review/Report process has not been completed."
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has exceeded the Income Limit. -INCOME"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_part_a(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not have Medicare Part A. -MEDI PART A"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_residence(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "This case has not met MN Residency requirements. -RESIDENCE"
					add_to_y_pos = add_to_y_pos + 10
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Not all VERIFICATIONS have been provided. -VERIFICATION"
					add_to_y_pos = add_to_y_pos + 10
					Text 20, y_pos+add_to_y_pos+5, 165, 10, "What is the date the verification request was sent? "
					Editbox 185, y_pos+add_to_y_pos, 50, 15, HC_UNIQUE_APPROVALS(verif_request_date, approval_selected)
					Text 240, y_pos+add_to_y_pos+5, 150, 10, "(due date is 10 days from this request date)"
					add_to_y_pos = add_to_y_pos + 15
					Text 20, y_pos+add_to_y_pos, 175, 10, "Detail the Verifications NOT Received and Needed:"
					EditBox 20, y_pos+add_to_y_pos+10, 420, 15, HC_UNIQUE_APPROVALS(verif_request_details, approval_selected)
					add_to_y_pos = add_to_y_pos + 25
				End If
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind) = "FAILED" Then
					Text 20, y_pos+add_to_y_pos, 400, 10, "Request for Health Care has been withdrawn or requested closed. -WITHDRAWAL"
					add_to_y_pos = add_to_y_pos + 10
				End If



				add_to_y_pos = add_to_y_pos - 5
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) = "" Then GroupBox 15, y_pos+10, 430, add_to_y_pos, "Ineligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected)
				If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) <> "" Then GroupBox 15, y_pos+10, 430, add_to_y_pos, "Ineligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - " & HC_UNIQUE_APPROVALS(last_mo_const, approval_selected)
				y_pos = y_pos + add_to_y_pos

				Text 15, y_pos+15, 100, 10, "Absence .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_absence(memb_ind)
				Text 15, y_pos+25, 100, 10, "After Prcng Mo  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_after_processing_month(memb_ind)
				Text 15, y_pos+35, 100, 10, "Assets .  .  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assets(memb_ind)
				Text 15, y_pos+45, 100, 10, "Asst Unit Mbr .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind)

				Text 125, y_pos+15, 100, 10, "Elig othr Prgm .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_basis_for_other_prog(memb_ind)
				Text 125, y_pos+25, 100, 10, "Citizenship .  .  .  .   " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_citizenship(memb_ind)
				Text 125, y_pos+35, 100, 10, "Cooperation .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop(memb_ind)
				Text 125, y_pos+45, 100, 10, "Correct Faci  .  .  .   " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_correctional_faci(memb_ind)
				' Text 125, y_pos+45, 90, 10, "Fail to File .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind)
				' Text 125, y_pos+55, 90, 10, "IMD .  .  .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_IMD(memb_ind)

				Text 235, y_pos+15, 100, 10, "Death .  .  .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind)
				Text 235, y_pos+25, 100, 10, "Fail to File . .  .  .  .   " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind)
				Text 235, y_pos+35, 100, 10, "Income .  .  .  .  .  .   " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind)
				Text 235, y_pos+45, 100, 10, "Medicare - Part A .   " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_part_a(memb_ind)

				Text 340, y_pos+15, 100, 10, "Residence .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_residence(memb_ind)
				Text 340, y_pos+25, 100, 10, "Verification .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind)
				Text 340, y_pos+35, 100, 10, "Withdraw .  .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind)
				Text 340, y_pos+45, 100, 10, "Uncomp Xfer .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_uncompensated_transfer(memb_ind)
				' Text 340, y_pos+45, 100, 10, "Verification .  .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind)
				' Text 340, y_pos+55, 100, 10, "Withdraw .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind)

				y_pos = y_pos + 65

				'TODO - add details of ASSETS, COOP, FAIL TO FILE, VERIFICATION
			End If

			If HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
				GroupBox 15, y_pos, 430, 90, "BUDGET DETAILS"
				Text 20, y_pos+10, 120, 10, "Unearned Inc .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind)
				Text 20, y_pos+20, 120, 10, "Deemed UNEA .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind)
				Text 20, y_pos+30, 120, 10, "Excld UNEA  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind)
				Text 20, y_pos+40, 120, 10, "UNEA Deduct  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind)
				Text 20, y_pos+50, 120, 10, "Stndrd Disregard  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_standard_disregard(memb_ind)
				Text 20, y_pos+65, 120, 10, "Net Unearned Inc  .  .  .  . $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind)
				Text 175, y_pos+10, 125, 10, "Earned Inc .  .  .  .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind)
				Text 175, y_pos+20, 120, 10, "Deemed Earned .  .  . (+) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind)
				Text 175, y_pos+30, 120, 10, "Excld Earned .  .  .  .  . (-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind)
				Text 175, y_pos+40, 120, 10, "Earned Deduct  .  .  .  .(-) $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind)
				Text 175, y_pos+65, 130, 10, "Net Earned Inc  .  .  .  .  .  .  .$ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind)
				Text 315, y_pos+65, 120, 10, "Total Net Income .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind)
				Text 315, y_pos+75, 120, 10, "Income Standard .  .  .  .  $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind)
				y_pos = y_pos + 100
			End If
			'TODO - add excess income information if ineligible'
			' GroupBox 10, 245, 440, 30, "Spenddown Exists"

			GroupBox 10, 10, 440, y_pos-15, "MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_elig_full_name(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) & " for " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind)
		End If

		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "HC DENIAL" Then
			GroupBox 10, y_pos, 440, 60, "Health Care DENIAL Reasons"
			Text 20, y_pos+15, 40, 10, HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_application_withdrawn(memb_ind)
			Text 60, y_pos+15, 250, 10, "  -  Application Withdrawn"
			Text 20, y_pos+25, 40, 10, HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_application_process_incomplete(memb_ind)
			Text 60, y_pos+25, 250, 10, "  -  Application Process Not Completed"
			Text 20, y_pos+35, 40, 10, HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_no_new_prog_eligibility(memb_ind)
			Text 60, y_pos+35, 250, 10, "  -  No New Program Eligibility"
			Text 20, y_pos+45, 40, 10, HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind)
			Text 60, y_pos+45, 250, 10, "  -  Assistance Unit Member"
		End if

		PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn

		apprvs_y_pos = 20
		for each_app = 0 to UBound(HC_UNIQUE_APPROVALS, 2)
			If HC_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = HC_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF HC_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				month_display = HC_UNIQUE_APPROVALS(first_mo_const, each_app) & " - On"
			Else
				month_display = HC_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & HC_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			month_display = "M" & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, each_app) & " - " & HC_UNIQUE_APPROVALS(major_prog_for_hc_app, each_app) & ": " & month_display
			' If each_app = approval_selected Then display_detail = month_display
			If each_app = approval_selected Then
				Text 460, apprvs_y_pos+2, 85, 13, month_display
			Else
				PushButton 460, apprvs_y_pos, 85, 13, month_display, HC_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			apprvs_y_pos = apprvs_y_pos + 15
		next
		If apprvs_y_pos < 85 Then apprvs_y_pos = 85
		PushButton 460, apprvs_y_pos, 85, 15, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 460, apprvs_y_pos+15, 85, 15,  "Reason for APP", explain_why_we_are_processing_btn

		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) <> "HC DENIAL" Then
			GroupBox 5, y_pos, 540, income_box_len, "Income"
			y_pos = y_pos + 15

			Text 10, y_pos, 155, 10, "GROSS EARNED Income: "'' & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income
			Text 300, y_pos, 155, 10, "GROSS UNEARNED Income: "'' & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_net_earned_income

			y_pos = y_pos + 10
			y_pos_2 = y_pos
			HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind)
			If STAT_INFORMATION(month_ind).no_stat_data = True Then Text 20, y_pos+5, 300, 10, "*** No STAT Detail for this Retro Health Care Month"
			If STAT_INFORMATION(month_ind).no_stat_data = False Then

				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					For each inc_count_memb in HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_members_whose_income_counts(memb_ind)
						If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = inc_count_memb Then
							If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
								If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									y_pos = y_pos - 10
								End If
								y_pos = y_pos + 20
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
								If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									y_pos = y_pos - 10
								End If
								y_pos = y_pos + 20
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_three_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb)
								If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									y_pos = y_pos - 10
								End If
								y_pos = y_pos + 20
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_four_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb)
								If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									y_pos = y_pos - 10
								End If
								y_pos = y_pos + 20
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_five_grh_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb)
								If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									y_pos = y_pos - 10
								End If
								y_pos = y_pos + 20
							End If

							If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
								If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_expenses(each_memb)
								End If
								y_pos = y_pos + 20
							End If
							If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb)
								If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_expenses(each_memb)
								End If
								y_pos = y_pos + 20
							End If
							If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True Then
								Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb)
								If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
									Text 40, y_pos+10, 200, 10, "Verification NOT Received."
								Else
									Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_expenses(each_memb)
								End If
								y_pos = y_pos + 20
							End If

							If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True Then
								Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
								y_pos_2 = y_pos_2 + 10
								If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
									Text 330, y_pos_2, 200, 10, "Verification NOT Received."
									y_pos_2 = y_pos_2 + 10
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True Then
								Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
								y_pos_2 = y_pos_2 + 10
								If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
									Text 330, y_pos_2, 200, 10, "Verification NOT Received."
									y_pos_2 = y_pos_2 + 10
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True Then
								Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
								y_pos_2 = y_pos_2 + 10
								If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
									Text 330, y_pos_2, 200, 10, "Verification NOT Received."
									y_pos_2 = y_pos_2 + 10
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True Then
								Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
								y_pos_2 = y_pos_2 + 10
								If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
									Text 330, y_pos_2, 200, 10, "Verification NOT Received."
									y_pos_2 = y_pos_2 + 10
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True Then
								Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
								y_pos_2 = y_pos_2 + 10
								If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
									Text 330, y_pos_2, 200, 10, "Verification NOT Received."
									y_pos_2 = y_pos_2 + 10
								End If
							End If
						End If
					Next
				Next
				If ei_count = 0 Then
					Text 15, y_pos, 275, 10, "No EARNED Income counted for Health Care."
					y_pos = y_pos + 10
				End If
				If unea_count = 0 Then
					Text 305, y_pos_2, 235, 10, "No UNEARNED Income counted for Health Care."
					y_pos_2 = y_pos_2 + 10
				End if
			End If
		End If

		If ex_parte_approval = True Then
			Text 10, 345, 145, 10, "This case is an EX PARTE APPROVAL"
			CheckBox 155, 345, 300, 10, "Check here to stop the script from processing as Ex Parte.", stop_ex_parte_checkbox
		End If
	EndDialog
end function

function define_emer_elig_dialog()
	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "EMER Approval"
		If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "ELIGIBLE" Then
			GroupBox 5, 10, 425, 110, "Approval Detail for " & EMER_ELIG_APPROVAL.emer_program & " - ELIGIBLE for $ " & EMER_ELIG_APPROVAL.emer_elig_summ_payment
			y_pos = 35
			If EMER_ELIG_APPROVAL.mony_check_found = True Then
				Text 15, 25, 250, 10, "MONY/CHCK Issued for Emergency Assistance:"
				For each_chck = 0 to UBound(EMER_ELIG_APPROVAL.emer_check_program)
					Text 20, y_pos, 400, 10, "$ " & EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck) & " issued on " & EMER_ELIG_APPROVAL.emer_check_issue_date(each_chck) & " to " & EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck) & " for " & EMER_ELIG_APPROVAL.emer_check_payment_reason(each_chck) & " - EMER Program: " & EMER_ELIG_APPROVAL.emer_check_program(each_chck)
					y_pos = y_pos + 10
					If Instr(EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck), "XCEL") <> 0 OR Instr(EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck), "NSP") <> 0 OR Instr(EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck), "CENTER POINT ENERGY") <> 0 Then
						acct_numb_labels = " Account Number:"
						If Instr(EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck), "XCEL") <> 0 Then
							acct_numb_labels = "XCEL" & acct_numb_labels
						ElseIf Instr(EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck), "NSP") <> 0 Then
							acct_numb_labels = "NSP" & acct_numb_labels
						ElseIf Instr(EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck), "CENTER POINT ENERGY") <> 0 Then
							acct_numb_labels = "CP" & acct_numb_labels
						End If
						Text 30, y_pos+5, 85, 10, acct_numb_labels
						EditBox 115, y_pos, 75, 15, emer_excel_account_number(each_chck)
						y_pos = y_pos + 20

					End If
				Next
			End If
			If EMER_ELIG_APPROVAL.bus_ticket_approval = True Then
				Text 15, 25, 250, 10, "Amount issued for Emergency Assistance:"
				Text 20, y_pos, 400, 10, "$ " & EMER_ELIG_APPROVAL.emer_elig_summ_need_other & " approved for " & EMER_ELIG_APPROVAL.elig_version_date & " for Bus Ticket - EMER Program: " & EMER_ELIG_APPROVAL.emer_program
				y_pos = y_pos + 10
				Text 30, y_pos+5, 65, 10, "Bus Ticket Detail:"
				EditBox 95, y_pos, 325, 15, TEMP_bus_ticket_info
				y_pos = y_pos + 20
			End If
			Text 15, y_pos, 250, 10, "Emergency Begin Date: " & EMER_ELIG_APPROVAL.emer_elig_summ_begin_date & " - Emergency End Date: " & EMER_ELIG_APPROVAL.emer_elig_summ_end_date
			Text 15, y_pos+10, 150, 10, "Household: Adults - " & EMER_ELIG_APPROVAL.emer_elig_summ_adults_in_unit & ", Children - " & EMER_ELIG_APPROVAL.emer_elig_summ_children_in_unit
			If EMER_ELIG_APPROVAL.emer_elig_summ_last_used <> "" Then Text 285, y_pos, 100, 10, EMER_ELIG_APPROVAL.emer_program & " last used: " & EMER_ELIG_APPROVAL.emer_elig_summ_last_used
			If EMER_ELIG_APPROVAL.emer_elig_summ_last_used = "" Then Text 285, y_pos, 100, 10, EMER_ELIG_APPROVAL.emer_program & " last used: Never"

			GroupBox 5, 125, 535, 90, "Emergency"
			Text 15, 140, 85, 10, "Emergency to Resolve:"
			CheckBox 100, 140, 100, 10, "Eviction - Past Due Balance", emer_past_due_rent_checkbox
			CheckBox 210, 140, 100, 10, "New Housing", emer_new_housing_checkbox
			CheckBox 310, 140, 80, 10, "Moving Expenses", emer_moving_exp_checkbox
			CheckBox 390, 140, 90, 10, "Utility Shut-Off", emer_utility_checkbox
			CheckBox 480, 140, 45, 10, "Bus Ticket", emer_bus_checkbox

			CheckBox 100, 155, 100, 10, "Mortgage Balance", emer_foreclosure_checkbox
			CheckBox 210, 155, 100, 10, "Delinquent Prop Tax", emer_property_tax_checkbox
			CheckBox 310, 155, 80, 10, "Home Repairs", emer_home_repair_checkbox
			CheckBox 390, 155, 90, 10, "Replcmt due to Fire", emer_fire_replace_checkbox
			CheckBox 480, 155, 45, 10, "Storage", emer_storage_checkbox

			Text 15, 175, 100, 10, "Household Available Assets:   $"
			EditBox 120, 170, 75, 15, emer_available_assets
			Text 15, 195, 100, 10, "Resolving Emergency Notes:"
			EditBox 120, 190, 300, 15, emer_emer_resolve_notes

			GroupBox 5, 220, 535, 55, "Cost Effectivness"
			Text 15, 235, 185, 10, "Details to determine affordability:"
			Text 20, 255, 100, 10, "Ongoing Monthly NET Income:   $"
			EditBox 130, 250, 75, 15, emer_ongoing_mothly_income
			Text 230, 235, 95, 10, "Ongoing Shelter Expense:   $"
			EditBox 325, 230, 75, 15, emer_ongoing_shelter_expense
			Text 230, 255, 95, 10, "Ongoing Utility Expense:   $"
			EditBox 325, 250, 75, 15, emer_ongoing_utility_expense
			Text 410, 240, 100, 10, "Current SUA Amounts"
			Text 410, 250, 65, 10, "     Heat/AC: $ " & heat_AC_amt
			Text 410, 260, 65, 10, "Elec+Phone: $ " & electric_amt + phone_amt
			Text 480, 250, 50, 10, "Electric: $ " & electric_amt
			Text 480, 260, 50, 10, "  Phone: $ " & phone_amt

			GroupBox 5, 280, 425, 50, "Income Limit"
			Text 15, 295, 300, 10, "Income Limit Details:"
			Text 20, 310, 95, 10, "Income Application Month:   $"
			If EMER_ELIG_APPROVAL.emer_program = "EGA" Then Text 20, 310, 145, 10, "NET Income in the application month:   $"
			If EMER_ELIG_APPROVAL.emer_program = "EA" Then Text 20, 310, 150, 10, "GROSS Income in 30 Days before Application:   $"
			EditBox 175, 305, 75, 15, emer_past_30_days_income
			Text 300, 300, 100, 10, "Applicaiton Date: " & EMER_ELIG_APPROVAL.emer_appl_date
			Text 300, 310, 100, 10, "200% FPG: $ " & EMER_ELIG_APPROVAL.emer_fpg_limit
		End if
		If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "INELIGIBLE" Then
			GroupBox 5, 10, 425, 110, "Approval Detail for " & EMER_ELIG_APPROVAL.emer_program & " - INELIGIBLE"

			Text 15, 30, 250, 10, "Emergency Begin Date: " & EMER_ELIG_APPROVAL.emer_elig_summ_begin_date & " - Emergency End Date: " & EMER_ELIG_APPROVAL.emer_elig_summ_end_date
			If EMER_ELIG_APPROVAL.emer_elig_summ_last_used <> "" Then Text 15, 40, 150, 10, EMER_ELIG_APPROVAL.emer_program & " last used: " & EMER_ELIG_APPROVAL.emer_elig_summ_last_used
			If EMER_ELIG_APPROVAL.emer_elig_summ_last_used = "" Then Text 15, 40, 150, 10, EMER_ELIG_APPROVAL.emer_program & " last used: Never"

			If EMER_ELIG_APPROVAL.emer_program = "EA" Then
				Text 15, 55, 100, 10, "Citizenshoip:             " & EMER_ELIG_APPROVAL.emer_elig_case_test_citizenship
				Text 15, 65, 100, 10, "MFIP COOP:             " & EMER_ELIG_APPROVAL.emer_elig_case_test_coop_MFIP
				Text 15, 75, 100, 10, "Copayment:              " & EMER_ELIG_APPROVAL.emer_elig_case_test_copayment
				Text 15, 85, 100, 10, "Cost Effective:          " & EMER_ELIG_APPROVAL.emer_elig_case_test_cost_effective
				Text 15, 95, 100, 10, "Eligible Child:            " & EMER_ELIG_APPROVAL.emer_elig_case_test_eligible_child
				Text 15, 105, 100, 10, "Emergency:              " & EMER_ELIG_APPROVAL.emer_elig_case_test_emergency

				Text 235, 55, 100, 10, "Equitable Interest:     " & EMER_ELIG_APPROVAL.emer_elig_case_test_equitable_interest
			  	Text 235, 65, 100, 10, "Residency:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_residency
			  	Text 235, 75, 100, 10, "Resources:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_resources
			  	Text 235, 85, 100, 10, "Verification:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_verif
			  	Text 235, 95, 100, 10, "12 Month:                  " & EMER_ELIG_APPROVAL.emer_elig_case_test_12_month			'gather from ELIG
			End If

			If EMER_ELIG_APPROVAL.emer_program = "EGA" Then
				Text 15, 55, 100, 10, "Cooperation/Work:     " & EMER_ELIG_APPROVAL.emer_elig_case_test_coop_work
				Text 15, 65, 100, 10, "Copayment:                 " & EMER_ELIG_APPROVAL.emer_elig_case_test_copayment
				Text 15, 75, 100, 10, "Cost Effective:            " & EMER_ELIG_APPROVAL.emer_elig_case_test_cost_effective
				Text 15, 85, 120, 10, "County Allocation:       " & EMER_ELIG_APPROVAL.emer_elig_case_test_county_allocation
				Text 15, 95, 120, 10, "Elig Other Program:     " & EMER_ELIG_APPROVAL.emer_elig_case_test_elig_other_program
				Text 15, 105, 100, 10, "Emergency:                 " & EMER_ELIG_APPROVAL.emer_elig_case_test_emergency

				Text 235, 55, 100, 10, "Equitable Interest:     " & EMER_ELIG_APPROVAL.emer_elig_case_test_equitable_interest
				Text 235, 65, 100, 10, "Resources:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_resources
				Text 235, 75, 100, 10, "Residency:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_residency
				Text 235, 85, 100, 10, "Verification:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_verif
				Text 235, 95, 100, 10, "12 Month:                  " & EMER_ELIG_APPROVAL.emer_elig_case_test_12_month
				Text 235, 105, 100, 10, "200% FPG:                " & EMER_ELIG_APPROVAL.emer_elig_case_test_200_percent_fpg
			End If

			GroupBox 5, 125, 535, 210, "Ineligibiity Details"

			y_pos = 135
			If EMER_ELIG_APPROVAL.emer_elig_case_test_coop_work = "FAILED" Then
				GroupBox 10, y_pos, 525, 45, "Ineligibility due to failing COOPERATION/WORK REQUIREMENT"
				y_pos = y_pos + 15
				Text 15, y_pos, 300, 10, "Detail the Cooperation/Work Requirement that was failed:"
				y_pos = y_pos + 10
				EditBox 15, y_pos, 515, 15, emer_test_coop_work_detail
				y_pos = y_pos + 25

			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_copayment = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 45, "Ineligibility due to failing COPAYMENT"
				y_pos = y_pos + 15
				Text 15, y_pos, 200, 10, "Detail required Copayment and what was not met:"
				y_pos = y_pos + 10
				EditBox 15, y_pos, 515, 15, emer_test_copayment_detail
				y_pos = y_pos + 25
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_cost_effective = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 50, "Ineligibility due to failing COST EFFECTIVE"
				y_pos = y_pos + 15
				Text 20, y_pos, 105, 10, "Ongoing Monthly NET Income:   $"
				EditBox 130, y_pos-5, 75, 15, emer_ongoing_mothly_income
				Text 230, y_pos, 95, 10, "Ongoing Shelter Expense:   $"
				EditBox 325, y_pos-5, 75, 15, emer_ongoing_shelter_expense
				y_pos = y_pos + 20
				Text 230, y_pos, 95, 10, "Ongoing Utility Expense:   $"
				EditBox 325, y_pos-5, 75, 15, emer_ongoing_utility_expense
				Text 410, y_pos-20, 100, 10, "Current SUA Amounts"
				Text 410, y_pos-10, 65, 10, "     Heat/AC: $ " & heat_AC_amt
				Text 410, y_pos, 65, 10, "Elec+Phone: $ " & electric_amt + phone_amt
				Text 480, y_pos-10, 50, 10, "Electric: $ " & electric_amt
				Text 480, y_pos, 50, 10, "  Phone: $ " & phone_amt
				y_pos = y_pos + 20
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_elig_other_program = "FAILED" Then
				GroupBox 10, y_pos, 525, 45, "Ineligibility due to failing ELIGBILITY FOR OTHER PROGRAMS"
				y_pos = y_pos + 15
				Text 15, y_pos, 250, 10, "List other programs the household is Eligible for:"
				y_pos = y_pos + 10
				EditBox 15, y_pos, 515, 15, emer_test_elig_other_prog_detail
				y_pos = y_pos + 25
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_equitable_interest = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 45, "Ineligibility due to failing EQUITABLE INTEREST"
				y_pos = y_pos + 15
				Text 15, y_pos, 200, 10, "Explain living situation:"
				y_pos = y_pos + 10
				EditBox 15, y_pos, 515, 15, emer_test_equitable_interest_detail
				y_pos = y_pos + 25
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_residency = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 30, "Ineligibility due to failing RESIDENCY"
				y_pos = y_pos + 15
				Text 15, y_pos, 145, 10, "Date household established MN Residency:"
				EditBox 160, y_pos-5, 75, 15, emer_test_date_residency_starte
				y_pos = y_pos + 20
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_resources = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 30, "Ineligibility due to failing RESOURCES"
				y_pos = y_pos + 15
				Text 15, y_pos, 100, 10, "Household Available Assets:"
				EditBox 115, y_pos-5, 75, 15, emer_available_assets
				y_pos = y_pos + 20
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_verif = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 55, "Ineligibility due to VERIFICATIONS"
				y_pos = y_pos + 15
				Text 230, y_pos, 95, 10, "Date Verif Request Sent:"
				EditBox 325, y_pos-5, 75, 15, emer_verif_request_date
				PushButton 405, y_pos-5, 15, 15, "!", verif_tips_and_tricks_btn
				y_pos = y_pos + 10
				Text 15, y_pos, 250, 10, "List all verifications that were required and not received:"
				y_pos = y_pos + 10
				EditBox 15, y_pos, 515, 15, emer_test_verif_detail
				y_pos = y_pos + 25
			End If
			If EMER_ELIG_APPROVAL.emer_elig_case_test_200_percent_fpg = "FAILED" Then			'REVIEWED'
				GroupBox 10, y_pos, 525, 35, "Ineligibility due to failing EXCEEDING 200% FPG"
				y_pos = y_pos + 20

				If EMER_ELIG_APPROVAL.emer_program = "EGA" Then Text 20, y_pos, 145, 10, "NET Income in the application month:   $"
				If EMER_ELIG_APPROVAL.emer_program = "EA" Then Text 20, y_pos, 150, 10, "GROSS Income in 30 Days before Application:   $"
				EditBox 175, y_pos-5, 75, 15, emer_past_30_days_income
				Text 300, y_pos, 200, 10, "200% FPG: $ " & EMER_ELIG_APPROVAL.emer_inelig_fpg_limit & "  -  Household Size: " & EMER_ELIG_APPROVAL.manual_hh_count
				y_pos = y_pos + 20
			End If

		End If
		Text 10, 355, 175, 10, "Confirm you have reviewed the budget for accuracy:"
		DropListBox 185, 350, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - budget is Accurate"+chr(9)+"No - do not CASE/NOTE this information", confirm_emer_budget_selection

		ButtonGroup ButtonPressed
			PushButton 375, 20, 50, 10, "View ELIG", nav_stat_elig_btn
			PushButton 440, 365, 110, 15, "Approval Confirmed", app_confirmed_btn
	EndDialog
end function

function define_snap_elig_dialog()

	display_detail = ""
	for each_app = 0 to UBound(SNAP_UNIQUE_APPROVALS, 2)
		If each_app = approval_selected Then display_detail = month_display
	next

	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, 385, "SNAP Approval Packages"
	  GroupBox 460, 10, 85, 165, "SNAP Approvals"
	  If SNAP_UNIQUE_APPROVALS(process_for_note, approval_selected) <> "" or SNAP_UNIQUE_APPROVALS(changes_for_note, approval_selected) <> "" Then
		  Text 10, 350, 550, 10, "NOTES: " & SNAP_UNIQUE_APPROVALS(process_for_note, approval_selected) & " - " & SNAP_UNIQUE_APPROVALS(changes_for_note, approval_selected)
	  End If
	  detail_grp_len = 10
	  grp_y_pos = 350
	  y_pos = 360
	  snap_prorate_date = ""
	  For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
		If InStr(SNAP_UNIQUE_APPROVALS(months_in_approval, approval_selected), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
			display_benefit = False
			If SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = "" Then
				display_benefit = True
			ElseIf InStr(SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				display_benefit = True
			End If
			If display_benefit = True Then
				'PRORATED REASON FUNCTIONALITY
				If SNAP_ELIG_APPROVALS(approval).snap_benefit_prorated_date <> "" Then
				    snap_prorate_date = SNAP_ELIG_APPROVALS(approval).snap_benefit_prorated_date
					y_pos = y_pos-20
					grp_y_pos = grp_y_pos-20
				End If
			End If
		End If
	  Next

	  If SNAP_ELIG_APPROVALS(elig_ind).snap_info_source = "FIAT" Then
		y_pos = y_pos-20
		grp_y_pos = grp_y_pos-20

		Text 15, y_pos+5, 85, 10, "SNAP FIATed - Reason:"
		EditBox 100, y_pos, 440, 15, SNAP_UNIQUE_APPROVALS(fiat_reason, approval_selected)
		y_pos = y_pos + 20
		detail_grp_len = detail_grp_len + 20
	  End If
	  If snap_prorate_date <> "" Then
		Text 15, y_pos+5, 115, 10, "SNAP Prorated (" & snap_prorate_date & "). Reason:"
		EditBox 130, y_pos, 410, 15, SNAP_UNIQUE_APPROVALS(proration_reason, approval_selected)
		y_pos = y_pos + 20
		detail_grp_len = detail_grp_len + 20
	  End If

	  If detail_grp_len <> 10 Then
		GroupBox 10, grp_y_pos, 540, detail_grp_len, "Approval Explanations"
 	  End If

	  Text 10, 370, 175, 10, "Confirm you have reviewed the budget for accuracy:"
	  DropListBox 185, 365, 155, 45, "Indicate if the Budget is Accurate"+chr(9)+"Yes - budget is Accurate"+chr(9)+"No - do not CASE/NOTE this information", SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected)

	  If SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then
	  	GroupBox 5, 10, 285, 105, "Approval Detail"
	  	Text 15, 20, 135, 10, "Total Gross Income . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_gross_inc
	  	Text 15, 30, 135, 10, "Total Deductions . . . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_deduct & "  ( - )"
	  	Text 15, 40, 135, 10, "Net Income . . . . . . . . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_net_inc
	  	Text 15, 50, 135, 10, "Shelter Expense . . . . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_expenses & "  ( - )"
	  	Text 15, 60, 135, 10, "Net Adjusted Income . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_net_adj_inc

	  	Text 15, 75, 135, 10, "Thrifty Food Plan . . . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_thrifty_food_plan & ".00"
	  	Text 15, 85, 135, 10, "30% of Net Adj Income . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_bug_30_percent_net_adj_inc & ".00  ( - )"

	  	Text 40, 100, 105, 10, "Entitlement . . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_benefit_monthly_fs_allot
	  	' Text 15, 95, 130, 25, "Monthly SNAP Allotment calculated by subtracting 30% of the adjusted net income from the Thrifty Food Plan"
	  	Text 165, 20, 120, 10, "Months in Approval: " & display_detail
	  	Text 205, 30, 80, 10, " Result:   " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result

	  	Text 165, 40, 120, 10, " Benefit Entitlement:   $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_benefit_monthly_fs_allot
	  	Text 165, 60, 115, 10, "Max Gross Inc . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_gross_inc
	  	Text 170, 70, 110, 10, "Gross Income Test . . . " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_prosp_gross_inc_test
	  	Text 165, 80, 115, 10, "Max Net Inc . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_net_adj_inc
	  	Text 170, 90, 110, 10, "Net Income Test . . . . . " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_prosp_net_inc_test

	  	GroupBox 300, 10, 150, 80, "Total Deductions Calculation"
	  	Text 325, 35, 100, 10, " Standard . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard
	  	Text 320, 45, 100, 10, " Earned Inc . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned
	  	Text 330, 55, 100, 10, "Medical . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical
	  	Text 305, 65, 130, 10, "Dependent Care . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care
	  	Text 310, 75, 130, 10, " Child Support . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses

	  	GroupBox 300, 95, 150, 80, "Allowable Shelter Cost Calculation"
	  	Text 305, 110, 145, 10, "Total Shelter Costs . . . . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_total
	  	Text 305, 120, 145, 10, "Half of Net Income . . . . . . . . .$ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_50_perc_net_inc & "  ( - )"
	  	Text 305, 130, 145, 10, "Adjusted Shelter Costs . . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_adj_shel_costs
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_allow_shel <> "" Then
			Text 305, 140, 90, 20, "This case has a maximum shelter cost of $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_allow_shel
		Else
			Text 305, 140, 90, 20, "No maximum shelter cost on this case."
		End If
	  	Text 305, 160, 145, 10, "Allowed Shelter Expense . . . . $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_expenses

	  Else

	  	GroupBox 5, 10, 450, 90, "Approval Detail"

	  	Text 15, 20, 120, 10, "Months in Approval: " & display_detail
	  	Text 55, 30, 80, 10, " Result:   " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result

	  	Text 15, 45, 100, 10, "APPL Withdrawn:    " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_appl_withdrawn_test
	  	Text 15, 55, 100, 10, "Applicant Elig:         " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_applct_elig_test
	  	Text 15, 65, 100, 10, "Commodity:             " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_comdty_test
	  	Text 15, 75, 100, 10, "Disqualification:      " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_disq_test
	  	Text 15, 85, 100, 10, "Duplicate Assist:     " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_dupl_assist_test

	  	Text 125, 45, 100, 10, "Eligible Person:       " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_eligible_person_test
	  	Text 125, 55, 100, 10, "Fail Cooperation:     " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_coop_test
	  	Text 125, 65, 100, 10, "Fail to File:               " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_file_test
	  	Text 125, 75, 100, 10, "Prosp Gross Inc:     " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_prosp_gross_inc_test
	  	Text 125, 85, 100, 10, "Prosp Net Inc:         " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_prosp_net_inc_test

	  	Text 235, 45, 100, 10, "Recertification:     " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_recert_test
	  	Text 235, 55, 100, 10, "Residence:           " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_residence_test
	  	Text 235, 65, 100, 10, "Resource:             " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_resource_test
	  	Text 235, 75, 100, 10, "Retro Gross Inc:    " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_retro_gross_inc_test
	  	Text 235, 85, 100, 10, "Retro Net Inc:        " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_retro_net_inc_test

	  	Text 345, 45, 100, 10, "Strike:                    " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_strike_test
	  	Text 345, 55, 100, 10, "Xfer Asset/Inc:      " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_xfer_resource_inc_test
	  	Text 345, 65, 100, 10, "Verification:            " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test
	  	Text 345, 75, 100, 10, "Voluntary Quit:       " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_voltry_quit_test
	  	Text 345, 85, 100, 10, "Work Registration: " & SNAP_ELIG_APPROVALS(elig_ind).snap_case_work_reg_test

	  	GroupBox 5, 100, 450, 60, "Ineligible Details"
	  	If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test = "FAILED" then
			Text 15, 115, 165, 10, "What is the date the verification request was sent? "
			Editbox 180, 110, 50, 15, SNAP_UNIQUE_APPROVALS(verif_request_date, approval_selected)
			Text 235, 115, 150, 10, "(due date is 10 days from this request date)"
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_PACT = "FAILED" then
				Text 15, 135, 120, 10, "List PACT reason(s) for ineligibility: "
				Editbox 130, 130, 310, 15, SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)
				Text 130, 145, 300, 10, "Phrase this for residents as this detail will be added to the WCOM."
			End if
			PushButton 370, 110, 15, 15, "!", verif_tips_and_tricks_btn
		Else
			y_pos = 110
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_coop_test = "FAILED" Then
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)

					If STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "NON-COOP" Then
						Text 15, y_pos, 375, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_disq_one_non_coop_note_text(each_memb)
						y_pos = y_pos + 10
					End If
					If STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "NON-COOP" Then
						Text 15, y_pos, 375, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_disq_two_non_coop_note_text(each_memb)
						y_pos = y_pos + 10
					End If
					If STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "NON-COOP" Then
						Text 15, y_pos, 375, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_disq_three_non_coop_note_text(each_memb)
						y_pos = y_pos + 10
					End If
					If STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "NON-COOP" Then
						Text 15, y_pos, 375, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_disq_four_non_coop_note_text(each_memb)
						y_pos = y_pos + 10
					End If
					If STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "NON-COOP" Then
						Text 15, y_pos, 375, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_disq_five_non_coop_note_text(each_memb)
						y_pos = y_pos + 10
					End If
				Next
			End If

			Text 15, y_pos, 375, 10, "This case is ineligible because it hasn't met the requirements for SNAP Eligibility. The case tests above show what requirements have not been met."
	    End if

	  End If

	  ' EditBox 600, 400, 50, 10, empty_editbox
	  ButtonGroup ButtonPressed
	    If SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False Then PushButton 390, 115, 50, 10, "View ELIG", nav_stat_elig_btn
		If SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then PushButton 165, 100, 50, 10, "View ELIG", nav_stat_elig_btn
		If snap_approval_is_incorrect = True Then
			PushButton 440, 365, 110, 15, "Cancel Approval Noting", app_incorrect_btn
		ElseIf approval_selected = UBound(SNAP_UNIQUE_APPROVALS, 2) or snap_approval_is_incorrect = True Then
			PushButton 440, 365, 110, 15, "Continue", app_confirmed_btn
		Else
			PushButton 440, 365, 110, 15, "Continue", next_approval_btn
		End If
		If SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True Then PushButton 360, 20, 85, 10, "Deductions Detail", deductions_detail_btn
		' PushButton 200, 160, 70, 10, "HH COMP Detail", hh_comp_detail
		PushButton 360, 190, 85, 10, "Shelter Expense Detail", shel_exp_detail_btn
		y_pos = 25
		for each_app = 0 to UBound(SNAP_UNIQUE_APPROVALS, 2)
			SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = ""
			If SNAP_UNIQUE_APPROVALS(last_mo_const, each_app) = "" Then
				month_display = SNAP_UNIQUE_APPROVALS(first_mo_const, each_app)
			ElseIF SNAP_UNIQUE_APPROVALS(last_mo_const, each_app) = CM_plus_1_mo & "/" & CM_plus_1_yr Then
				If SNAP_UNIQUE_APPROVALS(package_is_expedited_const, approval_selected) = False Then
					month_display = SNAP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
				ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_exp_verif_status_all_provided = True Then
					month_display = SNAP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - Ongoing"
				ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_exp_package_includes_month_two = False Then
					month_display = SNAP_UNIQUE_APPROVALS(first_mo_const, each_app) & " only"
					SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = first_month
				Else
					month_display = SNAP_UNIQUE_APPROVALS(first_mo_const, each_app) & " and " & mid(SNAP_UNIQUE_APPROVALS(months_in_approval, approval_selected), 7, 5)
					SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = first_month & "~" & mid(SNAP_UNIQUE_APPROVALS(months_in_approval, approval_selected), 7, 5)
				End If
			Else
				month_display = SNAP_UNIQUE_APPROVALS(first_mo_const, each_app) & " - " & SNAP_UNIQUE_APPROVALS(last_mo_const, each_app)
			End if
			If each_app = approval_selected Then
				Text 470, y_pos+2, 75, 13, month_display
			Else
				PushButton 465, y_pos, 75, 13, month_display, SNAP_UNIQUE_APPROVALS(btn_one, each_app)
			End If
			y_pos = y_pos + 15
		next
		PushButton 465, 135, 75, 20, "About Approval Pkgs", unique_approval_explain_btn
		PushButton 465, 155, 75, 15,  "Reason for APP", explain_why_we_are_processing_btn

	  If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then
		  GroupBox 5, 120, 285, 35, "SNAP Benefits Issued to Resident in the Approval Package"
		  app_y_pos = 132
		  app_x_pos = 10
		  For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
		  	If InStr(SNAP_UNIQUE_APPROVALS(months_in_approval, approval_selected), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				display_benefit = False
				If SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected) = "" Then
					display_benefit = True
				ElseIf InStr(SNAP_UNIQUE_APPROVALS(limit_benefit_months, approval_selected), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					display_benefit = True
				End If
				If display_benefit = True Then
					Text app_x_pos, app_y_pos, 85, 10, SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year & " - $ " & SNAP_ELIG_APPROVALS(approval).snap_benefit_amt
					app_y_pos = app_y_pos + 10
					If app_y_pos = 152 Then
						app_y_pos = 132
						app_x_pos = app_x_pos + 90
					End If
				End If
			End If
		  Next
	  End If

	  GroupBox 5, 160, 285, 70, "Household Composition"
	  Text 20, 170, 285, 10, "Members in Assistance Unit:  " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_numb_in_assist_unit & " - Adult: " & SNAP_ELIG_APPROVALS(elig_ind).adults_recv_snap & ", Children: " & SNAP_ELIG_APPROVALS(elig_ind).children_recv_snap
	  Text 35, 180, 245, 20, "Eligible Members:  " & SNAP_ELIG_APPROVALS(elig_ind).elig_membs_list
	  Text 30, 200, 245, 20, "Ineligible Members:  " & SNAP_ELIG_APPROVALS(elig_ind).inelig_membs_list

	  GroupBox 300, 180, 240, 50, "Expenses"
	  Text 315, 205, 200, 10, "Utilities Expense:   $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_utilities_exp_total & "  -  " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_utilities_list
	  Text 310, 215, 125, 10, "Housing Expense:  $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_housing_exp_total

	  GroupBox 5, 235, 540, income_box_len, "Income"
	  Text 10, 245, 155, 10, "Total GROSS EARNED Income:   $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_earned_inc
	  Text 300, 245, 155, 10, "Total GROSS UNEARNED Income:   $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_unea_inc
	  y_pos = 260
	  y_pos_2 = 260
	  For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
	  	If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_one_snap_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb)
  		    If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_one_snap_pic_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_one_snap_pic_ave_inc_per_pay(each_memb) & " average inc/pay date"
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_jobs_two_snap_pic_prosp_monthly_inc(each_memb) & " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb)
			If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 40, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_two_snap_pic_pay_freq(each_memb) & "   --   $ " & STAT_INFORMATION(month_ind).stat_jobs_two_snap_pic_ave_inc_per_pay(each_memb) & " average inc/pay date"
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_jobs_three_snap_pic_prosp_monthly_inc(each_memb)
			If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 25, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_three_snap_pic_pay_freq(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_three_snap_pic_ave_inc_per_pay(each_memb) & " average inc/pay date"
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_jobs_four_snap_pic_prosp_monthly_inc(each_memb)
			If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 25, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_four_snap_pic_pay_freq(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_four_snap_pic_ave_inc_per_pay(each_memb) & " average inc/pay date"
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_jobs_five_snap_pic_prosp_monthly_inc(each_memb)
			If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 25, y_pos+10, 250, 10, "Paid " & STAT_INFORMATION(month_ind).stat_jobs_five_snap_pic_pay_freq(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_five_snap_pic_ave_inc_per_pay(each_memb) & " average inc/pay date"
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_snap(each_memb) = True Then
			' Text 15, y_pos, 215, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) &
			Text 15, y_pos, 275, 10, "$ " & STAT_INFORMATION(month_ind).stat_busi_one_snap_prosp_net_inc(each_memb)& " - Monthly Income   --   Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb)
			If STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_snap_expense_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 40, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_one_snap_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_one_snap_prosp_expenses(each_memb)
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & left(STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_busi_two_snap_prosp_net_inc(each_memb)
			If STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_snap_expense_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 25, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_two_snap_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_two_snap_prosp_expenses(each_memb)
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_snap(each_memb) = True Then
			Text 15, y_pos, 275, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - SELF EMP: " & left(STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_busi_three_snap_prosp_net_inc(each_memb)
			If STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_snap_expense_verif_code(each_memb) = "N" Then
				Text 40, y_pos+10, 200, 10, "Verification NOT Received."
			Else
				Text 25, y_pos+10, 250, 10, "Gross Income: $ " & STAT_INFORMATION(month_ind).stat_busi_three_snap_prosp_gross_inc(each_memb) & " - Expenses: $ " & STAT_INFORMATION(month_ind).stat_busi_three_snap_prosp_expenses(each_memb)
			End If
			y_pos = y_pos + 20
		End If
		If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_snap(each_memb) = True Then
			Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_one_snap_pic_prosp_monthly_inc(each_memb)
			y_pos_2 = y_pos_2 + 10
			If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
				Text 330, y_pos_2, 200, 10, "Verification NOT Received."
				y_pos_2 = y_pos_2 + 10
			End If
		End If
		If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_snap(each_memb) = True Then
			Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_two_snap_pic_prosp_monthly_inc(each_memb)
			y_pos_2 = y_pos_2 + 10
			If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
				Text 330, y_pos_2, 200, 10, "Verification NOT Received."
				y_pos_2 = y_pos_2 + 10
			End If
		End If
		If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_snap(each_memb) = True Then
			Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_three_snap_pic_prosp_monthly_inc(each_memb)
			y_pos_2 = y_pos_2 + 10
			If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
				Text 330, y_pos_2, 200, 10, "Verification NOT Received."
				y_pos_2 = y_pos_2 + 10
			End If
		End If
		If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_snap(each_memb) = True Then
			Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_four_snap_pic_prosp_monthly_inc(each_memb)
			y_pos_2 = y_pos_2 + 10
			If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
				Text 330, y_pos_2, 200, 10, "Verification NOT Received."
				y_pos_2 = y_pos_2 + 10
			End If
		End If
		If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_snap(each_memb) = True Then
			Text 305, y_pos_2, 235, 10, "MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " & left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & "                              ", 30) & " Monthly Income:   $ " & STAT_INFORMATION(month_ind).stat_unea_five_snap_pic_prosp_monthly_inc(each_memb)
			y_pos_2 = y_pos_2 + 10
			If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
				Text 330, y_pos_2, 200, 10, "Verification NOT Received."
				y_pos_2 = y_pos_2 + 10
			End If
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc <> "" Then
			Text 305, y_pos_2, 235, 10, left("PA Grants  -                               ", 30) & " Monthly Income:   $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc
			y_pos_2 = y_pos_2 + 10
		End If
	  Next
	EndDialog
end function

function rept_pnd2_dialog()
	Dlg_len = 65

	If pnd2_cash_status = "I" or pnd2_cash_status = "R" then Dlg_len = Dlg_len + 50
	If (pnd2_cash_status = "I" or pnd2_cash_status = "R") and pnd2_cash_prog_two <> "" then Dlg_len = Dlg_len + 50
	If pnd2_2nd_cash_status = "I" or pnd2_2nd_cash_status = "R" then Dlg_len = Dlg_len + 50
	If (pnd2_2nd_cash_status = "I" or pnd2_2nd_cash_status = "R") and pnd2_2nd_cash_prog_two <> "" then Dlg_len = Dlg_len + 50
	If pnd2_snap_status = "I" or pnd2_snap_status = "R" then Dlg_len = Dlg_len + 50
	If pnd2_2nd_snap_status = "I" or pnd2_2nd_snap_status = "R" then Dlg_len = Dlg_len + 50
	If pnd2_emer_status = "I" or pnd2_emer_status = "R" then Dlg_len = Dlg_len + 50
	If pnd2_2nd_emer_status = "I" or pnd2_2nd_emer_status = "R" then Dlg_len = Dlg_len + 50
	If pnd2_grh_status = "I" or pnd2_grh_status = "R" then Dlg_len = Dlg_len + 50
	If pnd2_2nd_grh_status = "I" or pnd2_2nd_grh_status = "R" then Dlg_len = Dlg_len + 50

	y_pos = 25
	cash_listed = 0

	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 341, Dlg_len, "Program Denials Via REPT/PND2"
	  Text 15, 10, 320, 10, "This case has been updated to have denials processed through the REPT/PND2 overnight batch."
	  If pnd2_cash_status = "I" or pnd2_cash_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "Cash Denial"
		  If pnd2_cash_status = "I" Then Text 20, y_pos + 15, 155, 10, "Cash Denied for NO INTERVIEW"
		  If pnd2_cash_status = "R" Then Text 20, y_pos + 15, 155, 10, "Cash Application WITHDRAWN"
		  Text 20, y_pos + 25, 155, 10, "Cash Program: " & pnd2_cash_prog_one
		  Text 185, y_pos + 15, 140, 10, "Cash application date: " & pnd2_appl_date
		  Text 185, y_pos + 25, 140, 10, "Cash has been pending for " & pnd2_days_pending & " Days."

		  cash_listed = cash_listed + 1
		  y_pos = y_pos + 50

		  If pnd2_cash_prog_two <> "" Then
			  GroupBox 15, y_pos, 315, 45, "Cash Denial"
			  If pnd2_cash_status = "I" Then Text 20, y_pos + 15, 155, 10, "Cash Denied for NO INTERVIEW"
			  If pnd2_cash_status = "R" Then Text 20, y_pos + 15, 155, 10, "Cash Application WITHDRAWN"
			  Text 20, y_pos + 25, 155, 10, "Cash Program: " & pnd2_cash_prog_two
			  Text 185, y_pos + 15, 140, 10, "Cash application date: " & pnd2_appl_date
			  Text 185, y_pos + 25, 140, 10, "Cash has been pending for " & pnd2_days_pending & " Days."

			  cash_listed = cash_listed + 1
			  y_pos = y_pos + 50
		  End If
	  End If

	  If pnd2_2nd_cash_status = "I" or pnd2_2nd_cash_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "Cash Denial"
		  If pnd2_2nd_cash_status = "I" Then Text 20, y_pos + 15, 155, 10, "Cash Denied for NO INTERVIEW"
		  If pnd2_2nd_cash_status = "R" Then Text 20, y_pos + 15, 155, 10, "Cash Application WITHDRAWN"
		  Text 20, y_pos + 25, 155, 10, "Cash Program: " & pnd2_2nd_cash_prog_one
		  Text 185, y_pos + 15, 140, 10, "Cash application date: " & pnd2_2nd_appl_date
		  Text 185, y_pos + 25, 140, 10, "Cash has been pending for " & pnd2_2nd_days_pending & " Days."

		  cash_listed = cash_listed + 1
		  y_pos = y_pos + 50

		  If pnd2_2nd_cash_prog_two <> "" Then
			  GroupBox 15, y_pos, 315, 45, "Cash Denial"
			  If pnd2_2nd_cash_status = "I" Then Text 20, y_pos + 15, 155, 10, "Cash Denied for NO INTERVIEW"
			  If pnd2_2nd_cash_status = "R" Then Text 20, y_pos + 15, 155, 10, "Cash Application WITHDRAWN"
			  Text 20, y_pos + 25, 155, 10, "Cash Program: " & pnd2_2nd_cash_prog_two
			  Text 185, y_pos + 15, 140, 10, "Cash application date: " & pnd2_2nd_appl_date
			  Text 185, y_pos + 25, 140, 10, "Cash has been pending for " & pnd2_2nd_days_pending & " Days."

			  cash_listed = cash_listed + 1
			  y_pos = y_pos + 50
		  End If
	  End If

	  If pnd2_snap_status = "I" or pnd2_snap_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "SNAP Denial"
		  If pnd2_snap_status = "I" Then Text 20, y_pos + 15, 155, 10, "SNAP Denied for NO INTERVIEW"
		  If pnd2_snap_status = "R" Then Text 20, y_pos + 15, 155, 10, "SNAP Application WITHDRAWN"
		  Text 185, y_pos + 15, 140, 10, "SNAP application date: " & pnd2_appl_date
		  Text 185, y_pos + 25, 140, 10, "SNAP has been pending for " & pnd2_days_pending & " Days."

		  y_pos = y_pos + 50
	  End If
	  If pnd2_2nd_snap_status = "I" or pnd2_2nd_snap_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "SNAP Denial"
		  If pnd2_2nd_snap_status = "I" Then Text 20, y_pos + 15, 155, 10, "SNAP Denied for NO INTERVIEW"
		  If pnd2_2nd_snap_status = "R" Then Text 20, y_pos + 15, 155, 10, "SNAP Application WITHDRAWN"
		  Text 185, y_pos + 15, 140, 10, "SNAP application date: " & pnd2_2nd_appl_date
		  Text 185, y_pos + 25, 140, 10, "SNAP has been pending for " & pnd2_2nd_days_pending & " Days."

		  y_pos = y_pos + 50
	  End If

	  If pnd2_emer_status = "I" or pnd2_emer_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "Emergency Denial"
		  If pnd2_emer_status = "I" Then Text 20, y_pos + 15, 155, 10, "EMER Denied for NO INTERVIEW"
		  If pnd2_emer_status = "R" Then Text 20, y_pos + 15, 155, 10, "EMER Application WITHDRAWN"
		  Text 185, y_pos + 15, 140, 10, "EMER application date: " & pnd2_appl_date
		  Text 185, y_pos + 25, 140, 10, "EMER has been pending for " & pnd2_days_pending & " Days."

		  y_pos = y_pos + 50
	  End If
	  If pnd2_2nd_emer_status = "I" or pnd2_2nd_emer_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "Emergency Denial"
		  If pnd2_2nd_emer_status = "I" Then Text 20, y_pos + 15, 155, 10, "EMER Denied for NO INTERVIEW"
		  If pnd2_2nd_emer_status = "R" Then Text 20, y_pos + 15, 155, 10, "EMER Application WITHDRAWN"
		  Text 185, y_pos + 15, 140, 10, "EMER application date: " & pnd2_2nd_appl_date
		  Text 185, y_pos + 25, 140, 10, "EMER has been pending for " & pnd2_2nd_days_pending & " Days."

		  y_pos = y_pos + 50
	  End If

	  If pnd2_grh_status = "I" or pnd2_grh_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "GRH Denial"
		  If pnd2_grh_status = "I" Then Text 20, y_pos + 15, 155, 10, "GRH Denied for NO INTERVIEW"
		  If pnd2_grh_status = "R" Then Text 20, y_pos + 15, 155, 10, "GRH Application WITHDRAWN"
		  Text 185, y_pos + 15, 140, 10, "GRH application date: " & pnd2_appl_date
		  Text 185, y_pos + 25, 140, 10, "GRH has been pending for " & pnd2_days_pending & " Days."

		  y_pos = y_pos + 50
	  End If
	  If pnd2_2nd_grh_status = "I" or pnd2_2nd_grh_status = "R" then
		  GroupBox 15, y_pos, 315, 45, "GRH Denial"
		  If pnd2_2nd_grh_status = "I" Then Text 20, y_pos + 15, 155, 10, "GRH Denied for NO INTERVIEW"
		  If pnd2_2nd_grh_status = "R" Then Text 20, y_pos + 15, 155, 10, "GRH Application WITHDRAWN"
		  Text 185, y_pos + 15, 140, 10, "GRH application date: " & pnd2_2nd_appl_date
		  Text 185, y_pos + 25, 140, 10, "GRH has been pending for " & pnd2_2nd_days_pending & " Days."

		  y_pos = y_pos + 50
	  End If
	  Text 20, y_pos+5, 135, 10, "Confirm that these denials are accurate:"
	  DropListBox 155, y_pos, 155, 45, "Indicate if the Denial is Accurate"+chr(9)+"Yes - denial is Accurate"+chr(9)+"No - I need to update the denial", denial_accurate
	  y_pos = y_pos + 20
	  ButtonGroup ButtonPressed
		OkButton 230, y_pos, 50, 15
		CancelButton 280, y_pos, 50, 15
	EndDialog
end function

function dwp_elig_case_note()
	Call back_to_SELF
	CASE_NOTE_entered = True
	call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for DWP - " & elig_info & " eff " & first_month & header_end & vbCr
	Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)
	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", DWP_ELIG_APPROVALS(elig_ind).dwp_approved_date)
	If add_new_note_for_DWP = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	Call write_bullet_and_variable_in_CASE_NOTE("FIAT Reason", DWP_UNIQUE_APPROVALS(fiat_reason, unique_app))

	If DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("================================ BENEFIT AMOUNT =============================")
		For approval = 0 to UBound(DWP_ELIG_APPROVALS)
			If InStr(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app), DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				' beginning_text = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year & " Entitlement: $ " & right("       " & replace(DWP_ELIG_APPROVALS(approval).dwp_elig_budg_DWP_grant, ".00", ""), 8) & " "
				beginning_text = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year & " DWP Grant: $ " & right("       " & replace(DWP_ELIG_APPROVALS(approval).dwp_elig_budg_DWP_grant, ".00", ""), 4)
				If DWP_ELIG_APPROVALS(approval).dwp_elig_prorated_date <> "" Then
					Call write_variable_in_CASE_NOTE(beginning_text & "| $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_elig_prorated_amount, ".00", "") & "     ", 4) & " - Prorated Amount from " & DWP_ELIG_APPROVALS(approval).dwp_elig_prorated_date)
					beginning_text = "                       "
				End If
				If DWP_ELIG_APPROVALS(approval).dwp_elig_recoupment_amount <> "0.00" Then
					Call write_variable_in_CASE_NOTE(beginning_text & "| (-) $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_elig_recoupment_amount, ".00", "") & "     ", 4) & " - Recoupment")
					beginning_text = "                       "
				End If
				If DWP_ELIG_APPROVALS(approval).dwp_elig_amount_already_issued <> "0.00" Then
					Call write_variable_in_CASE_NOTE(beginning_text & "| (-) $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_elig_amount_already_issued, ".00", "") & "     ", 4) & " - Amount Already Issued")
					beginning_text = "                       "
				End If
				Call write_variable_in_CASE_NOTE(beginning_text & "| $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_case_summary_net_grant_amount, ".00", "") & "     ", 4) & " - Net Grant Amount")
				beginning_text = "                       "
				' If DWP_ELIG_APPROVALS(approval).dwp_case_summary_shelter_benefit_portion <> "0.00" Then Call write_variable_in_CASE_NOTE(beginning_text & "| Net Grant Amount: $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_case_summary_shelter_benefit_portion, ".00", "") & "     ", 4))
				If DWP_ELIG_APPROVALS(approval).dwp_case_summary_shelter_benefit_portion <> "0.00" Then Call write_variable_in_CASE_NOTE(beginning_text & "|        $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_case_summary_shelter_benefit_portion, ".00", "") & "     ", 4) & " - Shelter Benefit")

				If DWP_ELIG_APPROVALS(approval).dwp_case_summary_personal_needs_portion <> "0.00" Then Call write_variable_in_CASE_NOTE(beginning_text & "|        $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_case_summary_personal_needs_portion, ".00", "") & "     ", 4) & " - Personal Needs")
				' If DWP_ELIG_APPROVALS(approval).dwp_case_summary_personal_needs_portion <> "0.00" Then Call  write_variable_in_CASE_NOTE(beginning_text & "|     Personal Needs: $ " & left(replace(DWP_ELIG_APPROVALS(approval).dwp_case_summary_personal_needs_portion, ".00", "") & "     ", 4))
				' Call write_variable_in_CASE_NOTE(beginning_text & "| Issuance-Cash: $" & left(replace(DWP_ELIG_APPROVALS(approval).dwp_case_summary_shelter_benefit_portion, ".00", "") & "     ", 4) & "-Food: $" & left(replace(MFIP_ELIG_APPROVALS(approval).mfip_case_summary_food_portion, ".00", "") & "     ", 4) & "-HG: $" & left(replace(MFIP_ELIG_APPROVALS(approval).mfip_case_summary_housing_grant, ".00", "") & "     ", 5))
				If DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year <> last_month Then Call write_variable_in_CASE_NOTE("-----------------------------------------------------------------------------")
				If DWP_ELIG_APPROVALS(approval).dwp_elig_prorated_date <> "" Then Call write_bullet_and_variable_in_CASE_NOTE("Reason for Proration", DWP_UNIQUE_APPROVALS(proration_reason, unique_app))

			End If
		Next
		vendor_header = ""
		vendor_header = "----------------------------- Vendor Payments -------------------------------"
		For approval = 0 to UBound(DWP_ELIG_APPROVALS)
			If InStr(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app), DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				If DWP_ELIG_APPROVALS(approval).dwp_mony_check_found = True Then
					for each_trans = 0 to UBound(DWP_ELIG_APPROVALS(approval).dwp_check_program)
						If vendor_header <> "" Then
							Call write_variable_in_CASE_NOTE(vendor_header)
							vendor_header = ""
						End If
						Call write_variable_in_CASE_NOTE(DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year & " Vendor Check of $ " & replace(DWP_ELIG_APPROVALS(approval).dwp_check_transaction_amount(each_trans), ".00", "") & " issued to " & DWP_ELIG_APPROVALS(approval).dwp_check_vendor_name(each_trans) & " for " & DWP_ELIG_APPROVALS(approval).dwp_check_payment_reason(each_trans))
					next
				End If
				If DWP_ELIG_APPROVALS(approval).dwp_vnda_found = True Then
					for each_auth = 0 To UBound(DWP_ELIG_APPROVALS(approval).dwp_vnda_vendor_number)
						If vendor_header <> "" Then
							Call write_variable_in_CASE_NOTE(vendor_header)
							vendor_header = ""
						End If
						Call write_variable_in_CASE_NOTE(DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year & " Vendor Auth of $ " & replace(DWP_ELIG_APPROVALS(approval).dwp_vnda_payment_amount(each_auth), ".00", "") & " approved to " & DWP_ELIG_APPROVALS(approval).dwp_vnda_vendor_name(each_auth) & " for " & DWP_ELIG_APPROVALS(approval).dwp_vnda_expense_type_info(each_auth))
					next
				End If
			End If
		Next
	End If

	If DWP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("============================= BUDGET FOR APPROVAL ===========================")

		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income = "FAILED" Then Call write_variable_in_CASE_NOTE("DWP INELIGIBLE because initial income exceeds Family Wage Level of " & trim(DWP_ELIG_APPROVALS(elig_ind).dwp_elig_initial_family_wage_level))

		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income <> "FAILED" Then Call write_variable_in_CASE_NOTE("DWP Assistance Unit: Caregivers: " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_asst_unit_caregivers & ", Children: " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_asst_unit_children)

		Call write_variable_in_CASE_NOTE("------- Income and Expenses --------|------- DWP BENEFIT CALCULATION --------")
		Call write_variable_in_CASE_NOTE("Housing and Utility Expenses:       |        Total Shelter Costs: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_total_shelter_costs, 8))
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_rent_mortgage <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_rent_mortgage, 7) & 				" - Rent/Mortgage          |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_property_tax <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_property_tax, 7)  & 				" - Property Tax           |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_house_insurance <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_house_insurance, 7)  & 			" - House Insurance        |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_electricity <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_electricity, 7)  & 					" - Electricity            |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_heat_air <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_heat_air, 7)  & 						" - Heat/AC                |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_water_sewer_garbage <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_water_sewer_garbage, 7) & 	" - Water/Garbage          |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_phone <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_hest_phone, 7)  & 								" - Phone                  |")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_other <> "" Then Call write_variable_in_CASE_NOTE(" $ " & right(space(7) & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_shel_other, 7)  & 								" - Other                  |")
		Call write_variable_in_CASE_NOTE("Personal Needs:                     | (+)         Personal Needs: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_personal_needs, 8))
		Call write_variable_in_CASE_NOTE(" $ 70.00 per eligible DWP member    |")
		Call write_variable_in_CASE_NOTE("                                    | (=)         Total DWP Need: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_total_DWP_need, 8))
		Call write_variable_in_CASE_NOTE("                                    |----------------------------------------")

		ei_found = False
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If


			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_mfip(each_memb) = True Then
				busi_detail = left(STAT_INFORMATION(month_ind).stat_busi_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_one_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_mfip(each_memb) = True Then
				busi_detail = left(STAT_INFORMATION(month_ind).stat_busi_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_two_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_mfip(each_memb) = True Then
				busi_detail = left(STAT_INFORMATION(month_ind).stat_busi_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 27)
				If ei_found = False then
					Call write_variable_in_CASE_NOTE("Earned Income:                      |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))
					ei_found = True
				End If
				Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_detail & "|")
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_three_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
			End If
		Next
		If ei_found = False then Call write_variable_in_CASE_NOTE("NO Earned Income                    |              Earned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_earned_income, 8))

		unea_found = False
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 27)
				If unea_found = False then
					Call write_variable_in_CASE_NOTE("Unearned Income:                    |            Unearned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income, 8))
					unea_found = True
				End If
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 27)
				If unea_found = False then
					Call write_variable_in_CASE_NOTE("Unearned Income:                    |            Unearned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income, 8))
					unea_found = True
				End If
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 27)
				If unea_found = False then
					Call write_variable_in_CASE_NOTE("Unearned Income:                    |            Unearned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income, 8))
					unea_found = True
				End If
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 27)
				If unea_found = False then
					Call write_variable_in_CASE_NOTE("Unearned Income:                    |            Unearned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income, 8))
					unea_found = True
				End If
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 27)
				If unea_found = False then
					Call write_variable_in_CASE_NOTE("Unearned Income:                    |            Unearned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income, 8))
					unea_found = True
				End If
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
		Next
		If unea_found = False then Call write_variable_in_CASE_NOTE("NO Unearned Income                  |            Unearned Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unearned_income, 8))

		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_deemed_income = "0.00" Then
			Call write_variable_in_CASE_NOTE("NO Deemed Income                    |              Deemed Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_deemed_income, 8))

		Else
			Call write_variable_in_CASE_NOTE("Deemed Income:                      |              Deemed Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_deemed_income, 8))

			right_side_lines = "|--DEEMED Income Calculation---|"

			For each_deem = 0 to UBound(DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_self_emp)
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_wages(each_deem) <> "0.00" Then right_side_lines = right_side_lines & "~|" & left("  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_wages(each_deem) & " - Wages" & spaces_30, 30) & "|"
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_self_emp(each_deem) <> "0.00" Then right_side_lines = right_side_lines & "~|" & left("  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_self_emp(each_deem) & " - Self Emp" & spaces_30, 30) & "|"
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_wages(each_deem) <> "0.00" OR DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_self_emp(each_deem) <> "0.00" Then
					disregard = DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_earned_disregard(each_deem)
					disregard = disregard * 1
					disregard = disregard + 65
					right_side_lines = right_side_lines & "~|" & left("  (-) $ " & disregard & " - Disregards" & spaces_30, 30) & "|"
				End If
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_unearned_income(each_deem) <> "0.00" Then right_side_lines = right_side_lines & "~|" & left("  $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_unearned_income(each_deem) & " - Unearned" & spaces_30, 30) & "|"
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_deemer_unmet_need(each_deem) <> "0.00" Then right_side_lines = right_side_lines & "~|" & left("  (-) $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_deemer_unmet_need(each_deem) & " - Unmet Need" & spaces_30, 30) & "|"
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_allocation(each_deem) <> "0.00" Then right_side_lines = right_side_lines & "~|" & left("  (-) $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_allocation(each_deem) & " - Allocation" & spaces_30, 30) & "|"
				If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_child_support(each_deem) <> "0.00" Then right_side_lines = right_side_lines & "~|" & left("  (-) $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_child_support(each_deem) & " - Chld Sprt" & spaces_30, 30) & "|"
				right_side_lines = right_side_lines & "~|" & left("= $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_membs_budg_deemed_counted_income(each_deem) & " Cntd Deemed Inc" & spaces_30, 30) & "|"
			Next
			right_side_lines = right_side_lines & "~|------------------------------|"
			right_side_lines_array = split(right_side_lines, "~")
			calc_lines_count = 0

			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_deemed_for_mfip(each_memb) = True Then
					job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_deemed_for_mfip(each_memb) = True Then
					job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_deemed_for_mfip(each_memb) = True Then
					job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_deemed_for_mfip(each_memb) = True Then
					job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_deemed_for_mfip(each_memb) = True Then
					job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If


				If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_deemed_for_mfip(each_memb) = True Then
					busi_detail = left(STAT_INFORMATION(month_ind).stat_busi_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_one_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_deemed_for_mfip(each_memb) = True Then
					busi_detail = left(STAT_INFORMATION(month_ind).stat_busi_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_two_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_deemed_for_mfip(each_memb) = True Then
					busi_detail = left(STAT_INFORMATION(month_ind).stat_busi_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					If calc_lines_count+1 <= UBound(right_side_lines_array) Then right_side_info_2 = right_side_lines_array(calc_lines_count+1)
					calc_lines_count = calc_lines_count + 2
					Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_detail & right_side_info)
					Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_three_mfip_counted_amt(each_memb) & spaces_30, 36) & right_side_info_2)
					right_side_info = "|"
					right_side_info_2 = "|"
				End If
			Next

			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_deemed_for_mfip(each_memb) = True Then
					STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb), "Disbursed", "DISB")
					unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					calc_lines_count = calc_lines_count + 1
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & right_side_info)
					right_side_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_deemed_for_mfip(each_memb) = True Then
					STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb), "Disbursed", "DISB")
					unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					calc_lines_count = calc_lines_count + 1
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & right_side_info)
					right_side_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_deemed_for_mfip(each_memb) = True Then
					STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb), "Disbursed", "DISB")
					unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					calc_lines_count = calc_lines_count + 1
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & right_side_info)
					right_side_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_deemed_for_mfip(each_memb) = True Then
					STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb), "Disbursed", "DISB")
					unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					calc_lines_count = calc_lines_count + 1
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & right_side_info)
					right_side_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_deemed_for_mfip(each_memb) = True Then
					STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb), "Disbursed", "DISB")
					unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 27)
					If calc_lines_count <= UBound(right_side_lines_array) Then right_side_info = right_side_lines_array(calc_lines_count)
					calc_lines_count = calc_lines_count + 1
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & right_side_info)
					right_side_info = "|"
				End If
			Next
			If calc_lines_count <= UBound(right_side_lines_array) Then
				Do
					Call write_variable_in_CASE_NOTE(spaces_36& right_side_lines_array(calc_lines_count))
					calc_lines_count = calc_lines_count + 1
				Loop until calc_lines_count > UBound(right_side_lines_array)
			End If
		End If
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_child_support_exclusion <> "0.00" Then
			Call write_variable_in_CASE_NOTE("Child Support Exclusion:            | (-)Child Support Exclusion: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_child_support_exclusion, 8))
			Call write_variable_in_CASE_NOTE(left("  Child Support Income: $ " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_cses_income & spaces_30, 36) & "|")
			Call write_variable_in_CASE_NOTE(left("           Child Count:   " & DWP_ELIG_APPROVALS(elig_ind).dwp_elig_child_count & spaces_30, 36) & "|")
		End if
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_child_support_exclusion = "0.00" Then Call write_variable_in_CASE_NOTE("NO Child Support Exclusion          | (-)Child Support Exclusion: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_child_support_exclusion, 8))
		Call write_variable_in_CASE_NOTE("                                    | (=)     Budget Month Total: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_budget_month_total, 8))
		Call write_variable_in_CASE_NOTE("                                    |                  Prior Low: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_prior_low, 8))
		Call write_variable_in_CASE_NOTE("                                    | (=)   DWP Countable Income: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_countable_income, 8))
		Call write_variable_in_CASE_NOTE("                                    |----------------------------------------")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income = "FAILED" Then
			Call write_variable_in_CASE_NOTE("DWP Countable Income Exceeds FWL    | *  *  *  Family Wage Level: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_initial_family_wage_level, 8))
		Else
			Call write_variable_in_CASE_NOTE("                                    | (=)             Unmet Need: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_unmet_need, 8))
			Call write_variable_in_CASE_NOTE("                                    |              DWP Max Grant: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_max_grant, 8))
			Call write_variable_in_CASE_NOTE("                                    | (=)              DWP Grant: $ " & right("        "&DWP_ELIG_APPROVALS(elig_ind).dwp_elig_budg_DWP_grant, 8))
		End If
		Call write_variable_in_CASE_NOTE("                                    |----------------------------------------")
	End If


	If DWP_ELIG_APPROVALS(elig_ind).dwp_autoclosed_for_time_limit = True or DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit = "FAILED" Then
		Call write_variable_in_CASE_NOTE("* DWP has reached the 4 Month Time Limit.")
		Call write_variable_in_CASE_NOTE("* DWP Eligibliity has ended as of " & first_month & ".")
	ElseIf DWP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = False Then
		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")
		Call write_variable_in_CASE_NOTE("* DWP is INELIGIBLE because not all CASE TESTS were passed.") '' to make this Household Eligible")

		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_application_withdrawn = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The request for DWP benefits was withdrawn. (APPLICATION WITHDRAWN)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_assets = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the Asset Limits. (ASSET)")
		'TODO add details about assets'
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_CS_disqualification = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case not complied with CS Requirements. (CS DISQUALIFICATION)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_death_of_applicant = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Memb 01 has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & "). (DEATH OF APPLICANT)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_dupl_assistance = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Benefits already received for this unit on another case/state. (DUPICATE ASSISTANCE)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_eligible_child = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is no eligible child on this case. (ELIGIBLE CHILD)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_ES_disqualification = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case not complied with ES Requirements. (E DISQUALIFICATION)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_fail_coop = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has failed to cooperate. (FAIL TO COOPERATE)")
			show_pact = False
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_one_prog = "DW" and STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "3" Then show_pact = True
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_two_prog = "DW" and STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "3" Then show_pact = True
			If show_pact = True Then
				Call write_variable_in_CASE_NOTE("   - Case ineligible due to: " & DWP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ". ")
				Call write_variable_in_CASE_NOTE("     INELIG created using PACT.")
				If DWP_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True Then Call write_variable_in_CASE_NOTE("     WCOM added to Notice with PACT reason.")

			End If
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_fail_coop_applied_other_benefits = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Did not verify application for other benefits.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_fail_coop_provide_requested_info = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Did provide reuested information.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_fail_coop_IEVS = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Has not cooperated with IEVS requirements.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_fail_coop_vendor_info = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Has not provided mandatory Vendor Information.")

			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_one_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_two_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_three_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_four_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_five_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has used all 4 DWP months. (FOUR MONTH LIMIT)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the Initial Income Test. (INITIAL INCOME)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_MFIP_conversion = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case is converting to MFIP. (MFIP CONVERSION)")

		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not established Minnesota residency. (RESIDENCE)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_strike = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The case has a member on strike. (STRIKE)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_TANF_time_limit = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the TANF Time Limit. (TANF TIME LIMIT)")

		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_transfer_of_assets = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case is not qualified due to improper trransfer of assets. (TRANSFER OF ASSETS)")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_verif = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Verifications were not received. (VERIFICATION)")
			Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & DWP_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_ACCT = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Bank account not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_BUSI = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Self Employment not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
				Next
			End If
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_CARS = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Vehicle not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_JOBS = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Job not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
					End if
				Next
			End if
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_MEMB_dob = "FAILED" Then Call write_variable_in_CASE_NOTE("   - HH Memb date of birth not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_MEMB_id = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Adult Memb ID not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_PARE = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Parental relationship not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_PREG = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Pregnancy not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_RBIC = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Self Employment - Roomer/Boarder Income not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_ADDR = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Address not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_SCHL = "FAILED" Then Call write_variable_in_CASE_NOTE("   - School information not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_SECU = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Securities asset not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_SPON = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Sponsor Income/Assets not verified.")
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_test_verif_UNEA = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
					End if
				Next
			End if

		End If
		If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_new_spouse_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Case exceeded New Spouse Income Limit. (275% FPG NSI)")
	End If

	If DWP_ELIG_APPROVALS(elig_ind).dwp_autoclosed_for_time_limit = False and DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit <> "FAILED" Then
		Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
		Call write_variable_in_CASE_NOTE("DWP Status:           " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_current_prog_status)
		Call write_variable_in_CASE_NOTE("Budget Cycle:         PROSP")
		If DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "ELIGIBLE" Then
			Call write_variable_in_CASE_NOTE("4th Month of ELIG:    " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_4th_month_of_elig)
			Call write_variable_in_CASE_NOTE("Crgvers have ES Plan: " & DWP_ELIG_APPROVALS(elig_ind).dwp_case_caregivers_have_es_plan)
		End If
	End If
	If DWP_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(DWP_UNIQUE_APPROVALS(process_for_note, unique_app))
	If DWP_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(DWP_UNIQUE_APPROVALS(changes_for_note, unique_app))
	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)

end function

function mfip_elig_case_note()
	Call back_to_SELF
	CASE_NOTE_entered = True
	call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for MFIP - " & elig_info & " eff " & first_month & header_end & vbCr
	Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)
	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", MFIP_ELIG_APPROVALS(elig_ind).mfip_approved_date)
	If add_new_note_for_MFIP = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	Call write_bullet_and_variable_in_CASE_NOTE("FIAT Reason", MFIP_UNIQUE_APPROVALS(fiat_reason, unique_app))
	Call write_bullet_and_variable_in_CASE_NOTE("SNAP Assessment", MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, unique_app))
	If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("================================ BENEFIT AMOUNT =============================")
		For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
			If InStr(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app), MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				beginning_text = MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year & " Entitlement: $ " & right("       " & replace(MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unmet_neet_subtotal, ".00", ""), 8) & " "
				If MFIP_ELIG_APPROVALS(approval).mfip_case_budg_prorate_date <> "" Then
					Call write_variable_in_CASE_NOTE(beginning_text & "| Prorated from " & MFIP_ELIG_APPROVALS(approval).mfip_case_budg_prorate_date)
					beginning_text = "                              "
				End If
				If MFIP_ELIG_APPROVALS(approval).mfip_case_budg_recoupment <> "0.00" Then
					Call write_variable_in_CASE_NOTE(beginning_text & "| Recoupment: $ " & MFIP_ELIG_APPROVALS(approval).mfip_case_budg_recoupment)
					beginning_text = "                              "
				End If
				Call write_variable_in_CASE_NOTE(beginning_text & "| Issuance-Cash: $" & left(replace(MFIP_ELIG_APPROVALS(approval).mfip_case_summary_cash_portion, ".00", "") & "     ", 5) & "-Food: $" & left(replace(MFIP_ELIG_APPROVALS(approval).mfip_case_summary_food_portion, ".00", "") & "     ", 5) & "-HG: $" & left(replace(MFIP_ELIG_APPROVALS(approval).mfip_case_summary_housing_grant, ".00", "") & "     ", 5))
				If MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year <> last_month Then Call write_variable_in_CASE_NOTE("-----------------------------------------------------------------------------")
				If MFIP_ELIG_APPROVALS(approval).mfip_case_budg_prorate_date <> "" Then Call write_bullet_and_variable_in_CASE_NOTE("Reason for Proration", SNAP_UNIQUE_APPROVALS(proration_reason, unique_app))
			End If
		Next
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_fs_case_test_opt_out_cash = "FAILED" Then Call write_variable_in_CASE_NOTE("* Case has selected to OPT OUT of MFIP CASH PORTION")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_fs_case_test_opt_out_housing_grant = "FAILED" Then Call write_variable_in_CASE_NOTE("* Case has selected to OPT OUT of MFIP HOUSING GRANT PORTION")
	End If

	vendor_header = "----------------------------- Vendor Payments -------------------------------"
	For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
		If InStr(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app), MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
			If MFIP_ELIG_APPROVALS(approval).mfip_mony_check_found = True Then
				for each_trans = 0 to UBound(MFIP_ELIG_APPROVALS(approval).mfip_check_program)
					If vendor_header <> "" Then
						Call write_variable_in_CASE_NOTE(vendor_header)
						vendor_header = ""
					End If
					Call write_variable_in_CASE_NOTE(MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year & " Vendor Check of $ " & replace(MFIP_ELIG_APPROVALS(approval).mfip_check_transaction_amount(each_trans), ".00", "") & " issued to " & MFIP_ELIG_APPROVALS(approval).mfip_check_vendor_name(each_trans) & " for " & MFIP_ELIG_APPROVALS(approval).mfip_check_payment_reason(each_trans))
				next
			End If
			If MFIP_ELIG_APPROVALS(approval).mfip_vnda_found = True Then
				for each_auth = 0 To UBound(MFIP_ELIG_APPROVALS(approval).mfip_vnda_vendor_number)
					If vendor_header <> "" Then
						Call write_variable_in_CASE_NOTE(vendor_header)
						vendor_header = ""
					End If
					Call write_variable_in_CASE_NOTE(MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year & " Vendor Auth of $ " & replace(MFIP_ELIG_APPROVALS(approval).mfip_vnda_total_payment_amount(each_auth), ".00", "") & " approved to " & MFIP_ELIG_APPROVALS(approval).mfip_vnda_vendor_name(each_auth) & " for " & MFIP_ELIG_APPROVALS(approval).mfip_vnda_expense_type_info(each_auth))
				next
			End If
		End If
	Next

	If MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("============================= BUDGET FOR APPROVAL ===========================")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_initial_income = "FAILED" Then Call write_variable_in_CASE_NOTE("MFIP INELIGIBLE because initial income exceeds Family Wage Level of " & trim(MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_family_wage_level))
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_monthly_income = "FAILED" Then Call write_variable_in_CASE_NOTE("MFIP INELIGIBLE because income exceeds benefit standard.")

		Call write_variable_in_CASE_NOTE("MFIP Assistance Unit: Caregivers: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_asst_unit_caregivers & ", Children: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_asst_unit_children)
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_counted_memb_allocation_exists = True or MFIP_ELIG_APPROVALS(elig_ind).mfip_deemer_allocation_exists = True Then
			Call write_variable_in_CASE_NOTE("*** MFIP Budget includes an ALLOCATION ****")
			Call write_variable_in_CASE_NOTE("    Details: " & MFIP_UNIQUE_APPROVALS(allocation_notes, unique_app))
		End If
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "PROSP" Then Call write_variable_in_CASE_NOTE("------- PROPSPECTIVE BUDGET --------|------ MFIP BENEFIT CALCULATION --------")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle = "RETRO" Then Call write_variable_in_CASE_NOTE("------ RETROSPECTIVE BUDGET --------|------ MFIP BENEFIT CALCULATION --------")
		Call write_variable_in_CASE_NOTE("Earned Income:                      |          Family Wage Level: $ " & right("        " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_family_wage_level, 8))

		earned_info = "|          (-) Earned Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_earned_income, 8)

		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("        Count: $" & STAT_INFORMATION(month_ind).stat_jobs_one_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("        Count: $" & STAT_INFORMATION(month_ind).stat_jobs_two_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("        Count: $" & STAT_INFORMATION(month_ind).stat_jobs_three_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("        Count: $" & STAT_INFORMATION(month_ind).stat_jobs_four_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("        Count: $" & STAT_INFORMATION(month_ind).stat_jobs_five_mfip_counted_amt(each_memb) & spaces_30, 36) & "|")
				earned_info = "|"
			End If


			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_busi_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  BUSI- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_one_mfip_counted_amt(each_memb) & spaces_30, 36))
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_busi_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  BUSI- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_two_mfip_counted_amt(each_memb) & spaces_30, 36))
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_busi_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  BUSI- $" & job_detail & earned_info)
				Call write_variable_in_CASE_NOTE(left("       Count: $" & STAT_INFORMATION(month_ind).stat_busi_three_mfip_counted_amt(each_memb) & spaces_30, 36))
				earned_info = "|"
			End If
			For mf_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
				If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(mf_memb) Then
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_deduction(mf_memb) <> "0.00" AND MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_deduction(mf_memb) <> "" Then
						Call write_variable_in_CASE_NOTE(left("  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_deduction(mf_memb) & " ALLOCATION" & spaces_30, 36) & "|")
						Call write_variable_in_CASE_NOTE(left("    from MEMB " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(mf_memb) & " Earned Income" & spaces_30, 36) & "|")
					End If
				End If
			Next
		Next
		If earned_info = "|          (-) Earned Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_earned_income, 8) Then Call write_variable_in_CASE_NOTE("  NO EARNED Income                  " & earned_info)

		Call write_variable_in_CASE_NOTE("                                    |                 Difference: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_wage_level_earned_inc_difference, 8))
		Call write_variable_in_CASE_NOTE("                               |---------------------------------|")
		Call write_variable_in_CASE_NOTE("                               |       FWL Difference: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_wage_level_earned_inc_difference, 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |Transitional Standard: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_transitional_standard, 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |         Monthly Need: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_need, 8) & "|")
		Call write_variable_in_CASE_NOTE("Other Income:                  |---------------------------------|")

		unearned_info = "| (-)        Unearned Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unearned_income, 8)
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_unearned_income_exists = True Then Call write_variable_in_CASE_NOTE(left(" Unearned Income: " & spaces_30, 36) & "| (-)        Unearned Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deemed_income, 8))
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_mfip(each_memb) = True Then
				STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) = replace(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb), "Disbursed", "DISB")
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			For mf_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
				If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(mf_memb) Then
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_balance(mf_memb) <> "0.00" AND MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_balance(mf_memb) <> "" Then
						Call write_variable_in_CASE_NOTE(left("  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_balance(mf_memb) & " ALLOCATION" & spaces_30, 36) & "|")
						Call write_variable_in_CASE_NOTE(left("    from MEMB " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(mf_memb) & " Unearned Income" & spaces_30, 36) & "|")
					End If
				End If
			Next
		Next
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_unearned_income_exists = False Then Call write_variable_in_CASE_NOTE(" NO UNEARNED Income                 | (-)        Unearned Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unearned_income, 8))

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_deemed_income_exists = True Then Call write_variable_in_CASE_NOTE(left(" Deemed Income: " & spaces_30, 36) & "| (-)          Deemed Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deemed_income, 8))
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
				' deemed_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & "|")
			End If

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_busi_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  BUSI- $" & job_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_busi_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  BUSI- $" & job_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_deemed_for_mfip(each_memb) = True Then
				job_detail = left(STAT_INFORMATION(month_ind).stat_busi_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  BUSI- $" & job_detail & "|")
			End If

			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_deemed_for_mfip(each_memb) = True Then
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_one_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_deemed_for_mfip(each_memb) = True Then
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_two_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_deemed_for_mfip(each_memb) = True Then
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_three_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_deemed_for_mfip(each_memb) = True Then
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_four_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_deemed_for_mfip(each_memb) = True Then
				unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_five_mfip_gross_amt(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 27)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & "|")
			End If
			For mf_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
				If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(mf_memb) Then
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_allocation(mf_memb) <> "0.00" AND MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_allocation(mf_memb) <> "" Then
						Call write_variable_in_CASE_NOTE(left("  $ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_allocation(mf_memb) & " ALLOCATION" & spaces_30, 36) & "|")
						Call write_variable_in_CASE_NOTE(left("    from MEMB " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(mf_memb) & " Deemed Income" & spaces_30, 36) & "|")
					End If
				End If
			Next
		Next
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_deemed_income_exists = False Then Call write_variable_in_CASE_NOTE(" NO DEEMED Income                   | (-)          Deemed Income: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deemed_income, 8))

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_cses_exclusion = "0.00" Then  Call write_variable_in_CASE_NOTE("Exclsn: NO CSES Exclusion           | (+)Child Support Exclusion: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_cses_exclusion, 8))
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_cses_exclusion <> "0.00" Then
			Call write_variable_in_CASE_NOTE("Exclsn: Child Supp. Income $" & left(MFIP_ELIG_APPROVALS(elig_ind).mfip_budg_cses_excln_cses_income&"        ", 8) & "| (+)Child Support Exclusion: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_cses_exclusion, 8))
			Call write_variable_in_CASE_NOTE("        Child Count: " & left(MFIP_ELIG_APPROVALS(elig_ind).mfip_budg_cses_excln_child_count&"  ", 2) & "             |")
		End If
		Call write_variable_in_CASE_NOTE("                                    |                 Unmet Need: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need, 8))


		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deduction_sanction_vendor <> "0.00" Then
			Call write_variable_in_CASE_NOTE("                                    |-------- SANCTION CALCULATION ----------")
			Call write_variable_in_CASE_NOTE("                                    |                 Unmet Need: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_unmet_need, 8))
			Call write_variable_in_CASE_NOTE("                                    | (-) 10% of standard to MAX: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_10_perc_sanc, 8))
			Call write_variable_in_CASE_NOTE("                                    |   Need after pre-vndr Sanc: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need_after_pre_vndr_sanc, 8))
			Call write_variable_in_CASE_NOTE("                                    |               Food Portion: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_sanc_calc_food_portion, 8))
			Call write_variable_in_CASE_NOTE("                                    |               Cash Portion: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_sanc_calc_cash_portion, 8))
			Call write_variable_in_CASE_NOTE("                                    |      Potential Mand.Vendor: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_pot_mand_vndr_pymts, 8))
			Call write_variable_in_CASE_NOTE("                                    | (-) 30% of standard to MAX: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_30_perc_sanc, 8))
			Call write_variable_in_CASE_NOTE("                                    |  Total Sanction and Vendor: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need_cash_portion, 8))
			Call write_variable_in_CASE_NOTE("                                    |----------------------------------------")

		End if

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need_cash_portion <> MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_cash_after_sanc_portion Then

			Call write_variable_in_CASE_NOTE("                                    |----- CASH ISSUANCE CALCULATION --------")
			Call write_variable_in_CASE_NOTE("                                    |               Cash Portion: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need_cash_portion, 8))
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unmet_need_cash_portion <> "0.00" and MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deduction_subsidy_tribal_cses <> "0.00" Then Call write_variable_in_CASE_NOTE("                                    | (-)      Subsidy Reduction: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deduction_subsidy_tribal_cses, 8))
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_mand_sanc_vendor <> "0.00" Then Call write_variable_in_CASE_NOTE("                                    | (+)   Mand Sanction Vendor: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_mand_sanc_vendor, 8))
			Call write_variable_in_CASE_NOTE("                                    |              Cash Issuance: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_cash_after_sanc_portion, 8))
			Call write_variable_in_CASE_NOTE("                                    |----------------------------------------")
		End If
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_food_portion <> MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_fed_food_benefit Then
			Call write_variable_in_CASE_NOTE("                                    |----- FOOD ISSUANCE CALCULATION --------")
			Call write_variable_in_CASE_NOTE("                                    |               Food Portion: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_net_food_portion, 8))
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_non_citzn_fs_inelig_amt <> "0.00" Then Call write_variable_in_CASE_NOTE("                                    | (-)     Non-Citizen INELIG: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_non_citzn_fs_inelig_amt, 8))
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_other_fs_inelig_amt <> "0.00" Then Call write_variable_in_CASE_NOTE("                                    | (-)           Other INELIG: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_other_fs_inelig_amt, 8))
			Call write_variable_in_CASE_NOTE("                                    |              Food Issuance: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_fed_food_benefit, 8))
			Call write_variable_in_CASE_NOTE("                                    |----------------------------------------")

		End If
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_entitlement_housing_grant = "110.00" Then Call write_variable_in_CASE_NOTE("Housing Grant Eligible: Yes         |       Housing Grant Amount: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_entitlement_housing_grant, 8))
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_entitlement_housing_grant = "0.00" Then Call write_variable_in_CASE_NOTE("Housing Grant Eligible: No          |       Housing Grant Amount: $ " & right("        "&MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_entitlement_housing_grant, 8))

		'TODO - add vendor detail

	End If

	If MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = False Then
		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")
		Call write_variable_in_CASE_NOTE("* MFIP is INELIGIBLE because not all CASE TESTS were passed.") '' to make this Household Eligible")


		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_appl_withdraw = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The request for MFIP benefits was withdrawn. (APPLICATION WITHDRAWN)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_asset = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the Asset Limits. (ASSET)")
		'TODO add details about assets'
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_death_applicant = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Memb 01 has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & "). (DEATH OF APPLICANT)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_dupl_assist = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Benefits already received for this unit on another case/state. (DUPICATE ASSISTANCE)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_elig_child = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is no eligible child on this case. (ELIGIBLE CHILD)")

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_coop = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has failed to cooperate. (FAIL TO COOPERATE)")
			show_pact = False
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_one_prog = "MF" and STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "3" Then show_pact = True
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_two_prog = "MF" and STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "3" Then show_pact = True
			If show_pact = True Then
				Call write_variable_in_CASE_NOTE("   - Case ineligible due to: " & MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ". ")
				Call write_variable_in_CASE_NOTE("     INELIG created using PACT.")
				If MFIP_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True Then Call write_variable_in_CASE_NOTE("     WCOM added to Notice with PACT reason.")

			End If

			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_one_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_two_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_three_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_four_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_five_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_file = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has failed to file a report. (FAIL TO FILE)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_initial_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the Initial Income Test. (INITIAL INCOME)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_minor_liv_arrange = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The minor licving arrangement has not been assessed and determined. (MINOR LIVING ARRANGEMENT)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_monthly_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - . This case has exceeded the Monthly Income Test.(MONTHLY INOCME)")

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_post_60_disq = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case is not qualified to receive POST 60 TANF. (POST 60 DISQ)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not established Minnesota residency. (RESIDENCE)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_sanction_limit = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the sanction limit. (SANCTION LIMIT)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_strike = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The case has a member on strike. (STRIKE)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_TANF_time_limit = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the TANF Time Limit. (TANF TIME LIMIT)")

		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_transfer_asset = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case is not qualified due to improper trransfer of assets. (TRANSFER OF ASSETS)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_verif = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Verifications were not received. (VERIFICATION)")
			Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & MFIP_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_ACCT = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Bank account not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_BUSI = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Self Employment not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_busi_one_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_cash_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_busi_two_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_cash_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_busi_three_cash_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_cash_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
				Next
			End If
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_CARS = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Vehicle not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_JOBS = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Job not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
					End if
				Next
			End if
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_MEMB_dob = "FAILED" Then Call write_variable_in_CASE_NOTE("   - HH Memb date of birth not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_MEMB_id = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Adult Memb ID not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_PARE = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Parental relationship not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_PREG = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Pregnancy not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_RBIC = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Self Employment - Roomer/Boarder Income not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_ADDR = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Address not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_SCHL = "FAILED" Then Call write_variable_in_CASE_NOTE("   - School information not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_SECU = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Securities asset not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_SHEL = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Shelter expense not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_SPON = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Sponsor Income/Assets not verified.")
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_UNEA = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
					End if
				Next
			End if
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_verif_MEMI = "FAILED" Then Call write_variable_in_CASE_NOTE("   - State Residence not verified.")

		End If
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_275_new_spouse_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Case exceeded New Spouse Income Limit. (275% FPG NSI)")
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_fs_case_test_fail_coop_snap_qc = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not cooperated with SNAP QC. (FAIL to COOP SNAP QC)")
	End If

	Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
	Call write_variable_in_CASE_NOTE("MFIP Status:      " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_current_prog_status)
	Call write_variable_in_CASE_NOTE("Budget Cycle:     " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budget_cycle)

	If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("Reporting Status: " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_hrf_reporting)
		Call write_variable_in_CASE_NOTE("Review Date:      " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_review_date)
	End If
	If MFIP_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(MFIP_UNIQUE_APPROVALS(process_for_note, unique_app))
	If MFIP_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(MFIP_UNIQUE_APPROVALS(changes_for_note, unique_app))

	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)
end function

function mfip_special_diet_case_note()
	Call back_to_SELF
	CASE_NOTE_entered = True
	end_msg_info = end_msg_info & "NOTE entered for MFIP Special Diet - Check Issued for " & left( MFIP_ELIG_APPROVALS(elig_select).MFSD_check_from_date, 2) & "/" & right( MFIP_ELIG_APPROVALS(elig_select).MFSD_check_from_date, 2) & vbCr

	call start_a_blank_case_note
	Call write_variable_in_CASE_NOTE("APPROVAL - MFIP Special Diet Issuance for " & left( MFIP_ELIG_APPROVALS(elig_select).MFSD_check_from_date, 2) & "/" & right( MFIP_ELIG_APPROVALS(elig_select).MFSD_check_from_date, 2))
	Call write_bullet_and_variable_in_CASE_NOTE("Check Issued Date", MFIP_ELIG_APPROVALS(elig_select).MFSD_check_issue_date)
	If MFIP_ELIG_APPROVALS(elig_select).MFSD_check_count > 1 Then Call write_variable_in_CASE_NOTE("* Amount issued in " & MFIP_ELIG_APPROVALS(elig_select).MFSD_check_count & " checks.")
	Call write_variable_in_CASE_NOTE("* Check Issued For:")
	For each_memb = 0 to UBound(STAT_INFORMATION(month_select).stat_memb_ref_numb)
		If STAT_INFORMATION(month_select).stat_mfip_diet_exists(each_memb) = True Then
			Call write_variable_in_CASE_NOTE("  - MEMB " & STAT_INFORMATION(month_select).stat_memb_ref_numb(each_memb) & " - " & STAT_INFORMATION(month_select).stat_memb_full_name_no_initial(each_memb))
		End If
	Next
	Call write_variable_in_CASE_NOTE("================================ BENEFIT AMOUNT =============================")
	Call write_bullet_and_variable_in_CASE_NOTE("Check Amount", "$ " & FormatNumber(MFIP_ELIG_APPROVALS(elig_select).MFSD_check_transaction_amount, 2, -1, 0, -1))
	Call write_variable_in_CASE_NOTE("=============================== DIET INFORMATION ============================")

	For each_memb = 0 to UBound(STAT_INFORMATION(month_select).stat_memb_ref_numb)
		If STAT_INFORMATION(month_select).stat_diet_exists(each_memb) = True Then
			If STAT_INFORMATION(month_select).stat_diet_mf_type_code_one(each_memb) <> "" and STAT_INFORMATION(month_select).stat_diet_mf_verif_one(each_memb) = "Y" Then
				Call write_variable_in_CASE_NOTE("* MEMB " & STAT_INFORMATION(month_select).stat_memb_ref_numb(each_memb) & " - Diet Type: " & STAT_INFORMATION(month_select).stat_diet_mf_type_info_one(each_memb) & " for $ " & FormatNumber(STAT_INFORMATION(month_select).stat_diet_mf_amount_one(each_memb), 2, -1, 0, -1))
			End If
			If STAT_INFORMATION(month_select).stat_diet_mf_type_code_two(each_memb) <> "" and STAT_INFORMATION(month_select).stat_diet_mf_verif_two(each_memb) = "Y" Then
				Call write_variable_in_CASE_NOTE("* MEMB " & STAT_INFORMATION(month_select).stat_memb_ref_numb(each_memb) & " - Diet Type: " & STAT_INFORMATION(month_select).stat_diet_mf_type_info_two(each_memb) & " for $ " & FormatNumber(STAT_INFORMATION(month_select).stat_diet_mf_amount_two(each_memb), 2, -1, 0, -1))
			End If
		End If
	Next
	If MFIP_ELIG_APPROVALS(elig_select).MFSD_overlap_exists = True Then
		Call write_variable_in_CASE_NOTE("  The check issued is for the diet that gives the largest benefit.")
		Call write_variable_in_CASE_NOTE("  These amounts are not combined.")
	End If
	If MFIP_ELIG_APPROVALS(elig_select).MFSD_diet_info_missing = True Then
		Call write_variable_in_CASE_NOTE("* Not all diet details are listed on STAT/DIET.")
		If MFIP_ELIG_APPROVALS(elig_select).MFSD_missing_diet_note <> "" Then
			Call write_variable_in_CASE_NOTE("  Additional DIET Details: " & MFIP_ELIG_APPROVALS(elig_select).MFSD_missing_diet_note)
		End If
	End If

	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)
end function

function msa_elig_case_note()
	CASE_NOTE_entered = True
	Call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for MSA - " & elig_info & " eff " & first_month & header_end & vbCr
	Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)

	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_approved_date)
	If add_new_note_for_MSA = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	Call write_bullet_and_variable_in_CASE_NOTE("FIAT Reason", MSA_UNIQUE_APPROVALS(fiat_reason, unique_app))

	If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("================================ BENEFIT AMOUNT =============================")
		For approval = 0 to UBound(MSA_ELIG_APPROVALS)
			If InStr(MSA_UNIQUE_APPROVALS(months_in_approval, unique_app), MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				begining_info = MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year & ": Entitlement: $ " & right("       " & MSA_ELIG_APPROVALS(approval).msa_elig_budg_msa_grant, 8) & " |"

				If MSA_ELIG_APPROVALS(approval).msa_elig_budg_amount_already_issued <> "0.00" Then
					Call write_variable_in_CASE_NOTE(begining_info & " Amt Already Issued: $ " & right("       " & MSA_ELIG_APPROVALS(approval).msa_elig_budg_amount_already_issued, 8) & "  (-)")
					begining_info = "                               |"
				End If
				If MSA_ELIG_APPROVALS(approval).msa_elig_budg_recoupment <> "0.00" Then
					Call write_variable_in_CASE_NOTE(begining_info & "         Recoupment: $ " & right("       " & MSA_ELIG_APPROVALS(approval).msa_elig_budg_recoupment, 8) & "  (-)")
					begining_info = "                               |"
				End If
				Call write_variable_in_CASE_NOTE(begining_info & " Issued to Resident: $ " & right("       " & MSA_ELIG_APPROVALS(approval).msa_elig_budg_current_payment, 8) & "         " & MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year)
				If MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year <> last_month and begining_info = "                               |"Then Call write_variable_in_CASE_NOTE("-----------------------------------------------------------------------------")
			End If
		Next
	End If


	If MSA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("============================= BUDGET FOR APPROVAL ===========================")

		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_gross_income = "FAILED" Then Call write_variable_in_CASE_NOTE("MSA INELIGIBLE because Prosp Gross Inc exceeds INCOME Limit.")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE("MSA INELIGIBLE because Prosp Net Inc exceeds INCOME Limit.")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_retro_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE("MSA INELIGIBLE because Retro Net Inc exceeds INCOME Limit.")

		Call write_variable_in_CASE_NOTE(left("MSA Unit Size: " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligible_houshold_members & "                              ", 44)  & "|---- MSA Benefit Calculation ---")
		Call write_variable_in_CASE_NOTE("Income:                                     |")

		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_budg_type = "SSI TYPE" Then
			unearned_info = "| SSI Standard (FBR): $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_ssi_standard_fbr, 8)
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
			Next
			If unearned_info = "|         SSI Income: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_ssi_standard_fbr, 8) Then Call write_variable_in_CASE_NOTE("  NO Unearned Income                        |         SSI Income: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_ssi_standard_fbr, 8))
			Call write_variable_in_CASE_NOTE("                                            |(-)  Stndrd Disrgrd: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_standard_disregard, 8))

		End If

		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_budg_type = "Non-SSI TYPE" Then

			unearned_info = "|       Unearned Inc: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_unearned_income, 8)
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_msa(each_memb) = True Then
					list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
						unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".")
						list_unea_amt = unea_amt_array(0)
					End If
					unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
					unearned_info = "|"
				End If
			Next
			If unearned_info = "|       Unearned Inc: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_unearned_income, 8) Then Call write_variable_in_CASE_NOTE("  NO Unearned Income                        |       Unearned Inc: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_unearned_income, 8))

			Call write_variable_in_CASE_NOTE("                                            |      Deemed Income: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_deemed_income, 8))
			Call write_variable_in_CASE_NOTE("                                            |(-)  Stndrd Disrgrd: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_standard_disregard, 8))
			Call write_variable_in_CASE_NOTE("                                            |   Net Unearned Inc: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_unearned_income, 8))

			JOBS_info = "|     Net Earned Inc: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_earned_income, 8)
			BUSI_found = False
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb), ".") <> 0 Then
						job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb), ".")
						pay_info = job_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "JOBS- $" & job_detail & JOBS_info)
					JOBS_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb), ".") <> 0 Then
						job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb), ".")
						pay_info = job_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "JOBS- $" & job_detail & JOBS_info)
					JOBS_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb), ".") <> 0 Then
						job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb), ".")
						pay_info = job_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "JOBS- $" & job_detail & JOBS_info)
					JOBS_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb), ".") <> 0 Then
						job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb), ".")
						pay_info = job_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "JOBS- $" & job_detail & JOBS_info)
					JOBS_info = "|"
				End If
				If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb), ".") <> 0 Then
						job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb), ".")
						pay_info = job_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "JOBS- $" & job_detail & JOBS_info)
					JOBS_info = "|"
				End If
				If JOBS_info = "|     Net Earned Inc: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_earned_income, 8) Then Call write_variable_in_CASE_NOTE(left("  NO Wages/Salary Income "& spaces_30, 44) & JOBS_info)

				If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb), ".") <> 0 Then
						busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb), ".")
						pay_info = busi_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "BUSI- $" & busi_details & "|")
					BUSI_found = True
				End If
				If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb), ".") <> 0 Then
						busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb), ".")
						pay_info = busi_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "BUSI- $" & busi_details & "|")
					BUSI_found = True
				End If
				If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_msa(each_memb) = True Then
					pay_info = STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb)
					If InStr(STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb), ".") <> 0 Then
						busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb), ".")
						pay_info = busi_amt_array(0)
					End if
					If pay_info = "" Then pay_info = "0"

					busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 35)
					Call write_variable_in_CASE_NOTE("  " & "BUSI- $" & busi_details & "|")

					BUSI_found = True
				End If
			Next
			If BUSI_found = False Then Call write_variable_in_CASE_NOTE(left("  NO Self Employment Income "& spaces_30, 44) & "|")

			Call write_variable_in_CASE_NOTE("                                            |         Net Income: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_income, 8))

		End If

		Call write_variable_in_CASE_NOTE("                               |---- Need Standard Calulation ---|")

		Call write_variable_in_CASE_NOTE("                               |   Basic Needs Stndrd: $ " & left(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_basic_needs_assistance_standard&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |        Special Needs: $ " & left(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_special_needs&"        ", 8) & "|")
		first_spec_need = True
		for spec_stdrd = 0 to UBound(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info)
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_amount(spec_stdrd) <> "" Then
				If first_spec_need = True Then
					' Call write_variable_in_CASE_NOTE("                               |---------------------------------|")
					Call write_variable_in_CASE_NOTE("                               | Special Needs ------------------|")
				End If
				Call write_variable_in_CASE_NOTE("                               |  " & left(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_info(spec_stdrd)&spaces_30, 22) & "$ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_amount(spec_stdrd), 6) & " |")
				first_spec_need = False
			End If
		Next
		If first_spec_need = True Then Call write_variable_in_CASE_NOTE("                               |                No Special Needs |")
		If first_spec_need = False Then Call write_variable_in_CASE_NOTE("                               |---------------------------------|")

		Call write_variable_in_CASE_NOTE("                               |          Total Needs: $ " & left(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_household_total_needs&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |---------------------------------|")

		Call write_variable_in_CASE_NOTE("                                            |      Need Standard: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_need_standard, 8))
		Call write_variable_in_CASE_NOTE("                                            | (-)     Net Income: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_net_income, 8))
		Call write_variable_in_CASE_NOTE("                                            |          MSA Grant: $ " & right("        "&MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_msa_grant, 8))
	End If

	If MSA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = False Then
		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")

		Call write_variable_in_CASE_NOTE("* MSA is INELIGIBLE because not all CASE TESTS were passed.") '' to make this Household Eligible")

		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_applicant_eligible = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The applicant is not eligible for MSA. (APPLICANT ELIGIBLE)")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_application_withdrawn = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The request for MSA benefits was withdrawn. (APPLICATION WITHDRAWN)")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_eligible_member = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is no eligible person on this case. (ELIGIBLE MEMBER)")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_fail_file = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has failed to file a report. (FAIL TO FILE)")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_gross_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - . ()")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - . ()")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not established Minnesota residency. (RESIDENCE)")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_assets = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the Asset Limit. (ASSET)")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_retro_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE(" - . ()")
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_verif = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Verifications were not received. (VERIFICATION)")
			Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & MSA_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
			first_job_not_verified = True
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
				End if
			Next

			first_busi_not_verified = True
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_snap_expense_verif_code(each_memb) = "N" Then
					If first_busi_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
					first_busi_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_snap_expense_verif_code(each_memb) = "N" Then
					If first_busi_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
					first_busi_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_snap_expense_verif_code(each_memb) = "N" Then
					If first_busi_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
					first_busi_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				End if
			Next

			first_unea_not_verified = True
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
				End if
			Next
		End If

	End If

	For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
		first_inelig_memb = True
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_elig_status(each_memb) = "INELIGIBLE" Then
			If first_inelig_memb = True Then Call write_variable_in_CASE_NOTE("================================ MEMBER TESTS ===============================")
			first_inelig_memb = False

			Call write_variable_in_CASE_NOTE(" - Memb " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " is not eligible for MSA.")

			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_absence(each_memb) = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " is not in the household.")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_absence_absent(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Moved out.")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_absence_death(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(each_memb) & ").")
			End if
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_age(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " does not meet age requirements.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_basis_of_eligibility(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " does not meet a basis of eligibility for MSA.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_citizenship(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " does not meet citizenship requirements.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_dupl_assistance(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & "  has received MSA assisnce on another case.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_fail_coop(each_memb) = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " failed to cooperate")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_fail_coop_sign_iaas(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Failed to sign IAAs")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_fail_coop_applied_other_benefits(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Failed to apply for Other Maintence Benefits")
			End If
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_fraud(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " is not eligible due to fraud.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_ive_eligible(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " has IV-E eligibility.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_living_arrangement(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " is not in a qualified living arragement.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_ssi_basis(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " does not have an SSI basis.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_ssn_coop(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " has not cooperated with SSN requirements.")
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_unit_member(each_memb) = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " Is not a part of the MSA household")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_unit_member_faci(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Is in a facility.")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_unit_member_relationship(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Is not related to the MSA member(s).")
			End If
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_verif(each_memb) = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Memb " &  MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(each_memb) & " has not provided necessary verifications.")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_verif_date_of_birth(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Need Date of Birth verification.")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_verif_disability(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Need Disability verification.")
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_membs_test_verif_ssi(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("     Need SSI verification.")
			End If
		End If
	Next

	Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
	Call write_variable_in_CASE_NOTE("MSA Status:       " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_curr_prog_status)
	Call write_variable_in_CASE_NOTE("Shared Household: " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_shared_houshold)
	Call write_variable_in_CASE_NOTE("Budget Cycle:     " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_budget_cycle)
	If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("Reporting Status: " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_reporting_status)
		Call write_variable_in_CASE_NOTE("Review Date:      " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_recertification_date)
	End If
	If MSA_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(MSA_UNIQUE_APPROVALS(process_for_note, unique_app))
	If MSA_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(MSA_UNIQUE_APPROVALS(changes_for_note, unique_app))
	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)

end function

function ga_elig_case_note()
	CASE_NOTE_entered = True
	Call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for GA - " & elig_info & " eff " & first_month & header_end & vbCr
	Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)

	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_approved_date)
	If add_new_note_for_GA = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result = "ELIGIBLE" Then
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_pers_needs_payment_subtotal <> "0.00" Then
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_payment_subtotal = "0.00" Then Call write_variable_in_CASE_NOTE("* The GA payment is from the Personal Needs Standard.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_payment_subtotal <> "0.00" Then Call write_variable_in_CASE_NOTE("* A portion of the GA payment is from the Personal Needs Standard.")
			Call write_variable_in_CASE_NOTE("  Resident is in a facility.")
		End If
		Call write_variable_in_CASE_NOTE("================================ BENEFIT AMOUNT =============================")
		For approval = 0 to UBound(GA_ELIG_APPROVALS)
			If InStr(GA_UNIQUE_APPROVALS(months_in_approval, unique_app), GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				amt_issued_info = ""
				recoup_info = ""
				issued__to_resident_info = "| Issued to Resident: $ " & right("       " & GA_ELIG_APPROVALS(approval).ga_elig_summ_amount_to_be_paid, 8) & "         " & GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year

				If GA_ELIG_APPROVALS(approval).ga_elig_amt_already_issued <> "" Then amt_issued_info = "| Amt Already Issued: $ " & right("       " & GA_ELIG_APPROVALS(approval).ga_elig_amt_already_issued, 8) & "  (-)"
				If GA_ELIG_APPROVALS(approval).ga_elig_recoupmment <> "" Then recoup_info = "|         Recoupment: $ " & right("       " & GA_ELIG_APPROVALS(approval).ga_elig_recoupmment, 8) & "  (-)"

				ga_reg_benefit_line = ""
				ga_pers_nds_benefit_line = ""
				If GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_standard <> "0.00" Then
					prorate_begin = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_from
					prorate_end = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_to
					prorate_amt = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_grant_subtotal
					ga_reg_benefit_line = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year & "  GA Benefit : $ " & right("       " & GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_subtotal, 8) & " "
					If prorate_begin <> "" OR prorate_end <> "" Then
						ga_reg_benefit_line = ga_reg_benefit_line & "|           Prorated: $ " & right("        " & prorate_amt, 8) & " " & prorate_begin & " - " & prorate_end
						reg_prorate_begin = prorate_begin & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
						If IsDate(reg_prorate_begin) = True Then
							reg_prorate_begin = DateAdd("d", 0, reg_prorate_begin)
						End If
					End If

				End If
				If GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_standard <> "0.00" Then
					prorate_begin = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_prorated_from
					prorate_end = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_prorated_to
					prorate_amt = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_grant_subtotal
					ga_pers_nds_benefit_line = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year & "  Persnl Need: $ " & right("       " & GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_subtotal, 8) & " "
					If prorate_begin <> "" OR prorate_end <> "" Then
						ga_pers_nds_benefit_line = ga_pers_nds_benefit_line & "|           Prorated: $ " & right("        " & prorate_amt, 8) & " " & prorate_begin & " - " & prorate_end
						pers_nds_prorate_begin = prorate_begin & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
						If IsDate(pers_nds_prorate_begin) = True Then
							pers_nds_prorate_begin = DateAdd("d", 0, pers_nds_prorate_begin)
						End If
					End If
				End If
				add_divider = false
				If GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_subtotal <> "0.00" AND GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_subtotal <> "0.00" Then
					If IsDate(reg_prorate_begin) = True and IsDate(pers_nds_prorate_begin) = True Then
						If DateDiff("d", reg_prorate_begin, pers_nds_prorate_begin) >=0 Then
							Call write_variable_in_CASE_NOTE(ga_reg_benefit_line)
							Call write_variable_in_CASE_NOTE(ga_pers_nds_benefit_line)
						Else
							Call write_variable_in_CASE_NOTE(ga_pers_nds_benefit_line)
							Call write_variable_in_CASE_NOTE(ga_reg_benefit_line)
						End If
					Else
						Call write_variable_in_CASE_NOTE(ga_reg_benefit_line)
						Call write_variable_in_CASE_NOTE(ga_pers_nds_benefit_line)
					End If
					add_divider = true
					Call write_variable_in_CASE_NOTE("                               |  Total Entitlement: $ " & right("       " & GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_ga_grant_amount, 8))
				Else
					If ga_reg_benefit_line <> "" Then
						If InStr(ga_reg_benefit_line, "Prorated") = 0 Then
							If amt_issued_info <> "" Then
								ga_reg_benefit_line = ga_reg_benefit_line & amt_issued_info
								amt_issued_info = ""
							ElseIf recoup_info <> "" Then
								ga_reg_benefit_line = ga_reg_benefit_line & recoup_info
								recoup_info = ""
							Else
								ga_reg_benefit_line = ga_reg_benefit_line & issued__to_resident_info
								issued__to_resident_info = ""
							End If
						End If
						Call write_variable_in_CASE_NOTE(ga_reg_benefit_line)
					End If
					If ga_pers_nds_benefit_line <> "" Then
						If InStr(ga_pers_nds_benefit_line, "Prorated") = 0 Then
							If amt_issued_info <> "" Then
								ga_pers_nds_benefit_line = ga_pers_nds_benefit_line & amt_issued_info
								amt_issued_info = ""
							ElseIf recoup_info <> "" Then
								ga_pers_nds_benefit_line = ga_pers_nds_benefit_line & recoup_info
								recoup_info = ""
							Else
								ga_pers_nds_benefit_line = ga_pers_nds_benefit_line & issued__to_resident_info
								issued__to_resident_info = ""
							End If
						End If
						Call write_variable_in_CASE_NOTE(ga_pers_nds_benefit_line)
					End If

				End If
				If amt_issued_info <> "" Then Call write_variable_in_CASE_NOTE("                               " & amt_issued_info)
				If recoup_info <> "" Then Call write_variable_in_CASE_NOTE("                               " & recoup_info)
				If issued__to_resident_info <> "" Then Call write_variable_in_CASE_NOTE("                               " & issued__to_resident_info)
				If amt_issued_info <> "" or recoup_info <> "" or issued__to_resident_info <> "" Then add_divider = true
				If GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year = last_month Then add_divider = false
				If GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_from <> "" or GA_ELIG_APPROVALS(approval).ga_elig_case_budg_prorated_to <> "" Then Call write_bullet_and_variable_in_CASE_NOTE("Reason for Proration", GA_UNIQUE_APPROVALS(proration_reason, unique_app))

				If add_divider = true Then Call write_variable_in_CASE_NOTE("-----------------------------------------------------------------------------")
			End If
		Next
	End If

	If GA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("============================= BUDGET FOR APPROVAL ===========================")

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_prosp_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE("GA INELIGIBLE because Prosp Inc exceeds INCOME Limit.")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_retro_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE("GA INELIGIBLE because Retro Inc exceeds INCOME Limit.")

		Call write_variable_in_CASE_NOTE(left("GA Unit Size: " & GA_ELIG_APPROVALS(elig_ind).ga_elig_memb_hh_count & "                              ", 44)  & "|---- GA Benefit Calculation ----")

		Call write_variable_in_CASE_NOTE("Income:                                     |")
		beginning_txt = "  "
		JOBS_info = "|    Gross Wages Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_gross_wages, 8)
		BUSI_info = "| Self Employmnt Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_gross_self_emp, 8)
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_one_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_one_ga_gross_amt(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_one_ga_gross_amt(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & JOBS_info)
				beginning_txt = "  "
				JOBS_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_two_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_two_ga_gross_amt(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_two_ga_gross_amt(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & JOBS_info)
				beginning_txt = "  "
				JOBS_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_three_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_three_ga_gross_amt(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_three_ga_gross_amt(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & JOBS_info)
				beginning_txt = "  "
				JOBS_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_four_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_four_ga_gross_amt(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_four_ga_gross_amt(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & JOBS_info)
				beginning_txt = "  "
				JOBS_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_five_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_five_ga_gross_amt(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_five_ga_gross_amt(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & JOBS_info)
				beginning_txt = "  "
				JOBS_info = "|"
			End If
			If JOBS_info = "|    Gross Wages Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_gross_wages, 8) Then Call write_variable_in_CASE_NOTE(left("  NO Wages/Salary Income "& spaces_30, 44) & JOBS_info)

			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_busi_one_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_busi_one_ga_gross_amt(each_memb), ".") <> 0 Then
					busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_one_ga_gross_amt(each_memb), ".")
					pay_info = busi_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "BUSI- $" & busi_details & BUSI_info)
				beginning_txt = "            "
				BUSI_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_busi_two_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_busi_two_ga_gross_amt(each_memb), ".") <> 0 Then
					busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_two_ga_gross_amt(each_memb), ".")
					pay_info = busi_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "BUSI- $" & busi_details & BUSI_info)
				beginning_txt = "  "
				BUSI_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_ga(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_busi_three_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_busi_three_ga_gross_amt(each_memb), ".") <> 0 Then
					busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_three_ga_gross_amt(each_memb), ".")
					pay_info = busi_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "BUSI- $" & busi_details & BUSI_info)
				beginning_txt = "  "
				BUSI_info = "|"
			End If
		Next
		If BUSI_info = "| Self Employmnt Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_gross_self_emp, 8) Then Call write_variable_in_CASE_NOTE(left("  NO Self Employment Income "& spaces_30, 44) & BUSI_info)

		Call write_variable_in_CASE_NOTE("                                            |   Gross Earned Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income, 8))

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_gross_income <> "0.00" Then
			Call write_variable_in_CASE_NOTE("                               |---- Earned Income Deductions ---|")
			Call write_variable_in_CASE_NOTE("                               |   Standard EI Disrgd: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_standard_EI_disregard, ".00", "")&"        ", 8) & "|")
			Call write_variable_in_CASE_NOTE("                               |     EI Disregard " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_earned_income_disregard_percent & "%: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_earned_income_disregard_amount, ".00", "")&"        ", 8) & "|")
			Call write_variable_in_CASE_NOTE("                               |     Total Deductions: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_deductions, ".00", "")&"        ", 8) & "|")
			Call write_variable_in_CASE_NOTE("                               |---------------------------------|")
		End If
		Call write_variable_in_CASE_NOTE("                                            |(-)Total Deductions: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_deductions, 8))
		Call write_variable_in_CASE_NOTE("                                            |     Net Earned Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_net_earned_income, 8))

		unearned_info = "|   Net Unearned Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_unearned_income, 8)
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_ga(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_one_ga_gross_amt(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_ga_gross_amt(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_ga(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_two_ga_gross_amt(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_ga_gross_amt(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_ga(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_three_ga_gross_amt(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_ga_gross_amt(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_ga(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_four_ga_gross_amt(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_ga_gross_amt(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_ga(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_ga_gross_amt(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_five_ga_gross_amt(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_ga_gross_amt(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
		Next
		If unearned_info = "|   Net Unearned Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_unearned_income, 8) Then Call write_variable_in_CASE_NOTE("  NO Unearned Income                        |   Net Unearned Inc: $ " & right("        "&GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_unearned_income, 8))

		Call write_variable_in_CASE_NOTE("                                            |     Net School Inc: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_counted_school_income, 8))
		Call write_variable_in_CASE_NOTE("                                            |   Total Deemed Inc: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_deemed_income, 8))
		Call write_variable_in_CASE_NOTE("                                            |Total Countable Inc: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_countable_income, 8))

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_faci_file_unit_type_code = " " Then
			Call write_variable_in_CASE_NOTE("                                            |------- GA Indv Benefit -------" )
			Call write_variable_in_CASE_NOTE("                                            |   Payment Standard: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_payment_standard, 8))
			Call write_variable_in_CASE_NOTE("                                            |  (-) Countable Inc: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_countable_income, 8))
			Call write_variable_in_CASE_NOTE("                                            |   Payment Subtotal: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_payment_subtotal, 8))

		Else
			Call write_variable_in_CASE_NOTE("                                            |-------- Personal Needs -------" )
			Call write_variable_in_CASE_NOTE("                                            |   Payment Standard: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_pers_needs_payment_standard, 8))
			Call write_variable_in_CASE_NOTE("                                            |  (-) Countable Inc: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_countable_income, 8))
			Call write_variable_in_CASE_NOTE("                                            |   Payment Subtotal: $ " & right("        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_pers_needs_payment_subtotal, 8))
		End If

		Call write_variable_in_CASE_NOTE("                               |------------- Assets ------------|")
		Call write_variable_in_CASE_NOTE("                               |         Total Assets: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_total_assets, ".00", "")&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |         GA Exclusion: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_ga_exclusion, ".00", "")&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |     Countable Assets: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_countable_assets, ".00", "")&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |       Maximum Assets: $ " & left(replace(GA_ELIG_APPROVALS(elig_ind).ga_elig_case_budg_maximum_assets, ".00", "")&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                               |---------------------------------|")
	End If

	If GA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = False Then
		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")

		Call write_variable_in_CASE_NOTE("* GA is INELIGIBLE because not all CASE TESTS were passed.") '' to make this Household Eligible")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_appl_withdrawn = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The request for GA benefits was withdrawn. (APPLICATION WITHDRAWN)")

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_dupl_assistance = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has already received GA. (DUPL ASSISTANCE)")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_coop = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has failed to cooperate. (FAIL TO COOPERATE)")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_one_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_two_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_three_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_four_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_five_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If

		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_file = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has failed to file a report. (FAIL TO FILE)")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_eligible_member = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is no eligible person on this case. (ELIGIBLE MEMBER)")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not established Minnesota residency. (RESIDENCE)")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_assets = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has exceeded the Asset Limit. (ASSET)")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_eligible_other_prgm = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case appears potentially Eligible for another program. (ELIG OTHER PRGM)")
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_verif = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Verifications were not received. (VERIFICATION)")
			Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & GA_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
			Call write_long_variable_with_indent("   Missing Verifications: ", GA_UNIQUE_APPROVALS(verif_request_details, unique_app))
			first_job_not_verified = True
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
					If first_job_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
					first_job_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
				End if
			Next

			first_busi_not_verified = True
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_snap_expense_verif_code(each_memb) = "N" Then
					If first_busi_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
					first_busi_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_snap_expense_verif_code(each_memb) = "N" Then
					If first_busi_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
					first_busi_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_snap_expense_verif_code(each_memb) = "N" Then
					If first_busi_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
					first_busi_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				End if
			Next

			first_unea_not_verified = True
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
				End if
				If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
					If first_unea_not_verified = True Then Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
					first_unea_not_verified = False
					Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
				End if
			Next
		End if
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_lump_sum_payment = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not complied with Lump Sum Requirements. (LUMP SUM PAYMMENT)")
		Call write_long_variable_with_indent("   Inelig Reason: ", GA_UNIQUE_APPROVALS(inelig_details_notes, unique_app))
	End If

	For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
		first_inelig_memb = True
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_elig_status(each_memb) = "INELIGIBLE" Then
			If first_inelig_memb = True Then Call write_variable_in_CASE_NOTE("================================ MEMBER TESTS ===============================")
			first_inelig_memb = False

			Call write_variable_in_CASE_NOTE(" - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " is not eligible for GA.")

			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_absence(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " is not in the household.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_dupl_assistance(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " has received GA assisnce on another case.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_ga_coop(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " has not cooperated with GA requirements.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_ive(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " has IV-E eligibility.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_ssi(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " is SSI eligible.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_lump_sum_payment(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " has not met lump sum requirement.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_unit_member(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " does not meet criteria to be a member of the GA unit.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_imig_status_verif(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " has not verified immigration status.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_imig_status(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " does not qualify for GA due to immigration status.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_basis_of_elig(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " does not meet a basis of eligibility for GA.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_elig_other_prgm(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " is potentially eligible for another cash program.")
			If GA_ELIG_APPROVALS(elig_ind).ga_elig_membs_test_ssn_coop(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & GA_ELIG_APPROVALS(elig_ind).ga_elig_ref_numbs(each_memb) & " has not provided SSN.")
		End If
	Next

	Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
	Call write_variable_in_CASE_NOTE("GA Status:        " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_curr_prog_status)
	Call write_variable_in_CASE_NOTE("Action:           " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_action_info)
	If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info <> "" Then Call write_variable_in_CASE_NOTE("Reason:           " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info)
	Call write_variable_in_CASE_NOTE("Budget Cycle:     " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_budget_cycle)
	If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("Reporting Status: " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_hrf_reporting)
		Call write_variable_in_CASE_NOTE("Review Date:      " & GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligiblity_review_date)
	End If
	If GA_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(GA_UNIQUE_APPROVALS(process_for_note, unique_app))
	If GA_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(GA_UNIQUE_APPROVALS(changes_for_note, unique_app))

	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)
end function

function grh_elig_case_note()
	CASE_NOTE_entered = True
	call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for GRH - " & elig_info & " eff " & first_month & header_end & vbCr
	Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)
	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", GRH_ELIG_APPROVALS(elig_ind).grh_elig_approved_date)
	If add_new_note_for_GRH = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	Call write_bullet_and_variable_in_CASE_NOTE("Resident Requesting Housing Support", "Memb " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_ref_numb & " - " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_full_name)
	Call write_bullet_and_variable_in_CASE_NOTE("FIAT Reason", GRH_UNIQUE_APPROVALS(fiat_reason, unique_app))

	If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("=============================== PAYMENT DETAILS =============================")
		vendor_details_found = False
		For vndr_approval = 0 to UBound(GRH_ELIG_APPROVALS)

			If InStr(GRH_UNIQUE_APPROVALS(months_in_approval, unique_app), GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(vndr_approval).elig_footer_year) <> 0 Then
				If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one <> "" Then
					month_and_name = GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(vndr_approval).elig_footer_year & " - " & GRH_ELIG_APPROVALS(vndr_approval).grh_vendor_one_name
					grh_cost_info = ". . . . . . . . . . . . . . . . . . . . . . . . . GRH (State) AMT   : + $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_grh_state_amount_one, 8)
					If len(month_and_name) > 43 Then month_and_name = left(month_and_name, 43)

					len_needed_of_grh_info = 77 - len(month_and_name)
					grh_cost_info = right(grh_cost_info, len_needed_of_grh_info)
					Call write_variable_in_CASE_NOTE(month_and_name & grh_cost_info)

					whole_month = False
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "02" and (GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "28" or GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "29")Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "04" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "06" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "09" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "11" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "01" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "03" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "05" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "07" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "08" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "10" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "12" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one = "31" Then whole_month = true
					If whole_month = true Then stay_info = left("         Stay length: " & GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one & " Days (whole month)     ", 45)
					If whole_month = False Then stay_info = left("         Stay length: " & GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_one & " Days                 ", 45)
					If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_county_liability_one <> "" Then
						Call write_variable_in_CASE_NOTE(stay_info & "County Liability  : + $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_county_liability_one, 8))
						stay_info = "                                             "
					End If
					Call write_variable_in_CASE_NOTE(stay_info & "Counted Income    : - $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_counted_income, 8))
					If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_amount_already_issued_one <> "" Then Call write_variable_in_CASE_NOTE("                                             Amt Already Issued: - $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_amount_already_issued_one, 8))
					Call write_variable_in_CASE_NOTE("                                             Total Payment     : = $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_total_one, 8))
					If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_client_obligation_one <> "0.00" Then Call write_variable_in_CASE_NOTE("                                             Client Obligation :   $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_client_obligation_one, 8))
					vendor_details_found = True
				End if

				If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two <> "" Then
					month_and_name = "        " & GRH_ELIG_APPROVALS(vndr_approval).grh_vendor_two_name
					grh_cost_info = ". . . . . . . . . . . . . . . . . . . . . . . . . GRH (State) AMT   : + $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_grh_state_amount_two, 8)
					If len(month_and_name) > 43 Then month_and_name = left(month_and_name, 43)

					len_needed_of_grh_info = 77 - len(month_and_name)
					grh_cost_info = right(grh_cost_info, len_needed_of_grh_info)
					Call write_variable_in_CASE_NOTE(month_and_name & grh_cost_info)
					whole_month = False
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "02" and (GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "28" or GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "29")Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "04" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "06" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "09" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "11" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "30" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "01" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "03" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "05" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "07" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "08" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "10" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If GRH_ELIG_APPROVALS(vndr_approval).elig_footer_month = "12" and GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two = "31" Then whole_month = true
					If whole_month = true Then stay_info = left("         Stay length: " & GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two & " Days (whole month)     ", 45)
					If whole_month = False Then stay_info = left("         Stay length: " & GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_total_days_one_two & " Days                 ", 45)
					If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_county_liability_two <> "" Then
						Call write_variable_in_CASE_NOTE(stay_info & "County Liability  : + $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_county_liability_two, 8))
						stay_info = "                                             "
					End If
					Call write_variable_in_CASE_NOTE(stay_info & "Counted Income    : - $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_budg_counted_income, 8))
					If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_amount_already_issued_two <> "" Then Call write_variable_in_CASE_NOTE("                                             Amt Already Issued: - $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_amount_already_issued_two, 8))
					Call write_variable_in_CASE_NOTE("                                             Total Payment     : = $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_payment_total_two, 8))
					If GRH_ELIG_APPROVALS(vndr_approval).grh_elig_client_obligation_two <> "0.00" Then Call write_variable_in_CASE_NOTE("                                             Client Obligation :   $ " & right("        "&GRH_ELIG_APPROVALS(vndr_approval).grh_elig_client_obligation_two, 8))
					vendor_details_found = True
				End if
			End If

		Next
		If vendor_details_found = False Then
			Call write_variable_in_CASE_NOTE("      * * * * NO VENDOR INFORMATION FOUND IN THE ELIG APPROVAL * * * * ")
		End If
	End If

	If GRH_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Residential Treatment" Then

			Call write_variable_in_CASE_NOTE("====== * * * NO PERSON BUDGET FOR RESIDENTAL TREATMENT ELIG TYPE * * * ======")
			Call write_variable_in_CASE_NOTE("* Budget Type: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info)
			Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|       Total Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_income, 8))
			Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "| - Total Deductions: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_deductions, 8))
			Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|     Counted Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income, 8))

		Else
			Call write_variable_in_CASE_NOTE("============================= BUDGET FOR APPROVAL ===========================")
			Call write_variable_in_CASE_NOTE("* Budget Type: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info)
			' Call write_variable_in_CASE_NOTE("* Budget Type: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info) & " - SSI Fed Benefit Rate is used as "
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "SSI" Then Call write_variable_in_CASE_NOTE("  For SSI Budget, the gross unearned income is the Fed Benefit Rate (FBR)")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_income = "FAILED" Then Call write_variable_in_CASE_NOTE("  COUNTED INCOME EXCEEDS THE TOTAL PAYMENT AMOUNT")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info <> "MFIP" Then Call write_variable_in_CASE_NOTE("Income:                                     |")

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Aged" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Adult" Then

				RSDI_info = "|        RSDI Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_RSDI_income, 8)
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb), 4) = "RSDI" Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & RSDI_info)
						RSDI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb), 4) = "RSDI" Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & RSDI_info)
						RSDI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb), 4) = "RSDI" Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & RSDI_info)
						RSDI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb), 4) = "RSDI" Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & RSDI_info)
						RSDI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb), 4) = "RSDI" Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & RSDI_info)
						RSDI_info = "|"
					End If
				Next
				If RSDI_info = "|        RSDI Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_RSDI_income, 8) Then Call write_variable_in_CASE_NOTE(left("  NO RSDI Income "& spaces_45, 44) & RSDI_info)

				UNEA_info = "|     Other UNEA Inc: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_other_unearned_income, 8)
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb), 4) <> "RSDI" Then
						unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
						UNEA_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb), 4) <> "RSDI" Then
						unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
						UNEA_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb), 4) <> "RSDI" Then
						unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
						UNEA_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb), 4) <> "RSDI" Then
						unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & UNEA_info)
						UNEA_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_grh(each_memb) = True and left(STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb), 4) <> "RSDI" Then
						unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
						UNEA_info = "|"
					End If
				Next
				If UNEA_info = "|     Other UNEA Inc: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_other_unearned_income, 8) Then Call write_variable_in_CASE_NOTE(left("  NO Other Unearned Income "& spaces_45, 44) & UNEA_info)

				EARNED_info = "|      Earned Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income, 8)
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_grh(each_memb) = True Then
						job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_one_grh_pic_prosp_monthly_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
						EARNED_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_grh(each_memb) = True Then
						job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_two_grh_pic_prosp_monthly_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
						EARNED_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_grh(each_memb) = True Then
						job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_three_grh_pic_prosp_monthly_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
						EARNED_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_grh(each_memb) = True Then
						job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_four_grh_pic_prosp_monthly_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
						EARNED_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_grh(each_memb) = True Then
						job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_five_grh_pic_prosp_monthly_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
						EARNED_info = "|"
					End If

					If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_grh(each_memb) = True Then
						busi_details = left(STAT_INFORMATION(month_ind).stat_busi_one_cash_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_details & EARNED_info)
						EARNED_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_grh(each_memb) = True Then
						busi_details = left(STAT_INFORMATION(month_ind).stat_busi_two_cash_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_details & EARNED_info)
						EARNED_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_grh(each_memb) = True Then
						busi_details = left(STAT_INFORMATION(month_ind).stat_busi_three_cash_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_details & EARNED_info)
						EARNED_info = "|"
					End If
				Next
				If EARNED_info = "|      Earned Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income, 8) Then Call write_variable_in_CASE_NOTE(left("  NO Earned Income "& spaces_45, 44) & EARNED_info)

			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "SSI" Then
				UNEA_SSI_info =  "| SSI Standard (FBR): $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_SSI_standard_fbr, 8)
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_grh(each_memb) = True Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_SSI_info)
						UNEA_SSI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_grh(each_memb) = True Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_SSI_info)
						UNEA_SSI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_grh(each_memb) = True Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_SSI_info)
						UNEA_SSI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_grh(each_memb) = True Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & UNEA_SSI_info)
						UNEA_SSI_info = "|"
					End If
					If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_grh(each_memb) = True Then
						list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
						If InStr(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
							unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".")
							list_unea_amt = unea_amt_array(0)
						End If
						unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
						Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_SSI_info)
						UNEA_SSI_info = "|"
					End If
				Next
				If UNEA_SSI_info =  "| SSI Standard (FBR): $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_SSI_standard_fbr, 8) Then Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & SSI_info)

				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) &"|     Other PA Grant: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_other_countable_PA_grant, 8))
			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "MFIP" Then
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) &"|  MFIP Strd for One: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_MFIP_standard_for_one, 8))

			End If

			Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|       Total Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_income, 8))

			Call write_variable_in_CASE_NOTE("Deductions ---------------------------------| - Total Deductions: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_deductions, 8))

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "SSI" Then

				Call write_variable_in_CASE_NOTE("  PASS Disregard            $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_PASS_disregard, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Personal Needs            $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_personal_needs, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Prior Income Reduction    $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_prior_inc_reduce, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Supportive Hsg Disrgrd    $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard, 8) & "      |")
			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "MFIP" Then

				Call write_variable_in_CASE_NOTE("  Personal Needs            $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_personal_needs, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Prior Income Reduction    $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_prior_inc_reduce, 8) & "      |")
			ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Aged" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Adult" Then

				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" Then Call write_variable_in_CASE_NOTE("  Student EI Disregard      $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_student_EI_disregard, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Stdrd EI Disregard        $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_standard_EI_disregard, 8) & "      |")
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Disabled" OR GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Blind" Then Call write_variable_in_CASE_NOTE("  Impairment Work Expense   $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_impairment_work_expense, 8) & "      |")
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Adult" Then Call write_variable_in_CASE_NOTE("  Earned Inc Subtotal       $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income_subtotal, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Earned Inc Disregard 50%  $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_earned_income_50_perc_disregard, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Personal Needs            $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_personal_needs, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Child Support Expense     $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_child_support_expense, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Child Unmet Need          $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_child_unmet_need, 8) & "      |")
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_elig_type_info = "Aged" Then Call write_variable_in_CASE_NOTE("  EW Spousal Allocation     $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_EW_spousal_allocation, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Prior Income Reduction    $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_prior_inc_reduce, 8) & "      |")
				Call write_variable_in_CASE_NOTE("  Supportive Hsg Disrgrd    $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard, 8) & "      |")
			End if
			Call write_variable_in_CASE_NOTE("  Inc Unavail 1st Month     $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_inc_unavail_1st_month, 8) & "      |     Counted Income: $ " & right("        "&GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income, 8))
		End If
		If GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_sent, unique_app) = True Then Call write_variable_in_CASE_NOTE("* WCOM added to explain Supportive Housing Disregard of $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard)

	End If

	If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "INELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")

		Call write_variable_in_CASE_NOTE("* Housing Support (GRH) is INELIGIBLE because not all CASE TESTS were passed.")

		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_application_withdrawn = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The request for HS/GRH was been withdrawn by the resident.")
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_pben_coop = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The resident has failed to apply for other benefits/sign IAAs.")
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_elig_thru_other_program = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Payment to a facility has already been made.")
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file = "FAILED" Then
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file_sr = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Resident has not completed the SIX MONTH REVIEW Process.")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file_er = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Resident has not completed the ELIGIBILITY REVIEW Process.")
		End If

		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_placement = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Placement in a facility has not been approved.")
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_state_residence = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The resident does not have established residence in MN.")
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_assets = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The resident has assets that exceed the asset limit.")
			Call write_variable_in_CASE_NOTE("   * Resident Asset Total: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_asset_total)
			Call write_variable_in_CASE_NOTE("   * Asset Limit: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_asset_limit)
		End If
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_death_of_applicant = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The applicant has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & ").")

		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_elig_type = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The resident does not meet a HS/GRH basis of eligibility.")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disa_cash_verif_code(each_memb) = "N" and GRH_ELIG_APPROVALS(elig_ind).grh_elig_memb_ref_numb = STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) Then
					Call write_variable_in_CASE_NOTE("   Professional Statement of Need (PSN) required for Memb " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - not received.")
				End If
			Next
		End If
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_income = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Resident Income exceeds the total payment for the facility.")
			Call write_variable_in_CASE_NOTE("   * Counted Income: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_counted_income)
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_one <> "" Then
				Call write_variable_in_CASE_NOTE("   * FACI: " & GRH_ELIG_APPROVALS(elig_ind).grh_vendor_one_name & " Cost: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_room_board_doc_one)
				Call write_variable_in_CASE_NOTE("           Client Obligation is $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_client_obligation_one)
			End If
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_total_days_one_two <> "" Then
				Call write_variable_in_CASE_NOTE("   * FACI: " & GRH_ELIG_APPROVALS(elig_ind).grh_vendor_two_name & " Cost: $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_room_board_doc_two)
				Call write_variable_in_CASE_NOTE("           Client Obligation is $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_client_obligation_two)
			End If
		End If
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_setting = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The resident is not currently in a GRH facility OR")
			Call write_variable_in_CASE_NOTE("   the facility does not have a GRH agreement with the County.")
		End If
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Resident has not provided all required verifications for HS/GRH")
			Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & GRH_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
			Call write_variable_in_CASE_NOTE("   Missing Verifications:")

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_ACCT = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Bank Acccount - ACCT")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_BUSI = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   * Self Employment Income - BUSI")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If (STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_snap_expense_verif_code(each_memb) = "N") and STAT_INFORMATION(month_ind).stat_busi_one_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					If (STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_snap_expense_verif_code(each_memb) = "N") and STAT_INFORMATION(month_ind).stat_busi_two_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					If (STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_snap_expense_verif_code(each_memb) = "N") and STAT_INFORMATION(month_ind).stat_busi_three_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
				Next
			End If
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_CARS = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Vehicle - CARS")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_DISA = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Disability - DISA")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_JOBS = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   * Earned Income - JOBS")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
				Next
			End If
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_LUMP = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Lump Sum - LUMP")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_MEMB_id = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Resident ID - MEMB")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_MEMB_dob = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Resident Date of Birth - MEMB")

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_PACT = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   * Other Information - PACT")
				Call write_variable_in_CASE_NOTE("     Details: " & GRH_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app))
			End If
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_PBEN = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Potential Benefits APPL - PBEN")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_RBIC = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Room/Boarder Income - RBIC")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_SECU = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Securities - SECU")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_STIN = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Student Income - STIN")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_UNEA = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   * Unearned Income - UNEA")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_one_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_two_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_three_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_four_counted_for_grh(each_memb) = True Then vCall write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
					If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_five_counted_for_grh(each_memb) = True Then Call write_variable_in_CASE_NOTE("     MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
				Next
			End If
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_TRTX_housing_instability = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Housing Instability - TRTX")
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_TRTX_psn_rate_2 = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Facility PSN Rate 2 - TRTX")
		End If
		Call write_long_variable_with_indent("   Inelig Reason: ", GRH_UNIQUE_APPROVALS(inelig_details_notes, unique_app))
	End If

	Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
	Call write_variable_in_CASE_NOTE("HS/GRH Status:    " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_current_progream_status)
	If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("Reporting Status: " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_reporting_status)
		Call write_variable_in_CASE_NOTE("Review Date:      " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_elig_review_date)
	End If
	If GRH_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(GRH_UNIQUE_APPROVALS(process_for_note, unique_app))
	If GRH_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(GRH_UNIQUE_APPROVALS(changes_for_note, unique_app))

	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)
end function

function hc_elig_case_note()
	CASE_NOTE_entered = True
	call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for HC - " & program_detail & " " & elig_info & " eff " & first_month & header_end & vbCr
	If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind) = "FAILED" Then
		If STAT_INFORMATION(month_ind).no_stat_data = False Then
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
					Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & STAT_INFORMATION(month_ind).stat_memb_date_of_death(each_memb))
				End If
			Next
		End If
	Else
		Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)
	End If
	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", HC_ELIG_APPROVALS(elig_ind).approval_date)
	If add_new_note_for_HC = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	If HC_UNIQUE_APPROVALS(l_budg, unique_app) = True Then
		Call write_bullet_and_variable_in_CASE_NOTE("Date Communication Form Sent to Facility", date_of_3050)			'script is no longer referencing a specific form as HC process is not documented and has diverged from DHS forms
	End If
	If STAT_INFORMATION(month_ind).no_stat_data = True Then Call write_variable_in_CASE_NOTE("Health Care Retro Month Approval")

	If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "MA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "IMD" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" Then

		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then
			Call write_variable_in_CASE_NOTE("============================= ELIGIBLITY DETAILS ============================")
			Call write_variable_in_CASE_NOTE("MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) & " is ELIGIBLE for " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind))
			Call write_variable_in_CASE_NOTE("  Elig Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_basis(memb_ind))
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard(memb_ind) <> "_" Then Call write_variable_in_CASE_NOTE("   Standard:  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard_percent(memb_ind) & "% FPG")
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "MA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" Then Call write_variable_in_CASE_NOTE("     Method:  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind))

			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver(memb_ind) <> "_" Then
				Call write_variable_in_CASE_NOTE("MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) & " has been approved for a WAIVER.")
				Call write_variable_in_CASE_NOTE("  Waiver Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_waiver_detail(memb_ind))
			End If
			If HC_ELIG_APPROVALS(elig_ind).LTC_spenddown_exists(memb_ind) = True and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" Then
				Call write_variable_in_CASE_NOTE("------- MA Approved with an LTC Spenddown ----------------------------------")
				Call write_variable_in_CASE_NOTE("    Spenddown Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ltc_spdn_type_info(memb_ind))
				Call write_variable_in_CASE_NOTE("            Method: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ltc_spdn_method_info(memb_ind))
				Call write_variable_in_CASE_NOTE("  Spenddown Amount: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ltc_spdn_amount(memb_ind), 8))

			ElseIf HC_ELIG_APPROVALS(elig_ind).EW_spenddown_exists(memb_ind) = True and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_obligation(hc_prog_count) <> "0.00" Then
				Call write_variable_in_CASE_NOTE("------- MA Approved with an EW Waiver Obligation ---------------------------")
				Call write_variable_in_CASE_NOTE("     Spenddown Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_type_info(memb_ind))
				Call write_variable_in_CASE_NOTE("  Waiver Obligation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_obligation(memb_ind), 8))
				Call write_variable_in_CASE_NOTE("    Total Liability: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ew_spdn_liability(memb_ind), 8))
			ElseIf HC_ELIG_APPROVALS(elig_ind).community_spenddown_exists(memb_ind) = True and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) <> "DP" Then
				Call write_variable_in_CASE_NOTE("------- MA Approved with a Spenddown ---------------------------------------")
				Call write_variable_in_CASE_NOTE("    Spenddown Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_mobl_type(memb_ind))
				Call write_variable_in_CASE_NOTE("  Spenddown Amount: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_spenddown(memb_ind), 8))
				If trim(HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_counted_bills(memb_ind)) <> "0.00" Then
					Call write_variable_in_CASE_NOTE(" (-) Counted Bills: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_counted_bills(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("  Recipient Amount: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_recipient_amount(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(" Spenddown Balance: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_monthly_spdn_balance(memb_ind), 8))
				End If
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" Then
				Call write_variable_in_CASE_NOTE("MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) & " has been approved for Emergency Medical Assistance - EMA")
				If STAT_INFORMATION(month_ind).no_stat_data = False Then
					For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
						If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
							Call write_variable_in_CASE_NOTE("           Emergency: " & STAT_INFORMATION(month_ind).stat_emma_med_emer_info(each_memb))
							Call write_variable_in_CASE_NOTE("  Health Consequence: " & STAT_INFORMATION(month_ind).stat_emma_health_cons_info(each_memb))
							If STAT_INFORMATION(month_ind).stat_emma_end_date(each_memb) = "" Then Call write_variable_in_CASE_NOTE("          Begin Date: " & STAT_INFORMATION(month_ind).stat_emma_begin_date(each_memb))
							If STAT_INFORMATION(month_ind).stat_emma_end_date(each_memb) <> "" Then Call write_variable_in_CASE_NOTE("          Begin Date: " & STAT_INFORMATION(month_ind).stat_emma_begin_date(each_memb) & "   - End Date: " & STAT_INFORMATION(month_ind).stat_emma_end_date(each_memb))
						End If
					Next
				End If
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) = "DP" Then
				Call write_variable_in_CASE_NOTE("MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) & " is eligible for MA-EPD (MA for Employed Persons with Disabilities)")
				Call write_variable_in_CASE_NOTE("  Monthly Premium is required for MA-EPD")
				Call write_variable_in_CASE_NOTE("  Total Monthly Premium: $ " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_premium(memb_ind))
			End If
			desig_prov = False
			If STAT_INFORMATION(month_ind).no_stat_data = False Then
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
						If STAT_INFORMATION(month_ind).stat_hcmi_spdwn_option(memeach_membb_ind) = "DP" Then desig_prov = true
					End If
				Next
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_spdn_option(memb_ind) = "DP" Then desig_prov = true
			If desig_prov = true Then
				Call write_variable_in_CASE_NOTE("Spenddown Option Selected: Designated Provider")
			End If
			If HC_UNIQUE_APPROVALS(designated_provider_info, unique_app) <> "" Then
				Call write_variable_in_CASE_NOTE(" - Selected Designated Provider: " & HC_UNIQUE_APPROVALS(designated_provider_info, unique_app))
			End If

		End If

	End If

	If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "SLMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QI1" Then
		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then
			Call write_variable_in_CASE_NOTE("MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) & " is ELIGIBLE for " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind))
			Call write_variable_in_CASE_NOTE("  Elig Type: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_basis(memb_ind))
			Call write_variable_in_CASE_NOTE("   Standard:  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard(memb_ind) & " - " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_standard_percent(memb_ind) & "% FPG")

		End If
	End If

	If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "INELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")

		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind) = "FAILED" Then
			If STAT_INFORMATION(month_ind).no_stat_data = False Then
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) Then
						Call write_variable_in_CASE_NOTE("* Health Care (" & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) & ") is INELIGIBLE because this resident has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(each_memb) & ").")
					End If
				Next
			End If
		Else
			Call write_variable_in_CASE_NOTE("* Health Care (" & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) & ") is INELIGIBLE because not all CASE TESTS were passed.")
			' "Reason for Ineligibility: "
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_absence(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is not in the home. (ABSENCE)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_after_processing_month(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - This month is prior to the processing month, is a RETRO Month. (AFTER PROCESSING MONTH)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assets(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & "  has exceeded the Asset Limit. (ASSETS)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is not a part of this household. (ASSISTANCE UNIT)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_basis_for_other_prog(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has a basis for another program. (BASIS FOR OTHER PROGRAM)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_citizenship(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not meet citizenship requirement. (CITIZENSHIP)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - Not all cooperation requirements have been met. (COOPERATION)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_pben(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Apply for Other Benefits (PBEN)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_pben_cash(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("     - CASH")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_pben_smrt(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("     - SMRT")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_fail_provide_info(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Failure to Provide Information (PACT)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_IEVS(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * IEVS (DISQ)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_medical_support(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Medical Support (ABPS)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_other_health_ins(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Other Health Insurance (INSA)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_SSN(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Social Security Number (MEMB)")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop_third_party_liability(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Third Party Liability (ACCI)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_correctional_faci(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is in a correctional facility. (CORRECTIONAL FACILTY)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_elig_other_prog(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is eligible for another program. (ELIGIBILITY FOR OTHER PROGRAM)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - Review/Report process has not been completed.")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_IMD(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is in an IMD. (IMD)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has exceeded the Income Limit. (INCOME)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_part_a(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not have Medicare Part A. (MEDICARE PART A)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_elig(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " is Medicare Eligble. (MEDICARE ELIGIBLE)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_MNSure_system(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - Health Care is being processed for MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " in MNSure. (MNSURE)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_Obligation_one_mo(memb_ind) = "FAILED" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_obligation_six_mo(memb_ind) = "FAILED"Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has not met the spenddown obligation. (OBLIGATION)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_other_health_ins(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " has not complied with the requirements for Other Health Insurance. (OHI)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_parent(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - MEMB " & HC_ELIG_APPROVALS(elig_ind).hc_elig_ref_numbs(memb_ind) & " does not meet the Parent basis. (PARENT)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_residence(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - This case has not met MN Residency requirements. (RESIDENCE)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - Resident has not provided all required verifications for Health Care")
				Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & HC_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
				Call write_variable_in_CASE_NOTE("   Missing Verifications:")

				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_ACCT(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Bank Account - ACCT")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_BUSI(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Self Employment Income - BUSI")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_JOBS(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Jobs Income - JOBS")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_IMIG_status(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Immigration Status - IMIG")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_LUMP(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Lump Sum Income - LUMP")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_OTHR(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Other assets - OTHR")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_PBEN(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Other Potential benefits - PBEN")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_PREG(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Pregnancy - PREG")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_RBIC(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Roomer/Boarder Income - RBIC")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_REST(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Real Estate Assets - REST")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_SECU(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Security Assets - SECU")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_SPON(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Sponsor Income and/or Assets - SPON")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_TRAN(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Transfer of Assets - TRAN")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_UNEA(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Unearned Income  UNEA")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_cit_id(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Citizenship/Identity - MEMI")
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif_CARS(memb_ind) = "FAILED" Then Call write_variable_in_CASE_NOTE("   * Vehicle - CARS")

				If trim(HC_UNIQUE_APPROVALS(verif_request_details, unique_app)) <> "" Then Call write_variable_in_CASE_NOTE("   * Additional Details: " & HC_UNIQUE_APPROVALS(verif_request_details, unique_app))


			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - Request for Health Care has been withdrawn or requested closed. (WITHDRAWAL)")
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_uncompensated_transfer(memb_ind) = "FAILED" Then
				Call write_variable_in_CASE_NOTE(" - Case has failed Uncompensated Transfer. (UNCOMPENSATED TRANSFER)")
				HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_uncompensated_transfer(memb_ind)
			End If

		End If
		' If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) = "" Then
		' "Ineligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected)
		' If HC_UNIQUE_APPROVALS(last_mo_const, approval_selected) <> "" Then
		' "Ineligible Approval for " & HC_UNIQUE_APPROVALS(first_mo_const, approval_selected) & " - " & HC_UNIQUE_APPROVALS(last_mo_const, approval_selected)
		'
		' "Absence .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_absence(memb_ind)
		' "After Prcng Mo  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_after_processing_month(memb_ind)
		' "Assets  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assets(memb_ind)
		' "Asst Unit Mbr .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_assistance_unit(memb_ind)
		' "Elig othr Prgm .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_basis_for_other_prog(memb_ind)
		' "Citizenship.  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_citizenship(memb_ind)
		' "Cooperation .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_coop(memb_ind)
		'
		' "Correct Faci .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_correctional_faci(memb_ind)
		' "Death .  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_death(memb_ind)
		' "Elig othr Prgm  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_elig_other_prog(memb_ind)
		' "Fail to File .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_fail_file(memb_ind)
		' "IMD .  .  .  .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_IMD(memb_ind)
		'
		' "Income - Bgt Pd . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind)
		' "Medicare - Part A .   " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_part_a(memb_ind)
		' "Mdeicare Elig . .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_medicare_elig(memb_ind)
		' "MNSure System . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_MNSure_system(memb_ind)
		' "Oblgn - 1 mo .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_Obligation_one_mo(memb_ind)
		' "Oblgn - 6 mo .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_obligation_six_mo(memb_ind)
		'
		' "Othr Health Ins .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_other_health_ins(memb_ind)
		' "Parent .  .  .  .  .  . " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_parent(memb_ind)
		' "Residence .  .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_residence(memb_ind)
		' "Verification .  .  .  ." & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind)
		' "Withdraw .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_withdrawn(memb_ind)
		' "Uncomp Xfer .  .  .  .  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_uncompensated_transfer(memb_ind)

	End If

	If HC_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("=================================== BUDGET ==================================")

		If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) <> "" Then
			Call write_variable_in_CASE_NOTE("Income COUNTED from MEMBS: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_members_whose_income_counts_list(memb_ind))
			Call write_variable_in_CASE_NOTE("-------------- INCOME DETAILS --------------|------- BUDGET DETAILS --------")
			UNEA_info = "|       Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind), 8)
			If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "LBUD" or HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "SBUD" Then UNEA_info = "| Gross Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind), 8)

			If STAT_INFORMATION(month_ind).no_stat_data = False Then
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					For each inc_count_memb in HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_members_whose_income_counts(memb_ind)
						If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = inc_count_memb Then

							If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True Then
								unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
								UNEA_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True Then
								unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
								UNEA_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True Then
								unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
								UNEA_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True Then
								unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
								UNEA_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True Then
								unea_detail = left(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & UNEA_info)
								UNEA_info = "|"
							End If
						End If
					Next
				Next
			End If
			If UNEA_info = "|       Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind), 8) Then Call write_variable_in_CASE_NOTE(left("  NO Unearned Income "& spaces_45, 44) & UNEA_info)
			If UNEA_info = "| Gross Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_unearned(memb_ind), 8) Then Call write_variable_in_CASE_NOTE(left("  NO Unearned Income "& spaces_45, 44) & UNEA_info)

			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "MA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" Then

				If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "ABUD" Then
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Excld UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)     UNEA Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Net Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind), 8))

				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "BBUD" Then
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)     Deemed UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Excld UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)     UNEA Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Net Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind), 8))

				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "CBUD" Then
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)     Deemed UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Excld UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Net Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind), 8))

				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "EBUD" Then
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)     Deemed UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Excld UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)            COLA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_cola(memb_ind), 8))
				End if
			End If

			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "SLMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QI1" Then
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)     Deemed UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind), 8))
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Excld UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind), 8))
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)     UNEA Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind), 8))
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)Stndrd Disregard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_standard_disregard(memb_ind), 8))
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Net Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind), 8))
			End If
			' If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "BBUD" or HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "CBUD" or HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "EBUD"Then
			' 	Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)     Deemed UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_unearned(memb_ind))
			' End If
			' Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Excld UNEA: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_unearned(memb_ind))
			' Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)     UNEA Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_unearned_deduction(memb_ind))
			'
			' If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "ABUD" or HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "BBUD" or HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "CBUD"Then
			' 	Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Net Unearned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_unearned_income(memb_ind))
			' End If
			Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

			EARNED_info = "|      Earned Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind), 8)
			If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "LBUD" or HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "SBUD" Then EARNED_info = "|  Cntble Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_countable_earned_income(memb_ind), 8)
			If STAT_INFORMATION(month_ind).no_stat_data = False Then
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					For each inc_count_memb in HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_members_whose_income_counts(memb_ind)
						If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = inc_count_memb Then
							If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then
								job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
								EARNED_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_two_job_ended(each_memb) = False Then
								job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
								EARNED_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_three_job_ended(each_memb) = False Then
								job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
								EARNED_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_four_job_ended(each_memb) = False Then
								job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
								EARNED_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_five_job_ended(each_memb) = False Then
								job_detail = left(STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  JOBS- $" & job_detail & EARNED_info)
								EARNED_info = "|"
							End If

							If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then
								If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "A" Then busi_details = left(STAT_INFORMATION(month_ind).stat_busi_one_hc_a_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 35)
								If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "B" Then busi_details = left(STAT_INFORMATION(month_ind).stat_busi_one_hc_b_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_details & EARNED_info)
								EARNED_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True Then
								If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "A" Then busi_details = left(STAT_INFORMATION(month_ind).stat_busi_two_hc_a_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 35)
								If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "B" Then busi_details = left(STAT_INFORMATION(month_ind).stat_busi_two_hc_b_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_details & EARNED_info)
								EARNED_info = "|"
							End If
							If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True Then
								If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "A" Then busi_details = left(STAT_INFORMATION(month_ind).stat_busi_three_hc_a_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 35)
								If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "B" Then busi_details = left(STAT_INFORMATION(month_ind).stat_busi_three_hc_b_prosp_net_inc(each_memb) & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 35)
								Call write_variable_in_CASE_NOTE("  BUSI- $" & busi_details & EARNED_info)
								EARNED_info = "|"
							End If
						End If
					Next
				Next
			End If
			If EARNED_info = "|      Earned Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_gross_earned(memb_ind), 8) Then Call write_variable_in_CASE_NOTE(left("  NO Earned Income "& spaces_45, 44) & EARNED_info)
			If EARNED_info = "|  Cntble Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_countable_earned_income(memb_ind), 8) Then Call write_variable_in_CASE_NOTE(left("  NO Earned Income "& spaces_45, 44) & EARNED_info)

			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "MA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" Then
				If HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "ABUD" Then

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)    Excld Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)  Wrk Exp Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_work_exp_deduction(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)    EI Disregard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_disregard(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)      Dpdnt Care: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_dependent_care(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)   Earned Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|     Net Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)     CSES Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_child_sup_deduction(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|      Deemed Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Income Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind), 8))

				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "BBUD" Then

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|      Deemed Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind), 8))'' & "(+)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)    Excld Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)   Earned Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|     Net Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Income Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind), 8))
				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "CBUD" Then

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)    Excld Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|     Net Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind), 8))

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|      Deemed Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind), 8))'' & "(+)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Income Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind), 8))
				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "EBUD" Then

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)   Deemed Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind), 8))'' & "(+)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)    Excld Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)   Earned Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind), 8)) ''& "(-)"
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|     Net Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Income Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Percentage of FPG:   " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_percent_of_fpg(memb_ind), 6) & " %")

					Call write_variable_in_CASE_NOTE("                           -------------- PREMIUM CALCULATION ---------------")
					Call write_variable_in_CASE_NOTE("                           |" & "       Income For Prem Calc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_counted_income_for_prem_calc(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("                           |" & "  X      Premium Percentage:   " & right("          " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_premium_percent(memb_ind), 9) & " %")
					Call write_variable_in_CASE_NOTE("                           |" & "  =     Sliding Fee Premium: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_sliding_fee_premium(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("                           |" & "  +           UI Obligation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_ui_obligation(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("                           |" & "  =           Total Premium: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_premium(memb_ind), 8))

					Call write_variable_in_CASE_NOTE("                           ---------- MEDICARE PART B REIMBURSEMENT ---------")
					Call write_variable_in_CASE_NOTE("                           |" & "                  Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("                           |" & "                   Income Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("                           |" & "                 Percentage of FPG:   " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_percent_of_fpg(memb_ind), 5) & "    %")
					Call write_variable_in_CASE_NOTE("                           |" & "Medi Part B Reimbursement Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_medi_part_b_reimb_std(memb_ind), 8))
					Call write_variable_in_CASE_NOTE("                           |" & "         Medi Part B Reimbursement:    " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_medi_part_b_reimb_yn(memb_ind))

				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "LBUD" Then

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+) VA Aid & Attend: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_va_aid_attendincome(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Tot Countable Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_countable_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|----------DEDUCTIONS-----------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|         LTC Exclsn: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_LTC_exclusions(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Medicare Premium: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_medicare_premium(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Pers/Cloth Needs: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_person_clothing_needs(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Home Maint Allow: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_maint_needs_allowance(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|Guard/Rep Payee Fee: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_guardian_rep_payee_fee(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "| Spousal Allocation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_spousal_allocation(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Family Allocation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_family_allocation(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Health Ins Prem: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_health_ins_premium(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Other Med Expense: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_medical_expense(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  SSI 1611 Benefits: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_SSI_1611_benefit(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Other Deductions: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_deductions(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|      LTC Spenddown: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_LTC_spenddown(memb_ind), 8))
				ElseIf HC_ELIG_APPROVALS(elig_ind).hc_budget_type(memb_ind) = "SBUD" Then

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+) VA Aid & Attend: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_va_aid_attendincome(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Tot Countable Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_countable_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|----------DEDUCTIONS-----------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|         LTC Exclsn: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_LTC_exclusions(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Medicare Premium: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_medicare_premium(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Home Maint Allow: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_maint_needs_allowance(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|Guard/Rep Payee Fee: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_guardian_rep_payee_fee(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "| Spousal Allocation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_spousal_allocation(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Family Allocation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_family_allocation(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Health Ins Prem: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_health_ins_premium(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Other Med Expense: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_medical_expense(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  SSI 1611 Benefits: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_SSI_1611_benefit(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Other Deductions: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_other_deductions(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")

					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
					Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|  Waiver Obligation: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_waiver_obligation(memb_ind), 8))

				End If
			End If
			If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "SLMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QI1" Then
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(+)   Deemed Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_deemed_earned(memb_ind), 8))'' & "(+)"
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)    Excld Earned: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_excluded_earned(memb_ind), 8)) ''& "(-)"
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|(-)   Earned Deduct: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_earned_deduction(memb_ind), 8)) ''& "(-)"
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|     Net Earned Inc: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_net_earned_income(memb_ind), 8))
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|-------------------------------")
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|   Total Net Income: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_total_net_income(memb_ind), 8))
				Call write_variable_in_CASE_NOTE(left(spaces_45, 44) & "|    Income Standard: $ " & right("        " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_budg_income_standard(memb_ind), 8))

			End If
		ElseIf HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_method(memb_ind) = "X" Then

			Call write_variable_in_CASE_NOTE("HC Eligibility has no budget calculation (Method X).")

			ssi_info_found = False
			If STAT_INFORMATION(month_ind).no_stat_data = False Then
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) = HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) Then
						If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) = "SSI" Then
							If ssi_info_found = False Then Call write_variable_in_CASE_NOTE("SSI Received:")
							list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb)
							If InStr(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
								unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb), ".")
								list_unea_amt = unea_amt_array(0)
							End If
							unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
							Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail)
							ssi_info_found = True
						End If
						If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) = "SSI" Then
							If ssi_info_found = False Then Call write_variable_in_CASE_NOTE("SSI Received:")
							list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb)
							If InStr(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
								unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb), ".")
								list_unea_amt = unea_amt_array(0)
							End If
							unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
							Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail)
							ssi_info_found = True
						End If
						If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) = "SSI" Then
							If ssi_info_found = False Then Call write_variable_in_CASE_NOTE("SSI Received:")
							list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb)
							If InStr(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
								unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb), ".")
								list_unea_amt = unea_amt_array(0)
							End If
							unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
							Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail)
							ssi_info_found = True
						End If
						If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) = "SSI" Then
							If ssi_info_found = False Then Call write_variable_in_CASE_NOTE("SSI Received:")
							list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb)
							If InStr(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
								unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb), ".")
								list_unea_amt = unea_amt_array(0)
							End If
							unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
							Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail)
							ssi_info_found = True
						End If
						If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) = "SSI" Then
							If ssi_info_found = False Then Call write_variable_in_CASE_NOTE("SSI Received:")
							list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb)
							If InStr(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".") <> 0 Then
								unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb), ".")
								list_unea_amt = unea_amt_array(0)
							End If
							unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
							Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail)
							ssi_info_found = True
						End If
					End If
				Next
			End If
		End If
	End If

	Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
	Call write_variable_in_CASE_NOTE("HC Status:     " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_curr_prog_status(memb_ind))
	If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then
		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_HRF_reporting(memb_ind) <> "" Then Call write_variable_in_CASE_NOTE("HRF Reporting: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_HRF_reporting(memb_ind))
		Call write_variable_in_CASE_NOTE("12 mo Renewal: " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ER_date(memb_ind))
		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_SR_date(memb_ind) <> HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_ER_date(memb_ind) and HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_SR_date(memb_ind) <> "" Then
			Call write_variable_in_CASE_NOTE("6 mo Renewal:  " & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_SR_date(memb_ind))
		End If
	End If
	If HC_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(HC_UNIQUE_APPROVALS(process_for_note, unique_app))
	If HC_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(HC_UNIQUE_APPROVALS(changes_for_note, unique_app))
	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)

end function

function emer_elig_case_note()

	CASE_NOTE_entered = True
	end_msg_info = end_msg_info & "NOTE entered for EMER - " & EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result & " eff " & EMER_ELIG_APPROVAL.emer_elig_summ_begin_date & vbCr

	Call start_a_blank_case_note

	If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "ELIGIBLE" Then Call write_variable_in_CASE_NOTE("*-*-* EMER ISSUED *-*-* " & EMER_ELIG_APPROVAL.emer_program & " Approved " & EMER_ELIG_APPROVAL.emer_elig_approved_date & " - $ " & EMER_ELIG_APPROVAL.emer_elig_summ_payment)
	If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "INELIGIBLE" Then Call write_variable_in_CASE_NOTE("APPROVAL - " & EMER_ELIG_APPROVAL.emer_program & " INELIGIBLE - Denied on " &  EMER_ELIG_APPROVAL.emer_elig_approved_date)
	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", EMER_ELIG_APPROVAL.emer_elig_approved_date)


	If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "ELIGIBLE" Then
		If EMER_ELIG_APPROVAL.mony_check_found = True Then
			Call write_variable_in_CASE_NOTE("============================= MONY/CHCK ISSUED ==============================")
			For each_chck = 0 to UBound(EMER_ELIG_APPROVAL.emer_check_program)
				If emer_excel_account_number(each_chck) = "" Then Call write_variable_in_CASE_NOTE("$ " & left(EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck)&"        ", 8) & " issued on " & EMER_ELIG_APPROVAL.emer_check_issue_date(each_chck) & " to " & EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck))
				If emer_excel_account_number(each_chck) <> "" Then Call write_variable_in_CASE_NOTE("$ " & left(EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck)&"        ", 8) & " issued on " & EMER_ELIG_APPROVAL.emer_check_issue_date(each_chck) & " to " & EMER_ELIG_APPROVAL.emer_check_payment_to_name(each_chck) & " for " & emer_excel_account_number(each_chck))
				Call write_variable_in_CASE_NOTE("           for " & EMER_ELIG_APPROVAL.emer_check_payment_reason(each_chck) & " - PROGRAM: " & EMER_ELIG_APPROVAL.emer_check_program(each_chck))
			Next
		End If
		If EMER_ELIG_APPROVAL.bus_ticket_approval = True Then
			Call write_variable_in_CASE_NOTE("=========================== EMER AMOUNT ISSUED ==============================")
			Call write_variable_in_CASE_NOTE("$ " & left(EMER_ELIG_APPROVAL.emer_elig_summ_need_other&"        ", 8) & " approved for " & EMER_ELIG_APPROVAL.elig_version_date & " for Bus Ticket(s).")
			Call write_variable_in_CASE_NOTE("           Bus Ticket Detail: " & EMER_ELIG_APPROVAL.bus_ticket_detail)
		End If

		If emergecny_to_resolve_details = True OR affordability_details = True OR income_limit_details = True Then
			Call write_variable_in_CASE_NOTE("============================= APPROVAL DETAILS ==============================")
			If emergecny_to_resolve_details = True Then
				Call write_variable_in_CASE_NOTE("Emergency to Resolve:")
				If emer_past_due_rent_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Eviction - Past Due Balance Paid")
				If emer_new_housing_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - New Housing (Damage Deposit/First Months Rent)")
				If emer_moving_exp_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Moving Expenses")
				If emer_utility_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Utility Shut Off")
				If emer_bus_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Bus Ticket")
				If emer_foreclosure_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Mortgage Balance")
				If emer_property_tax_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Deliquent Property Tax")
				If emer_home_repair_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Home Repairs")
				If emer_fire_replace_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Replacement of Personal Items/Bed due to Fire")
				If emer_storage_checkbox = checked Then Call write_variable_in_CASE_NOTE("  - Storage")
				If trim(emer_available_assets) <> "" Then Call write_variable_in_CASE_NOTE("  Household Available Assets: $ " & emer_available_assets)
				If trim(emer_emer_resolve_notes) <> "" Then Call write_variable_in_CASE_NOTE("  Resolve EMER Notes: " & emer_emer_resolve_notes)
			End If
			If affordability_details = True Then
				Call write_variable_in_CASE_NOTE("Cost Effectiveness:")
				If trim(emer_ongoing_mothly_income) <> "" Then Call write_variable_in_CASE_NOTE("  Ongoing Monthly NET Income: $ " & emer_ongoing_mothly_income)
				If trim(emer_ongoing_shelter_expense) <> "" Then Call write_variable_in_CASE_NOTE("  Ongoing Housing Costs: $ " & emer_ongoing_shelter_expense)
				If trim(emer_ongoing_utility_expense) <> "" Then Call write_variable_in_CASE_NOTE("  Ongoing Utility Costs: $ " & emer_ongoing_utility_expense)
			End If
			If income_limit_details = True Then
				Call write_variable_in_CASE_NOTE("Within 200%:")
				Call write_variable_in_CASE_NOTE("  Household Size: " & EMER_ELIG_APPROVAL.household_size)
				Call write_variable_in_CASE_NOTE("  200% FPG: $ " & EMER_ELIG_APPROVAL.emer_fpg_limit)
				Call write_variable_in_CASE_NOTE("  Houshold income: $ " & emer_past_30_days_income)
			End If
		End if

		Call write_variable_in_CASE_NOTE("======================== HOUSEHOLD MEMBERS ELIGIBLE =========================")
		Call write_variable_in_CASE_NOTE("Household: " & EMER_ELIG_APPROVAL.emer_elig_summ_adults_in_unit & " Adults, " & EMER_ELIG_APPROVAL.emer_elig_summ_children_in_unit & " Children")
		For each_memb = 0 to UBound(EMER_ELIG_APPROVAL.emer_elig_ref_numbs)
			Call write_variable_in_CASE_NOTE("  - MEMB " & EMER_ELIG_APPROVAL.emer_elig_ref_numbs(each_memb) & " - " & EMER_ELIG_APPROVAL.emer_elig_membs_info(each_memb))
		Next

		Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
		Call write_variable_in_CASE_NOTE("Emergency Begin Date: " & EMER_ELIG_APPROVAL.emer_elig_summ_begin_date)
		Call write_variable_in_CASE_NOTE("Emergency End Date: " & EMER_ELIG_APPROVAL.emer_elig_summ_end_date)
		If list_active_programs <> "" Then Call write_variable_in_CASE_NOTE("Other Active Programs: " & list_active_programs)
		If list_pending_programs <> "" Then Call write_variable_in_CASE_NOTE("Other Pending Programs: " & list_pending_programs)
		Call write_variable_in_CASE_NOTE("---")
		Call write_variable_in_CASE_NOTE(worker_signature)
	End If
	If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "INELIGIBLE" Then

		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")

		Call write_variable_in_CASE_NOTE("* " & EMER_ELIG_APPROVAL.emer_program & " is INELIGIBLE because not all CASE TESTS were passed.") '' to make this Household Eligible")

		If EMER_ELIG_APPROVAL.emer_elig_case_test_citizenship = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Case has not met Citizenship Requirements.")
		If EMER_ELIG_APPROVAL.emer_elig_case_test_coop_MFIP = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Case has not complied with application for MFIP.")
		If EMER_ELIG_APPROVAL.emer_elig_case_test_coop_work = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Case has not met cooperation with work requirement.")
			If trim(emer_test_coop_work_detail) <> "" Then Call write_variable_in_CASE_NOTE("   Coop/Work Detail: " & emer_test_coop_work_detail)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_copayment = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Case has not completed required copayment.")
			If trim(emer_test_copayment_detail) <> "" Then Call write_variable_in_CASE_NOTE("   Copayment Info: " & emer_test_copayment_detail)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_cost_effective = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The emergency will not be resolved to a cost effective situation.")
			If trim(emer_ongoing_mothly_income) <> "" Then Call write_variable_in_CASE_NOTE("   Ongoing Monthly NET Income: $ " & emer_ongoing_mothly_income)
			If trim(emer_ongoing_shelter_expense) <> "" Then Call write_variable_in_CASE_NOTE("   Ongoing Housing Costs: $ " & emer_ongoing_shelter_expense)
			If trim(emer_ongoing_utility_expense) <> "" Then Call write_variable_in_CASE_NOTE("   Ongoing Utility Costs: $ " & emer_ongoing_utility_expense)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_county_allocation = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is insufficient county allocation.")
		If EMER_ELIG_APPROVAL.emer_elig_case_test_eligible_child = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is no eligible child on this case.")
		If EMER_ELIG_APPROVAL.emer_elig_case_test_elig_other_program = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The case needs to pursue eligibility for other assistance programs.")
			If trim(emer_test_elig_other_prog_detail) <> "" Then Call write_variable_in_CASE_NOTE("   Other Program Info: " & emer_test_elig_other_prog_detail)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_emergency = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The situation does not meet the definition of an emergency for " & EMER_ELIG_APPROVAL.emer_program)

		If EMER_ELIG_APPROVAL.emer_elig_case_test_equitable_interest = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The case is not listed as owning or living in this location.")
			If trim(emer_test_equitable_interest_detail) <> "" Then Call write_variable_in_CASE_NOTE("   Living Situation Details: " & emer_test_equitable_interest_detail)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_residency = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has not established 30 days of MN Residency.")
			If trim(emer_test_date_residency_starte) <> "" Then Call write_variable_in_CASE_NOTE("   MN Residency established on " & emer_test_date_residency_starte)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_resources = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The case appears to have resources to cover the emergency.")
			If trim(emer_available_assets) <> "" Then Call write_variable_in_CASE_NOTE("   Household Available Assets: $ " & emer_available_assets)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_verif = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Not all required verifications have been provided.")
			Call write_variable_in_CASE_NOTE("   Verification Request Form Sent on " & emer_verif_request_date & ", due by: " & due_date)
			If trim(emer_test_verif_detail) <> "" Then Call write_variable_in_CASE_NOTE("   Verifications Needed: " & emer_test_verif_detail)
		End If
		If EMER_ELIG_APPROVAL.emer_elig_case_test_12_month = "FAILED" Then Call write_variable_in_CASE_NOTE(" - Emergency Funds have been issued on this case in the past 12 months.")
		If EMER_ELIG_APPROVAL.emer_elig_case_test_200_percent_fpg = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The income for this case exceeds 200% FPG.")
			If trim(emer_past_30_days_income) <> "" Then
				Call write_variable_in_CASE_NOTE("   200% FPG: $ " & EMER_ELIG_APPROVAL.emer_inelig_fpg_limit & "  -  Household Size: " & EMER_ELIG_APPROVAL.manual_hh_count)
				If EMER_ELIG_APPROVAL.emer_program = "EGA" Then Call write_variable_in_CASE_NOTE("   NET Income in Application Month: $ " & emer_past_30_days_income)
				If EMER_ELIG_APPROVAL.emer_program = "EA" Then Call write_variable_in_CASE_NOTE("   GROSS Income in 30 Days before Application: $ " & emer_past_30_days_income)
			End if
		End If
		Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
		Call write_variable_in_CASE_NOTE("Emergency Request has been denied.")
		If list_active_programs <> "" Then Call write_variable_in_CASE_NOTE("Other Active Programs: " & list_active_programs)
		If list_pending_programs <> "" Then Call write_variable_in_CASE_NOTE("Other Pending Programs: " & list_pending_programs)
		Call write_variable_in_CASE_NOTE("---")
		Call write_variable_in_CASE_NOTE(worker_signature)

	End If
end function

function deny_elig_case_note()
	CASE_NOTE_entered = True
	end_msg_info = end_msg_info & "NOTE entered for CASH DENY - INELIGIBLE eff " & CASH_DENIAL_APPROVALS(elig_ind).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(elig_ind).elig_footer_year & vbCr

	Call start_a_blank_case_note

	If STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "1" or STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "1" Then
		Call write_variable_in_CASE_NOTE("APPROVAL - CASH WITHDRAWN - Denied eff " & first_month)
	Else
		Call write_variable_in_CASE_NOTE("APPROVAL - CASH INELIGIBLE - Denied eff " & first_month)
	End If

	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", CASH_DENIAL_APPROVALS(elig_ind).elig_version_date)

	If add_new_note_for_DENY = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	If STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "1" or STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "1" Then
		Call write_variable_in_CASE_NOTE("* Request for CASH Program has been WITHDRAWN.")
	End If
	Call write_variable_in_CASE_NOTE("* Case has no eligibility for any CASH Program.")

	Call write_variable_in_CASE_NOTE("============================= CASH PROGRAMS DETAIL ==========================")
	Call write_variable_in_CASE_NOTE("RCA Denial Info  : Processed by Contracted Agency for Residents of Hennepin.")

	'DWP
	Call write_variable_in_CASE_NOTE("DWP Denial Info  : " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_reason_info)
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_explanation <> "" Then
		Call write_long_variable_with_indent("    DENY Reason  : ", CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_explanation)
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_application_withdrawn = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The Cash request has been Withdrawn")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_assets = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * The household is over the asset limit for DWP (and all Cash Programs).")
		Call write_variable_in_CASE_NOTE("       | CASH Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_CASH, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | ACCT Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_ACCT, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | SECU Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_SECU, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | CARS Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_CARS, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | SPON Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_SPON, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | Total Assets:$ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_total, 10) & " - Asset Maximum: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_asset_maximum, 10) & "|")

	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_CS_disqualification = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has not complied with Child Support Requirements.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_death_of_applicant = "FAILED" Then Call write_variable_in_CASE_NOTE("     * Applicant on this case has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & ").")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_dupl_assistance = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The members of this household are receiving Cash Assistance on another case.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_eligible_child = "FAILED" Then
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_or_dwp = "MFIP" Then Call write_variable_in_CASE_NOTE("     * This household was assessed for MFIP as the Family Cash Program..")
		If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_or_dwp <> "MFIP" Then Call write_variable_in_CASE_NOTE("     * This household does not have a child that meets the requirements for family cash benefits.")
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_ES_disqualification = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has not complied with the Employment Services Requirements.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_fail_coop = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * This household has not complied with all requirements for Family Cash Assistance.")
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_applied_other_benefits = "FAILED" Then Call write_variable_in_CASE_NOTE("       Failed to apply for other benefits.")
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_provide_requested_info = "FAILED" Then Call write_variable_in_CASE_NOTE("       Failed to provide requested information.")
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_IEVS = "FAILED" Then Call write_variable_in_CASE_NOTE("       Failed to cooperate with the IEVS process.")
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_fail_coop_vendor_info = "FAILED" Then Call write_variable_in_CASE_NOTE("       Failed to provide vendor information.")
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_four_month_limit = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has used all 4 DWP months.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_initial_income = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * Household Income exceeds the Initial Income Limit (Family Wage Level of $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_family_wage_level & ").")
		Call write_variable_in_CASE_NOTE("       | Counted Earned Inc: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_counted_earned_income, 10) & "                                  |")
		Call write_variable_in_CASE_NOTE("       | Dependent Care Exp: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_dependent_care_expense, 10) & " (-)                              |")
		Call write_variable_in_CASE_NOTE("       | Counted UNEA Inc:   $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_counted_unearned_income, 10) & "                                  |")
		Call write_variable_in_CASE_NOTE("       | Counted Deemed Inc: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_counted_deemed_income, 10) & "                                  |")
		Call write_variable_in_CASE_NOTE("       | Child Support Excl: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_child_support_exclusion, 10) & " (-)                              |")
		Call write_variable_in_CASE_NOTE("       | Total Counted Inc:  $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_total_counted_income, 10) & " - Family Wage Level: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_initial_family_wage_level, 10) & "|")
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_MFIP_conversion = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This case is better served by the MFIP program and is unlikely to benefit from DWP.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has not met state residency requirements.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_strike = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has a member on strike and is not eligiblity for public assistance.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_TANF_time_limit = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has used all TANF months and is not eligible for an extension.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_transfer_of_assets = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The members of this household have transferred assets in a way that does not comply with cash assistance rules.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_verif = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * The household has not provided required verifications.")
		verifs_missing = ""
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_ACCT = "FAILED" Then verifs_missing = verifs_missing & ", Bank Account"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_BUSI = "FAILED" Then verifs_missing = verifs_missing & ", Self Employment Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_CARS = "FAILED" Then verifs_missing = verifs_missing & ", Vehicle"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_JOBS = "FAILED" Then verifs_missing = verifs_missing & ", Job Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_MEMB_dob = "FAILED" Then verifs_missing = verifs_missing & ", Date of Birth of all Household Members"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_MEMB_id = "FAILED" Then verifs_missing = verifs_missing & ", Identity of Adults"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_PARE = "FAILED" Then verifs_missing = verifs_missing & ", Relationship of Children to Adults"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_PREG = "FAILED" Then verifs_missing = verifs_missing & ", Pregnancy"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_RBIC = "FAILED" Then verifs_missing = verifs_missing & ", Roomer/Boarder Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_ADDR = "FAILED" Then verifs_missing = verifs_missing & ", Address"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_SCHL = "FAILED" Then verifs_missing = verifs_missing & ", School Attendance"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_SECU = "FAILED" Then verifs_missing = verifs_missing & ", Security Asset"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_SPON = "FAILED" Then verifs_missing = verifs_missing & ", Sponsor Income or Assets"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_test_verif_UNEA = "FAILED" Then verifs_missing = verifs_missing & ", Unearned Income"
		If left(verifs_missing, 1) = "," Then verifs_missing = right(verifs_missing, len(verifs_missing)-2)

		Call write_long_variable_with_indent("       Verifications: ", verifs_missing)
	End If


	'MFIP
	Call write_variable_in_CASE_NOTE("MFIP Denial Info : " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_reason_info)
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_elig_explanation <> "" Then
		Call write_long_variable_with_indent("    DENY Reason  : ", CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_elig_explanation)
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_appl_withdraw = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The Cash request has been Withdrawn.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_asset = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * The household is over the asset limit for MFIP (and all Cash Programs).")
		Call write_variable_in_CASE_NOTE("       | CASH Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_CASH, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | ACCT Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_ACCT, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | SECU Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_SECU, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | CARS Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_CARS, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | SPON Assets: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_SPON, 10) & "                              |")
		Call write_variable_in_CASE_NOTE("       | Total Assets:$ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_total, 10) & " - Asset Maximum: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_counted_asset_max, 10) & "|")

	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_death_applicant = "FAILED" Then Call write_variable_in_CASE_NOTE("     * Applicant on this case has died (" & STAT_INFORMATION(month_ind).stat_memb_date_of_death(0) & ").")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_dupl_assist = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The members of this household are receiving Cash Assistance on another case.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_elig_child = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household does not have a child that meets the requirements for family cash benefits.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_fail_coop = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has not complied with all requirements for Family Cash Assistance.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_fail_file = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This case has failed to complete a required report process.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_initial_income = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * Household Income exceeds the Initial Income Limit  (Family Wage Level of $ " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_family_wage_level & ").")
		Call write_variable_in_CASE_NOTE("       | Counted Earned Inc: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_earned, 10) & "                                  |")
		Call write_variable_in_CASE_NOTE("       | Dependent Care Exp: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_deoendant_care, 10) & " (-)                              |")
		Call write_variable_in_CASE_NOTE("       | Counted UNEA Inc:   $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_unearned, 10) & "                                  |")
		Call write_variable_in_CASE_NOTE("       | Counted Deemed Inc: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_deemed, 10) & "                                  |")
		Call write_variable_in_CASE_NOTE("       | Child Support Excl: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_cses_exclusion, 10) & " (-)                              |")
		Call write_variable_in_CASE_NOTE("       | Total Counted Inc:  $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_total, 10) & " - Family Wage Level: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_initial_income_family_wage_level, 10) & "|")

	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_minor_liv_arrange = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This minors on this case do not meet the required living arrangement review.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_monthly_income = "FAILED" Then Call write_variable_in_CASE_NOTE("     * Household Income exceeds the Monthly Income Limit.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_post_60_disq = "FAILED" Then Call write_variable_in_CASE_NOTE("     * Member(s) of this household have been disqualified during TANF extension months.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has not met state residency requirements.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_sanction_limit = "FAILED" Then Call write_variable_in_CASE_NOTE("     * Member(s) of this household have reached the sanction limit.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_strike = "FAILED" Then Call write_variable_in_CASE_NOTE("     * his household has a member on strike and is not eligiblity for public assistance.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_TANF_time_limit = "FAILED" Then Call write_variable_in_CASE_NOTE("     * This household has used all TANF months and is not eligible for an extension.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_transfer_asset = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The members of this household have transferred assets in a way that does not comply with cash assistance rules.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_verif = "FAILED" Then
		Call write_variable_in_CASE_NOTE("     * The household has not provided required verifications.")
		verifs_missing = ""
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_ACCT = "FAILED" Then verifs_missing = verifs_missing & ", Bank Account"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_BUSI = "FAILED" Then verifs_missing = verifs_missing & ", Self Employment Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_CARS = "FAILED" Then verifs_missing = verifs_missing & ", Vehicle"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_JOBS = "FAILED" Then verifs_missing = verifs_missing & ", Job Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_MEMB_dob = "FAILED" Then verifs_missing = verifs_missing & ", Date of Birth of all Household Members"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_MEMB_id = "FAILED" Then verifs_missing = verifs_missing & ", Identity of Adults"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_PARE = "FAILED" Then verifs_missing = verifs_missing & ", Relationship of Children to Adults"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_PREG = "FAILED" Then verifs_missing = verifs_missing & ", Pregnancy"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_RBIC = "FAILED" Then verifs_missing = verifs_missing & ", Roomer/Boarder Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_ADDR = "FAILED" Then verifs_missing = verifs_missing & ", Address"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_SCHL = "FAILED" Then verifs_missing = verifs_missing & ", School Attendance"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_SECU = "FAILED" Then verifs_missing = verifs_missing & ", Security Asset"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_SPON = "FAILED" Then verifs_missing = verifs_missing & ", Sponsor Income or Assets"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_UNEA = "FAILED" Then verifs_missing = verifs_missing & ", Unearned Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_verif_MEMI = "FAILED" Then verifs_missing = verifs_missing & ", State Residence"
		If left(verifs_missing, 1) = "," Then verifs_missing = right(verifs_missing, len(verifs_missing)-2)
		Call write_long_variable_with_indent("       Verifications: ", verifs_missing)
	End If

	'MSA
	Call write_variable_in_CASE_NOTE("MSA Denial Info  : " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info)
	If CASH_DENIAL_APPROVALS(elig_ind).cash_family_or_adult = "Adult" and CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_explanation <> "" Then
		Call write_long_variable_with_indent("    DENY Reason  : ", CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_explanation)
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_applicant_eligible = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The applicant is not MSA Eligibile")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_application_withdrawn = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The application has been withdrawn.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_eligible_member = "FAILED" Then Call write_variable_in_CASE_NOTE("     * There is no household member eligible for MSA.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_fail_file = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has not completed a report.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_residence = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has does not have 30 days of MN residency.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_assets = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The houshold has assets that exceed the asset limit.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_gross_income = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has exceeded the Gross Income Limit.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_prosp_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has exceeded the Net Income Limit")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_retro_net_income = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has exceeded the Net Income Limit.")
	If DENY_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("       | MSA Need Standard: $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_budg_need_standard, 10) & " |")
		Call write_variable_in_CASE_NOTE("       | MSA Net Income:    $ " & right("          " & CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_budg_net_income, 10) & " |")
	End If
	If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info = "Verification" OR CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif = "FAILED" Then Call write_variable_in_CASE_NOTE("     * The household has not provided required verifications.")
	If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif = "FAILED" Then
		verifs_missing = ""
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_acct = "FAILED" Then verifs_missing = verifs_missing & ", Bank Account"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_addr = "FAILED" Then verifs_missing = verifs_missing & ", Address"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_busi = "FAILED" Then verifs_missing = verifs_missing & ", Self Employment Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_cars = "FAILED" Then verifs_missing = verifs_missing & ", Vehicle"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_jobs = "FAILED" Then verifs_missing = verifs_missing & ", Job Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_lump = "FAILED" Then verifs_missing = verifs_missing & ", Lump Sum Income"
		' If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_pact = "FAILED" Then verifs_missing = verifs_missing & ", "
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_rbic = "FAILED" Then verifs_missing = verifs_missing & ", Roomer/Boarder Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_secu = "FAILED" Then verifs_missing = verifs_missing & ", Security Asset"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_spon = "FAILED" Then verifs_missing = verifs_missing & ", Sponsor Income or Assets"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_stin = "FAILED" Then verifs_missing = verifs_missing & ", Student Income"
		If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif_unea = "FAILED" Then verifs_missing = verifs_missing & ", Unearned Income"
		If left(verifs_missing, 1) = "," Then verifs_missing = right(verifs_missing, len(verifs_missing)-2)
		Call write_long_variable_with_indent("       Verifications: ", verifs_missing)
	End If

	'GA
	Call write_variable_in_CASE_NOTE("GA Denial Info   : " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info)
	If CASH_DENIAL_APPROVALS(elig_ind).cash_family_or_adult = "Adult" and CASH_DENIAL_APPROVALS(elig_ind).deny_ga_elig_explanation <> "" Then
		Call write_long_variable_with_indent("    DENY Reason  : ", CASH_DENIAL_APPROVALS(elig_ind).deny_ga_elig_explanation)
	End If

	Call write_variable_in_CASE_NOTE("WB Denial Info   : This program has ended 12/1/2014 and is not available.")
	verif_header = False
	If DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("=============================================================================")
		Call write_variable_in_CASE_NOTE("Cash Denial due to Verifications not received.")
		Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & DENY_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
		Call write_long_variable_with_indent("   Verifications: ", trim(DENY_UNIQUE_APPROVALS(verif_request_details, unique_app)))
		verif_header = True
	ElseIf trim(DENY_UNIQUE_APPROVALS(verif_request_date, unique_app)) <> "" or trim(DENY_UNIQUE_APPROVALS(verif_request_details, unique_app)) <> "" Then
		Call write_variable_in_CASE_NOTE("=============================================================================")
		Call write_variable_in_CASE_NOTE("A request for information/documentation was sent.")
		If  trim(DENY_UNIQUE_APPROVALS(verif_request_date, unique_app)) <> "" Then Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & DENY_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
		Call write_long_variable_with_indent("   Verifications: ", trim(DENY_UNIQUE_APPROVALS(verif_request_details, unique_app)))
		verif_header = True
	End If

	If verif_header = True Then
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_two_job_ended(each_memb) = False Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_three_job_ended(each_memb) = False Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_four_job_ended(each_memb) = False Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_five_job_ended(each_memb) = False Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
			End if

			If (STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_snap_expense_verif_code(each_memb) = "N") and STAT_INFORMATION(month_ind).stat_busi_one_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
			End if
			If (STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_snap_expense_verif_code(each_memb) = "N") and STAT_INFORMATION(month_ind).stat_busi_two_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
			End if
			If (STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_snap_expense_verif_code(each_memb) = "N") and STAT_INFORMATION(month_ind).stat_busi_three_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
			End if

			If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_one_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_two_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_three_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_four_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
			End if
			If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_five_inc_end_date(each_memb) = "" Then
				Call enter_verif_missing_header(verif_header)
				Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
			End if
		Next
	End If

	If DENY_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("======================= WCOM of DENIAL INFORMATION ADDED ====================")
		Call write_variable_in_CASE_NOTE("* WCOM added to Denial Notice to detail Denial Information.")
		If STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "1" or STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "1" Then

		Else
			Call write_variable_in_CASE_NOTE("Information added:")
			CALL write_variable_in_CASE_NOTE("RCA: Refugee Cash apply at your resettlement agency.")
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_reason_code = "01" and CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_reason_code = "01" Then
				CALL write_variable_in_CASE_NOTE("DWP/MFIP: Family cash programs.")
				CALL write_variable_in_CASE_NOTE("    Requires an eligible child/pregnant person to be elig.")
			Else
				CALL write_variable_in_CASE_NOTE("DWP: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_reason_info)
				CALL write_variable_in_CASE_NOTE("MFIP: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_reason_info)
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_code = "01" and CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_code = "01" Then
				CALL write_variable_in_CASE_NOTE("GA/MSA: Adult cash programs.")
				CALL write_variable_in_CASE_NOTE("    Available only for households without children.")
			Else
				CALL write_variable_in_CASE_NOTE("GA: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info)
				CALL write_variable_in_CASE_NOTE("MSA: " & CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info)
			End if
		End If

		If DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app) <> "" or DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app) <> "" or DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app) <> "" Then
			CALL write_variable_in_CASE_NOTE("Reasons for Cash Denial:")
		End If

		If DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app) <> "" Then
			CALL write_variable_in_CASE_NOTE(" - " & DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app))
		End If
		If DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app) <> "" Then
			CALL write_variable_in_CASE_NOTE(" - " & DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app))
		End If
		If DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app) <> "" Then
			CALL write_variable_in_CASE_NOTE(" - " & DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app))
		End If
	End if
	Call write_variable_in_CASE_NOTE("=============================================================================")
	If DENY_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(DENY_UNIQUE_APPROVALS(process_for_note, unique_app))
	If DENY_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(DENY_UNIQUE_APPROVALS(changes_for_note, unique_app))

	Call write_variable_in_CASE_NOTE(worker_signature)
end function

function snap_elig_case_note()
	CASE_NOTE_entered = True
	Call start_a_blank_case_note

	end_msg_info = end_msg_info & "NOTE entered for SNAP - " & elig_info & " eff " & first_month & header_end & vbCr
	Call write_variable_in_CASE_NOTE("APPROVAL " & program_detail & " " & elig_info & " eff " & first_month & header_end)

	Call write_bullet_and_variable_in_CASE_NOTE("Approval completed", SNAP_ELIG_APPROVALS(elig_ind).snap_approved_date)
	If add_new_note_for_SNAP = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then Call write_variable_in_CASE_NOTE("* This CASE/NOTE detail replaces info from today's previous approval NOTES.")
	Call write_bullet_and_variable_in_CASE_NOTE("FIAT Reason", SNAP_UNIQUE_APPROVALS(fiat_reason, unique_app))
	If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("================================ BENEFIT AMOUNT =============================")
		For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
			If InStr(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
				display_benefit = False
				If SNAP_UNIQUE_APPROVALS(limit_benefit_months, unique_app) = "" Then
					display_benefit = True
				ElseIf InStr(SNAP_UNIQUE_APPROVALS(limit_benefit_months, unique_app), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
					display_benefit = True
				End If
				If display_benefit = True Then
					If divider_needed = True Then
						Call write_variable_in_CASE_NOTE("-----------------------------------------------------------------------------")
						display_benefit = False
					End If

					If SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot = SNAP_ELIG_APPROVALS(approval).snap_benefit_amt Then
						' " 10/21:     Entitlement: $ 1,125.00 ¦ Issued to Resident: $ 1,125.00    10/21"
						Call write_variable_in_CASE_NOTE(SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year & ": Entitlement: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot, 8) & " | Issued to Resident: $ " & right("        " & SNAP_ELIG_APPROVALS(approval).snap_benefit_amt, 8) & "         " & SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year)
					Else
						If SNAP_ELIG_APPROVALS(approval).snap_benefit_prorated_amt <> "" Then
							Call write_variable_in_CASE_NOTE(SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year & ": Entitlement: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot, 8) & " |           Prorated: $ " & right("        " & SNAP_ELIG_APPROVALS(approval).snap_benefit_prorated_amt, 8) & "-from " & SNAP_ELIG_APPROVALS(approval).snap_benefit_prorated_date)
							If SNAP_ELIG_APPROVALS(approval).snap_benefit_amt_already_issued <> "" Then Call write_variable_in_CASE_NOTE("                               | Amt Already Issued: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_amt_already_issued, 8) & "  (-)")
							If SNAP_ELIG_APPROVALS(approval).snap_benefit_recoup_amount <> "0.00" Then Call write_variable_in_CASE_NOTE("                               |         Recoupment: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_recoup_amount, 8) & "  (-)")
						ElseIf SNAP_ELIG_APPROVALS(approval).snap_benefit_amt_already_issued <> "" Then
							Call write_variable_in_CASE_NOTE(SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year & ": Entitlement: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot, 8) & " | Amt Already Issued: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_amt_already_issued, 8) & "  (-)")
							If SNAP_ELIG_APPROVALS(approval).snap_benefit_recoup_amount <> "0.00" Then Call write_variable_in_CASE_NOTE("                               |         Recoupment: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_recoup_amount, 8) & "  (-)")
						ElseIf SNAP_ELIG_APPROVALS(approval).snap_benefit_recoup_amount <> "0.00" Then
							Call write_variable_in_CASE_NOTE(SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year & ": Entitlement: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot, 8) & " |         Recoupment: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_recoup_amount, 8) & "  (-)")
						End If

						Call write_variable_in_CASE_NOTE("                               | Issued to Resident: $ " & right("       " & SNAP_ELIG_APPROVALS(approval).snap_benefit_amt, 8) & "         " & SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year)
						If SNAP_ELIG_APPROVALS(approval).snap_benefit_prorated_amt <> "" Then Call write_bullet_and_variable_in_CASE_NOTE("Reason for Proration", SNAP_UNIQUE_APPROVALS(proration_reason, unique_app))
						divider_needed = True
					End If
				End If
			End If
		Next
	End If

	If SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = True Then
		Call write_variable_in_CASE_NOTE("============================= BUDGET FOR APPROVAL ===========================")

		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_prosp_gross_inc_test = "FAILED" Then Call write_variable_in_CASE_NOTE("SNAP INELIGIBLE because Prosp Inc exceeds GROSS INCOME MAX of $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_gross_inc)
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_prosp_net_inc_test = "FAILED" Then Call write_variable_in_CASE_NOTE("SNAP INELIGIBLE because Prosp Inc exceeds NET INCOME MAX of $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_net_adj_inc)
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_retro_gross_inc_test = "FAILED" Then Call write_variable_in_CASE_NOTE("SNAP INELIGIBLE because Retro Inc exceeds GROSS INCOME MAX of $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_gross_inc)
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_retro_net_inc_test = "FAILED" Then Call write_variable_in_CASE_NOTE("SNAP INELIGIBLE because Retro Inc exceeds NET INCOME MAX of $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_net_adj_inc)


		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_earned_inc = "" Then SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_earned_inc = "0.00"
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_unea_inc = "" Then SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_unea_inc = "0.00"

		Call write_variable_in_CASE_NOTE(left("SNAP Unit Size: " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_numb_in_assist_unit & " - Adult: " & SNAP_ELIG_APPROVALS(elig_ind).adults_recv_snap & ", Children: " & SNAP_ELIG_APPROVALS(elig_ind).children_recv_snap & "            ", 44) & "|--- SNAP Benefit Calculation ---")
		Call write_variable_in_CASE_NOTE("Income:                                     |")

		beginning_txt = "            "
		beginning_txt = "  "
		earned_info = "|   Gross Earned Inc: $ " & right("        "&SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_earned_inc, 8)
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_one_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_one_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_one_snap_pic_prosp_monthly_inc(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_two_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_two_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_two_snap_pic_prosp_monthly_inc(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_three_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_three_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_three_snap_pic_prosp_monthly_inc(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_four_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_four_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_four_snap_pic_prosp_monthly_inc(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_jobs_five_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_jobs_five_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					job_amt_array = split(STAT_INFORMATION(month_ind).stat_jobs_five_snap_pic_prosp_monthly_inc(each_memb), ".")
					pay_info = job_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				job_detail = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "JOBS- $" & job_detail & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_busi_one_snap_prosp_net_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_busi_one_snap_prosp_net_inc(each_memb), ".") <> 0 Then
					busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_one_snap_prosp_net_inc(each_memb), ".")
					pay_info = busi_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "BUSI- $" & busi_details & earned_info)
				beginning_txt = "            "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_busi_two_snap_prosp_net_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_busi_two_snap_prosp_net_inc(each_memb), ".") <> 0 Then
					busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_two_snap_prosp_net_inc(each_memb), ".")
					pay_info = busi_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "BUSI- $" & busi_details & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_snap(each_memb) = True Then
				pay_info = STAT_INFORMATION(month_ind).stat_busi_three_snap_prosp_net_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_busi_three_snap_prosp_net_inc(each_memb), ".") <> 0 Then
					busi_amt_array = split(STAT_INFORMATION(month_ind).stat_busi_three_snap_prosp_net_inc(each_memb), ".")
					pay_info = busi_amt_array(0)
				End if
				If pay_info = "" Then pay_info = "0"

				busi_details = left(pay_info & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)  & "- " & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(beginning_txt & "BUSI- $" & busi_details & earned_info)
				beginning_txt = "            "
				beginning_txt = "  "
				earned_info = "|"
			End If
		Next
		If earned_info = "|   Gross Earned Inc: $ " & right("        "&SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_earned_inc, 8) Then
			Call write_variable_in_CASE_NOTE("  NO Earned Income                          |   Gross Earned Inc: $ " & right("        "&SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_earned_inc, 8))
		End If
		unearned_info = "| Gross Unearned Inc: $ " & right("        "&SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_unea_inc, 8)
		For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_snap(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_one_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_one_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_one_snap_pic_prosp_monthly_inc(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_snap(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_two_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_two_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_two_snap_pic_prosp_monthly_inc(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_snap(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_three_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_three_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_three_snap_pic_prosp_monthly_inc(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_snap(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_four_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_four_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_four_snap_pic_prosp_monthly_inc(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE(" UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
			If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_snap(each_memb) = True Then
				list_unea_amt = STAT_INFORMATION(month_ind).stat_unea_five_snap_pic_prosp_monthly_inc(each_memb)
				If InStr(STAT_INFORMATION(month_ind).stat_unea_five_snap_pic_prosp_monthly_inc(each_memb), ".") <> 0 Then
					unea_amt_array = split(STAT_INFORMATION(month_ind).stat_unea_five_snap_pic_prosp_monthly_inc(each_memb), ".")
					list_unea_amt = unea_amt_array(0)
				End If
				unea_detail = left(list_unea_amt & "- M" & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & "- "& STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & spaces_30, 35)
				Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
				unearned_info = "|"
			End If
		Next
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc <> "" Then
			list_unea_amt = SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc
			If InStr(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc, ".") <> 0 Then
				unea_amt_array = split(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc, ".")
				list_unea_amt = unea_amt_array(0)
			End If
			unea_detail = left(list_unea_amt & "- PA Grant Income" & spaces_30, 35)
			Call write_variable_in_CASE_NOTE("  UNEA- $" & unea_detail & unearned_info)
			unearned_info = "|"
		End If
		If unearned_info = "| Gross Unearned Inc: $ " & right("        "&SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_unea_inc, 8) Then Call write_variable_in_CASE_NOTE("  NO Unearned Income                        | Gross Unearned Inc: $ " & right("        "&SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_unea_inc, 8))

		Call write_variable_in_CASE_NOTE("                                            |    Total Gross Inc: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_gross_inc, 8))

		If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "INELIGIBLE" Then
			Call write_variable_in_CASE_NOTE("                                         ** Maximum Gross Income: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_gross_inc, 8))
		End If

		deduction_detail_one = ""
		deduction_detail_two = ""
		deduction_detail_three = ""

		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard <> "" Then
			If deduction_detail_one = "" Then
				deduction_detail_one = left("Standard $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_one) < 21 Then
				deduction_detail_one = deduction_detail_one & "- Standard $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard, ".00", "")
			ElseIf deduction_detail_two = "" Then
				deduction_detail_two = left("Standard $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_two) < 21 Then
				deduction_detail_two = deduction_detail_two & "- Standard  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard, ".00", "")
			ElseIf deduction_detail_three = "" Then
				deduction_detail_three = deduction_detail_three & "Standard $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard, ".00", "")
			ElseIf len(deduction_detail_three) < 21 Then
				deduction_detail_three = deduction_detail_three & "- Standard  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_standard, ".00", "")
			End if
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned <> "" Then
			If deduction_detail_one = "" Then
				deduction_detail_one = left("Earned Inc $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_one) < 21 Then
				deduction_detail_one = deduction_detail_one & "- Earned Inc $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned, ".00", "")
			ElseIf deduction_detail_two = "" Then
				deduction_detail_two = left("Earned Inc $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_two) < 21 Then
				deduction_detail_two = deduction_detail_two & "- Earned Inc $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned, ".00", "")
			ElseIf deduction_detail_three = "" Then
				deduction_detail_three = deduction_detail_three & "Earned Inc $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned, ".00", "")
			ElseIf len(deduction_detail_three) < 21 Then
				deduction_detail_three = deduction_detail_three & "- Earned Inc  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_earned, ".00", "")
			End if
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical <> "" Then
			If deduction_detail_one = "" Then
				deduction_detail_one = left("Medical Exp $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_one) < 21 Then
				deduction_detail_one = deduction_detail_one & "- Medical Exp $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical, ".00", "")
			ElseIf deduction_detail_two = "" Then
				deduction_detail_two = left("Medical Exp $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_two) < 21 Then
				deduction_detail_two = deduction_detail_two & "- Medical Exp $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical, ".00", "")
			ElseIf deduction_detail_three = "" Then
				deduction_detail_three = deduction_detail_three & "Medical Exp $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical, ".00", "")
			ElseIf len(deduction_detail_three) < 21 Then
				deduction_detail_three = deduction_detail_three & "- Medical Exp  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_medical, ".00", "")
			End if
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care <> "" Then
			If deduction_detail_one = "" Then
				deduction_detail_one = left("Depndt Care $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_one) < 21 Then
				deduction_detail_one = deduction_detail_one & "-Depndt Care  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care, ".00", "")
			ElseIf deduction_detail_two = "" Then
				deduction_detail_two = left("Depndt Care $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_two) < 21 Then
				deduction_detail_two = deduction_detail_two & "- Depndt Care $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care, ".00", "")
			ElseIf deduction_detail_three = "" Then
				deduction_detail_three = deduction_detail_three & "Depndt Care $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care, ".00", "")
			ElseIf len(deduction_detail_three) < 21 Then
				deduction_detail_three = deduction_detail_three & "- Depndt Care  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_depndt_care, ".00", "")
			End if
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses <> "" Then
			If deduction_detail_one = "" Then
				deduction_detail_one = left("Child Suprt $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_one) < 21 Then
				deduction_detail_one = deduction_detail_one & "- Child Suprt $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses, ".00", "")
			ElseIf deduction_detail_two = "" Then
				deduction_detail_two = left("Child Suprt $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses, ".00", "") & spaces_18, 15)
			ElseIf len(deduction_detail_two) < 21 Then
				deduction_detail_two = deduction_detail_two & "- Child Suprt $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses, ".00", "")
			ElseIf deduction_detail_three = "" Then
				deduction_detail_three = deduction_detail_three & "Child Suprt $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses, ".00", "")
			ElseIf len(deduction_detail_three) < 21 Then
				deduction_detail_three = deduction_detail_three & "- Child Suprt  $" & replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_deduct_cses, ".00", "")
			End if
		End If

		Call write_variable_in_CASE_NOTE("Deductions: " & left(deduction_detail_one & spaces_30, 32) & "|   (-)   Deductions: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_deduct, 8))
		If deduction_detail_two <> "" Then Call write_variable_in_CASE_NOTE("            " & left(deduction_detail_two & spaces_30, 32) & "|")
		If deduction_detail_three <> "" Then Call write_variable_in_CASE_NOTE("            " & left(deduction_detail_three & spaces_30, 32) & "|")

		Call write_variable_in_CASE_NOTE("                                            |            Net Inc: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_net_inc, 8))
		Call write_variable_in_CASE_NOTE("Expenses:   Housing: $"& left(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_housing_exp_total & "        ", 8)& "        |--------------------------|")

		Call write_variable_in_CASE_NOTE("            Utilities: $"& left(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_utilities_exp_total&"        ", 8) & "      | Total Shelter: $ " & left(replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_total, ".00", "")&"        ", 8) & "|")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_allow_shel <> "" Then
			Call write_variable_in_CASE_NOTE("            MAX Allowable: $"& left(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_allow_shel&"        ", 8) & "  |(-)1/2 Net Inc: $ " & left(replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_50_perc_net_inc, ".00", "")&"        ", 8) & "|")
		Else
			Call write_variable_in_CASE_NOTE("            MAX Allowable:  NO LIMIT  |(-)1/2 Net Inc: $ " & left(replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_50_perc_net_inc, ".00", "")&"        ", 8) & "|")
		End If
		Call write_variable_in_CASE_NOTE("                                      |   Adj Shelter: $ " & left(replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_adj_shel_costs, ".00", "")&"        ", 8) & "|")
		Call write_variable_in_CASE_NOTE("                                      |--------------------------|")

		Call write_variable_in_CASE_NOTE("                                            |  (-)Allow Shel Exp: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_expenses, 8))
		Call write_variable_in_CASE_NOTE("                                            |Net Adjusted Income: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_net_adj_inc, 8))
		If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then
			Call write_variable_in_CASE_NOTE("                               |---------------------------------|")
			Call write_variable_in_CASE_NOTE("                               |    Thrifty Food Plan: $ " & left(replace(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_thrifty_food_plan, ".00", "")&"        ", 8) & "|")
			Call write_variable_in_CASE_NOTE("                               |(-)30% of Net Adj Inc: $ " & left(replace(SNAP_ELIG_APPROVALS(elig_ind).snap_bug_30_percent_net_adj_inc, ".00", "")&"        ", 8) & "|")
			Call write_variable_in_CASE_NOTE("                               |---------------------------------|")
			Call write_variable_in_CASE_NOTE("                                            |   SNAP Entitlement: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_benefit_monthly_fs_allot, 8))
		ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "INELIGIBLE" Then
			Call write_variable_in_CASE_NOTE("                                         ** Max Net Adjusted Inc: $ " & right("        " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_max_net_adj_inc, 8))
		End If
		If SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_sent, unique_app) = True Then
			Call write_variable_in_CASE_NOTE("SNAP Budgeted Gross Income of  $ " & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_gross_inc & " exceeds 130% FPG of $ " & FormatNumber(SNAP_UNIQUE_APPROVALS(snap_130_percent_fpg_amt, unique_app), 2, -1, 0, -1))

			If SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_sent, unique_app) = True Then Call write_variable_in_CASE_NOTE(" - WCOM added to Notice for to clarify reporting responsibilities.")
		End If
	End If

	If SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app) = False Then
		Call write_variable_in_CASE_NOTE("================================== CASE TESTS ===============================")
		for each_month = 0 to UBound(SPECIAL_PROCESSES_BY_MONTH, 2)
			If SPECIAL_PROCESSES_BY_MONTH(footer_mo_const, each_month) = SNAP_ELIG_APPROVALS(elig_ind).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(elig_ind).elig_footer_year Then
				If SPECIAL_PROCESSES_BY_MONTH(SNAP_to_MFIP_const, each_month) = True then
					Call write_variable_in_CASE_NOTE("SNAP is closed as an individual program as the case is MFIP eligible.")
					Call write_variable_in_CASE_NOTE("     Eligibility for Food Support benefits will be determined ")
					Call write_variable_in_CASE_NOTE("     as a part of the MFIP package. SNAP TO MFIP TRANSITION")
				End If
			End If
		Next

		Call write_variable_in_CASE_NOTE("* SNAP is INELIGIBLE because not all CASE TESTS were passed.") '' to make this Household Eligible")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_appl_withdrawn_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The request for SNAP benefits was withdrawn. (APPLICATION WITHDRAWN)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_applct_elig_test = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - The applicant is not SNAP eligibile. (APPLICANT ELIGIBLE)")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_abawd(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has reached the SNAP Time Limit - ABAWD")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_absence(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is not in the household.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_roomer(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is a roomer.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_boarder(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is a boarder.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_citizenship(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 does not meet citizenship requirements.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_citizenship_coop(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has not complied with citizenship information.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_cmdty(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has received another food benefit for this time period.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_disq(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is disqualified from SNAP")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_dupl_assist(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has received SNAP assisnce on another case.")

			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_fraud(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has a Fraud determination.")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next

			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_eligible_student(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is an ineligible student.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_institution(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is in an institution.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_mfip_elig(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is MFIP eligible.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_non_applcnt(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is not requesting SNAP.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_residence(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 does not have MN residence.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_ssn_coop(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has not cooperated with SSN requirements.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_unit_memb(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 is not a unit member.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_work_reg(0) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb 01 has not complied with work registration.")

		End If

		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_comdty_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The case has received Commodity Food in this time period. (COMMODITY)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_disq_test = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has a Disqualification. (DISQUALIFICATION)")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If

		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_dupl_assist_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has already received SNAP. (DUPL ASSISTANCE)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_eligible_person_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - There is no eligible person on this case. (ELIGIBLE PERSON)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_coop_test = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has failed to cooperate. (FAIL TO COOPERATE)")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_one_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_two_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_three_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_four_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "NON-COOP" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - MEMB " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " - " &  STAT_INFORMATION(month_ind).stat_disq_five_non_coop_note_text(each_memb))
					Call write_variable_in_CASE_NOTE("     " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_file_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has failed to file a report. (FAIL TO FILE)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_fail_file_hrf = "FAILED" Then Call write_variable_in_CASE_NOTE("    -Monthly Household Report process was not completed.")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_fail_file_sr = "FAILED" Then Call write_variable_in_CASE_NOTE("    -Six Month Report process was not completed.")

		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_recert_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The annual recertification process was not completed. (RECERTIFICATION)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_residence_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - This case has not established Minnesota residency. (RESIDENCE)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_resource_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The assets have exceeded the max. (RESOURCE)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_strike_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The case has a member on strike. (STRIKE)")
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_xfer_resource_inc_test = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has failed transfer resources/income. (TRANSFER RESOURCE INC)")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "TRANSFER" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "TRANSFER" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "TRANSFER" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "TRANSFER" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "TRANSFER" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - Verifications were not received. (VERIFICATION)")
			Call write_variable_in_CASE_NOTE("   VERIFICATION REQUEST FORM SENT: " & SNAP_UNIQUE_APPROVALS(verif_request_date, unique_app) & ", due by: " & due_date)
			If expedited_package_approved = True Then
				Call write_variable_in_CASE_NOTE("   Verifications postponed for Expedited Approval of previous month(s)")
				Call write_variable_in_CASE_NOTE("   - if provided eligibility for this month can be redetermined")
			End If
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_MEMB_ID  = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Proof of the identity of the Applicant was not received.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_ACCT = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Proof of bank account not received.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_PACT = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Case ineligible due to: " & SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ". ")
				Call write_variable_in_CASE_NOTE("     INELIG created using PACT.")
				If SNAP_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True Then Call write_variable_in_CASE_NOTE("     WCOM added to Notice with PACT reason.")
			End If
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_ADDR = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Residency not verified.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_SECU = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Proof of securities not received.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_RBIC = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Self Employment - Roomer/Boarder Income not verified.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_BUSI = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Self Employment income not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_one_snap_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_two_snap_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" or STAT_INFORMATION(month_ind).stat_busi_three_snap_expense_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " Self Employment verif not received.")
					End if
				Next
			End If
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_SPON = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Sponsor income not verified.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_STIN = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Student income not verified.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_UNEA = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Unearned income not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " income from " & STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " verif not received.")
					End if
				Next
			End If
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_JOBS = "FAILED" Then
				Call write_variable_in_CASE_NOTE("   - Wage income not verified.")
				For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
					If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " verif not received.")
					End if
					If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then
						Call write_variable_in_CASE_NOTE("     M " & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " employment at " & STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " verif not received.")
					End if
				Next
			End If
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_STWK = "FAILED" Then Call write_variable_in_CASE_NOTE("   - End of employment not verified.")
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_STRK = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Proof of strike was not received.")
		End If

		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_voltry_quit_test = "FAILED" Then
			Call write_variable_in_CASE_NOTE(" - This case has a member who quit work, not following SNAP general work rules. (VOLUNTARY QUIT)")
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "VOL QUIT" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "VOL QUIT" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "VOL QUIT" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "VOL QUIT" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "VOL QUIT" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If
			Next
		End If
		If SNAP_ELIG_APPROVALS(elig_ind).snap_case_work_reg_test = "FAILED" Then Call write_variable_in_CASE_NOTE(" - The persons on this case did not comply with work registration. (WORK REGISTRATION)")
		' TODO - add more detail for work Reg'
	End If

	first_memb = ""
	If SNAP_ELIG_APPROVALS(elig_ind).snap_case_applct_elig_test = "FAILED" and UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb) > 0 Then first_memb = 1
	If SNAP_ELIG_APPROVALS(elig_ind).snap_case_applct_elig_test <> "FAILED" Then first_memb = 0

	first_inelig_memb = True
	If first_memb <> "" Then
		For each_memb = first_memb to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)

			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_eligibility(each_memb) = "INELIGIBLE" Then

				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then
					If first_inelig_memb = True Then
						Call write_variable_in_CASE_NOTE("================================ MEMBER TESTS ===============================")
						first_inelig_memb = False
					End If
					Call write_variable_in_CASE_NOTE(" - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is not eligible for SNAP and not included in the SNAP benefit.")
					Call write_variable_in_CASE_NOTE("   The income for this member is " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_counted(each_memb))
				ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_failed_test(each_memb) = True Then
					If first_inelig_memb = True Then
						Call write_variable_in_CASE_NOTE("================================ MEMBER TESTS ===============================")
						first_inelig_memb = False
					End If
					Call write_variable_in_CASE_NOTE(" - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is not eligible for SNAP.")
				End If

				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_abawd(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has reached the SNAP Time Limit - ABAWD")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_absence(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is not in the household.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_roomer(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is a roomer.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_boarder(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is a boarder.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_citizenship(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " does not meet citizenship requirements.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_citizenship_coop(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has not complied with citizenship information.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_cmdty(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has received commodities for this time period.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_disq(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is disqualified from SNAP")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_dupl_assist(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has received SNAP assisnce on another case.")

				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_fraud(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has a Fraud determination.")
				If STAT_INFORMATION(month_ind).stat_disq_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_one_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_one_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_one_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_one_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_one_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_two_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_two_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_two_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_two_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_two_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_three_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_three_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_three_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_three_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_three_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_four_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_four_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_four_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_four_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_four_end_date(each_memb))
				End If
				If STAT_INFORMATION(month_ind).stat_disq_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_active(each_memb) = True AND STAT_INFORMATION(month_ind).stat_disq_five_source(each_memb) = "DISQUAL" AND STAT_INFORMATION(month_ind).stat_disq_five_program(each_memb) = "SNAP" Then
					Call write_variable_in_CASE_NOTE("   - " & STAT_INFORMATION(month_ind).stat_disq_five_type_info(each_memb) & " begin date: " & STAT_INFORMATION(month_ind).stat_disq_five_begin_date(each_memb))
					If IsDate(STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb)) = True Then Call write_variable_in_CASE_NOTE("     Disqualification to end on " & STAT_INFORMATION(month_ind).stat_disq_five_end_date(each_memb))
				End If

				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_eligible_student(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is an ineligible student.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_institution(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is in an institution.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_mfip_elig(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is MFIP eligible.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_non_applcnt(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is not requesting SNAP.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_residence(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " does not have MN residence.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_ssn_coop(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has not cooperated with SSN requirements.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_unit_memb(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " is not a unit member.")
				If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_membs_work_reg(each_memb) = "FAILED" Then Call write_variable_in_CASE_NOTE("   - Memb " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_ref_numbs(each_memb) & " has not complied with work registration.")
			End If
		Next
	End if

	Call write_variable_in_CASE_NOTE("================================= CASE STATUS ===============================")
	Call write_variable_in_CASE_NOTE("SNAP Status:      " & SNAP_ELIG_APPROVALS(elig_ind).snap_curr_prog_status)
	Call write_variable_in_CASE_NOTE("Budget Cycle:     " & SNAP_ELIG_APPROVALS(elig_ind).snap_budget_cycle)
	If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then
		Call write_variable_in_CASE_NOTE("Reporting Status: " & SNAP_ELIG_APPROVALS(elig_ind).snap_reporting_status)
		Call write_variable_in_CASE_NOTE("Review Date:      " & SNAP_ELIG_APPROVALS(elig_ind).snap_elig_revw_date)
	End If
	If SNAP_UNIQUE_APPROVALS(process_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(SNAP_UNIQUE_APPROVALS(process_for_note, unique_app))
	If SNAP_UNIQUE_APPROVALS(changes_for_note, unique_app) <> "" Then Call write_variable_in_CASE_NOTE(SNAP_UNIQUE_APPROVALS(changes_for_note, unique_app))
	Call write_variable_in_CASE_NOTE("---")
	Call write_variable_in_CASE_NOTE(worker_signature)
end function

'DECLARATIONS===============================================================================================================
class dwp_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public dwp_autoclosed_for_time_limit
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date

	public dwp_elig_ref_numbs()
	public dwp_elig_membs_full_name()
	public dwp_elig_membs_request_yn()
	public dwp_elig_membs_member_code()
	public dwp_memb_is_counted()
	public dwp_memb_is_deemer()
	public dwp_elig_membs_member_info()
	public dwp_elig_membs_funding_source_code()
	public dwp_elig_membs_funding_source_info()
	public dwp_elig_membs_elig_status()
	public dwp_elig_membs_begin_date()
	public dwp_elig_membs_adult_or_child()
	public dwp_elig_membs_test_absence()
	public dwp_elig_membs_test_child_age()
	public dwp_elig_membs_test_citizenship()
	public dwp_elig_membs_test_citizenship_verif()
	public dwp_elig_membs_test_dupl_assistance()
	public dwp_elig_membs_test_foster_care()
	public dwp_elig_membs_test_fraud()
	public dwp_elig_membs_test_minor_living_arrangement()
	public dwp_elig_membs_test_post_60_removal()
	public dwp_elig_membs_test_ssi()
	public dwp_elig_membs_test_ssn_coop()
	public dwp_elig_membs_test_unit_member()
	public dwp_elig_membs_test_unlawful_conduct()
	public dwp_elig_membs_es_status_code()
	public dwp_elig_membs_es_status_info()

	public dwp_elig_case_test_application_withdrawn
	public dwp_elig_case_test_assets
	public dwp_elig_case_test_CS_disqualification
	public dwp_elig_case_test_death_of_applicant
	public dwp_elig_case_test_dupl_assistance
	public dwp_elig_case_test_eligible_child
	public dwp_elig_case_test_ES_disqualification
	public dwp_elig_case_test_fail_coop
	public dwp_elig_case_test_four_month_limit
	public dwp_elig_case_test_initial_income
	public dwp_elig_case_test_MFIP_conversion
	public dwp_elig_case_test_residence
	public dwp_elig_case_test_strike
	public dwp_elig_case_test_TANF_time_limit
	public dwp_elig_case_test_transfer_of_assets
	public dwp_elig_case_test_verif
	public dwp_elig_case_test_new_spouse_income
	public dwp_elig_asset_CASH
	public dwp_elig_asset_ACCT
	public dwp_elig_asset_SECU
	public dwp_elig_asset_CARS
	public dwp_elig_asset_SPON
	public dwp_elig_asset_total
	public dwp_elig_asset_maximum
	public dwp_elig_test_fail_coop_applied_other_benefits
	public dwp_elig_test_fail_coop_provide_requested_info
	public dwp_elig_test_fail_coop_IEVS
	public dwp_elig_test_fail_coop_vendor_info
	public dwp_elig_initial_counted_earned_income
	public dwp_elig_initial_dependent_care_expense
	public dwp_elig_initial_counted_unearned_incom
	public dwp_elig_initial_counted_deemed_income
	public dwp_elig_initial_child_support_exclusion
	public dwp_elig_initial_total_counted_income
	public dwp_elig_initial_family_wage_level
	public dwp_elig_test_verif_ACCT
	public dwp_elig_test_verif_BUSI
	public dwp_elig_test_verif_CARS
	public dwp_elig_test_verif_JOBS
	public dwp_elig_test_verif_MEMB_dob
	public dwp_elig_test_verif_MEMB_id
	public dwp_elig_test_verif_PARE
	public dwp_elig_test_verif_PREG
	public dwp_elig_test_verif_RBIC
	public dwp_elig_test_verif_ADDR
	public dwp_elig_test_verif_SCHL
	public dwp_elig_test_verif_SECU
	public dwp_elig_test_verif_SPON
	public dwp_elig_test_verif_UNEA

	public dwp_elig_budg_shel_rent_mortgage
	public dwp_elig_budg_shel_property_tax
	public dwp_elig_budg_shel_house_insurance
	public dwp_elig_budg_hest_electricity
	public dwp_elig_budg_hest_heat_air
	public dwp_elig_budg_hest_water_sewer_garbage
	public dwp_elig_budg_hest_phone
	public dwp_elig_budg_shel_other
	public dwp_elig_budg_total_shelter_costs
	public dwp_elig_budg_personal_needs
	public dwp_elig_budg_total_DWP_need
	public dwp_elig_budg_earned_income
	public dwp_elig_budg_unearned_income
	public dwp_elig_budg_deemed_income
	public dwp_elig_budg_child_support_exclusion
	public dwp_elig_budg_budget_month_total
	public dwp_elig_budg_prior_low
	public dwp_elig_budg_DWP_countable_income
	public dwp_elig_budg_unmet_need
	public dwp_elig_budg_DWP_max_grant
	public dwp_elig_budg_DWP_grant
	public dwp_elig_cses_income
	public dwp_elig_child_count

	public dwp_elig_prorated_date
	public dwp_elig_prorated_amount
	public dwp_elig_amount_already_issued
	public dwp_elig_supplement_due
	public dwp_elig_overpayment
	public dwp_elig_adjusted_grant_amount
	public dwp_elig_recoupment_amount
	public dwp_elig_shelter_benefit_grant
	public dwp_elig_personal_needs_grant
	public dwp_elig_overpayment_fed_hh_count
	public dwp_elig_overpayment_fed_amount
	public dwp_elig_overpayment_state_hh_count
	public dwp_elig_overpayment_state_amount
	public dwp_elig_adjusted_grant_fed_hh_count
	public dwp_elig_adjusted_grant_fed_amount
	public dwp_elig_adjusted_grant_state_hh_count
	public dwp_elig_adjusted_grant_state_amount

	public dwp_approved_date
	public dwp_process_date
	public dwp_prev_approval
	public dwp_case_last_approval_date
	public dwp_case_current_prog_status
	public dwp_case_eligibility_result
	public dwp_case_source_of_info
	public dwp_case_benefit_impact
	public dwp_case_4th_month_of_elig
	public dwp_case_caregivers_have_es_plan
	public dwp_case_responsible_county
	public dwp_case_service_county
	public dwp_case_asst_unit_caregivers
	public dwp_case_asst_unit_children
	public dwp_case_total_assets
	public dwp_case_maximum_assets
	public dwp_case_summary_grant_amount
	public dwp_case_summary_net_grant_amount
	public dwp_case_summary_shelter_benefit_portion
	public dwp_case_summary_personal_needs_portion
	public dwp_mony_check_found
	public dwp_vnda_found


	public dwp_vnda_vendor_number()
	public dwp_vnda_vendor_name()
	public dwp_vnda_reference_number()
	public dwp_vnda_send_to_code()
	public dwp_vnda_send_to_info()
	public dwp_vnda_expense_type_code()
	public dwp_vnda_expense_type_info()
	public dwp_vnda_payment_amount()

	public dwp_check_issue_date()
	public dwp_check_program()
	public dwp_check_status_code()
	public dwp_check_status_info()
	public dwp_check_warrant_number()
	public dwp_check_transaction_amount()
	public dwp_check_type_code()
	public dwp_check_type_info()
	public dwp_check_transaction_number()
	public dwp_check_from_date()
	public dwp_check_to_date()
	public dwp_check_payment_reason()
	public dwp_check_payment_to_name()
	public dwp_check_payment_to_address()
	public dwp_check_mail_method()
	public dwp_check_payment_method()
	public dwp_check_vendor_number()
	public dwp_check_fiche_number()
	public dwp_check_payment_amount()
	public dwp_check_entitement_amount()
	public dwp_check_recoupment_amount()
	public dwp_check_replacement_amount()
	public dwp_check_cacnel_amount()
	public dwp_check_food_portion_amount()
	public dwp_check_reconciliation_date()
	public dwp_check_cancel_reason()
	public dwp_check_replacement_reason()
	public dwp_check_picup_status()
	public dwp_check_pickup_date()
	public dwp_check_servicing_county()
	public dwp_check_responsibility_county()
	public dwp_check_adjusting_transaction()
	public dwp_check_original_transaction()
	public dwp_check_vendor_name()
	public dwp_check_vendor_c_o()
	public dwp_check_vendor_street_one()
	public dwp_check_vendor_street_two()
	public dwp_check_vendor_city()
	public dwp_check_vendor_state()
	public dwp_check_vendor_zip()
	public dwp_check_vendor_grh_yn()
	public dwp_check_vendor_non_profit_yn()
	public dwp_check_vendor_phone()
	public dwp_check_vendor_county()
	public dwp_check_vendor_status_code()
	public dwp_check_vendor_status_info()
	public dwp_check_vendor_incorporated_yn()
	public dwp_check_vendor_federal_tax_id()
	public dwp_check_vendor_ssn()
	public dwp_check_vendor_2nd_address_type_code()
	public dwp_check_vendor_2nd_address_type_info()
	public dwp_check_vendor_2nd_address_eff_date()
	public dwp_check_vendor_2nd_name()
	public dwp_check_vendor_2nd_c_o()
	public dwp_check_vendor_2nd_street_one()
	public dwp_check_vendor_2nd_street_two()
	public dwp_check_vendor_2nd_city()
	public dwp_check_vendor_2nd_state()
	public dwp_check_vendor_2nd_zip()
	public dwp_check_vendor_direct_deposit_yn()
	public dwp_check_vendor_merge_vendor_number()
	public dwp_check_vendor_acct_number_required_yn()
	public dwp_check_vendor_blocked_county_numbers_list()


	public dwp_elig_membs_budg_deemed_self_emp()
	public dwp_elig_membs_budg_deemed_wages()
	public dwp_elig_membs_budg_deemed_counted_earned()
	public dwp_elig_membs_budg_deemed_standard_EI_disregard()
	public dwp_elig_membs_budg_deemed_earned_subtotal()
	public dwp_elig_membs_budg_deemed_earned_disregard()
	public dwp_elig_membs_budg_deemed_unearned_income()
	public dwp_elig_membs_budg_deemed_subtotal_counted_income()

	public dwp_elig_membs_budg_deemed_deemer_unmet_need()
	public dwp_elig_membs_budg_deemed_allocation()
	public dwp_elig_membs_budg_deemed_child_support()
	public dwp_elig_membs_budg_deemed_counted_income()

	public sub read_elig()
		call navigate_to_MAXIS_screen("ELIG", "DWP ")
		EMWriteScreen elig_footer_month, 20, 56
		EMWriteScreen elig_footer_year, 20, 59
		approved_today = False
		approved_version_found = False
		dwp_autoclosed_for_time_limit = False
		dwp_mony_check_found = False
		dwp_vnda_found = False
		deem_count = 0

		dwp_row = 1
		dwp_col = 1
		EMSearch "Four Month Eligibility Limit", dwp_row, dwp_col
		If dwp_row <> 0 Then
			EMReadScreen elig_version_date, 8, dwp_row, dwp_col-13
			dwp_autoclosed_for_time_limit = True
		Else
			elig_version_number = ""
			Call find_last_approved_ELIG_version(20, 79, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
			If approved_version_found = True Then
				If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
				If allow_late_note = True Then
					one_week_ago = DateAdd("d", -7, date)
					If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
				End If
			ElseIf elig_version_number <> "" Then
				call navigate_to_MAXIS_screen("ELIG", "DWP ")
				EMWriteScreen elig_footer_month, 20, 56
				EMWriteScreen elig_footer_year, 20, 59
				Call write_value_and_transmit(elig_version_number, 20, 79)
				dwp_row = 1
				dwp_col = 1
				EMSearch "Four Month Eligibility Limit", dwp_row, dwp_col
				If dwp_row <> 0 Then
					EMReadScreen elig_version_date, 8, dwp_row, dwp_col-13
					dwp_autoclosed_for_time_limit = True
					PF3
				End If
			End If
			If developer_mode = True Then approved_today = True		'TESTING OPTION'
		End If
		If approved_today = True Then
			ReDim dwp_elig_ref_numbs(0)
			ReDim dwp_elig_membs_full_name(0)
			ReDim dwp_elig_membs_request_yn(0)
			ReDim dwp_elig_membs_member_code(0)
			ReDim dwp_memb_is_counted(0)
			ReDim dwp_memb_is_deemer(0)
			ReDim dwp_elig_membs_member_info(0)
			ReDim dwp_elig_membs_funding_source_code(0)
			ReDim dwp_elig_membs_funding_source_info(0)
			ReDim dwp_elig_membs_elig_status(0)
			ReDim dwp_elig_membs_begin_date(0)
			ReDim dwp_elig_membs_adult_or_child(0)
			ReDim dwp_elig_membs_test_absence(0)
			ReDim dwp_elig_membs_test_child_age(0)
			ReDim dwp_elig_membs_test_citizenship(0)
			ReDim dwp_elig_membs_test_citizenship_verif(0)
			ReDim dwp_elig_membs_test_dupl_assistance(0)
			ReDim dwp_elig_membs_test_foster_care(0)
			ReDim dwp_elig_membs_test_fraud(0)
			ReDim dwp_elig_membs_test_minor_living_arrangement(0)
			ReDim dwp_elig_membs_test_post_60_removal(0)
			ReDim dwp_elig_membs_test_ssi(0)
			ReDim dwp_elig_membs_test_ssn_coop(0)
			ReDim dwp_elig_membs_test_unit_member(0)
			ReDim dwp_elig_membs_test_unlawful_conduct(0)
			ReDim dwp_elig_membs_es_status_code(0)
			ReDim dwp_elig_membs_es_status_info(0)

			ReDim dwp_check_issue_date(0)
			ReDim dwp_check_program(0)
			ReDim dwp_check_status_code(0)
			ReDim dwp_check_status_info(0)
			ReDim dwp_check_warrant_number(0)
			ReDim dwp_check_transaction_amount(0)
			ReDim dwp_check_type_code(0)
			ReDim dwp_check_type_info(0)
			ReDim dwp_check_transaction_number(0)
			ReDim dwp_check_from_date(0)
			ReDim dwp_check_to_date(0)
			ReDim dwp_check_payment_reason(0)
			ReDim dwp_check_payment_to_name(0)
			ReDim dwp_check_payment_to_address(0)
			ReDim dwp_check_mail_method(0)
			ReDim dwp_check_payment_method(0)
			ReDim dwp_check_vendor_number(0)
			ReDim dwp_check_fiche_number(0)
			ReDim dwp_check_payment_amount(0)
			ReDim dwp_check_entitement_amount(0)
			ReDim dwp_check_recoupment_amount(0)
			ReDim dwp_check_replacement_amount(0)
			ReDim dwp_check_cacnel_amount(0)
			ReDim dwp_check_food_portion_amount(0)
			ReDim dwp_check_reconciliation_date(0)
			ReDim dwp_check_cancel_reason(0)
			ReDim dwp_check_replacement_reason(0)
			ReDim dwp_check_picup_status(0)
			ReDim dwp_check_pickup_date(0)
			ReDim dwp_check_servicing_county(0)
			ReDim dwp_check_responsibility_county(0)
			ReDim dwp_check_adjusting_transaction(0)
			ReDim dwp_check_original_transaction(0)
			ReDim dwp_check_vendor_name(0)
			ReDim dwp_check_vendor_c_o(0)
			ReDim dwp_check_vendor_street_one(0)
			ReDim dwp_check_vendor_street_two(0)
			ReDim dwp_check_vendor_city(0)
			ReDim dwp_check_vendor_state(0)
			ReDim dwp_check_vendor_zip(0)
			ReDim dwp_check_vendor_grh_yn(0)
			ReDim dwp_check_vendor_non_profit_yn(0)
			ReDim dwp_check_vendor_phone(0)
			ReDim dwp_check_vendor_county(0)
			ReDim dwp_check_vendor_status_code(0)
			ReDim dwp_check_vendor_status_info(0)
			ReDim dwp_check_vendor_incorporated_yn(0)
			ReDim dwp_check_vendor_federal_tax_id(0)
			ReDim dwp_check_vendor_ssn(0)
			ReDim dwp_check_vendor_2nd_address_type_code(0)
			ReDim dwp_check_vendor_2nd_address_type_info(0)
			ReDim dwp_check_vendor_2nd_address_eff_date(0)
			ReDim dwp_check_vendor_2nd_name(0)
			ReDim dwp_check_vendor_2nd_c_o(0)
			ReDim dwp_check_vendor_2nd_street_one(0)
			ReDim dwp_check_vendor_2nd_street_two(0)
			ReDim dwp_check_vendor_2nd_city(0)
			ReDim dwp_check_vendor_2nd_state(0)
			ReDim dwp_check_vendor_2nd_zip(0)
			ReDim dwp_check_vendor_direct_deposit_yn(0)
			ReDim dwp_check_vendor_merge_vendor_number(0)
			ReDim dwp_check_vendor_acct_number_required_yn(0)
			ReDim dwp_check_vendor_blocked_county_numbers_list(0)

			ReDim dwp_vnda_vendor_number(0)
			ReDim dwp_vnda_vendor_name(0)
			ReDim dwp_vnda_reference_number(0)
			ReDim dwp_vnda_send_to_code(0)
			ReDim dwp_vnda_send_to_info(0)
			ReDim dwp_vnda_expense_type_code(0)
			ReDim dwp_vnda_expense_type_info(0)
			ReDim dwp_vnda_payment_amount(0)

			ReDim dwp_elig_membs_budg_deemed_self_emp(0)
			ReDim dwp_elig_membs_budg_deemed_wages(0)
			ReDim dwp_elig_membs_budg_deemed_counted_earned(0)
			ReDim dwp_elig_membs_budg_deemed_standard_EI_disregard(0)
			ReDim dwp_elig_membs_budg_deemed_earned_subtotal(0)
			ReDim dwp_elig_membs_budg_deemed_earned_disregard(0)
			ReDim dwp_elig_membs_budg_deemed_unearned_income(0)
			ReDim dwp_elig_membs_budg_deemed_subtotal_counted_income(0)
			ReDim dwp_elig_membs_budg_deemed_deemer_unmet_need(0)
			ReDim dwp_elig_membs_budg_deemed_allocation(0)
			ReDim dwp_elig_membs_budg_deemed_child_support(0)
			ReDim dwp_elig_membs_budg_deemed_counted_income(0)

			row = 7
			elig_memb_count = 0
			Do
				EMReadScreen ref_numb, 2, row, 5

				ReDim preserve dwp_elig_ref_numbs(elig_memb_count)
				ReDim preserve dwp_elig_membs_full_name(elig_memb_count)
				ReDim preserve dwp_elig_membs_request_yn(elig_memb_count)
				ReDim preserve dwp_elig_membs_member_code(elig_memb_count)
				ReDim preserve dwp_memb_is_counted(elig_memb_count)
				ReDim preserve dwp_memb_is_deemer(elig_memb_count)
				ReDim preserve dwp_elig_membs_member_info(elig_memb_count)
				ReDim preserve dwp_elig_membs_funding_source_code(elig_memb_count)
				ReDim preserve dwp_elig_membs_funding_source_info(elig_memb_count)
				ReDim preserve dwp_elig_membs_elig_status(elig_memb_count)
				ReDim preserve dwp_elig_membs_begin_date(elig_memb_count)
				ReDim preserve dwp_elig_membs_adult_or_child(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_absence(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_child_age(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_citizenship(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_citizenship_verif(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_dupl_assistance(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_foster_care(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_fraud(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_minor_living_arrangement(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_post_60_removal(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_ssi(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_ssn_coop(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_unit_member(elig_memb_count)
				ReDim preserve dwp_elig_membs_test_unlawful_conduct(elig_memb_count)
				ReDim preserve dwp_elig_membs_es_status_code(elig_memb_count)
				ReDim preserve dwp_elig_membs_es_status_info(elig_memb_count)

				dwp_elig_ref_numbs(elig_memb_count) = ref_numb
				EMReadScreen full_name_information, 20, row, 9
				full_name_information = trim(full_name_information)
				name_array = split(full_name_information, " ")
				For each name_parts in name_array
					If name_parts <> "" Then
						If len(name_parts) <> 1 Then dwp_elig_membs_full_name(elig_memb_count) = dwp_elig_membs_full_name(elig_memb_count) & " " & name_parts
					End If
				Next
				dwp_elig_membs_full_name(elig_memb_count) = trim((dwp_elig_membs_full_name(elig_memb_count)))

				EMReadScreen dwp_elig_membs_request_yn(elig_memb_count), 1, row, 31
				EMReadScreen dwp_elig_membs_member_code(elig_memb_count), 1, row, 35
				EMReadScreen dwp_elig_membs_funding_source_code(elig_memb_count), 1, row, 53
				EMReadScreen dwp_elig_membs_elig_status(elig_memb_count), 12, row, 57
				EMReadScreen dwp_elig_membs_begin_date(elig_memb_count), 8, row, 73

				dwp_elig_membs_elig_status(elig_memb_count) = trim(dwp_elig_membs_elig_status(elig_memb_count))

				dwp_memb_is_counted(elig_memb_count) = False
				dwp_memb_is_deemer(elig_memb_count) = False
				If dwp_elig_membs_member_code(elig_memb_count) = "A" Then dwp_elig_membs_member_info(elig_memb_count) = "Eligible"
				If dwp_elig_membs_member_code(elig_memb_count) = "D" Then dwp_elig_membs_member_info(elig_memb_count) = "SSI/IVE/Adoption Assistance Recipient"
				If dwp_elig_membs_member_code(elig_memb_count) = "F" Then dwp_elig_membs_member_info(elig_memb_count) = "Ineligible, Deemer"
				If dwp_elig_membs_member_code(elig_memb_count) = "G" Then dwp_elig_membs_member_info(elig_memb_count) = "Parent of Minor Caregiver, Deemer"
				If dwp_elig_membs_member_code(elig_memb_count) = "H" Then dwp_elig_membs_member_info(elig_memb_count) = "Other Deemer"
				If dwp_elig_membs_member_code(elig_memb_count) = "I" Then dwp_elig_membs_member_info(elig_memb_count) = "Ineligible, Pare of Unit"
				If dwp_elig_membs_member_code(elig_memb_count) = "J" Then dwp_elig_membs_member_info(elig_memb_count) = "Ineligible, Deemer"
				If dwp_elig_membs_member_code(elig_memb_count) = "N" Then dwp_elig_membs_member_info(elig_memb_count) = "Not Counted"

				If dwp_elig_membs_member_code(elig_memb_count) = "A" Then dwp_memb_is_counted(elig_memb_count) = True
				If dwp_elig_membs_member_code(elig_memb_count) = "F" Then dwp_memb_is_deemer(elig_memb_count) = True
				If dwp_elig_membs_member_code(elig_memb_count) = "G" Then dwp_memb_is_deemer(elig_memb_count) = True
				If dwp_elig_membs_member_code(elig_memb_count) = "H" Then dwp_memb_is_deemer(elig_memb_count) = True
				If dwp_elig_membs_member_code(elig_memb_count) = "I" Then dwp_memb_is_deemer(elig_memb_count) = True
				If dwp_elig_membs_member_code(elig_memb_count) = "J" Then dwp_memb_is_deemer(elig_memb_count) = True

				If dwp_elig_membs_funding_source_code(elig_memb_count) = "F" Then dwp_elig_membs_funding_source_info(elig_memb_count) = "Federal Funds (TANF Cash)"
				If dwp_elig_membs_funding_source_code(elig_memb_count) = "S" Then dwp_elig_membs_funding_source_info(elig_memb_count) = "State Funds (Cash)"
				If dwp_elig_membs_funding_source_code(elig_memb_count) = "I" Then dwp_elig_membs_funding_source_info(elig_memb_count) = "Ineligible for DWP"
				If dwp_elig_membs_funding_source_code(elig_memb_count) = "N" Then dwp_elig_membs_funding_source_info(elig_memb_count) = "Not Applicable"

				Call write_value_and_transmit("X", row, 3)		'open member test information
				EMReadScreen dwp_elig_membs_adult_or_child(elig_memb_count), 1, 7, 51

				If dwp_elig_membs_adult_or_child(elig_memb_count) = "A" Then dwp_elig_membs_adult_or_child(elig_memb_count) = "Adult"
				If dwp_elig_membs_adult_or_child(elig_memb_count) = "C" Then dwp_elig_membs_adult_or_child(elig_memb_count) = "Child"

				EMReadScreen dwp_elig_membs_test_absence(elig_memb_count), 			6, 10, 7
				EMReadScreen dwp_elig_membs_test_child_age(elig_memb_count), 		6, 11, 7
				EMReadScreen dwp_elig_membs_test_citizenship(elig_memb_count), 		6, 12, 7
				EMReadScreen dwp_elig_membs_test_citizenship_verif(elig_memb_count), 6, 13, 7
				EMReadScreen dwp_elig_membs_test_dupl_assistance(elig_memb_count), 	6, 14, 7
				EMReadScreen dwp_elig_membs_test_foster_care(elig_memb_count), 		6, 15, 7
				EMReadScreen dwp_elig_membs_test_fraud(elig_memb_count), 			6, 16, 7

				EMReadScreen dwp_elig_membs_test_minor_living_arrangement(elig_memb_count), 6, 10, 43
				EMReadScreen dwp_elig_membs_test_post_60_removal(elig_memb_count), 			6, 11, 43
				EMReadScreen dwp_elig_membs_test_ssi(elig_memb_count), 						6, 12, 43
				EMReadScreen dwp_elig_membs_test_ssn_coop(elig_memb_count), 				6, 13, 43
				EMReadScreen dwp_elig_membs_test_unit_member(elig_memb_count), 				6, 14, 43
				EMReadScreen dwp_elig_membs_test_unlawful_conduct(elig_memb_count), 		6, 15, 43

				dwp_elig_membs_test_absence(elig_memb_count) = trim(dwp_elig_membs_test_absence(elig_memb_count))
				dwp_elig_membs_test_child_age(elig_memb_count) = trim(dwp_elig_membs_test_child_age(elig_memb_count))
				dwp_elig_membs_test_citizenship(elig_memb_count) = trim(dwp_elig_membs_test_citizenship(elig_memb_count))
				dwp_elig_membs_test_citizenship_verif(elig_memb_count) = trim(dwp_elig_membs_test_citizenship_verif(elig_memb_count))
				dwp_elig_membs_test_dupl_assistance(elig_memb_count) = trim(dwp_elig_membs_test_dupl_assistance(elig_memb_count))
				dwp_elig_membs_test_foster_care(elig_memb_count) = trim(dwp_elig_membs_test_foster_care(elig_memb_count))
				dwp_elig_membs_test_fraud(elig_memb_count) = trim(dwp_elig_membs_test_fraud(elig_memb_count))

				dwp_elig_membs_test_minor_living_arrangement(elig_memb_count) = trim(dwp_elig_membs_test_minor_living_arrangement(elig_memb_count))
				dwp_elig_membs_test_post_60_removal(elig_memb_count) = trim(dwp_elig_membs_test_post_60_removal(elig_memb_count))
				dwp_elig_membs_test_ssi(elig_memb_count) = trim(dwp_elig_membs_test_ssi(elig_memb_count))
				dwp_elig_membs_test_ssn_coop(elig_memb_count) = trim(dwp_elig_membs_test_ssn_coop(elig_memb_count))
				dwp_elig_membs_test_unit_member(elig_memb_count) = trim(dwp_elig_membs_test_unit_member(elig_memb_count))
				dwp_elig_membs_test_unlawful_conduct(elig_memb_count) = trim(dwp_elig_membs_test_unlawful_conduct(elig_memb_count))

				transmit

				Call write_value_and_transmit("X", row, 69)		'open member EMPS information
				EMReadScreen emps_exists_for_memb, 19, 24, 2
				If emps_exists_for_memb = "EMPS DOES NOT EXIST" Then
					EMWriteScreen " ", row, 69
				Else
					EMReadScreen dwp_elig_membs_es_status_code(elig_memb_count), 2, 9, 22
					EMReadScreen dwp_elig_membs_es_status_info(elig_memb_count), 30, 9, 25

					dwp_elig_membs_es_status_code(elig_memb_count) = trim(dwp_elig_membs_es_status_code(elig_memb_count))
					dwp_elig_membs_es_status_info(elig_memb_count) = trim(dwp_elig_membs_es_status_info(elig_memb_count))
					transmit
				End If

				row = row + 1
				elig_memb_count = elig_memb_count + 1
				EMReadScreen next_ref_numb, 2, row, 6
			Loop until next_ref_numb = "  "

			transmit 		'going to the next panel - DWCR

			EMReadScreen dwp_elig_case_test_application_withdrawn, 	6, 6, 7
			EMReadScreen dwp_elig_case_test_assets, 				6, 7, 7
			EMReadScreen dwp_elig_case_test_CS_disqualification, 	6, 8, 7
			EMReadScreen dwp_elig_case_test_death_of_applicant, 	6, 9, 7
			EMReadScreen dwp_elig_case_test_dupl_assistance, 		6, 10, 7
			EMReadScreen dwp_elig_case_test_eligible_child, 		6, 11, 7
			EMReadScreen dwp_elig_case_test_ES_disqualification, 	6, 12, 7
			EMReadScreen dwp_elig_case_test_fail_coop, 				6, 13, 7
			EMReadScreen dwp_elig_case_test_four_month_limit, 		6, 14, 7

			EMReadScreen dwp_elig_case_test_initial_income, 		6, 6, 45
			EMReadScreen dwp_elig_case_test_MFIP_conversion, 		6, 7, 45
			EMReadScreen dwp_elig_case_test_residence, 				6, 8, 45
			EMReadScreen dwp_elig_case_test_strike, 				6, 9, 45
			EMReadScreen dwp_elig_case_test_TANF_time_limit, 		6, 10, 45
			EMReadScreen dwp_elig_case_test_transfer_of_assets, 	6, 11, 45
			EMReadScreen dwp_elig_case_test_verif, 					6, 12, 45

			EMReadScreen dwp_elig_case_test_new_spouse_income, 		6, 17, 7

			dwp_elig_case_test_application_withdrawn = trim(dwp_elig_case_test_application_withdrawn)
			dwp_elig_case_test_assets = trim(dwp_elig_case_test_assets)
			dwp_elig_case_test_CS_disqualification = trim(dwp_elig_case_test_CS_disqualification)
			dwp_elig_case_test_death_of_applicant = trim(dwp_elig_case_test_death_of_applicant)
			dwp_elig_case_test_dupl_assistance = trim(dwp_elig_case_test_dupl_assistance)
			dwp_elig_case_test_eligible_child = trim(dwp_elig_case_test_eligible_child)
			dwp_elig_case_test_ES_disqualification = trim(dwp_elig_case_test_ES_disqualification)
			dwp_elig_case_test_fail_coop = trim(dwp_elig_case_test_fail_coop)
			dwp_elig_case_test_four_month_limit = trim(dwp_elig_case_test_four_month_limit)

			dwp_elig_case_test_initial_income = trim(dwp_elig_case_test_initial_income)
			dwp_elig_case_test_MFIP_conversion = trim(dwp_elig_case_test_MFIP_conversion)
			dwp_elig_case_test_residence = trim(dwp_elig_case_test_residence)
			dwp_elig_case_test_strike = trim(dwp_elig_case_test_strike)
			dwp_elig_case_test_TANF_time_limit = trim(dwp_elig_case_test_TANF_time_limit)
			dwp_elig_case_test_transfer_of_assets = trim(dwp_elig_case_test_transfer_of_assets)
			dwp_elig_case_test_verif = trim(dwp_elig_case_test_verif)

			dwp_elig_case_test_new_spouse_income = trim(dwp_elig_case_test_new_spouse_income)

			If dwp_elig_case_test_assets <> "NA" Then
				Call write_value_and_transmit("X", 7, 5)

				EMReadScreen dwp_elig_asset_CASH, 9, 8, 54
				EMReadScreen dwp_elig_asset_ACCT, 9, 9, 54
				EMReadScreen dwp_elig_asset_SECU, 9, 10, 54
				EMReadScreen dwp_elig_asset_CARS, 9, 11, 54
				EMReadScreen dwp_elig_asset_SPON, 9, 12, 54

				EMReadScreen dwp_elig_asset_total, 9, 17, 54
				EMReadScreen dwp_elig_asset_maximum, 9, 18, 54

				dwp_elig_asset_CASH = trim(dwp_elig_asset_CASH)
				dwp_elig_asset_ACCT = trim(dwp_elig_asset_ACCT)
				dwp_elig_asset_SECU = trim(dwp_elig_asset_SECU)
				dwp_elig_asset_CARS = trim(dwp_elig_asset_CARS)
				dwp_elig_asset_SPON = trim(dwp_elig_asset_SPON)
				dwp_elig_asset_total = trim(dwp_elig_asset_total)
				dwp_elig_asset_maximum = trim(dwp_elig_asset_maximum)

				transmit
			End If

			If dwp_elig_case_test_fail_coop <> "NA" Then
				Call write_value_and_transmit("X", 13, 5)

				EMReadScreen dwp_elig_test_fail_coop_applied_other_benefits, 6, 10, 30
				EMReadScreen dwp_elig_test_fail_coop_provide_requested_info, 6, 11, 30
				EMReadScreen dwp_elig_test_fail_coop_IEVS, 6, 12, 30
				EMReadScreen dwp_elig_test_fail_coop_vendor_info, 6, 13, 30

				dwp_elig_test_fail_coop_applied_other_benefits = trim(dwp_elig_test_fail_coop_applied_other_benefits)
				dwp_elig_test_fail_coop_provide_requested_info = trim(dwp_elig_test_fail_coop_provide_requested_info)
				dwp_elig_test_fail_coop_IEVS = trim(dwp_elig_test_fail_coop_IEVS)
				dwp_elig_test_fail_coop_vendor_info = trim(dwp_elig_test_fail_coop_vendor_info)

				transmit

			End If

			If dwp_elig_case_test_initial_income <> "NA" Then
				Call write_value_and_transmit("X", 6, 43)

				EMReadScreen dwp_elig_initial_counted_earned_income, 	9, 8, 42
				EMReadScreen dwp_elig_initial_dependent_care_expense, 	9, 9, 42
				EMReadScreen dwp_elig_initial_counted_unearned_incom, 	9, 10, 42
				EMReadScreen dwp_elig_initial_counted_deemed_income, 	9, 11, 42
				EMReadScreen dwp_elig_initial_child_support_exclusion, 	9, 12, 42
				EMReadScreen dwp_elig_initial_total_counted_income, 	9, 13, 42
				EMReadScreen dwp_elig_initial_family_wage_level, 		9, 15, 42

				dwp_elig_initial_counted_earned_income = trim(dwp_elig_initial_counted_earned_income)
				dwp_elig_initial_dependent_care_expense = trim(dwp_elig_initial_dependent_care_expense)
				dwp_elig_initial_counted_unearned_incom = trim(dwp_elig_initial_counted_unearned_incom)
				dwp_elig_initial_counted_deemed_income = trim(dwp_elig_initial_counted_deemed_income)
				dwp_elig_initial_child_support_exclusion = trim(dwp_elig_initial_child_support_exclusion)
				dwp_elig_initial_total_counted_income = trim(dwp_elig_initial_total_counted_income)
				dwp_elig_initial_family_wage_level = trim(dwp_elig_initial_family_wage_level)

				'TODO - read member specific detail'

				transmit
			End If

			If dwp_elig_case_test_verif <> "NA" Then
				Call write_value_and_transmit("X", 12, 43)

				EMReadScreen dwp_elig_test_verif_ACCT, 		6, 5, 32
				EMReadScreen dwp_elig_test_verif_BUSI, 		6, 6, 32
				EMReadScreen dwp_elig_test_verif_CARS, 		6, 7, 32
				EMReadScreen dwp_elig_test_verif_JOBS, 		6, 8, 32
				EMReadScreen dwp_elig_test_verif_MEMB_dob, 	6, 9, 32
				EMReadScreen dwp_elig_test_verif_MEMB_id, 	6, 10, 32
				EMReadScreen dwp_elig_test_verif_PARE, 		6, 11, 32
				EMReadScreen dwp_elig_test_verif_PREG, 		6, 12, 32
				EMReadScreen dwp_elig_test_verif_RBIC, 		6, 13, 32
				EMReadScreen dwp_elig_test_verif_ADDR, 		6, 14, 32
				EMReadScreen dwp_elig_test_verif_SCHL, 		6, 15, 32
				EMReadScreen dwp_elig_test_verif_SECU, 		6, 16, 32
				EMReadScreen dwp_elig_test_verif_SPON, 		6, 17, 32
				EMReadScreen dwp_elig_test_verif_UNEA, 		6, 18, 32

				dwp_elig_test_verif_ACCT = trim(dwp_elig_test_verif_ACCT)
				dwp_elig_test_verif_BUSI = trim(dwp_elig_test_verif_BUSI)
				dwp_elig_test_verif_CARS = trim(dwp_elig_test_verif_CARS)
				dwp_elig_test_verif_JOBS = trim(dwp_elig_test_verif_JOBS)
				dwp_elig_test_verif_MEMB_dob = trim(dwp_elig_test_verif_MEMB_dob)
				dwp_elig_test_verif_MEMB_id = trim(dwp_elig_test_verif_MEMB_id)
				dwp_elig_test_verif_PARE = trim(dwp_elig_test_verif_PARE)
				dwp_elig_test_verif_PREG = trim(dwp_elig_test_verif_PREG)
				dwp_elig_test_verif_RBIC = trim(dwp_elig_test_verif_RBIC)
				dwp_elig_test_verif_ADDR = trim(dwp_elig_test_verif_ADDR)
				dwp_elig_test_verif_SCHL = trim(dwp_elig_test_verif_SCHL)
				dwp_elig_test_verif_SECU = trim(dwp_elig_test_verif_SECU)
				dwp_elig_test_verif_SPON = trim(dwp_elig_test_verif_SPON)
				dwp_elig_test_verif_UNEA = trim(dwp_elig_test_verif_UNEA)

				transmit
			End If

			If dwp_elig_case_test_new_spouse_income <> "NA" Then
				Call write_value_and_transmit("X", 17, 5)

				'TODO - Read New Spouse Income Information

				transmit
			End If

			transmit 		'going to the next panel - DWCB1


			EMReadScreen dwp_elig_budg_shel_rent_mortgage, 		9, 5, 29
			EMReadScreen dwp_elig_budg_shel_property_tax, 		9, 6, 29
			EMReadScreen dwp_elig_budg_shel_house_insurance, 	9, 7, 29
			EMReadScreen dwp_elig_budg_hest_electricity, 		9, 8, 29
			EMReadScreen dwp_elig_budg_hest_heat_air, 			9, 9, 29
			EMReadScreen dwp_elig_budg_hest_water_sewer_garbage, 9, 10, 29
			EMReadScreen dwp_elig_budg_hest_phone, 				9, 11, 29
			EMReadScreen dwp_elig_budg_shel_other, 				9, 12, 29

			EMReadScreen dwp_elig_budg_total_shelter_costs, 	9, 14, 29
			EMReadScreen dwp_elig_budg_personal_needs, 			9, 15, 29

			EMReadScreen dwp_elig_budg_total_DWP_need, 			9, 17, 29

			EMReadScreen dwp_elig_budg_earned_income, 			9, 7, 71
			EMReadScreen dwp_elig_budg_unearned_income, 		9, 8, 71
			EMReadScreen dwp_elig_budg_deemed_income, 			9, 9, 71
			EMReadScreen dwp_elig_budg_child_support_exclusion, 9, 10, 71
			EMReadScreen dwp_elig_budg_budget_month_total, 		9, 11, 71
			EMReadScreen dwp_elig_budg_prior_low, 				9, 12, 71
			EMReadScreen dwp_elig_budg_DWP_countable_income, 	9, 13, 71

			EMReadScreen dwp_elig_budg_unmet_need, 				9, 15, 71
			EMReadScreen dwp_elig_budg_DWP_max_grant, 			9, 16, 71
			EMReadScreen dwp_elig_budg_DWP_grant, 				9, 17, 71

			dwp_elig_budg_shel_rent_mortgage = trim(dwp_elig_budg_shel_rent_mortgage)
			dwp_elig_budg_shel_property_tax = trim(dwp_elig_budg_shel_property_tax)
			dwp_elig_budg_shel_house_insurance = trim(dwp_elig_budg_shel_house_insurance)
			dwp_elig_budg_hest_electricity = trim(dwp_elig_budg_hest_electricity)
			dwp_elig_budg_hest_heat_air = trim(dwp_elig_budg_hest_heat_air)
			dwp_elig_budg_hest_water_sewer_garbage = trim(dwp_elig_budg_hest_water_sewer_garbage)
			dwp_elig_budg_hest_phone = trim(dwp_elig_budg_hest_phone)
			dwp_elig_budg_shel_other = trim(dwp_elig_budg_shel_other)
			dwp_elig_budg_total_shelter_costs = trim(dwp_elig_budg_total_shelter_costs)
			dwp_elig_budg_personal_needs = trim(dwp_elig_budg_personal_needs)
			dwp_elig_budg_total_DWP_need = trim(dwp_elig_budg_total_DWP_need)
			dwp_elig_budg_earned_income = trim(dwp_elig_budg_earned_income)
			dwp_elig_budg_unearned_income = trim(dwp_elig_budg_unearned_income)
			dwp_elig_budg_deemed_income = trim(dwp_elig_budg_deemed_income)
			dwp_elig_budg_child_support_exclusion = trim(dwp_elig_budg_child_support_exclusion)
			dwp_elig_budg_budget_month_total = trim(dwp_elig_budg_budget_month_total)
			dwp_elig_budg_prior_low = trim(dwp_elig_budg_prior_low)
			dwp_elig_budg_DWP_countable_income = trim(dwp_elig_budg_DWP_countable_income)
			dwp_elig_budg_unmet_need = trim(dwp_elig_budg_unmet_need)
			dwp_elig_budg_DWP_max_grant = trim(dwp_elig_budg_DWP_max_grant)
			dwp_elig_budg_DWP_grant = trim(dwp_elig_budg_DWP_grant)

			Call write_value_and_transmit("X", 7, 41)
			EmReadScreen pop_up_menu_title, 13, 3, 46
			If pop_up_menu_title = "Earned Income" Then
				'TODO - read member specific unearned income
				transmit
			End If

			Call write_value_and_transmit("X", 8, 41)
			Do
				EmReadScreen pop_up_menu_title, 15, 5, 32
				If pop_up_menu_title = "Unearned Income" Then
					'TODO - read member specific unearned income
					transmit
				End If
			Loop until pop_up_menu_title <> "Unearned Income"

			Call write_value_and_transmit("X", 9, 41)
			Do
				EmReadScreen pop_up_menu_title, 13, 3, 36
				If pop_up_menu_title = "Deemed Income" Then
					ReDim Preserve dwp_elig_membs_budg_deemed_self_emp(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_wages(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_counted_earned(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_standard_EI_disregard(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_earned_subtotal(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_earned_disregard(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_unearned_income(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_subtotal_counted_income(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_deemer_unmet_need(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_allocation(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_child_support(deem_count)
					ReDim Preserve dwp_elig_membs_budg_deemed_counted_income(deem_count)

					'TODO - read member specific unearned income
					EMReadScreen dwp_elig_membs_budg_deemed_self_emp(deem_count), 				9, 8, 56
					EMReadScreen dwp_elig_membs_budg_deemed_wages(deem_count), 					9, 9, 56
					EMReadScreen dwp_elig_membs_budg_deemed_counted_earned(deem_count), 		9, 10, 56
					EMReadScreen dwp_elig_membs_budg_deemed_standard_EI_disregard(deem_count), 	9, 11, 56
					EMReadScreen dwp_elig_membs_budg_deemed_earned_subtotal(deem_count), 		9, 12, 56
					EMReadScreen dwp_elig_membs_budg_deemed_earned_disregard(deem_count), 		9, 13, 56
					EMReadScreen dwp_elig_membs_budg_deemed_unearned_income(deem_count), 		9, 14, 56
					EMReadScreen dwp_elig_membs_budg_deemed_subtotal_counted_income(deem_count), 9, 15, 56

					EMReadScreen dwp_elig_membs_budg_deemed_deemer_unmet_need(deem_count), 		9, 18, 56
					EMReadScreen dwp_elig_membs_budg_deemed_allocation(deem_count), 			9, 19, 56
					EMReadScreen dwp_elig_membs_budg_deemed_child_support(deem_count), 			9, 20, 56
					EMReadScreen dwp_elig_membs_budg_deemed_counted_income(deem_count), 		9, 21, 56

					dwp_elig_membs_budg_deemed_self_emp(deem_count) = trim(dwp_elig_membs_budg_deemed_self_emp(deem_count))
					dwp_elig_membs_budg_deemed_wages(deem_count) = trim(dwp_elig_membs_budg_deemed_wages(deem_count))
					dwp_elig_membs_budg_deemed_counted_earned(deem_count) = trim(dwp_elig_membs_budg_deemed_counted_earned(deem_count))
					dwp_elig_membs_budg_deemed_standard_EI_disregard(deem_count) = trim(dwp_elig_membs_budg_deemed_standard_EI_disregard(deem_count))
					dwp_elig_membs_budg_deemed_earned_subtotal(deem_count) = trim(dwp_elig_membs_budg_deemed_earned_subtotal(deem_count))
					dwp_elig_membs_budg_deemed_earned_disregard(deem_count) = trim(dwp_elig_membs_budg_deemed_earned_disregard(deem_count))
					dwp_elig_membs_budg_deemed_unearned_income(deem_count) = trim(dwp_elig_membs_budg_deemed_unearned_income(deem_count))
					dwp_elig_membs_budg_deemed_subtotal_counted_income(deem_count) = trim(dwp_elig_membs_budg_deemed_subtotal_counted_income(deem_count))
					dwp_elig_membs_budg_deemed_deemer_unmet_need(deem_count) = trim(dwp_elig_membs_budg_deemed_deemer_unmet_need(deem_count))
					dwp_elig_membs_budg_deemed_allocation(deem_count) = trim(dwp_elig_membs_budg_deemed_allocation(deem_count))
					dwp_elig_membs_budg_deemed_child_support(deem_count) = trim(dwp_elig_membs_budg_deemed_child_support(deem_count))
					dwp_elig_membs_budg_deemed_counted_income(deem_count) = trim(dwp_elig_membs_budg_deemed_counted_income(deem_count))

					deem_count = deem_count + 1
					transmit
				End If
			Loop until pop_up_menu_title <> "Deemed Income"

			Call write_value_and_transmit("X", 10, 41)
			EMReadScreen dwp_elig_cses_income, 9, 10, 54
			EMReadScreen dwp_elig_child_count, 2, 12, 36
			'TODO - read member specific unearned income

			dwp_elig_cses_income = trim(dwp_elig_cses_income)
			dwp_elig_child_count = trim(dwp_elig_child_count)

			transmit

			transmit 		'going to the next panel - DWB2

			EMReadScreen dwp_elig_prorated_date, 8, 6, 18
			dwp_elig_prorated_date = trim(dwp_elig_prorated_date)
			If dwp_elig_prorated_date = "__ __ __" then dwp_elig_prorated_date = ""
			dwp_elig_prorated_date = replace(dwp_elig_prorated_date, " ", "/")

			EMReadScreen dwp_elig_prorated_amount, 9, 6, 35

			EMReadScreen dwp_elig_amount_already_issued, 	9, 9, 35
			EMReadScreen dwp_elig_supplement_due, 			9, 10, 35
			EMReadScreen dwp_elig_overpayment, 				9, 11, 35
			EMReadScreen dwp_elig_adjusted_grant_amount, 	9, 12, 35
			EMReadScreen dwp_elig_recoupment_amount, 		9, 13, 35

			EMReadScreen dwp_elig_shelter_benefit_grant, 	9, 15, 35
			EMReadScreen dwp_elig_personal_needs_grant, 	9, 16, 35

			Call write_value_and_transmit("X", 11, 3)
			EMReadScreen dwp_elig_overpayment_fed_hh_count, 	2, 10, 31
			EMReadScreen dwp_elig_overpayment_fed_amount, 		9, 10, 50
			EMReadScreen dwp_elig_overpayment_state_hh_count, 	2, 12, 31
			EMReadScreen dwp_elig_overpayment_state_amount, 	9, 12, 50
			transmit

			Call write_value_and_transmit("X", 12, 3)
			EMReadScreen dwp_elig_adjusted_grant_fed_hh_count, 		2, 10, 25
			EMReadScreen dwp_elig_adjusted_grant_fed_amount, 		9, 10, 45
			EMReadScreen dwp_elig_adjusted_grant_state_hh_count, 	2, 12, 25
			EMReadScreen dwp_elig_adjusted_grant_state_amount, 		9, 12, 45
			transmit

			dwp_elig_prorated_amount = trim(dwp_elig_prorated_amount)
			dwp_elig_amount_already_issued = trim(dwp_elig_amount_already_issued)
			dwp_elig_supplement_due = trim(dwp_elig_supplement_due)
			dwp_elig_overpayment = trim(dwp_elig_overpayment)
			dwp_elig_adjusted_grant_amount = trim(dwp_elig_adjusted_grant_amount)
			dwp_elig_recoupment_amount = trim(dwp_elig_recoupment_amount)
			dwp_elig_shelter_benefit_grant = trim(dwp_elig_shelter_benefit_grant)
			dwp_elig_personal_needs_grant = trim(dwp_elig_personal_needs_grant)
			dwp_elig_overpayment_fed_amount = trim(dwp_elig_overpayment_fed_amount)
			dwp_elig_overpayment_state_amount = trim(dwp_elig_overpayment_state_amount)
			dwp_elig_adjusted_grant_fed_amount = trim(dwp_elig_adjusted_grant_fed_amount)
			dwp_elig_adjusted_grant_state_amount = trim(dwp_elig_adjusted_grant_state_amount)

			transmit 		'going to the next panel - DWSM

			EMReadScreen dwp_approved_date, 8, 3, 14
			EMReadScreen dwp_process_date, 8, 2, 73
			EMReadScreen dwp_prev_approval, 4, 3, 73

			EMReadScreen dwp_case_last_approval_date, 8, 5, 31
			EMReadScreen dwp_case_current_prog_status, 12, 6, 31
			EMReadScreen dwp_case_eligibility_result, 12,  7, 31
			EMReadScreen dwp_case_source_of_info, 4, 9, 31
			EMReadScreen dwp_case_benefit_impact, 12, 10, 31
			EMReadScreen dwp_case_4th_month_of_elig, 5, 11, 31
			EMReadScreen dwp_case_caregivers_have_es_plan, 1, 12, 31
			EMReadScreen dwp_case_responsible_county, 2, 13, 31
			EMReadScreen dwp_case_service_county, 2, 14, 31

			EMReadScreen dwp_case_asst_unit_caregivers, 3, 5, 72
			EMReadScreen dwp_case_asst_unit_children, 3, 6, 72
			EMReadScreen dwp_case_total_assets, 10, 7, 71
			EMReadScreen dwp_case_maximum_assets, 10, 8, 71
			EMReadScreen dwp_case_summary_grant_amount, 10, 10, 71
			EMReadScreen dwp_case_summary_net_grant_amount, 10, 12, 71
			EMReadScreen dwp_case_summary_shelter_benefit_portion, 10, 13, 71
			EMReadScreen dwp_case_summary_personal_needs_portion, 10, 14, 71

			dwp_prev_approval = trim(dwp_prev_approval)
			dwp_case_last_approval_date = trim(dwp_case_last_approval_date)

			dwp_case_current_prog_status = trim(dwp_case_current_prog_status)
			dwp_case_eligibility_result = trim(dwp_case_eligibility_result)
			dwp_case_source_of_info = trim(dwp_case_source_of_info)
			dwp_case_benefit_impact = trim(dwp_case_benefit_impact)

			dwp_case_asst_unit_caregivers = trim(dwp_case_asst_unit_caregivers)
			dwp_case_asst_unit_children = trim(dwp_case_asst_unit_children)
			dwp_case_total_assets = trim(dwp_case_total_assets)
			dwp_case_maximum_assets = trim(dwp_case_maximum_assets)
			dwp_case_summary_grant_amount = trim(dwp_case_summary_grant_amount)
			dwp_case_summary_net_grant_amount = trim(dwp_case_summary_net_grant_amount)
			dwp_case_summary_shelter_benefit_portion = trim(dwp_case_summary_shelter_benefit_portion)
			dwp_case_summary_personal_needs_portion = trim(dwp_case_summary_personal_needs_portion)

			Call navigate_to_MAXIS_screen("MONY", "INQX")
			start_of_info = first_footer_month & "/1/" & first_footer_year
			start_of_info = DateAdd("m", -1, start_of_info)
			Call convert_date_into_MAXIS_footer_month(start_of_info, start_search_month, start_search_year)
			EMWriteScreen start_search_month, 6, 38
			EMWriteScreen start_search_year, 6, 41
			EMWriteScreen CM_plus_1_mo, 6, 53
			EMWriteScreen CM_plus_1_yr, 6, 56

			EMWriteScreen "X", 17, 50
			transmit

			inqd_row = 6
			tx_count = 0
			EMReadScreen chck_prog, 7, inqd_row, 16
			chck_prog = trim(chck_prog)

			Do while chck_prog <> ""
				EMReadScreen check_from_date, 8, inqd_row, 62
				EMReadScreen check_to_date, 8, inqd_row, 73

				check_from_date = DateAdd("d", 0, check_from_date)
				check_to_date = DateAdd("d", 0, check_to_date)

				check_benefit_month = DatePart("m", check_from_date)
				check_benefit_month = right("00"&check_benefit_month, 2)
				check_benefit_year = DatePart("yyyy", check_from_date)
				check_benefit_year = right(check_benefit_year, 2)

				Call write_value_and_transmit("I", inqd_row, 4)
				EMReadScreen payment_reason, 14, 7, 17
				PF3

				If check_benefit_month = elig_footer_month AND check_benefit_year = elig_footer_year AND payment_reason <> "Regular Grants" Then
					ReDim preserve dwp_check_issue_date(tx_count)
					ReDim preserve dwp_check_program(tx_count)
					ReDim preserve dwp_check_status_code(tx_count)
					ReDim preserve dwp_check_status_info(tx_count)
					ReDim preserve dwp_check_warrant_number(tx_count)
					ReDim preserve dwp_check_transaction_amount(tx_count)
					ReDim preserve dwp_check_type_code(tx_count)
					ReDim preserve dwp_check_type_info(tx_count)
					ReDim preserve dwp_check_transaction_number(tx_count)
					ReDim preserve dwp_check_from_date(tx_count)
					ReDim preserve dwp_check_to_date(tx_count)
					ReDim preserve dwp_check_payment_reason(tx_count)
					ReDim preserve dwp_check_payment_to_name(tx_count)
					ReDim preserve dwp_check_payment_to_address(tx_count)
					ReDim preserve dwp_check_mail_method(tx_count)
					ReDim preserve dwp_check_payment_method(tx_count)
					ReDim preserve dwp_check_vendor_number(tx_count)
					ReDim preserve dwp_check_fiche_number(tx_count)
					ReDim preserve dwp_check_payment_amount(tx_count)
					ReDim preserve dwp_check_entitement_amount(tx_count)
					ReDim preserve dwp_check_recoupment_amount(tx_count)
					ReDim preserve dwp_check_replacement_amount(tx_count)
					ReDim preserve dwp_check_cacnel_amount(tx_count)
					ReDim preserve dwp_check_food_portion_amount(tx_count)
					ReDim preserve dwp_check_reconciliation_date(tx_count)
					ReDim preserve dwp_check_cancel_reason(tx_count)
					ReDim preserve dwp_check_replacement_reason(tx_count)
					ReDim preserve dwp_check_picup_status(tx_count)
					ReDim preserve dwp_check_pickup_date(tx_count)
					ReDim preserve dwp_check_servicing_county(tx_count)
					ReDim preserve dwp_check_responsibility_county(tx_count)
					ReDim preserve dwp_check_adjusting_transaction(tx_count)
					ReDim preserve dwp_check_original_transaction(tx_count)
					ReDim preserve dwp_check_vendor_name(tx_count)
					ReDim preserve dwp_check_vendor_c_o(tx_count)
					ReDim preserve dwp_check_vendor_street_one(tx_count)
					ReDim preserve dwp_check_vendor_street_two(tx_count)
					ReDim preserve dwp_check_vendor_city(tx_count)
					ReDim preserve dwp_check_vendor_state(tx_count)
					ReDim preserve dwp_check_vendor_zip(tx_count)
					ReDim preserve dwp_check_vendor_grh_yn(tx_count)
					ReDim preserve dwp_check_vendor_non_profit_yn(tx_count)
					ReDim preserve dwp_check_vendor_phone(tx_count)
					ReDim preserve dwp_check_vendor_county(tx_count)
					ReDim preserve dwp_check_vendor_status_code(tx_count)
					ReDim preserve dwp_check_vendor_status_info(tx_count)
					ReDim preserve dwp_check_vendor_incorporated_yn(tx_count)
					ReDim preserve dwp_check_vendor_federal_tax_id(tx_count)
					ReDim preserve dwp_check_vendor_ssn(tx_count)
					ReDim preserve dwp_check_vendor_2nd_address_type_code(tx_count)
					ReDim preserve dwp_check_vendor_2nd_address_type_info(tx_count)
					ReDim preserve dwp_check_vendor_2nd_address_eff_date(tx_count)
					ReDim preserve dwp_check_vendor_2nd_name(tx_count)
					ReDim preserve dwp_check_vendor_2nd_c_o(tx_count)
					ReDim preserve dwp_check_vendor_2nd_street_one(tx_count)
					ReDim preserve dwp_check_vendor_2nd_street_two(tx_count)
					ReDim preserve dwp_check_vendor_2nd_city(tx_count)
					ReDim preserve dwp_check_vendor_2nd_state(tx_count)
					ReDim preserve dwp_check_vendor_2nd_zip(tx_count)
					ReDim preserve dwp_check_vendor_direct_deposit_yn(tx_count)
					ReDim preserve dwp_check_vendor_merge_vendor_number(tx_count)
					ReDim preserve dwp_check_vendor_acct_number_required_yn(tx_count)
					ReDim preserve dwp_check_vendor_blocked_county_numbers_list(tx_count)

					dwp_mony_check_found = True

					dwp_check_program(tx_count) = chck_prog
					EMReadScreen dwp_check_issue_date(tx_count), 8, inqd_row, 7
					dwp_check_issue_date(tx_count) = trim(dwp_check_issue_date(tx_count))
					If IsDate(dwp_check_issue_date(tx_count)) = True Then
						If DateDiff("d", date, dwp_check_issue_date(tx_count)) = 0 Then approved_today = True
					End if
					EMReadScreen dwp_check_status_code(tx_count), 1, inqd_row, 26
					If dwp_check_status_code(tx_count) = "C" Then dwp_check_status_info(tx_count) = "Cancel/Return"
					If dwp_check_status_code(tx_count) = "D" Then dwp_check_status_info(tx_count) = "Denied"
					If dwp_check_status_code(tx_count) = "I" Then dwp_check_status_info(tx_count) = "Issued"
					If dwp_check_status_code(tx_count) = "P" Then dwp_check_status_info(tx_count) = "Pending"
					If dwp_check_status_code(tx_count) = "R" Then dwp_check_status_info(tx_count) = "Cashed"
					If dwp_check_status_code(tx_count) = "S" Then dwp_check_status_info(tx_count) = "Partial Cancel"
					If dwp_check_status_code(tx_count) = "T" Then dwp_check_status_info(tx_count) = "Stopped/Cashed"
					If dwp_check_status_code(tx_count) = "X" Then dwp_check_status_info(tx_count) = "Stopped"
					If dwp_check_status_code(tx_count) = "B" Then dwp_check_status_info(tx_count) = "Cashed and Replaced"
					EMReadScreen dwp_check_warrant_number(tx_count), 8, inqd_row, 28
					EMReadScreen dwp_check_transaction_amount(tx_count), 9, inqd_row, 37
					dwp_check_transaction_amount(tx_count) = trim(dwp_check_transaction_amount(tx_count))
					EMReadScreen dwp_check_type_code(tx_count), 1, inqd_row, 48
					If dwp_check_type_code(tx_count) = "1" Then dwp_check_type_info(tx_count) = "Ongoing Issuance"
					If dwp_check_type_code(tx_count) = "2" Then dwp_check_type_info(tx_count) = "Same Day Local Issuance"
					If dwp_check_type_code(tx_count) = "3" Then dwp_check_type_info(tx_count) = "Replacement Issuance"
					If dwp_check_type_code(tx_count) = "4" Then dwp_check_type_info(tx_count) = "Same Day Issuance"
					If dwp_check_type_code(tx_count) = "5" Then dwp_check_type_info(tx_count) = "Nightly Issuance"
					If dwp_check_type_code(tx_count) = "6" Then dwp_check_type_info(tx_count) = "Manual Issuance"
					If dwp_check_type_code(tx_count) = "7" Then dwp_check_type_info(tx_count) = "EBT Rapid Electronic Issuance"
					If dwp_check_type_code(tx_count) = "8" Then dwp_check_type_info(tx_count) = "EBT Rapid Electronic Replacement"
					EMReadScreen dwp_check_transaction_number(tx_count), 9, inqd_row, 51
					EMReadScreen dwp_check_from_date(tx_count), 8, inqd_row, 62
					EMReadScreen dwp_check_to_date(tx_count), 8, inqd_row, 73

					Call write_value_and_transmit("I", inqd_row, 4)

					EMReadScreen dwp_check_payment_reason(tx_count), 	30, 7, 17
					EMReadScreen dwp_check_payment_to_name(tx_count), 	30, 8, 17
					EMReadScreen addr_one, 								30, 9, 17
					EMReadScreen addr_two, 								30, 10, 17
					dwp_check_payment_to_address(tx_count) = trim(trim(addr_one) & " " & trim(addr_two))
					EMReadScreen dwp_check_mail_method(tx_count), 			15, 4, 63
					EMReadScreen dwp_check_payment_method(tx_count), 		15, 5, 63
					EMReadScreen dwp_check_vendor_number(tx_count), 		15, 6, 63
					EMReadScreen dwp_check_fiche_number(tx_count), 		15, 7, 63
					EMReadScreen dwp_check_payment_amount(tx_count), 		10, 13, 16
					EMReadScreen dwp_check_entitement_amount(tx_count), 	10, 14, 16
					EMReadScreen dwp_check_recoupment_amount(tx_count), 	10, 15, 16
					EMReadScreen dwp_check_replacement_amount(tx_count), 	10, 16, 16
					EMReadScreen dwp_check_cacnel_amount(tx_count), 		10, 17, 16
					EMReadScreen dwp_check_food_portion_amount(tx_count), 	10, 18, 16
					EMReadScreen dwp_check_reconciliation_date(tx_count), 	8, 6, 43
					EMReadScreen dwp_check_cancel_reason(tx_count), 		30, 17, 41
					EMReadScreen dwp_check_replacement_reason(tx_count), 	30, 18, 46
					EMReadScreen dwp_check_picup_status(tx_count), 		10, 10, 70
					EMReadScreen dwp_check_pickup_date(tx_count), 			8, 11, 70
					EMReadScreen dwp_check_servicing_county(tx_count), 	2, 13, 70
					EMReadScreen dwp_check_responsibility_county(tx_count), 2, 14, 70
					EMReadScreen dwp_check_adjusting_transaction(tx_count), 10, 15, 70
					EMReadScreen dwp_check_original_transaction(tx_count), 10, 16, 70

					dwp_check_payment_reason(tx_count) = trim(dwp_check_payment_reason(tx_count))
					dwp_check_payment_to_name(tx_count) = trim(dwp_check_payment_to_name(tx_count))
					dwp_check_payment_to_address(tx_count) = trim(dwp_check_payment_to_address(tx_count))
					dwp_check_mail_method(tx_count) = trim(dwp_check_mail_method(tx_count))
					dwp_check_payment_method(tx_count) = trim(dwp_check_payment_method(tx_count))
					dwp_check_vendor_number(tx_count) = trim(dwp_check_vendor_number(tx_count))
					dwp_check_fiche_number(tx_count) = trim(dwp_check_fiche_number(tx_count))
					dwp_check_payment_amount(tx_count) = trim(dwp_check_payment_amount(tx_count))
					dwp_check_entitement_amount(tx_count) = trim(dwp_check_entitement_amount(tx_count))
					dwp_check_recoupment_amount(tx_count) = trim(dwp_check_recoupment_amount(tx_count))
					dwp_check_replacement_amount(tx_count) = trim(dwp_check_replacement_amount(tx_count))
					dwp_check_cacnel_amount(tx_count) = trim(dwp_check_cacnel_amount(tx_count))
					dwp_check_food_portion_amount(tx_count) = trim(dwp_check_food_portion_amount(tx_count))
					dwp_check_reconciliation_date(tx_count) = trim(dwp_check_reconciliation_date(tx_count))
					dwp_check_cancel_reason(tx_count) = trim(dwp_check_cancel_reason(tx_count))
					dwp_check_replacement_reason(tx_count) = trim(dwp_check_replacement_reason(tx_count))
					dwp_check_picup_status(tx_count) = trim(dwp_check_picup_status(tx_count))
					dwp_check_pickup_date(tx_count) = trim(dwp_check_pickup_date(tx_count))
					dwp_check_servicing_county(tx_count) = trim(dwp_check_servicing_county(tx_count))
					dwp_check_responsibility_county(tx_count) = trim(dwp_check_responsibility_county(tx_count))
					dwp_check_adjusting_transaction(tx_count) = trim(dwp_check_adjusting_transaction(tx_count))
					dwp_check_original_transaction(tx_count) = trim(dwp_check_original_transaction(tx_count))

					PF3
					tx_count = tx_count + 1
				End If

				inqd_row = inqd_row + 1
				EMReadScreen chck_prog, 7, inqd_row, 16
				chck_prog = trim(chck_prog)
			Loop
			PF3
		End If
		Call back_to_SELF

		If dwp_mony_check_found = True Then
			for each_trans = 0 to UBound(dwp_check_program)
				Call navigate_to_MAXIS_screen("MONY", "VNDS")

				Call write_value_and_transmit(dwp_check_vendor_number(each_trans), 4, 59)
				EMReadScreen dwp_check_vendor_name(each_trans), 					30, 3, 15
				EMReadScreen dwp_check_vendor_c_o(each_trans), 					30, 4, 15
				EMReadScreen dwp_check_vendor_street_one(each_trans), 				22, 5, 15
				EMReadScreen dwp_check_vendor_street_two(each_trans), 				22, 6, 15
				EMReadScreen dwp_check_vendor_city(each_trans), 					15, 7, 15
				EMReadScreen dwp_check_vendor_state(each_trans), 					2, 7, 36
				EMReadScreen dwp_check_vendor_zip(each_trans), 					10, 7, 46
				EMReadScreen dwp_check_vendor_grh_yn(each_trans), 					1, 4, 57
				EMReadScreen dwp_check_vendor_non_profit_yn(each_trans), 			1, 4, 78
				EMReadScreen dwp_check_vendor_phone(each_trans), 					16, 6, 54
				dwp_check_vendor_phone(each_trans) = "(" & replace(replace(dwp_check_vendor_phone(each_trans), " )  ", ")"), "  ", "-")
				EMReadScreen dwp_check_vendor_county(each_trans), 					2, 7, 61
				EMReadScreen dwp_check_vendor_status_code(each_trans), 			1, 16, 15
				If dwp_check_vendor_status_code(each_trans) = "A" Then dwp_check_vendor_status_info(each_trans) = "Active"
				If dwp_check_vendor_status_code(each_trans) = "D" Then dwp_check_vendor_status_info(each_trans) = "Delete"
				If dwp_check_vendor_status_code(each_trans) = "M" Then dwp_check_vendor_status_info(each_trans) = "Merged"
				If dwp_check_vendor_status_code(each_trans) = "P" Then dwp_check_vendor_status_info(each_trans) = "Pending"
				If dwp_check_vendor_status_code(each_trans) = "T" Then dwp_check_vendor_status_info(each_trans) = "Terminated"
				EMReadScreen dwp_check_vendor_incorporated_yn(each_trans), 		1, 9, 22
				EMReadScreen dwp_check_vendor_federal_tax_id(each_trans), 			9, 9, 41
				EMReadScreen dwp_check_vendor_ssn(each_trans), 					11, 9, 61
				If dwp_check_vendor_ssn(each_trans) = "___ __ ____" Then dwp_check_vendor_ssn(each_trans) = ""
				dwp_check_vendor_ssn(each_trans) = replace(dwp_check_vendor_ssn(each_trans), " ", "-")
				EMReadScreen dwp_check_vendor_2nd_address_type_code(each_trans), 	1, 10, 22
				If dwp_check_vendor_2nd_address_type_code(each_trans) = "1" Then dwp_check_vendor_2nd_address_type_info(each_trans) = "Mailing Address"
				If dwp_check_vendor_2nd_address_type_code(each_trans) = "2" Then dwp_check_vendor_2nd_address_type_info(each_trans) = "Court Order"
				EMReadScreen dwp_check_vendor_2nd_address_eff_date(each_trans), 	8, 11, 15
				If dwp_check_vendor_2nd_address_eff_date(each_trans) = "__ __ __" Then dwp_check_vendor_2nd_address_eff_date(each_trans) = ""
				dwp_check_vendor_2nd_address_eff_date(each_trans) = replace(dwp_check_vendor_2nd_address_eff_date(each_trans), " ", "/")
				EMReadScreen dwp_check_vendor_2nd_name(each_trans), 				30, 11, 15
				EMReadScreen dwp_check_vendor_2nd_c_o(each_trans), 				30, 12, 15
				EMReadScreen dwp_check_vendor_2nd_street_one(each_trans), 			22, 13, 15
				EMReadScreen dwp_check_vendor_2nd_street_two(each_trans), 			22, 14, 15
				EMReadScreen dwp_check_vendor_2nd_city(each_trans), 				15, 15, 15
				EMReadScreen dwp_check_vendor_2nd_state(each_trans), 				2, 15, 35
				EMReadScreen dwp_check_vendor_2nd_zip(each_trans), 				10, 15, 44
				EMReadScreen dwp_check_vendor_direct_deposit_yn(each_trans), 		1, 12, 76
				EMReadScreen dwp_check_vendor_merge_vendor_number(each_trans), 	8, 16, 38
				EMReadScreen dwp_check_vendor_acct_number_required_yn(each_trans), 1, 17, 74
				EMReadScreen dwp_check_vendor_blocked_county_numbers_list(each_trans), 29, 18, 23

				dwp_check_vendor_name(each_trans) = replace(dwp_check_vendor_name(each_trans), "_", "")
				dwp_check_vendor_c_o(each_trans) = replace(dwp_check_vendor_c_o(each_trans), "_", "")
				dwp_check_vendor_street_one(each_trans) = replace(dwp_check_vendor_street_one(each_trans), "_", "")
				dwp_check_vendor_street_two(each_trans) = replace(dwp_check_vendor_street_two(each_trans), "_", "")
				dwp_check_vendor_city(each_trans) = replace(dwp_check_vendor_city(each_trans), "_", "")
				dwp_check_vendor_zip(each_trans) = trim(dwp_check_vendor_zip(each_trans))
				dwp_check_vendor_zip(each_trans) = replace(dwp_check_vendor_zip(each_trans), " ", "-")

				dwp_check_vendor_federal_tax_id(each_trans) = replace(dwp_check_vendor_federal_tax_id(each_trans), "_", "")

				dwp_check_vendor_2nd_name(each_trans) = replace(dwp_check_vendor_2nd_name(each_trans), "_", "")
				dwp_check_vendor_2nd_c_o(each_trans) = replace(dwp_check_vendor_2nd_c_o(each_trans), "_", "")
				dwp_check_vendor_2nd_street_one(each_trans) = replace(dwp_check_vendor_2nd_street_one(each_trans), "_", "")
				dwp_check_vendor_2nd_street_two(each_trans) = replace(dwp_check_vendor_2nd_street_two(each_trans), "_", "")
				dwp_check_vendor_2nd_city(each_trans) = replace(dwp_check_vendor_2nd_city(each_trans), "_", "")
				dwp_check_vendor_2nd_zip(each_trans) = replace(dwp_check_vendor_2nd_zip(each_trans), "_", "")
				dwp_check_vendor_2nd_zip(each_trans) = trim(dwp_check_vendor_2nd_zip(each_trans))
				dwp_check_vendor_2nd_zip(each_trans) = replace(dwp_check_vendor_2nd_zip(each_trans), " ", "-")

				dwp_check_vendor_merge_vendor_number(each_trans) = replace(dwp_check_vendor_merge_vendor_number(each_trans), "_", "")
				dwp_check_vendor_acct_number_required_yn(each_trans) = replace(dwp_check_vendor_acct_number_required_yn(each_trans), "_", "")

				dwp_check_vendor_blocked_county_numbers_list(each_trans) = replace(dwp_check_vendor_blocked_county_numbers_list(each_trans), "_", "")
				dwp_check_vendor_blocked_county_numbers_list(each_trans) = trim((dwp_check_vendor_blocked_county_numbers_list(each_trans)))

				PF3
			Next
		End If
		Call Back_to_SELF
		Call navigate_to_MAXIS_screen("MONY", "VNDA")

		EMWriteScreen elig_footer_month, 4, 55
		EMWriteScreen elig_footer_year, 4, 58
		Call write_value_and_transmit("X", 13, 16)
		EMReadScreen panel_location, 4, 4, 14
		If panel_location <> "Case" Then 			'this is on the initial search panel, if it says 'Case' it means we are still at the first screen
			auth_count = 0
			vnda_row = 6
			Do
				EMReadScreen vndr_nbr, 8, vnda_row, 3
				EMReadScreen vndr_send, 1, vnda_row, 62
				If vndr_nbr <> "________" and vndr_send = "V" Then
					dwp_vnda_found = True

					ReDim preserve dwp_vnda_vendor_number(auth_count)
					ReDim preserve dwp_vnda_vendor_name(auth_count)
					ReDim preserve dwp_vnda_reference_number(auth_count)
					ReDim preserve dwp_vnda_send_to_code(auth_count)
					ReDim preserve dwp_vnda_send_to_info(auth_count)
					ReDim preserve dwp_vnda_expense_type_code(auth_count)
					ReDim preserve dwp_vnda_expense_type_info(auth_count)
					ReDim preserve dwp_vnda_payment_amount(auth_count)

					EMReadScreen dwp_vnda_vendor_number(auth_count), 8, vnda_row, 3
					EMReadScreen dwp_vnda_vendor_name(auth_count), 30, vnda_row, 12
					EMReadScreen dwp_vnda_reference_number(auth_count), 16, vnda_row, 43
					EMReadScreen dwp_vnda_send_to_code(auth_count), 1, vnda_row, 62
					EMReadScreen dwp_vnda_expense_type_code(auth_count), 2, vnda_row, 68
					EMReadScreen dwp_vnda_payment_amount(auth_count), 8, vnda_row, 73

					dwp_vnda_vendor_number(auth_count) = replace(dwp_vnda_vendor_number(auth_count), "_", "")
					dwp_vnda_vendor_name(auth_count) = replace(dwp_vnda_vendor_name(auth_count), "_", "")
					dwp_vnda_reference_number(auth_count) = replace(dwp_vnda_reference_number(auth_count), "_", "")

					If dwp_vnda_send_to_code(auth_count) = "V" Then dwp_vnda_send_to_info(auth_count) = "Vendor"
					If dwp_vnda_send_to_code(auth_count) = "C" Then dwp_vnda_send_to_info(auth_count) = "Client"

					If dwp_vnda_expense_type_code(auth_count) = "01" Then dwp_vnda_expense_type_info(auth_count) = "Rent"
					If dwp_vnda_expense_type_code(auth_count) = "02" Then dwp_vnda_expense_type_info(auth_count) = "Mortgage"
					If dwp_vnda_expense_type_code(auth_count) = "03" Then dwp_vnda_expense_type_info(auth_count) = "Electric"
					If dwp_vnda_expense_type_code(auth_count) = "04" Then dwp_vnda_expense_type_info(auth_count) = "Heat"
					If dwp_vnda_expense_type_code(auth_count) = "05" Then dwp_vnda_expense_type_info(auth_count) = "Phone"
					If dwp_vnda_expense_type_code(auth_count) = "06" Then dwp_vnda_expense_type_info(auth_count) = "Water"
					If dwp_vnda_expense_type_code(auth_count) = "07" Then dwp_vnda_expense_type_info(auth_count) = "Food"
					If dwp_vnda_expense_type_code(auth_count) = "08" Then dwp_vnda_expense_type_info(auth_count) = "Personal Needs"
					If dwp_vnda_expense_type_code(auth_count) = "09" Then dwp_vnda_expense_type_info(auth_count) = "Household Needs"
					If dwp_vnda_expense_type_code(auth_count) = "10" Then dwp_vnda_expense_type_info(auth_count) = "Furniture"
					If dwp_vnda_expense_type_code(auth_count) = "11" Then dwp_vnda_expense_type_info(auth_count) = "Appliances"
					If dwp_vnda_expense_type_code(auth_count) = "12" Then dwp_vnda_expense_type_info(auth_count) = "Clothes"
					If dwp_vnda_expense_type_code(auth_count) = "13" Then dwp_vnda_expense_type_info(auth_count) = "Other"
					If dwp_vnda_expense_type_code(auth_count) = "15" Then dwp_vnda_expense_type_info(auth_count) = "MSA Eligible Spouse"
					If dwp_vnda_expense_type_code(auth_count) = "54" Then dwp_vnda_expense_type_info(auth_count) = "Rent with Landlord Notice"

					dwp_vnda_payment_amount(auth_count) = trim(dwp_vnda_payment_amount(auth_count))
					auth_count = auth_count + 1
				End If
				vnda_row = vnda_row + 1
			Loop until vndr_nbr = "________"
			PF3
		End If

		If dwp_autoclosed_for_time_limit = True Then approved_today = True
	end sub
end class

class mfip_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public revw_month
	public hrf_month
	public revw_status
	public revw_caf_date
	public revw_interview_date
	public hrf_status
	public hrf_doc_date
	public mfip_earned_income_exists
	public mfip_unearned_income_exists
	public mfip_deemed_income_exists
	public mfip_counted_memb_allocation_exists
	public mfip_deemer_allocation_exists

	public mfip_sig_change
	public mfsc_month_one_of_sig_change
	public mfsc_month_one_of_sig_change_mo
	public mfsc_month_one_of_sig_change_yr
	public mfsc_month_two_of_sig_change
	public mfsc_month_two_of_sig_change_mo
	public mfsc_month_two_of_sig_change_yr
	public mfsc_budg_mo_earned_inc
	public mfsc_budg_mo_deemed_inc
	public mfsc_budg_mo_unearned_inc
	public mfsc_budg_mo_total_inc
	public mfsc_budg_mo_net_inc
	public mfsc_pay_mo_earned_inc
	public mfsc_pay_mo_deemed_inc
	public mfsc_pay_mo_unearned_inc
	public mfsc_pay_mo_total_inc

	public mfip_mony_check_found
	public mfip_check_issue_date()
	public mfip_check_program()
	public mfip_check_status_code()
	public mfip_check_status_info()
	public mfip_check_warrant_number()
	public mfip_check_transaction_amount()
	public mfip_check_type_code()
	public mfip_check_type_info()
	public mfip_check_transaction_number()
	public mfip_check_from_date()
	public mfip_check_to_date()
	public mfip_check_payment_reason()
	public mfip_check_payment_to_name()
	public mfip_check_payment_to_address()
	public mfip_check_mail_method()
	public mfip_check_payment_method()
	public mfip_check_vendor_number()
	public mfip_check_fiche_number()
	public mfip_check_payment_amount()
	public mfip_check_entitement_amount()
	public mfip_check_recoupment_amount()
	public mfip_check_replacement_amount()
	public mfip_check_cacnel_amount()
	public mfip_check_food_portion_amount()
	public mfip_check_reconciliation_date()
	public mfip_check_cancel_reason()
	public mfip_check_replacement_reason()
	public mfip_check_picup_status()
	public mfip_check_pickup_date()
	public mfip_check_servicing_county()
	public mfip_check_responsibility_county()
	public mfip_check_adjusting_transaction()
	public mfip_check_original_transaction()
	public mfip_check_vendor_name()
	public mfip_check_vendor_c_o()
	public mfip_check_vendor_street_one()
	public mfip_check_vendor_street_two()
	public mfip_check_vendor_city()
	public mfip_check_vendor_state()
	public mfip_check_vendor_zip()
	public mfip_check_vendor_grh_yn()
	public mfip_check_vendor_non_profit_yn()
	public mfip_check_vendor_phone()
	public mfip_check_vendor_county()
	public mfip_check_vendor_status_code()
	public mfip_check_vendor_status_info()
	public mfip_check_vendor_incorporated_yn()
	public mfip_check_vendor_federal_tax_id()
	public mfip_check_vendor_ssn()
	public mfip_check_vendor_2nd_address_type_code()
	public mfip_check_vendor_2nd_address_type_info()
	public mfip_check_vendor_2nd_address_eff_date()
	public mfip_check_vendor_2nd_name()
	public mfip_check_vendor_2nd_c_o()
	public mfip_check_vendor_2nd_street_one()
	public mfip_check_vendor_2nd_street_two()
	public mfip_check_vendor_2nd_city()
	public mfip_check_vendor_2nd_state()
	public mfip_check_vendor_2nd_zip()
	public mfip_check_vendor_direct_deposit_yn()
	public mfip_check_vendor_merge_vendor_number()
	public mfip_check_vendor_acct_number_required_yn()
	public mfip_check_vendor_blocked_county_numbers_list()

	public mfip_vnda_found
	public mfip_vnda_vendor_number()
	public mfip_vnda_vendor_name()
	public mfip_vnda_reference_number()
	public mfip_vnda_send_to_code()
	public mfip_vnda_send_to_info()
	public mfip_vnda_expense_type_code()
	public mfip_vnda_expense_type_info()
	public mfip_vnda_cash_payment_amount()
	public mfip_vnda_hg_payment_amount()
	public mfip_vnda_total_payment_amount()

	public mfip_elig_ref_numbs()
	public mfip_elig_membs_full_name()
	public mfip_elig_membs_last_name_complete()
	public mfip_elig_membs_partial_first_name()
	public mfip_elig_membs_partial_last_name()
	public mfip_elig_membs_request_yn()
	public mfip_elig_membs_code()
	public mfip_elig_membs_status_info()
	public mfip_elig_membs_deemed()
	public mfip_elig_membs_counted()
	public mfip_elig_membs_eligibility()
	public mfip_elig_membs_begin_date()
	public mfip_elig_membs_budget_cycle()
	public mfip_elig_membs_absence()
	public mfip_elig_membs_child_age()
	public mfip_elig_membs_citizenship()
	public mfip_elig_membs_citizenship_verif()
	public mfip_elig_membs_dupl_assist()
	public mfip_elig_membs_foster_care()
	public mfip_elig_membs_fraud()
	public mfip_elig_membs_fs_disq()
	public mfip_elig_membs_minor_living_arngmt()
	public mfip_elig_membs_post_60_removal()
	public mfip_elig_membs_ssi()
	public mfip_elig_membs_ssn_code()
	public mfip_elig_membs_unit_memb()
	public mfip_elig_membs_unlawful_conduct()
	public mfip_elig_membs_fs_recvd()
	public mfip_elig_membs_es_status_code()
	public mfip_elig_membs_es_status_info()

	public mfip_memb_cash_portion_code()
	public mfip_memb_food_portion_code()
	public mfip_memb_state_food_code()
	public mfip_memb_sanction_yn()
	public mfip_memb_sanction_child_support_test()
	public mfip_memb_sanction_drug_felon_test()
	public mfip_memb_sanction_emp_services_test()
	public mfip_memb_sanction_fin_orient_test()
	public mfip_memb_sanction_occurence()
	public mfip_memb_sanction_begin_date()
	public mfip_memb_sanction_last_sanc_month()

	public mfip_elig_membs_initial_BUSI_inc_total()
	public mfip_elig_membs_initial_JOBS_inc_total()
	public mfip_elig_membs_initial_earned_inc_total()
	public mfip_elig_membs_initial_stndrd_ei_disregard()
	public mfip_elig_membs_initial_earned_inc_subtotal()
	public mfip_elig_membs_initial_earned_inc_disregard()
	public mfip_elig_membs_initial_avail_earned_inc()
	public mfip_elig_membs_initial_allocation()
	public mfip_elig_membs_initial_child_support()
	public mfip_elig_membs_initial_counted_earned_inc_total()
	public mfip_elig_membs_initial_UNEA_inc_total()
	public mfip_elig_membs_initial_allocation_balance()
	public mfip_elig_membs_initial_child_support_balance()
	public mfip_elig_membs_initial_counted_UNEA_inc_total()
	public mfip_elig_membs_initial_income_cses_retro_income()
	public mfip_elig_membs_initial_income_cses_prosp_income()
	public mfip_elig_membs_new_spouse_earned_income()
	public mfip_elig_membs_new_spouse_unearned_income()
	public mfip_elig_membs_new_spouse_total_income()

	public mfip_elig_membs_self_emp_income()
	public mfip_elig_membs_wages_income()
	public mfip_elig_membs_total_earned_income()
	public mfip_elig_membs_standard_EI_disregard()
	public mfip_elig_membs_earned_income_subtotal()
	public mfip_elig_membs_earned_income_50_perc_disregard()
	public mfip_elig_membs_earned_total_dsrgrd()
	public mfip_elig_membs_available_earned_income()
	public mfip_elig_membs_allocation_deduction()
	public mfip_elig_membs_child_support_deduction()
	public mfip_elig_membs_counted_earned_income()

	public mfip_elig_membs_total_unearned_income()
	public mfip_elig_membs_allocation_balance()
	public mfip_elig_membs_child_support_balance()
	public mfip_elig_membs_counted_unearned_income()

	public mfip_elig_membs_county_88_cses_income()
	public mfip_elig_membs_county_88_gaming_income()
	public mfip_elig_membs_county_88_200_perc_fpg()
	public mfip_elig_membs_county_88_deemers_unmet_need()
	public mfip_elig_membs_county_88_allocation()
	public mfip_elig_membs_county_88_child_support()
	public mfip_elig_membs_county_88_counted_gaming_income()

	public mfip_elig_membs_retro_subsidy_amount()
	public mfip_elig_membs_prosp_subsidy_amount()

	public mfip_elig_membs_deemer_BUSI_inc()
	public mfip_elig_membs_deemer_JOBS_inc()
	public mfip_elig_membs_deemer_counted_earned_inc()
	public mfip_elig_membs_deemer_stndrd_earned_disrgrd()
	public mfip_elig_membs_deemer_earned_subtotal()
	public mfip_elig_membs_deemer_earned_dsrgrd()
	public mfip_elig_membs_deemer_total_dsrgrd()
	public mfip_elig_membs_deemer_unearned_inc()
	public mfip_elig_membs_deemer_sub_total_counted_inc()
	public mfip_elig_membs_deemer_unmet_need()
	public mfip_elig_membs_deemer_allocation()
	public mfip_elig_membs_deemer_cs_alimny()
	public mfip_elig_membs_deemer_counted_income()

	public mfip_cash_opt_out
	public mfip_HG_opt_out
	public mfip_child_only
	public mfip_case_in_sancttion

	public mfip_case_test_appl_withdraw
	public mfip_case_test_asset
	public mfip_case_test_death_applicant
	public mfip_case_test_dupl_assist
	public mfip_case_test_elig_child
	public mfip_case_test_fail_coop
	public mfip_case_test_fail_file
	public mfip_case_test_fail_file_hrf
	public mfip_case_test_fail_file_revw
	public mfip_case_test_initial_income
	public mfip_case_test_minor_liv_arrange
	public mfip_case_test_monthly_income
	public mfip_case_test_post_60_disq
	public mfip_case_test_residence
	public mfip_case_test_sanction_limit
	public mfip_case_test_strike
	public mfip_case_test_TANF_time_limit
	public mfip_case_test_transfer_asset
	public mfip_case_test_verif
	public mfip_case_test_275_new_spouse_income
	public mfip_fs_case_test_fail_coop_snap_qc
	public mfip_fs_case_test_opt_out_cash
	public mfip_fs_case_test_opt_out_housing_grant

	public mfip_counted_asset_CASH
	public mfip_counted_asset_ACCT
	public mfip_counted_asset_SECU
	public mfip_counted_asset_CARS
	public mfip_counted_asset_SPON
	public mfip_counted_asset_total
	public mfip_counted_asset_max

	public mfip_initial_income_earned
	public mfip_initial_income_deoendant_care
	public mfip_initial_income_unearned
	public mfip_initial_income_deemed
	public mfip_initial_income_cses_exclusion
	public mfip_initial_income_cses_income
	public mfip_initial_income_cses_child_count
	public mfip_initial_income_net_cses_income
	public mfip_initial_income_total
	public mfip_initial_income_family_wage_level

	public mfip_verif_ACCT
	public mfip_verif_BUSI
	public mfip_verif_CARS
	public mfip_verif_JOBS
	public mfip_verif_MEMB_dob
	public mfip_verif_MEMB_id
	public mfip_verif_PARE
	public mfip_verif_PREG
	public mfip_verif_RBIC
	public mfip_verif_ADDR
	public mfip_verif_SCHL
	public mfip_verif_SECU
	public mfip_verif_SHEL
	public mfip_verif_SPON
	public mfip_verif_UNEA
	public mfip_verif_MEMI

	public mfip_12_month_start_date
	public mfip_designated_spouse_ref_numb
	public mfip_new_spouse_inc_earned
	public mfip_new_spouse_inc_unearned
	public mfip_new_spouse_inc_deemed_earned
	public mfip_new_spouse_inc_deemed_unearned
	public mfip_new_spouse_inc_total
	public mfip_275_fpg_amt
	public mfip_hh_size_fornew_spouse_calc

	public mfip_case_sanction_percent
	public mfip_case_sanction_vendor_yn
	public mfip_case_sanction_last_vendor_month

	public mfip_case_budg_family_wage_level
	public mfip_case_budg_monthly_earned_income
	public mfip_case_budg_wage_level_earned_inc_difference
	public mfip_case_budg_transitional_standard
	public mfip_case_budg_monthly_need
	public mfip_case_budg_unearned_income
	public mfip_case_budg_deemed_income
	public mfip_case_budg_cses_exclusion
	public mfip_case_budg_unmet_need
	public mfip_case_budg_unmet_need_food_potion
	public mfip_case_budg_tribal_counted_income
	public mfip_case_budg_unmet_need_cash_portion
	public mfip_case_budg_deduction_subsidy_tribal_cses

	public mfip_case_budg_net_food_portion
	public mfip_case_budg_net_cash_portion
	public mfip_case_budg_net_unmet_need
	public mfip_case_budg_deduction_sanction_vendor
	public mfip_case_budg_unmet_neet_subtotal
	public mfip_case_budg_subtotal_food_portion
	public mfip_case_budg_food_portion_deduction
	public mfip_case_budg_entitlement_food_portion
	public mfip_case_budg_entitlement_housing_grant

	public mfip_budg_cses_excln_cses_income
	public mfip_budg_cses_excln_child_count
	public mfip_budg_cses_excln_total
	public mfip_budg_total_county_88_child_support_income
	public mfip_budg_total_county_88_gaming_income
	public mfip_budg_total_tribal_income_fs_portion_deduction
	public mfip_budg_total_housing_subsidy_amount
	public mfip_budg_total_tribal_child_support
	public mfip_budg_total_subsidy_tribal_cash_portion_deduction
	public mfip_elig_budg_total_countable_housing_subsidy
	public mfip_elig_budg_housing_subsidy_exempt

	public mfip_case_budg_10_perc_sanc
	public mfip_case_budg_unmet_need_after_pre_vndr_sanc
	public mfip_case_budg_sanc_calc_food_portion
	public mfip_case_budg_sanc_calc_cash_portion
	public mfip_case_budg_pot_mand_vndr_pymts
	public mfip_case_budg_30_perc_sanc

	public mfip_case_budg_non_citzn_fs_inelig_pers_count
	public mfip_case_budg_non_citzn_fs_inelig_amt
	public mfip_case_budg_other_fs_inelig_pers_count
	public mfip_case_budg_other_fs_inelig_amt

	public mfip_case_budg_prorate_date
	public mfip_case_budg_fed_food_benefit
	public mfip_case_budg_food_prorated_amt
	public mfip_case_budg_entitlement_cash_portion
	public mfip_case_budg_mand_sanc_vendor
	public mfip_case_budg_net_cash_after_sanc_portion
	public mfip_case_budg_cash_prorated_amt
	public mfip_case_budg_state_food_benefit
	public mfip_case_budg_state_food_prorated_amt
	public mfip_case_budg_grant_amount
	public mfip_case_budg_amt_already_issued
	public mfip_case_budg_supplement_due
	public mfip_case_budg_overpayment
	public mfip_case_budg_adjusted_grant_amt
	public mfip_case_budg_recoupment
	public mfip_case_budg_total_food_issuance
	public mfip_case_budg_total_cash_issuance
	public mfip_case_budg_total_housing_grant_issuance

	public mfip_case_budg_food_supplement
	public mfip_case_budg_state_food_supplement
	public mfip_case_budg_cash_supplement
	public mfip_case_budg_housing_grant_supplement

	public mfip_case_budg_cash_recoupment
	public mfip_case_budg_state_food_recoupment
	public mfip_case_budg_food_recoupment

	public mfip_case_budg_fed_food_memb_count
	public mfip_case_budg_fed_food_benefit_amt
	public mfip_case_budg_state_food_memb_count
	public mfip_case_budg_state_food_benefit_amt

	public mfip_case_budg_tanf_cash_memb_count
	public mfip_case_budg_tanf_cash_benefit_amt
	public mfip_case_budg_state_cash_memb_count
	public mfip_case_budg_state_cash_benefit_amt

	public mfip_approved_date
	public mfip_process_date
	public mfip_prev_approval
	public mfip_case_last_approval_date
	public mfip_case_current_prog_status
	public mfip_case_eligibility_result
	public mfip_case_hrf_reporting
	public mfip_case_source_of_info
	public mfip_case_benefit_impact
	public mfip_case_review_date
	public mfip_case_budget_cycle
	public mfip_case_vendor_reason_code
	public mfip_case_vendor_reason_info
	public mfip_case_responsible_county
	public mfip_case_service_county
	public mfip_case_asst_unit_caregivers
	public mfip_case_asst_unit_children
	public mfip_case_total_assets
	public mfip_case_maximum_assets
	public mfip_case_summary_grant_amount
	public mfip_case_summary_net_grant_amount
	public mfip_case_summary_cash_portion
	public mfip_case_summary_food_portion
	public mfip_case_summary_housing_grant

	public MFSD_check_found
	public MFSD_check_count
	public MFSD_approved_today
	public MFSD_overlap_exists
	public MFSD_diet_info_missing
	public MFSD_missing_diet_note
	public MFSD_check_issue_date
	public MFSD_check_status_code
	public MFSD_check_warrant_number
	public MFSD_check_transaction_amount
	public MFSD_check_type_code
	public MFSD_check_transaction_number
	public MFSD_check_from_date
	public MFSD_check_to_date
	public MFSD_check_payment_reason


	public sub read_elig()
		mfip_cash_opt_out = False
		mfip_HG_opt_out = False
		mfip_child_only = False
		mfip_case_in_sancttion = False
		mfip_earned_income_exists = False
		mfip_unearned_income_exists = False
		mfip_deemed_income_exists = False
		mfip_counted_memb_allocation_exists = False
		mfip_deemer_allocation_exists = False
		mfip_sig_change = False

		approved_today = False
		approved_version_found = False
		Call back_to_SELF
		call navigate_to_MAXIS_screen("ELIG", "    ")		'for MFIP, we need to navigate to the correct month FIRST from the main ELIG menu beecause there is sometimes a sig change panel
		EMWriteScreen elig_footer_month, 20, 55
		EMWriteScreen elig_footer_year, 20, 58
		transmit
		call navigate_to_MAXIS_screen("ELIG", "MFIP")
		EMReadScreen sig_change_check, 4, 3, 38				'looking to see if the significant change panel is on this case
		If sig_change_check = "MFSC" Then
			'this is important because the command line is in a different place on the sig change panel so this call is slightly different
			Call find_last_approved_ELIG_version(19, 78, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		Else
			Call find_last_approved_ELIG_version(20, 79, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		End If
		'When the correct version is selected, MAXIS navigates to MFPR, even if MFSC exists, so once the correct version is selected, we can assume we are MFPR

		If approved_version_found = True Then
			EMReadScreen approval_date, 8, 3, 14		'this is the actual approval date - not the process date'
			approval_date = DateAdd("d", 0, approval_date)
			If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
			If elig_footer_month = "10" AND elig_footer_year = "22" then 		'9/10/22 is the day that DHS created background results for MASS CHANGE for SNAP and we will allow this date to be used as the process date
				If DateDiff("d", #9/10/2022#, elig_version_date) = 0 AND DateDiff("d", date, approval_date) = 0 Then approved_today = True
			End If
			If allow_late_note = True Then
				one_week_ago = DateAdd("d", -7, date)
				If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
			End If
			If developer_mode = True Then approved_today = True			'TESTING OPTION'
		End If

		If approved_today = True Then
			ReDim mfip_check_issue_date(0)
			ReDim mfip_check_program(0)
			ReDim mfip_check_status_code(0)
			ReDim mfip_check_status_info(0)
			ReDim mfip_check_warrant_number(0)
			ReDim mfip_check_transaction_amount(0)
			ReDim mfip_check_type_code(0)
			ReDim mfip_check_type_info(0)
			ReDim mfip_check_transaction_number(0)
			ReDim mfip_check_from_date(0)
			ReDim mfip_check_to_date(0)
			ReDim mfip_check_payment_reason(0)
			ReDim mfip_check_payment_to_name(0)
			ReDim mfip_check_payment_to_address(0)
			ReDim mfip_check_mail_method(0)
			ReDim mfip_check_payment_method(0)
			ReDim mfip_check_vendor_number(0)
			ReDim mfip_check_fiche_number(0)
			ReDim mfip_check_payment_amount(0)
			ReDim mfip_check_entitement_amount(0)
			ReDim mfip_check_recoupment_amount(0)
			ReDim mfip_check_replacement_amount(0)
			ReDim mfip_check_cacnel_amount(0)
			ReDim mfip_check_food_portion_amount(0)
			ReDim mfip_check_reconciliation_date(0)
			ReDim mfip_check_cancel_reason(0)
			ReDim mfip_check_replacement_reason(0)
			ReDim mfip_check_picup_status(0)
			ReDim mfip_check_pickup_date(0)
			ReDim mfip_check_servicing_county(0)
			ReDim mfip_check_responsibility_county(0)
			ReDim mfip_check_adjusting_transaction(0)
			ReDim mfip_check_original_transaction(0)
			ReDim mfip_check_vendor_name(0)
			ReDim mfip_check_vendor_c_o(0)
			ReDim mfip_check_vendor_street_one(0)
			ReDim mfip_check_vendor_street_two(0)
			ReDim mfip_check_vendor_city(0)
			ReDim mfip_check_vendor_state(0)
			ReDim mfip_check_vendor_zip(0)
			ReDim mfip_check_vendor_grh_yn(0)
			ReDim mfip_check_vendor_non_profit_yn(0)
			ReDim mfip_check_vendor_phone(0)
			ReDim mfip_check_vendor_county(0)
			ReDim mfip_check_vendor_status_code(0)
			ReDim mfip_check_vendor_status_info(0)
			ReDim mfip_check_vendor_incorporated_yn(0)
			ReDim mfip_check_vendor_federal_tax_id(0)
			ReDim mfip_check_vendor_ssn(0)
			ReDim mfip_check_vendor_2nd_address_type_code(0)
			ReDim mfip_check_vendor_2nd_address_type_info(0)
			ReDim mfip_check_vendor_2nd_address_eff_date(0)
			ReDim mfip_check_vendor_2nd_name(0)
			ReDim mfip_check_vendor_2nd_c_o(0)
			ReDim mfip_check_vendor_2nd_street_one(0)
			ReDim mfip_check_vendor_2nd_street_two(0)
			ReDim mfip_check_vendor_2nd_city(0)
			ReDim mfip_check_vendor_2nd_state(0)
			ReDim mfip_check_vendor_2nd_zip(0)
			ReDim mfip_check_vendor_direct_deposit_yn(0)
			ReDim mfip_check_vendor_merge_vendor_number(0)
			ReDim mfip_check_vendor_acct_number_required_yn(0)
			ReDim mfip_check_vendor_blocked_county_numbers_list(0)

			ReDim mfip_elig_ref_numbs(0)
			ReDim mfip_elig_membs_full_name(0)
			ReDim mfip_elig_membs_last_name_complete(0)
			ReDim mfip_elig_membs_partial_first_name(0)
			ReDim mfip_elig_membs_partial_last_name(0)
			ReDim mfip_elig_membs_request_yn(0)
			ReDim mfip_elig_membs_code(0)
			ReDim mfip_elig_membs_status_info(0)
			ReDim mfip_elig_membs_deemed(0)
			ReDim mfip_elig_membs_counted(0)
			ReDim mfip_elig_membs_eligibility(0)
			ReDim mfip_elig_membs_begin_date(0)
			ReDim mfip_elig_membs_budget_cycle(0)
			ReDim mfip_elig_membs_absence(0)
			ReDim mfip_elig_membs_child_age(0)
			ReDim mfip_elig_membs_citizenship(0)
			ReDim mfip_elig_membs_citizenship_verif(0)
			ReDim mfip_elig_membs_dupl_assist(0)
			ReDim mfip_elig_membs_foster_care(0)
			ReDim mfip_elig_membs_fraud(0)
			ReDim mfip_elig_membs_fs_disq(0)
			ReDim mfip_elig_membs_minor_living_arngmt(0)
			ReDim mfip_elig_membs_post_60_removal(0)
			ReDim mfip_elig_membs_ssi(0)
			ReDim mfip_elig_membs_ssn_code(0)
			ReDim mfip_elig_membs_unit_memb(0)
			ReDim mfip_elig_membs_unlawful_conduct(0)
			ReDim mfip_elig_membs_fs_recvd(0)
			ReDim mfip_elig_membs_es_status_code(0)
			ReDim mfip_elig_membs_es_status_info(0)
			ReDim mfip_memb_cash_portion_code(0)
			ReDim mfip_memb_food_portion_code(0)
			ReDim mfip_memb_state_food_code(0)
			ReDim mfip_memb_sanction_yn(0)
			ReDim mfip_memb_sanction_child_support_test(0)
			ReDim mfip_memb_sanction_drug_felon_test(0)
			ReDim mfip_memb_sanction_emp_services_test(0)
			ReDim mfip_memb_sanction_fin_orient_test(0)
			ReDim mfip_memb_sanction_occurence(0)
			ReDim mfip_memb_sanction_begin_date(0)
			ReDim mfip_memb_sanction_last_sanc_month(0)
			ReDim mfip_elig_membs_initial_BUSI_inc_total(0)
			ReDim mfip_elig_membs_initial_JOBS_inc_total(0)
			ReDim mfip_elig_membs_initial_earned_inc_total(0)
			ReDim mfip_elig_membs_initial_stndrd_ei_disregard(0)
			ReDim mfip_elig_membs_initial_earned_inc_subtotal(0)
			ReDim mfip_elig_membs_initial_earned_inc_disregard(0)
			ReDim mfip_elig_membs_initial_avail_earned_inc(0)
			ReDim mfip_elig_membs_initial_allocation(0)
			ReDim mfip_elig_membs_initial_child_support(0)
			ReDim mfip_elig_membs_initial_counted_earned_inc_total(0)
			ReDim mfip_elig_membs_initial_UNEA_inc_total(0)
			ReDim mfip_elig_membs_initial_allocation_balance(0)
			ReDim mfip_elig_membs_initial_child_support_balance(0)
			ReDim mfip_elig_membs_initial_counted_UNEA_inc_total(0)
			ReDim mfip_elig_membs_initial_income_cses_retro_income(0)
			ReDim mfip_elig_membs_initial_income_cses_prosp_income(0)
			ReDim mfip_elig_membs_new_spouse_earned_income(0)
			ReDim mfip_elig_membs_new_spouse_unearned_income(0)
			ReDim mfip_elig_membs_new_spouse_total_income(0)
			ReDim mfip_elig_membs_self_emp_income(0)
			ReDim mfip_elig_membs_wages_income(0)
			ReDim mfip_elig_membs_total_earned_income(0)
			ReDim mfip_elig_membs_standard_EI_disregard(0)
			ReDim mfip_elig_membs_earned_income_subtotal(0)
			ReDim mfip_elig_membs_earned_income_50_perc_disregard(0)
			ReDim mfip_elig_membs_earned_total_dsrgrd(0)
			ReDim mfip_elig_membs_available_earned_income(0)
			ReDim mfip_elig_membs_allocation_deduction(0)
			ReDim mfip_elig_membs_child_support_deduction(0)
			ReDim mfip_elig_membs_counted_earned_income(0)
			ReDim mfip_elig_membs_total_unearned_income(0)
			ReDim mfip_elig_membs_allocation_balance(0)
			ReDim mfip_elig_membs_child_support_balance(0)
			ReDim mfip_elig_membs_counted_unearned_income(0)
			ReDim mfip_elig_membs_county_88_cses_income(0)
			ReDim mfip_elig_membs_county_88_gaming_income(0)
			ReDim mfip_elig_membs_county_88_200_perc_fpg(0)
			ReDim mfip_elig_membs_county_88_deemers_unmet_need(0)
			ReDim mfip_elig_membs_county_88_allocation(0)
			ReDim mfip_elig_membs_county_88_child_support(0)
			ReDim mfip_elig_membs_county_88_counted_gaming_income(0)
			ReDim mfip_elig_membs_retro_subsidy_amount(0)
			ReDim mfip_elig_membs_prosp_subsidy_amount(0)

			ReDim mfip_elig_membs_deemer_BUSI_inc(0)
			ReDim mfip_elig_membs_deemer_JOBS_inc(0)
			ReDim mfip_elig_membs_deemer_counted_earned_inc(0)
			ReDim mfip_elig_membs_deemer_stndrd_earned_disrgrd(0)
			ReDim mfip_elig_membs_deemer_earned_subtotal(0)
			ReDim mfip_elig_membs_deemer_earned_dsrgrd(0)
			ReDim mfip_elig_membs_deemer_total_dsrgrd(0)
			ReDim mfip_elig_membs_deemer_unearned_inc(0)
			ReDim mfip_elig_membs_deemer_sub_total_counted_inc(0)
			ReDim mfip_elig_membs_deemer_unmet_need(0)
			ReDim mfip_elig_membs_deemer_allocation(0)
			ReDim mfip_elig_membs_deemer_cs_alimny(0)
			ReDim mfip_elig_membs_deemer_counted_income(0)

			'If the case has significant change, there should be a MFSC panel with details of the significant change
			EMReadScreen significant_change_check, 18, 4, 3
			If significant_change_check = "SIGNIFICANT CHANGE" Then
				Call write_value_and_transmit("MFSC", 20, 71)						'navigate to this panel manually to read sig change details
				mfip_sig_change = True

				EMReadScreen mfsc_month_one_of_sig_change, 		7, 13, 40
				EMReadScreen mfsc_month_one_of_sig_change_mo, 	2, 13, 40
				EMReadScreen mfsc_month_one_of_sig_change_yr, 	2, 13, 45
				EMReadScreen mfsc_month_two_of_sig_change,		7, 13, 52
				EMReadScreen mfsc_month_two_of_sig_change_mo, 	2, 13, 52
				EMReadScreen mfsc_month_two_of_sig_change_yr, 	2, 13, 57
				mfsc_month_one_of_sig_change = replace(mfsc_month_one_of_sig_change, " ", "")
				If mfsc_month_one_of_sig_change = "/" Then mfsc_month_one_of_sig_change = ""
				mfsc_month_two_of_sig_change = replace(mfsc_month_two_of_sig_change, " ", "")
				If mfsc_month_two_of_sig_change = "/" Then mfsc_month_two_of_sig_change = ""

				EMReadScreen mfsc_budg_mo_earned_inc, 	9,  6, 34
				EMReadScreen mfsc_budg_mo_deemed_inc, 	9,  7, 34
				EMReadScreen mfsc_budg_mo_unearned_inc, 9,  8, 34
				EMReadScreen mfsc_budg_mo_total_inc, 	9,  9, 34
				EMReadScreen mfsc_budg_mo_net_inc, 		9, 11, 34
				mfsc_budg_mo_earned_inc = trim(mfsc_budg_mo_earned_inc)
				mfsc_budg_mo_deemed_inc = trim(mfsc_budg_mo_deemed_inc)
				mfsc_budg_mo_unearned_inc = trim(mfsc_budg_mo_unearned_inc)
				mfsc_budg_mo_total_inc = trim(mfsc_budg_mo_total_inc)
				mfsc_budg_mo_net_inc = trim(mfsc_budg_mo_net_inc)

				EMReadScreen mfsc_pay_mo_earned_inc, 	9,  6, 53
				EMReadScreen mfsc_pay_mo_deemed_inc, 	9,  7, 53
				EMReadScreen mfsc_pay_mo_unearned_inc,	9,  8, 53
				EMReadScreen mfsc_pay_mo_total_inc, 	9,  9, 53
				mfsc_pay_mo_earned_inc = trim(mfsc_pay_mo_earned_inc)
				mfsc_pay_mo_deemed_inc = trim(mfsc_pay_mo_deemed_inc)
				mfsc_pay_mo_unearned_inc = trim(mfsc_pay_mo_unearned_inc)
				mfsc_pay_mo_total_inc = trim(mfsc_pay_mo_total_inc)

				Call write_value_and_transmit("MFPR", 20, 71)						'now we get to the panel that most ELIG/MFIP starts with
			End If

			row = 7
			elig_memb_count = 0
			Do
				EMReadScreen ref_numb, 2, row, 6

				ReDim preserve mfip_elig_ref_numbs(elig_memb_count)
				ReDim preserve mfip_elig_membs_full_name(elig_memb_count)
				ReDim preserve mfip_elig_membs_last_name_complete(elig_memb_count)
				ReDim preserve mfip_elig_membs_partial_first_name(elig_memb_count)
				ReDim preserve mfip_elig_membs_partial_last_name(elig_memb_count)
				ReDim preserve mfip_elig_membs_request_yn(elig_memb_count)
				ReDim preserve mfip_elig_membs_code(elig_memb_count)
				ReDim preserve mfip_elig_membs_status_info(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemed(elig_memb_count)
				ReDim preserve mfip_elig_membs_counted(elig_memb_count)
				ReDim preserve mfip_elig_membs_eligibility(elig_memb_count)
				ReDim preserve mfip_elig_membs_begin_date(elig_memb_count)
				ReDim preserve mfip_elig_membs_budget_cycle(elig_memb_count)
				ReDim preserve mfip_elig_membs_absence(elig_memb_count)
				ReDim preserve mfip_elig_membs_child_age(elig_memb_count)
				ReDim preserve mfip_elig_membs_citizenship(elig_memb_count)
				ReDim preserve mfip_elig_membs_citizenship_verif(elig_memb_count)
				ReDim preserve mfip_elig_membs_dupl_assist(elig_memb_count)
				ReDim preserve mfip_elig_membs_foster_care(elig_memb_count)
				ReDim preserve mfip_elig_membs_fraud(elig_memb_count)
				ReDim preserve mfip_elig_membs_fs_disq(elig_memb_count)
				ReDim preserve mfip_elig_membs_minor_living_arngmt(elig_memb_count)
				ReDim preserve mfip_elig_membs_post_60_removal(elig_memb_count)
				ReDim preserve mfip_elig_membs_ssi(elig_memb_count)
				ReDim preserve mfip_elig_membs_ssn_code(elig_memb_count)
				ReDim preserve mfip_elig_membs_unit_memb(elig_memb_count)
				ReDim preserve mfip_elig_membs_unlawful_conduct(elig_memb_count)
				ReDim preserve mfip_elig_membs_fs_recvd(elig_memb_count)
				ReDim preserve mfip_elig_membs_es_status_code(elig_memb_count)
				ReDim preserve mfip_elig_membs_es_status_info(elig_memb_count)
				ReDim preserve mfip_memb_cash_portion_code(elig_memb_count)
				ReDim preserve mfip_memb_food_portion_code(elig_memb_count)
				ReDim preserve mfip_memb_state_food_code(elig_memb_count)
				ReDim preserve mfip_memb_sanction_yn(elig_memb_count)
				ReDim preserve mfip_memb_sanction_child_support_test(elig_memb_count)
				ReDim preserve mfip_memb_sanction_drug_felon_test(elig_memb_count)
				ReDim preserve mfip_memb_sanction_emp_services_test(elig_memb_count)
				ReDim preserve mfip_memb_sanction_fin_orient_test(elig_memb_count)
				ReDim preserve mfip_memb_sanction_occurence(elig_memb_count)
				ReDim preserve mfip_memb_sanction_begin_date(elig_memb_count)
				ReDim preserve mfip_memb_sanction_last_sanc_month(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_BUSI_inc_total(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_JOBS_inc_total(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_earned_inc_total(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_stndrd_ei_disregard(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_earned_inc_subtotal(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_earned_inc_disregard(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_avail_earned_inc(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_allocation(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_child_support(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_counted_earned_inc_total(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_UNEA_inc_total(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_allocation_balance(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_child_support_balance(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_counted_UNEA_inc_total(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_income_cses_retro_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_initial_income_cses_prosp_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_new_spouse_earned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_new_spouse_unearned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_new_spouse_total_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_self_emp_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_wages_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_total_earned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_standard_EI_disregard(elig_memb_count)
				ReDim preserve mfip_elig_membs_earned_income_subtotal(elig_memb_count)
				ReDim preserve mfip_elig_membs_earned_income_50_perc_disregard(elig_memb_count)
				ReDim preserve mfip_elig_membs_earned_total_dsrgrd(elig_memb_count)
				ReDim preserve mfip_elig_membs_available_earned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_allocation_deduction(elig_memb_count)
				ReDim preserve mfip_elig_membs_child_support_deduction(elig_memb_count)
				ReDim preserve mfip_elig_membs_counted_earned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_total_unearned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_allocation_balance(elig_memb_count)
				ReDim preserve mfip_elig_membs_child_support_balance(elig_memb_count)
				ReDim preserve mfip_elig_membs_counted_unearned_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_cses_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_gaming_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_200_perc_fpg(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_deemers_unmet_need(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_allocation(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_child_support(elig_memb_count)
				ReDim preserve mfip_elig_membs_county_88_counted_gaming_income(elig_memb_count)
				ReDim preserve mfip_elig_membs_retro_subsidy_amount(elig_memb_count)
				ReDim preserve mfip_elig_membs_prosp_subsidy_amount(elig_memb_count)

				ReDim preserve mfip_elig_membs_deemer_BUSI_inc(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_JOBS_inc(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_counted_earned_inc(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_stndrd_earned_disrgrd(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_earned_subtotal(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_earned_dsrgrd(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_total_dsrgrd(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_unearned_inc(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_sub_total_counted_inc(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_unmet_need(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_allocation(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_cs_alimny(elig_memb_count)
				ReDim preserve mfip_elig_membs_deemer_counted_income(elig_memb_count)

				mfip_elig_ref_numbs(elig_memb_count) = ref_numb
				EMReadScreen full_name_information, 20, row, 10
				full_name_information = trim(full_name_information)
				If InStr(full_name_information, ",") <> 0 Then mfip_elig_membs_last_name_complete(elig_memb_count) = True
				If InStr(full_name_information, ",") = 0 Then mfip_elig_membs_last_name_complete(elig_memb_count) = False

				If mfip_elig_membs_last_name_complete(elig_memb_count) = False Then
					EMReadScreen mfip_elig_membs_partial_last_name(elig_memb_count), 10, row, 10
					EMReadScreen mfip_elig_membs_partial_first_name(elig_memb_count), 21, row, 9
				End If
				If mfip_elig_membs_last_name_complete(elig_memb_count) = True Then
					name_array = split(full_name_information, ",")
					mfip_elig_membs_partial_first_name(elig_memb_count) = trim(name_array(1))
				End If
				name_array = split(full_name_information, " ")
				For each name_parts in name_array
					If name_parts <> "" Then
						If len(name_parts) <> 1 Then mfip_elig_membs_full_name(elig_memb_count) = mfip_elig_membs_full_name(elig_memb_count) & " " & name_parts
					End If
				Next
				mfip_elig_membs_full_name(elig_memb_count) = trim(mfip_elig_membs_full_name(elig_memb_count))
				EMReadScreen mfip_elig_membs_request_yn(elig_memb_count), 1, row, 32
				EMReadScreen mfip_elig_membs_code(elig_memb_count), 1, row, 36
				EMReadScreen mfip_elig_membs_counted(elig_memb_count), 11, row, 41
				EMReadScreen mfip_elig_membs_eligibility(elig_memb_count), 10, row, 53
				EMReadScreen mfip_elig_membs_begin_date(elig_memb_count), 8, row, 67
				EMReadScreen mfip_elig_membs_budget_cycle(elig_memb_count), 1, row, 78

				If mfip_elig_membs_code(elig_memb_count) = "A" Then mfip_elig_membs_status_info(elig_memb_count) = "Eligible"
				If mfip_elig_membs_code(elig_memb_count) = "D" Then mfip_elig_membs_status_info(elig_memb_count) = "Ineligible - Failed SSI, IV-E ADOPTION ASSISTANCE"
				If mfip_elig_membs_code(elig_memb_count) = "F" Then mfip_elig_membs_status_info(elig_memb_count) = "Ineligible - Failed FRAUD, SSN COOP, UNLAWFUL CONDUCT"
				If mfip_elig_membs_code(elig_memb_count) = "G" Then mfip_elig_membs_status_info(elig_memb_count) = "Ineligible - Parent of a minor caregiver"
				If mfip_elig_membs_code(elig_memb_count) = "H" Then mfip_elig_membs_status_info(elig_memb_count) = "Ineligible - Failed CITIZENSHIP, CITIZENSHIP VERIFICATION"
				If mfip_elig_membs_code(elig_memb_count) = "I" Then mfip_elig_membs_status_info(elig_memb_count) = "Ineligible - Failed ABSENCE, DUPLICATE ASSISTANCE, CHILD AGE"
				If mfip_elig_membs_code(elig_memb_count) = "J" Then mfip_elig_membs_status_info(elig_memb_count) = "Ineligible - Failed MFIP PERSON POST 60 REMOVAL"
				If mfip_elig_membs_code(elig_memb_count) = "N" Then mfip_elig_membs_status_info(elig_memb_count) = "Not a Unit Member"
				If mfip_elig_membs_code(elig_memb_count) = "A" Then mfip_elig_membs_deemed(elig_memb_count) = "Unit Member"
				If mfip_elig_membs_code(elig_memb_count) = "F" or mfip_elig_membs_code(elig_memb_count) = "G" or mfip_elig_membs_code(elig_memb_count) = "H" or mfip_elig_membs_code(elig_memb_count) = "J" Then mfip_elig_membs_deemed(elig_memb_count) = "Deemed"
				If mfip_elig_membs_code(elig_memb_count) = "D" or mfip_elig_membs_code(elig_memb_count) = "I" or mfip_elig_membs_code(elig_memb_count) = "N" Then mfip_elig_membs_deemed(elig_memb_count) = "Not Deemed"
				mfip_elig_membs_counted(elig_memb_count) = trim(mfip_elig_membs_counted(elig_memb_count))
				mfip_elig_membs_eligibility(elig_memb_count) = trim(mfip_elig_membs_eligibility(elig_memb_count))
				If mfip_elig_membs_budget_cycle(elig_memb_count) = "P" Then mfip_elig_membs_budget_cycle(elig_memb_count) = "Prospective"
				If mfip_elig_membs_budget_cycle(elig_memb_count) = "R" Then mfip_elig_membs_budget_cycle(elig_memb_count) = "Retrospective"

				Call write_value_and_transmit("X", row, 3)
				EMReadScreen mfip_elig_membs_absence(elig_memb_count), 			6, 7, 17
				EMReadScreen mfip_elig_membs_child_age(elig_memb_count), 		6, 8, 17
				EMReadScreen mfip_elig_membs_citizenship(elig_memb_count), 		6, 9, 17
				EMReadScreen mfip_elig_membs_citizenship_verif(elig_memb_count),6, 10, 17
				EMReadScreen mfip_elig_membs_dupl_assist(elig_memb_count), 		6, 11, 17
				EMReadScreen mfip_elig_membs_foster_care(elig_memb_count), 		6, 12, 17
				EMReadScreen mfip_elig_membs_fraud(elig_memb_count), 			6, 13, 17
				EMReadScreen mfip_elig_membs_fs_disq(elig_memb_count), 			6, 17, 17

				mfip_elig_membs_absence(elig_memb_count) = trim(mfip_elig_membs_absence(elig_memb_count))
				mfip_elig_membs_child_age(elig_memb_count) = trim(mfip_elig_membs_child_age(elig_memb_count))
				mfip_elig_membs_citizenship(elig_memb_count) = trim(mfip_elig_membs_citizenship(elig_memb_count))
				mfip_elig_membs_citizenship_verif(elig_memb_count) = trim(mfip_elig_membs_citizenship_verif(elig_memb_count))
				mfip_elig_membs_dupl_assist(elig_memb_count) = trim(mfip_elig_membs_dupl_assist(elig_memb_count))
				mfip_elig_membs_foster_care(elig_memb_count) = trim(mfip_elig_membs_foster_care(elig_memb_count))
				mfip_elig_membs_fraud(elig_memb_count) = trim(mfip_elig_membs_fraud(elig_memb_count))
				mfip_elig_membs_fs_disq(elig_memb_count) = trim(mfip_elig_membs_fs_disq(elig_memb_count))


				EMReadScreen mfip_elig_membs_minor_living_arngmt(elig_memb_count), 	6, 7, 52
				EMReadScreen mfip_elig_membs_post_60_removal(elig_memb_count), 		6, 8, 52
				EMReadScreen mfip_elig_membs_ssi(elig_memb_count), 					6, 9, 52
				EMReadScreen mfip_elig_membs_ssn_code(elig_memb_count), 			6, 10, 52
				EMReadScreen mfip_elig_membs_unit_memb(elig_memb_count), 			6, 11, 52
				EMReadScreen mfip_elig_membs_unlawful_conduct(elig_memb_count), 	6, 12, 52
				EMReadScreen mfip_elig_membs_fs_recvd(elig_memb_count), 			6, 17, 52

				mfip_elig_membs_minor_living_arngmt(elig_memb_count) = trim(mfip_elig_membs_minor_living_arngmt(elig_memb_count))
				mfip_elig_membs_post_60_removal(elig_memb_count) = trim(mfip_elig_membs_post_60_removal(elig_memb_count))
				mfip_elig_membs_ssi(elig_memb_count) = trim(mfip_elig_membs_ssi(elig_memb_count))
				mfip_elig_membs_ssn_code(elig_memb_count) = trim(mfip_elig_membs_ssn_code(elig_memb_count))
				mfip_elig_membs_unit_memb(elig_memb_count) = trim(mfip_elig_membs_unit_memb(elig_memb_count))
				mfip_elig_membs_unlawful_conduct(elig_memb_count) = trim(mfip_elig_membs_unlawful_conduct(elig_memb_count))
				mfip_elig_membs_fs_recvd(elig_memb_count) = trim(mfip_elig_membs_fs_recvd(elig_memb_count))

				transmit

				Call write_value_and_transmit("X", row, 64)
				EMReadScreen emps_exists_for_memb, 19, 24, 2
				If emps_exists_for_memb = "EMPS DOES NOT EXIST" Then
					EMWriteScreen " ", row, 64
				Else
					EMReadScreen mfip_elig_membs_es_status_code(elig_memb_count), 2, 9, 22
					EMReadScreen mfip_elig_membs_es_status_info(elig_memb_count), 30, 9, 25
					mfip_elig_membs_es_status_code(elig_memb_count) = trim(mfip_elig_membs_es_status_code(elig_memb_count))
					mfip_elig_membs_es_status_info(elig_memb_count) = trim(mfip_elig_membs_es_status_info(elig_memb_count))
					transmit
				End If

				row = row + 1
				elig_memb_count = elig_memb_count + 1
				EMReadScreen next_ref_numb, 2, row, 6
                If row = 18 then
                    PF8
                    row = 7
                End if
			Loop until next_ref_numb = "  "

			transmit			'MFCR

			EMReadScreen mfip_case_test_appl_withdraw, 		6, 6, 7
			EMReadScreen mfip_case_test_asset, 				6, 7, 7
			EMReadScreen mfip_case_test_death_applicant, 	6, 8, 7
			EMReadScreen mfip_case_test_dupl_assist, 		6, 9, 7
			EMReadScreen mfip_case_test_elig_child, 		6, 10, 7
			EMReadScreen mfip_case_test_fail_coop, 			6, 11, 7
			EMReadScreen mfip_case_test_fail_file, 			6, 12, 7
			EMReadScreen mfip_case_test_initial_income, 	6, 13, 7
			EMReadScreen mfip_case_test_minor_liv_arrange, 	6, 14, 7

			EMReadScreen mfip_case_test_monthly_income, 		6, 6, 46
			EMReadScreen mfip_case_test_post_60_disq, 			6, 7, 46
			EMReadScreen mfip_case_test_residence, 				6, 8, 46
			EMReadScreen mfip_case_test_sanction_limit, 		6, 9, 46
			EMReadScreen mfip_case_test_strike, 				6, 10, 46
			EMReadScreen mfip_case_test_TANF_time_limit, 		6, 11, 46
			EMReadScreen mfip_case_test_transfer_asset, 		6, 12, 46
			EMReadScreen mfip_case_test_verif, 					6, 13, 46
			EMReadScreen mfip_case_test_275_new_spouse_income, 	6, 14, 46

			EMReadScreen mfip_fs_case_test_fail_coop_snap_qc, 		6, 17, 7
			EMReadScreen mfip_fs_case_test_opt_out_cash, 			6, 17, 46
			EMReadScreen mfip_fs_case_test_opt_out_housing_grant, 	6, 18, 46

			If mfip_fs_case_test_opt_out_cash = "FAILED" Then mfip_cash_opt_out = True
			If mfip_fs_case_test_opt_out_housing_grant = "FAILED" Then mfip_HG_opt_out = True

			mfip_case_test_appl_withdraw = trim(mfip_case_test_appl_withdraw)
			mfip_case_test_asset = trim(mfip_case_test_asset)
			mfip_case_test_death_applicant = trim(mfip_case_test_death_applicant)
			mfip_case_test_dupl_assist = trim(mfip_case_test_dupl_assist)
			mfip_case_test_elig_child = trim(mfip_case_test_elig_child)
			mfip_case_test_fail_coop = trim(mfip_case_test_fail_coop)
			mfip_case_test_fail_file = trim(mfip_case_test_fail_file)
			mfip_case_test_initial_income = trim(mfip_case_test_initial_income)
			mfip_case_test_minor_liv_arrange = trim(mfip_case_test_minor_liv_arrange)
			mfip_case_test_monthly_income = trim(mfip_case_test_monthly_income)
			mfip_case_test_post_60_disq = trim(mfip_case_test_post_60_disq)
			mfip_case_test_residence = trim(mfip_case_test_residence)
			mfip_case_test_sanction_limit = trim(mfip_case_test_sanction_limit)
			mfip_case_test_strike = trim(mfip_case_test_strike)
			mfip_case_test_TANF_time_limit = trim(mfip_case_test_TANF_time_limit)
			mfip_case_test_transfer_asset = trim(mfip_case_test_transfer_asset)
			mfip_case_test_verif = trim(mfip_case_test_verif)
			mfip_case_test_275_new_spouse_income = trim(mfip_case_test_275_new_spouse_income)
			mfip_fs_case_test_fail_coop_snap_qc = trim(mfip_fs_case_test_fail_coop_snap_qc)
			mfip_fs_case_test_opt_out_cash = trim(mfip_fs_case_test_opt_out_cash)
			mfip_fs_case_test_opt_out_housing_grant = trim(mfip_fs_case_test_opt_out_housing_grant)

			Call write_value_and_transmit("X", 7, 5)						'ASSETS
			EMReadScreen mfip_counted_asset_CASH, 	10, 6, 47
			EMReadScreen mfip_counted_asset_ACCT, 	10, 7, 47
			EMReadScreen mfip_counted_asset_SECU, 	10, 8, 47
			EMReadScreen mfip_counted_asset_CARS, 	10, 9, 47
			EMReadScreen mfip_counted_asset_SPON, 	10, 10, 47
			EMReadScreen mfip_counted_asset_total, 	10, 12, 47
			EMReadScreen mfip_counted_asset_max, 	10, 13, 47

			mfip_counted_asset_CASH = trim(mfip_counted_asset_CASH)
			mfip_counted_asset_ACCT = trim(mfip_counted_asset_ACCT)
			mfip_counted_asset_SECU = trim(mfip_counted_asset_SECU)
			mfip_counted_asset_CARS = trim(mfip_counted_asset_CARS)
			mfip_counted_asset_SPON = trim(mfip_counted_asset_SPON)
			mfip_counted_asset_total = trim(mfip_counted_asset_total)
			mfip_counted_asset_max = trim(mfip_counted_asset_max)

			transmit

			Call write_value_and_transmit("X", 7, 5)						'FAIL TO FILE
			EMReadScreen mfip_case_test_fail_file_hrf, 6, 9, 47
			EMReadScreen mfip_case_test_fail_file_revw, 6, 10, 47

			mfip_case_test_fail_file_hrf = UCase(trim(mfip_case_test_fail_file_hrf))
			mfip_case_test_fail_file_revw = UCase(trim(mfip_case_test_fail_file_revw))
			transmit

			If mfip_case_test_verif = "FAILED" Then

				Call write_value_and_transmit("X", 13, 44)						'ASSETS

				EMReadScreen mfip_verif_ACCT, 6, 5, 28
				EMReadScreen mfip_verif_BUSI, 6, 6, 28
				EMReadScreen mfip_verif_CARS, 6, 7, 28
				EMReadScreen mfip_verif_JOBS, 6, 8, 28
				EMReadScreen mfip_verif_MEMB_dob, 6, 9, 28
				EMReadScreen mfip_verif_MEMB_id, 6, 10, 28
				EMReadScreen mfip_verif_PARE, 6, 11, 28
				EMReadScreen mfip_verif_PREG, 6, 12, 28
				EMReadScreen mfip_verif_RBIC, 6, 13, 28
				EMReadScreen mfip_verif_ADDR, 6, 14, 28
				EMReadScreen mfip_verif_SCHL, 6, 15, 28
				EMReadScreen mfip_verif_SECU, 6, 16, 28
				EMReadScreen mfip_verif_SHEL, 6, 17, 28
				EMReadScreen mfip_verif_SPON, 6, 18, 28
				EMReadScreen mfip_verif_UNEA, 6, 19, 28
				EMReadScreen mfip_verif_MEMI, 6, 20, 28

				mfip_verif_ACCT = UCase(mfip_verif_ACCT)
				mfip_verif_BUSI = UCase(mfip_verif_BUSI)
				mfip_verif_CARS = UCase(mfip_verif_CARS)
				mfip_verif_JOBS = UCase(mfip_verif_JOBS)
				mfip_verif_MEMB_dob = UCase(mfip_verif_MEMB_dob)
				mfip_verif_MEMB_id = UCase(mfip_verif_MEMB_id)
				mfip_verif_PARE = UCase(mfip_verif_PARE)
				mfip_verif_PREG = UCase(mfip_verif_PREG)
				mfip_verif_RBIC = UCase(mfip_verif_RBIC)
				mfip_verif_ADDR = UCase(mfip_verif_ADDR)
				mfip_verif_SCHL = UCase(mfip_verif_SCHL)
				mfip_verif_SECU = UCase(mfip_verif_SECU)
				mfip_verif_SHEL = UCase(mfip_verif_SHEL)
				mfip_verif_SPON = UCase(mfip_verif_SPON)
				mfip_verif_UNEA = UCase(mfip_verif_UNEA)
				mfip_verif_MEMI = UCase(mfip_verif_MEMI)

				transmit
			End if

			Call write_value_and_transmit("X", 13, 5)						'INITIAL INCOME
			EMReadScreen mfip_initial_income_earned, 			10, 8, 51
			EMReadScreen mfip_initial_income_deoendant_care, 	10, 9, 51
			EMReadScreen mfip_initial_income_unearned, 			10, 10, 51
			EMReadScreen mfip_initial_income_deemed, 			10, 11, 51
			EMReadScreen mfip_initial_income_cses_exclusion, 	10, 12, 51
			EMReadScreen mfip_initial_income_total, 			10, 13, 51
			EMReadScreen mfip_initial_income_family_wage_level, 10, 15, 51

			mfip_initial_income_earned = trim(mfip_initial_income_earned)
			mfip_initial_income_deoendant_care = trim(mfip_initial_income_deoendant_care)
			mfip_initial_income_unearned = trim(mfip_initial_income_unearned)
			mfip_initial_income_deemed = trim(mfip_initial_income_deemed)
			mfip_initial_income_cses_exclusion = trim(mfip_initial_income_cses_exclusion)
			mfip_initial_income_total = trim(mfip_initial_income_total)
			mfip_initial_income_family_wage_level = trim(mfip_initial_income_family_wage_level)

			'TODO - Read each person's information in the pop-ups
			Call write_value_and_transmit("X", 8, 20)		'Member Initial Earned Income
			EMReadScreen back_to_menu, 14, 6, 29
			Do while back_to_menu <> "Initial Income"
				EMReadScreen pop_up_name, 40, 8, 28
				pop_up_name = trim(pop_up_name)
				pop_up_name_array = split(pop_up_name, ",")
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If mfip_elig_membs_last_name_complete(case_memb) = False Then
						pop_up_last_name = left(pop_up_name, 10)
						pop_up_first_name = trim(left(pop_up_name_array(1), 10))
						pop_up_name = pop_up_last_name & " " & pop_up_first_name
					End If
					If mfip_elig_membs_last_name_complete(case_memb) = True Then
						pop_up_last_name = trim(pop_up_name_array(0))
						pop_up_first_name = trim(left(pop_up_name_array(1), len(mfip_elig_membs_partial_first_name(case_memb))))
						pop_up_name = pop_up_last_name & ", " & pop_up_first_name
					End If
					If pop_up_name = mfip_elig_membs_full_name(case_memb) Then
						EMReadScreen mfip_elig_membs_initial_BUSI_inc_total(case_memb), 		10, 11, 54
						EMReadScreen mfip_elig_membs_initial_JOBS_inc_total(case_memb), 		10, 12, 54
						EMReadScreen mfip_elig_membs_initial_earned_inc_total(case_memb), 		10, 13, 54
						EMReadScreen mfip_elig_membs_initial_stndrd_ei_disregard(case_memb), 	10, 14, 54
						EMReadScreen mfip_elig_membs_initial_earned_inc_subtotal(case_memb), 	10, 15, 54
						EMReadScreen mfip_elig_membs_initial_earned_inc_disregard(case_memb), 	10, 16, 54
						EMReadScreen mfip_elig_membs_initial_avail_earned_inc(case_memb), 		10, 17, 54
						EMReadScreen mfip_elig_membs_initial_allocation(case_memb), 			10, 18, 54
						EMReadScreen mfip_elig_membs_initial_child_support(case_memb), 			10, 19, 54
						EMReadScreen mfip_elig_membs_initial_counted_earned_inc_total(case_memb), 10, 20, 54

						mfip_elig_membs_initial_BUSI_inc_total(case_memb) = trim(mfip_elig_membs_initial_BUSI_inc_total(case_memb))
						mfip_elig_membs_initial_JOBS_inc_total(case_memb) = trim(mfip_elig_membs_initial_JOBS_inc_total(case_memb))
						mfip_elig_membs_initial_earned_inc_total(case_memb) = trim(mfip_elig_membs_initial_earned_inc_total(case_memb))
						mfip_elig_membs_initial_stndrd_ei_disregard(case_memb) = trim(mfip_elig_membs_initial_stndrd_ei_disregard(case_memb))
						mfip_elig_membs_initial_earned_inc_subtotal(case_memb) = trim(mfip_elig_membs_initial_earned_inc_subtotal(case_memb))
						mfip_elig_membs_initial_earned_inc_disregard(case_memb) = trim(mfip_elig_membs_initial_earned_inc_disregard(case_memb))
						mfip_elig_membs_initial_avail_earned_inc(case_memb) = trim(mfip_elig_membs_initial_avail_earned_inc(case_memb))
						mfip_elig_membs_initial_allocation(case_memb) = trim(mfip_elig_membs_initial_allocation(case_memb))
						mfip_elig_membs_initial_child_support(case_memb) = trim(mfip_elig_membs_initial_child_support(case_memb))
						mfip_elig_membs_initial_counted_earned_inc_total(case_memb) = trim(mfip_elig_membs_initial_counted_earned_inc_total(case_memb))
					End If
				Next
				transmit

				EMReadScreen back_to_menu, 14, 6, 29
			Loop

			If mfip_initial_income_deoendant_care <> "0.00" Then 			''Depended Care Initial Income calculation pop-up
				Call write_value_and_transmit("X", 9, 20)
			End If

			Call write_value_and_transmit("X", 10, 20)		'Member Initial Unearned Income
			Do
				EMReadScreen pop_up_name, 40, 8, 28
				pop_up_name = trim(pop_up_name)
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If pop_up_name = mfip_elig_membs_full_name(case_memb) Then
						EMReadScreen mfip_elig_membs_initial_UNEA_inc_total(case_memb), 		10, 11, 49
						EMReadScreen mfip_elig_membs_initial_allocation_balance(case_memb), 	10, 12, 49
						EMReadScreen mfip_elig_membs_initial_child_support_balance(case_memb), 	10, 13, 49
						EMReadScreen mfip_elig_membs_initial_counted_UNEA_inc_total(case_memb), 10, 14, 49

						mfip_elig_membs_initial_UNEA_inc_total(case_memb) = trim(mfip_elig_membs_initial_UNEA_inc_total(case_memb))
						mfip_elig_membs_initial_allocation_balance(case_memb) = trim(mfip_elig_membs_initial_allocation_balance(case_memb))
						mfip_elig_membs_initial_child_support_balance(case_memb) = trim(mfip_elig_membs_initial_child_support_balance(case_memb))
						 mfip_elig_membs_initial_counted_UNEA_inc_total(case_memb) = trim(mfip_elig_membs_initial_counted_UNEA_inc_total(case_memb))
					End If
				Next
				transmit

				EMReadScreen back_to_menu, 14, 6, 29
			Loop until back_to_menu = "Initial Income"

			If mfip_initial_income_deemed <> "0.00" Then 			'Deemed Initial Income calculation pop-up
				Call write_value_and_transmit("X", 11, 20)

				Do
					EMReadScreen pop_up_name, 40, 8, 28
					pop_up_name = trim(pop_up_name)
					For case_memb = 0 to UBound(mfip_elig_ref_numbs)
						If pop_up_name = mfip_elig_membs_full_name(case_memb) Then
							' EMReadScreen mfip_elig_membs_deemer_initial_BUSI_inc_total(case_memb), 			9, 9, 52
							' EMReadScreen mfip_elig_membs_deemer_initial_JOBS_inc_total(case_memb), 			9, 10, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_earned_inc_total(case_memb), 		9, 11, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_stndrd_ei_disregard(case_memb), 	9, 12, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_earned_inc_subtotal(case_memb), 	9, 13, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_earned_inc_disregard(case_memb), 	9, 14, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_unearned_inc(case_memb), 			9, 15, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_sub_total_counted_income(case_memb),9, 17, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_allocation(case_memb), 				9, 18, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_child_support(case_memb), 			9, 19, 54
							' EMReadScreen mfip_elig_membs_deemer_initial_counted_income_total(case_memb),	9, 20, 54
							'
							' mfip_elig_membs_deemer_initial_BUSI_inc_total(case_memb) = trim(mfip_elig_membs_deemer_initial_BUSI_inc_total(case_memb))
							' mfip_elig_membs_deemer_initial_JOBS_inc_total(case_memb) = trim(mfip_elig_membs_deemer_initial_JOBS_inc_total(case_memb))
							' mfip_elig_membs_deemer_initial_earned_inc_total(case_memb) = trim(mfip_elig_membs_deemer_initial_earned_inc_total(case_memb))
							' mfip_elig_membs_deemer_initial_stndrd_ei_disregard(case_memb) = trim(mfip_elig_membs_deemer_initial_stndrd_ei_disregard(case_memb))
							' mfip_elig_membs_deemer_initial_earned_inc_subtotal(case_memb) = trim(mfip_elig_membs_deemer_initial_earned_inc_subtotal(case_memb))
							' mfip_elig_membs_deemer_initial_earned_inc_disregard(case_memb) = trim(mfip_elig_membs_deemer_initial_earned_inc_disregard(case_memb))
							' mfip_elig_membs_deemer_initial_unearned_inc(case_memb) = trim(mfip_elig_membs_deemer_initial_unearned_inc(case_memb))
							' mfip_elig_membs_deemer_initial_sub_total_counted_income(case_memb) = trim(mfip_elig_membs_deemer_initial_sub_total_counted_income(case_memb))
							' mfip_elig_membs_deemer_initial_allocation(case_memb) = trim(mfip_elig_membs_deemer_initial_allocation(case_memb))
							' mfip_elig_membs_deemer_initial_child_support(case_memb) = trim(mfip_elig_membs_deemer_initial_child_support(case_memb))
							' mfip_elig_membs_deemer_initial_counted_income_total(case_memb) = trim(mfip_elig_membs_deemer_initial_counted_income_total(case_memb))

						End If
					Next
					transmit

					EMReadScreen back_to_menu, 14, 6, 29
				Loop until back_to_menu = "Initial Income"
			End If

			Call write_value_and_transmit("X", 12, 20)				'CSES Exclusion Initiall Income calculation pop-up
			EMWaitReady 0, 0
			EMReadScreen mfip_initial_income_cses_income, 10, 9, 52
			EMReadScreen mfip_initial_income_cses_child_count, 2, 11, 37

			mfip_initial_income_cses_income = trim(mfip_initial_income_cses_income)
			mfip_initial_income_cses_child_count = trim(mfip_initial_income_cses_child_count)

			Call write_value_and_transmit("X", 9, 20)				'open cses initial income pop-up'

			EMReadScreen mfip_initial_income_net_cses_income, 10, 19, 44
			mfip_initial_income_net_cses_income = trim(mfip_initial_income_net_cses_income)
			mfcr_row = 7
			Do
				EMReadScreen ref_numb, 2, mfcr_row, 7

				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If ref_numb = mfip_elig_ref_numbs(case_memb) Then
						EMReadScreen mfip_elig_membs_initial_income_cses_retro_income(case_memb), 10, mfcr_row, 41
						EMReadScreen mfip_elig_membs_initial_income_cses_prosp_income(case_memb), 10, mfcr_row, 54

						mfip_elig_membs_initial_income_cses_retro_income(case_memb) = trim(mfip_elig_membs_initial_income_cses_retro_income(case_memb))
						mfip_elig_membs_initial_income_cses_prosp_income(case_memb) = trim(mfip_elig_membs_initial_income_cses_prosp_income(case_memb))
					End If
				Next

				mfcr_row = mfcr_row + 1
				EMReadScreen next_ref_numb, 2, mfcr_row, 3
			Loop until next_ref_numb = "  "

			PF3			'back to CSES Exclusion caclulaiton
			PF3			'back to initial income calculation
			PF3			'back to main mf elig panel'

			Call write_value_and_transmit("X", 14, 44)						'NEW SPOUSE 275% INCOME
			EMReadScreen mfip_12_month_start_date, 				8, 6, 46
			EMReadScreen mfip_designated_spouse_ref_numb, 		2, 7, 46
			EMReadScreen mfip_new_spouse_inc_earned, 			10, 11, 57
			EMReadScreen mfip_new_spouse_inc_unearned, 			10, 12, 57
			EMReadScreen mfip_new_spouse_inc_deemed_earned, 	10, 13, 57
			EMReadScreen mfip_new_spouse_inc_deemed_unearned, 	10, 14, 57
			EMReadScreen mfip_new_spouse_inc_total, 			10, 16, 57
			EMReadScreen mfip_275_fpg_amt, 						10, 18, 57
			EMReadScreen mfip_hh_size_fornew_spouse_calc, 		2, 18, 51

			mfip_12_month_start_date = trim(mfip_12_month_start_date)
			mfip_designated_spouse_ref_numb = trim(mfip_designated_spouse_ref_numb)
			mfip_new_spouse_inc_earned = trim(mfip_new_spouse_inc_earned)
			mfip_new_spouse_inc_unearned = trim(mfip_new_spouse_inc_unearned)
			mfip_new_spouse_inc_deemed_earned = trim(mfip_new_spouse_inc_deemed_earned)
			mfip_new_spouse_inc_deemed_unearned = trim(mfip_new_spouse_inc_deemed_unearned)
			mfip_new_spouse_inc_total = trim(mfip_new_spouse_inc_total)
			mfip_275_fpg_amt = trim(mfip_275_fpg_amt)
			mfip_hh_size_fornew_spouse_calc = trim(mfip_hh_size_fornew_spouse_calc)

			Call write_value_and_transmit("X", 11, 20)		'Member earned and unearned for New Spouse calculation
			Do
				EMReadScreen pop_up_name, 35, 7, 25
				pop_up_name = trim(pop_up_name)
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If pop_up_name = mfip_elig_membs_full_name(case_memb) Then

						EMReadScreen mfip_elig_membs_new_spouse_earned_income(case_memb), 	10, 9, 48
						EMReadScreen mfip_elig_membs_new_spouse_unearned_income(case_memb), 10, 10, 48
						EMReadScreen mfip_elig_membs_new_spouse_total_income(case_memb), 	10, 11, 48

						mfip_elig_membs_new_spouse_earned_income(case_memb) = trim(mfip_elig_membs_new_spouse_earned_income(case_memb))
						mfip_elig_membs_new_spouse_unearned_income(case_memb) = trim(mfip_elig_membs_new_spouse_unearned_income(case_memb))
						mfip_elig_membs_new_spouse_total_income(case_memb) = trim(mfip_elig_membs_new_spouse_total_income(case_memb))
					End If
				Next
				transmit

				EMReadScreen back_to_menu, 17, 7, 22
			Loop until back_to_menu = "Designated Spouse"

			'TODO - Read the deemed pop-ups
			If mfip_new_spouse_inc_deemed_earned <> "0.00" Then
				' Call write_value_and_transmit("X", 13, 20)		'Member deemed earned for New Spouse calculation
			End If
			If mfip_new_spouse_inc_deemed_unearned <> "0.00" Then
				' Call write_value_and_transmit("X", 14, 20)		'Member deemed unearned for New Spouse calculation
			End If

			PF3

			transmit			'MFBF
			mfbf_row = 7
			Do
				EMReadScreen ref_numb, 2, mfbf_row, 3

				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If ref_numb = mfip_elig_ref_numbs(case_memb) Then
						EMReadScreen mfip_memb_cash_portion_code(case_memb), 	1, mfbf_row, 37
						EMReadScreen mfip_memb_food_portion_code(case_memb), 	1, mfbf_row, 45
						EMReadScreen mfip_memb_state_food_code(case_memb), 		1, mfbf_row, 54
						EMReadScreen mfip_memb_sanction_yn(case_memb), 			1, mfbf_row, 68
						If mfip_memb_sanction_yn(case_memb) = "Y" Then mfip_case_in_sancttion = True

						Call write_value_and_transmit("X", mfbf_row, 62)
						EMReadScreen mfip_memb_sanction_child_support_test(case_memb),	6, 7, 12
						EMReadScreen mfip_memb_sanction_drug_felon_test(case_memb), 	6, 7, 12
						EMReadScreen mfip_memb_sanction_emp_services_test(case_memb), 	6, 7, 12
						EMReadScreen mfip_memb_sanction_fin_orient_test(case_memb), 	6, 7, 12

						EMReadScreen mfip_memb_sanction_occurence(case_memb), 1, 12, 21
						EMReadScreen mfip_memb_sanction_begin_date(case_memb), 7, 12, 40
						EMReadScreen mfip_memb_sanction_last_sanc_month(case_memb), 55, 12, 62
						transmit
					End If
				Next

				mfbf_row = mfbf_row + 1
				EMReadScreen next_ref_numb, 2, mfbf_row, 3
			Loop until next_ref_numb = "  "

			EMReadScreen mfip_case_sanction_percent, 3, 18, 28
			EMReadScreen mfip_case_sanction_vendor_yn, 1, 18, 48
			EMReadScreen mfip_case_sanction_last_vendor_month, 7, 18, 68

			mfip_case_sanction_percent = trim(mfip_case_sanction_percent)
			mfip_case_sanction_vendor_yn = trim(mfip_case_sanction_vendor_yn)
			mfip_case_sanction_last_vendor_month = trim(mfip_case_sanction_last_vendor_month)

			transmit			'MFB1
			EMReadScreen mfip_case_budg_family_wage_level, 				10, 5, 32
			EMReadScreen mfip_case_budg_monthly_earned_income, 			10, 6, 32
			EMReadScreen mfip_case_budg_wage_level_earned_inc_difference, 10, 7, 32
			EMReadScreen mfip_case_budg_transitional_standard, 			10, 9, 32
			EMReadScreen mfip_case_budg_monthly_need, 					10, 10, 32
			EMReadScreen mfip_case_budg_unearned_income, 				10, 11, 32
			EMReadScreen mfip_case_budg_deemed_income, 					10, 12, 32
			EMReadScreen mfip_case_budg_cses_exclusion, 				10, 13, 32
			EMReadScreen mfip_case_budg_unmet_need, 					10, 14, 32
			EMReadScreen mfip_case_budg_unmet_need_food_potion, 		10, 15, 32
			EMReadScreen mfip_case_budg_tribal_counted_income, 			10, 16, 32
			EMReadScreen mfip_case_budg_unmet_need_cash_portion, 		10, 17, 32
			EMReadScreen mfip_case_budg_deduction_subsidy_tribal_cses, 	10, 18, 32


			EMReadScreen mfip_case_budg_net_food_portion, 			10, 5, 71
			EMReadScreen mfip_case_budg_net_cash_portion, 			10, 6, 71
			EMReadScreen mfip_case_budg_net_unmet_need, 			10, 7, 71
			EMReadScreen mfip_case_budg_deduction_sanction_vendor, 	10, 8, 71
			EMReadScreen mfip_case_budg_unmet_neet_subtotal, 		10, 9, 71
			EMReadScreen mfip_case_budg_subtotal_food_portion, 		10, 11, 71
			EMReadScreen mfip_case_budg_food_portion_deduction, 	10, 12, 71
			EMReadScreen mfip_case_budg_entitlement_food_portion, 	10, 13, 71
			EMReadScreen mfip_case_budg_entitlement_housing_grant, 	10, 15, 71

			mfip_case_budg_family_wage_level = trim(mfip_case_budg_family_wage_level)
			mfip_case_budg_monthly_earned_income = trim(mfip_case_budg_monthly_earned_income)
			mfip_case_budg_wage_level_earned_inc_difference = trim(mfip_case_budg_wage_level_earned_inc_difference)
			mfip_case_budg_transitional_standard = trim(mfip_case_budg_transitional_standard)
			mfip_case_budg_monthly_need = trim(mfip_case_budg_monthly_need)
			mfip_case_budg_unearned_income = trim(mfip_case_budg_unearned_income)
			mfip_case_budg_deemed_income = trim(mfip_case_budg_deemed_income)
			mfip_case_budg_cses_exclusion = trim(mfip_case_budg_cses_exclusion)
			mfip_case_budg_unmet_need = trim(mfip_case_budg_unmet_need)
			mfip_case_budg_unmet_need_food_potion = trim(mfip_case_budg_unmet_need_food_potion)
			mfip_case_budg_tribal_counted_income = trim(mfip_case_budg_tribal_counted_income)
			mfip_case_budg_unmet_need_cash_portion = trim(mfip_case_budg_unmet_need_cash_portion)
			mfip_case_budg_deduction_subsidy_tribal_cses = trim(mfip_case_budg_deduction_subsidy_tribal_cses)

			mfip_case_budg_net_food_portion = trim(mfip_case_budg_net_food_portion)
			mfip_case_budg_net_cash_portion = trim(mfip_case_budg_net_cash_portion)
			mfip_case_budg_net_unmet_need = trim(mfip_case_budg_net_unmet_need)
			mfip_case_budg_deduction_sanction_vendor = trim(mfip_case_budg_deduction_sanction_vendor)
			mfip_case_budg_unmet_neet_subtotal = trim(mfip_case_budg_unmet_neet_subtotal)
			mfip_case_budg_subtotal_food_portion = trim(mfip_case_budg_subtotal_food_portion)
			mfip_case_budg_food_portion_deduction = trim(mfip_case_budg_food_portion_deduction)
			mfip_case_budg_entitlement_food_portion = trim(mfip_case_budg_entitlement_food_portion)
			mfip_case_budg_entitlement_housing_grant = trim(mfip_case_budg_entitlement_housing_grant)

			Call write_value_and_transmit("X", 6, 3)		' member specific EARNED INCOME
			EMReadScreen still_in_menu, 12, 5, 32

			Do while still_in_menu = "Maxis Person"
				EMReadScreen pop_up_name, 40, 8, 28
				pop_up_name = trim(pop_up_name)
				pop_up_name_array = split(pop_up_name, ",")
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If mfip_elig_membs_last_name_complete(case_memb) = False Then
						pop_up_last_name = left(pop_up_name, 10)
						pop_up_first_name = trim(left(pop_up_name_array(1), 10))
						compare_pop_up_name = pop_up_last_name & " " & pop_up_first_name
					End If
					If mfip_elig_membs_last_name_complete(case_memb) = True Then
						pop_up_last_name = trim(pop_up_name_array(0))
						pop_up_first_name = left(trim(pop_up_name_array(1)), len(mfip_elig_membs_partial_first_name(case_memb)))
						compare_pop_up_name = pop_up_last_name & ", " & pop_up_first_name
					End If
					If compare_pop_up_name = mfip_elig_membs_full_name(case_memb) Then

						EMReadScreen mfip_elig_membs_self_emp_income(case_memb), 				10, 11, 54
						EMReadScreen mfip_elig_membs_wages_income(case_memb), 					10, 12, 54
						EMReadScreen mfip_elig_membs_total_earned_income(case_memb), 			10, 13, 54
						EMReadScreen mfip_elig_membs_standard_EI_disregard(case_memb), 			10, 14, 54
						EMReadScreen mfip_elig_membs_earned_income_subtotal(case_memb), 		10, 15, 54
						EMReadScreen mfip_elig_membs_earned_income_50_perc_disregard(case_memb), 10, 16, 54
						EMReadScreen mfip_elig_membs_available_earned_income(case_memb), 		10, 17, 54
						EMReadScreen mfip_elig_membs_allocation_deduction(case_memb), 			10, 18, 54
						EMReadScreen mfip_elig_membs_child_support_deduction(case_memb), 		10, 19, 54
						EMReadScreen mfip_elig_membs_counted_earned_income(case_memb), 			10, 20, 54

						mfip_elig_membs_standard_EI_disregard(case_memb) = mfip_elig_membs_standard_EI_disregard(case_memb) * 1
						mfip_elig_membs_earned_income_50_perc_disregard(case_memb) = mfip_elig_membs_earned_income_50_perc_disregard(case_memb) * 1
						mfip_elig_membs_earned_total_dsrgrd(case_memb) = mfip_elig_membs_earned_income_50_perc_disregard(case_memb) + mfip_elig_membs_standard_EI_disregard(case_memb)

						mfip_elig_membs_self_emp_income(case_memb) = trim(mfip_elig_membs_self_emp_income(case_memb))
						mfip_elig_membs_wages_income(case_memb) = trim(mfip_elig_membs_wages_income(case_memb))
						mfip_elig_membs_total_earned_income(case_memb) = trim(mfip_elig_membs_total_earned_income(case_memb))
						mfip_elig_membs_standard_EI_disregard(case_memb) = trim(mfip_elig_membs_standard_EI_disregard(case_memb))
						mfip_elig_membs_earned_income_subtotal(case_memb) = trim(mfip_elig_membs_earned_income_subtotal(case_memb))
						mfip_elig_membs_earned_income_50_perc_disregard(case_memb) = trim(mfip_elig_membs_earned_income_50_perc_disregard(case_memb))
						mfip_elig_membs_available_earned_income(case_memb) = trim(mfip_elig_membs_available_earned_income(case_memb))
						mfip_elig_membs_allocation_deduction(case_memb) = trim(mfip_elig_membs_allocation_deduction(case_memb))
						mfip_elig_membs_child_support_deduction(case_memb) = trim(mfip_elig_membs_child_support_deduction(case_memb))
						mfip_elig_membs_counted_earned_income(case_memb) = trim(mfip_elig_membs_counted_earned_income(case_memb))

						If mfip_elig_membs_total_earned_income(case_memb) <> "0.00" Then mfip_earned_income_exists = True
						If mfip_elig_membs_allocation_deduction(case_memb) <> "0.00" Then mfip_counted_memb_allocation_exists = True
					End If
				Next
				transmit
				EMReadScreen still_in_menu, 12, 5, 32
			Loop

			Call write_value_and_transmit("X", 11, 3)		' member specific UNEARNED INCOME
			EMReadScreen still_in_menu, 15, 6, 34
			If still_in_menu = "Unearned Income" Then
				' EMReadScreen pop_up_name, 25, 8, 34
				' pop_up_name = trim(pop_up_name)
				' compare_pop_up_name = pop_up_name
				' ' pop_up_name_array = split(pop_up_name, ",")
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If mfip_elig_membs_code(case_memb) = "A" Then
						EMReadScreen mfip_elig_membs_total_unearned_income(case_memb), 	8, 11, 50
						EMReadScreen mfip_elig_membs_allocation_balance(case_memb), 	8, 12, 50
						EMReadScreen mfip_elig_membs_child_support_balance(case_memb), 	8, 13, 50
						EMReadScreen mfip_elig_membs_counted_unearned_income(case_memb), 8, 14, 50

						mfip_elig_membs_total_unearned_income(case_memb) = trim(mfip_elig_membs_total_unearned_income(case_memb))
						mfip_elig_membs_allocation_balance(case_memb) = trim(mfip_elig_membs_allocation_balance(case_memb))
						mfip_elig_membs_child_support_balance(case_memb) = trim(mfip_elig_membs_child_support_balance(case_memb))
						mfip_elig_membs_counted_unearned_income(case_memb) = trim(mfip_elig_membs_counted_unearned_income(case_memb))

						If mfip_elig_membs_total_unearned_income(case_memb) <> "0.00" Then mfip_unearned_income_exists = True
						If mfip_elig_membs_allocation_balance(case_memb) <> "0.00" Then mfip_counted_memb_allocation_exists = True
						' MsgBox mfip_elig_membs_full_name(case_memb) & " - mfip_elig_membs_full_name(case_memb)" & vbCr & mfip_elig_membs_total_unearned_income(case_memb) & " - mfip_elig_membs_total_unearned_income(case_memb)" & vbCr & mfip_unearned_income_exists & " - mfip_unearned_income_exists"
						transmit
						EMReadScreen still_in_menu, 15, 6, 34
						If still_in_menu <> "Unearned Income" Then Exit For
					End If
				Next
				' 		' If mfip_elig_membs_last_name_complete(case_memb) = False Then
				' 		' 	pop_up_last_name = left(pop_up_name, 10)
				' 		' 	pop_up_first_name = trim(left(pop_up_name_array(1), 10))
				' 		' 	compare_pop_up_name = pop_up_last_name & " " & pop_up_first_name
				' 		' End If
				' 		' If mfip_elig_membs_last_name_complete(case_memb) = True Then
				' 		' 	pop_up_last_name = trim(pop_up_name_array(0))
				' 		' 	pop_up_first_name = left(trim(pop_up_name_array(1)), len(mfip_elig_membs_partial_first_name(case_memb)))
				' 		' 	compare_pop_up_name = pop_up_last_name & ", " & pop_up_first_name
				' 		' End If
				' 		MsgBox compare_pop_up_name & " - compare_pop_up_name" & vbCr & mfip_elig_membs_full_name(case_memb) & " - mfip_elig_membs_full_name(case_memb)" & vbCr & "Length of COMPARE NAME - " & len(compare_pop_up_name)
				' 		If compare_pop_up_name = mfip_elig_membs_full_name(case_memb) Then
				'
				' 			EMReadScreen mfip_elig_membs_total_unearned_income(case_memb), 	10, 11, 54
				' 			EMReadScreen mfip_elig_membs_allocation_balance(case_memb), 	10, 12, 54
				' 			EMReadScreen mfip_elig_membs_child_support_balance(case_memb), 	10, 13, 54
				' 			EMReadScreen mfip_elig_membs_counted_unearned_income(case_memb), 10, 14, 54
				'
				' 			mfip_elig_membs_total_unearned_income(case_memb) = trim(mfip_elig_membs_total_unearned_income(case_memb))
				' 			mfip_elig_membs_allocation_balance(case_memb) = trim(mfip_elig_membs_allocation_balance(case_memb))
				' 			mfip_elig_membs_child_support_balance(case_memb) = trim(mfip_elig_membs_child_support_balance(case_memb))
				' 			mfip_elig_membs_counted_unearned_income(case_memb) = trim(mfip_elig_membs_counted_unearned_income(case_memb))
				'
				' 			If mfip_elig_membs_total_unearned_income(case_memb) <> "0.00" Then mfip_unearned_income_exists = True
				'
				' 		End If
				' 	Next
				' 	transmit
				' 	EMReadScreen still_in_menu, 15, 6, 34
				' Loop
				' MsgBox "LEAVE ???   UNEARNED INCOME POP-UP - still_in_menu: " & still_in_menu
			End if

			Call write_value_and_transmit("X", 12, 3)		'TODO member specific DEEMED INCOME
			dm_row = 1
			dm_col = 1
			EMSearch "MAXIS Person Deemer Income Budget", dm_row, dm_col
			If dm_row = 0 Then
				dm_row = 1
				dm_col = 1
				EMSearch "Maxis Person Deemer Income Budget", dm_row, dm_col
			End If
			Do while dm_row <> 0
				pers_row = 1
				pers_col = 1
				EMSearch "Mbrsp Code", pers_row, pers_col
				EMReadScreen pop_up_name, 40, pers_row-1, pers_col+5
				pop_up_name = trim(pop_up_name)
				pop_up_name_array = split(pop_up_name, ",")
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If mfip_elig_membs_last_name_complete(case_memb) = False Then
						pop_up_last_name = left(pop_up_name, 10)
						pop_up_first_name = trim(left(pop_up_name_array(1), 10))
						compare_pop_up_name = pop_up_last_name & " " & pop_up_first_name
					End If
					If mfip_elig_membs_last_name_complete(case_memb) = True Then
						pop_up_last_name = trim(pop_up_name_array(0))
						pop_up_first_name = left(trim(pop_up_name_array(1)), len(mfip_elig_membs_partial_first_name(case_memb)))
						compare_pop_up_name = pop_up_last_name & ", " & pop_up_first_name
					End If
					If compare_pop_up_name = mfip_elig_membs_full_name(case_memb) Then
						EMReadScreen mfip_elig_membs_deemer_counted_earned_inc(case_memb), 8, 11, 53
						EMReadScreen mfip_elig_membs_deemer_unearned_inc(case_memb), 8, 15, 53

						mfip_elig_membs_deemer_counted_earned_inc(case_memb) 	= trim(mfip_elig_membs_deemer_counted_earned_inc(case_memb))
						mfip_elig_membs_deemer_unearned_inc(case_memb) 			= trim(mfip_elig_membs_deemer_unearned_inc(case_memb))

						If mfip_elig_membs_deemer_counted_earned_inc(case_memb) <> "0.00" OR mfip_elig_membs_deemer_unearned_inc(case_memb) <> "0.00" Then
							mfip_deemed_income_exists = True
							EMReadScreen mfip_elig_membs_deemer_BUSI_inc(case_memb), 				8, 9, 53
							EMReadScreen mfip_elig_membs_deemer_JOBS_inc(case_memb), 				8, 10, 53
							EMReadScreen mfip_elig_membs_deemer_stndrd_earned_disrgrd(case_memb), 	8, 12, 53
							EMReadScreen mfip_elig_membs_deemer_earned_subtotal(case_memb), 		8, 13, 53
							EMReadScreen mfip_elig_membs_deemer_earned_dsrgrd(case_memb), 			8, 14, 53
							EMReadScreen mfip_elig_membs_deemer_sub_total_counted_inc(case_memb), 	8, 17, 53
							EMReadScreen mfip_elig_membs_deemer_unmet_need(case_memb), 				8, 18, 53
							EMReadScreen mfip_elig_membs_deemer_allocation(case_memb), 				8, 19, 53
							EMReadScreen mfip_elig_membs_deemer_cs_alimny(case_memb), 				8, 20, 53
							EMReadScreen mfip_elig_membs_deemer_counted_income(case_memb), 			8, 21, 53

							mfip_elig_membs_deemer_stndrd_earned_disrgrd(case_memb) = mfip_elig_membs_deemer_stndrd_earned_disrgrd(case_memb) * 1
							mfip_elig_membs_deemer_earned_dsrgrd(case_memb) = mfip_elig_membs_deemer_earned_dsrgrd(case_memb) * 1
							mfip_elig_membs_deemer_total_dsrgrd(case_memb) = mfip_elig_membs_deemer_earned_dsrgrd(case_memb) + mfip_elig_membs_deemer_stndrd_earned_disrgrd(case_memb)

							mfip_elig_membs_deemer_BUSI_inc(case_memb) 				= trim(mfip_elig_membs_deemer_BUSI_inc(case_memb))
							mfip_elig_membs_deemer_JOBS_inc(case_memb) 				= trim(mfip_elig_membs_deemer_JOBS_inc(case_memb))
							mfip_elig_membs_deemer_stndrd_earned_disrgrd(case_memb) = trim(mfip_elig_membs_deemer_stndrd_earned_disrgrd(case_memb))
							mfip_elig_membs_deemer_earned_subtotal(case_memb) 		= trim(mfip_elig_membs_deemer_earned_subtotal(case_memb))
							mfip_elig_membs_deemer_earned_dsrgrd(case_memb) 		= trim(mfip_elig_membs_deemer_earned_dsrgrd(case_memb))
							mfip_elig_membs_deemer_sub_total_counted_inc(case_memb) = trim(mfip_elig_membs_deemer_sub_total_counted_inc(case_memb))
							mfip_elig_membs_deemer_unmet_need(case_memb) 			= trim(mfip_elig_membs_deemer_unmet_need(case_memb))
							mfip_elig_membs_deemer_allocation(case_memb) 			= trim(mfip_elig_membs_deemer_allocation(case_memb))
							mfip_elig_membs_deemer_cs_alimny(case_memb) 			= trim(mfip_elig_membs_deemer_cs_alimny(case_memb))
							mfip_elig_membs_deemer_counted_income(case_memb) 		= trim(mfip_elig_membs_deemer_counted_income(case_memb))
							If mfip_elig_membs_deemer_allocation(case_memb) <> "0.00" Then mfip_deemer_allocation_exists = True
						End If
						Exit For
					End If
				Next
				transmit
				dm_row = 1
				dm_col = 1
				EMSearch "Maxis Person Deemer Income Budget", dm_row, dm_col
				If dm_row = 0 Then
					dm_row = 1
					dm_col = 1
					EMSearch "MAXIS Person Deemer Income Budget", dm_row, dm_col
				End If
			Loop

			Call write_value_and_transmit("X", 13, 3)		'Child Support Exclusion'
			EMReadScreen mfip_budg_cses_excln_cses_income, 10, 9, 52
			EMReadScreen mfip_budg_cses_excln_child_count, 2, 11, 37
			EMReadScreen mfip_budg_cses_excln_total, 10, 13, 52

			mfip_budg_cses_excln_cses_income = trim(mfip_budg_cses_excln_cses_income)
			mfip_budg_cses_excln_child_count = trim(mfip_budg_cses_excln_child_count)
			mfip_budg_cses_excln_total = trim(mfip_budg_cses_excln_total)
			transmit

			Call write_value_and_transmit("X", 16, 5)		' member specific TRIBAL INCOME
			EMReadScreen mfip_budg_total_county_88_child_support_income, 	10, 6, 55
			EMReadScreen mfip_budg_total_county_88_gaming_income, 			10, 7, 55
			EMReadScreen mfip_budg_total_tribal_income_fs_portion_deduction, 10, 8, 55
			mfip_budg_total_county_88_child_support_income = trim(mfip_budg_total_county_88_child_support_income)
			mfip_budg_total_county_88_gaming__income = trim(mfip_budg_total_county_88_gaming__income)
			mfip_budg_total_tribal_income_fs_portion_deduction = trim(mfip_budg_total_tribal_income_fs_portion_deduction)

			Call write_value_and_transmit("X", 6, 12)		' member specific Tribal Child Support Income
			EMReadScreen back_to_menu, 21, 4, 31
			Do while back_to_menu <> "Tribal Counted Income"
				EMReadScreen pop_up_name, 25, 8, 34
				pop_up_name = trim(pop_up_name)
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If pop_up_name = mfip_elig_membs_full_name(case_memb) Then
						EMReadScreen mfip_elig_membs_county_88_cses_income(case_memb), 10, 11, 54

						mfip_elig_membs_county_88_cses_income(case_memb) = trim(mfip_elig_membs_county_88_cses_income(case_memb))
					End If
				Next
				transmit
				EMReadScreen back_to_menu, 21, 4, 31
			Loop

			Call write_value_and_transmit("X", 7, 12)		' member specific Tribal Gaming Income
			EMReadScreen back_to_menu, 21, 4, 31
			Do while back_to_menu <> "Tribal Counted Income"
				EMReadScreen pop_up_name, 30, 7, 37
				pop_up_name = trim(pop_up_name)
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If pop_up_name = mfip_elig_membs_full_name(case_memb) Then

						EMReadScreen mfip_elig_membs_county_88_gaming_income(case_memb), 	10, 10, 61
						EMReadScreen mfip_elig_membs_county_88_200_perc_fpg(case_memb), 	10, 11, 61
						EMReadScreen mfip_elig_membs_county_88_deemers_unmet_need(case_memb), 10, 12, 61
						EMReadScreen mfip_elig_membs_county_88_allocation(case_memb), 		10, 13, 61
						EMReadScreen mfip_elig_membs_county_88_child_support(case_memb), 	10, 14, 61
						EMReadScreen mfip_elig_membs_county_88_counted_gaming_income(case_memb), 10, 15, 61

						mfip_elig_membs_county_88_gaming_income(case_memb) = trim(mfip_elig_membs_county_88_gaming_income(case_memb))
						mfip_elig_membs_county_88_200_perc_fpg(case_memb) = trim(mfip_elig_membs_county_88_200_perc_fpg(case_memb))
						mfip_elig_membs_county_88_deemers_unmet_need(case_memb) = trim(mfip_elig_membs_county_88_deemers_unmet_need(case_memb))
						mfip_elig_membs_county_88_allocation(case_memb) = trim(mfip_elig_membs_county_88_allocation(case_memb))
						mfip_elig_membs_county_88_child_support(case_memb) = trim(mfip_elig_membs_county_88_child_support(case_memb))
						mfip_elig_membs_county_88_counted_gaming_income(case_memb) = trim(mfip_elig_membs_county_88_counted_gaming_income(case_memb))
					End If
				Next
				transmit
				EMReadScreen back_to_menu, 21, 4, 31
			Loop
			transmit                  ''back to MFB1

			Call write_value_and_transmit("X", 18, 5)		' member specific SUBSIDY
			EMReadScreen mfip_budg_total_housing_subsidy_amount, 10, 8, 51
			EMReadScreen mfip_budg_total_tribal_child_support, 10, 9, 51
			EMReadScreen mfip_budg_total_subsidy_tribal_cash_portion_deduction, 10, 10, 51
			mfip_budg_total_housing_subsidy_amount = trim(mfip_budg_total_housing_subsidy_amount)
			mfip_budg_total_tribal_child_support = trim(mfip_budg_total_tribal_child_support)
			mfip_budg_total_subsidy_tribal_cash_portion_deduction = trim(mfip_budg_total_subsidy_tribal_cash_portion_deduction)

			Call write_value_and_transmit("X", 8, 13)		' member specific subsidy Income

			EMReadScreen mfip_elig_budg_total_countable_housing_subsidy, 10, 19, 48
			EMReadScreen mfip_elig_budg_housing_subsidy_exempt, 1, 21, 47

			mfip_elig_budg_total_countable_housing_subsidy = trim(mfip_elig_budg_total_countable_housing_subsidy)
			mfip_elig_budg_housing_subsidy_exempt = trim(mfip_elig_budg_housing_subsidy_exempt)

			row = 8
			Do
				EMReadScreen memb_ref_numb, 2, row, 6
				For case_memb = 0 to UBound(mfip_elig_ref_numbs)
					If memb_ref_numb = mfip_elig_ref_numbs(case_memb) Then

						EMReadScreen mfip_elig_membs_retro_subsidy_amount(case_memb), 10, row, 38
						EMReadScreen mfip_elig_membs_prosp_subsidy_amount(case_memb), 10, row, 49

						mfip_elig_membs_retro_subsidy_amount(case_memb) = trim(mfip_elig_membs_retro_subsidy_amount(case_memb))
						mfip_elig_membs_prosp_subsidy_amount(case_memb) = trim(mfip_elig_membs_prosp_subsidy_amount(case_memb))
					End If
				Next
				row = row + 1
				EMReadScreen next_memb_ref_numb, 2, row, 6
			Loop until next_memb_ref_numb = "  "
			transmit 					'back to pop-up

			transmit                 	'back to MFB1

			Call write_value_and_transmit("X", 8, 44)		'Sanction and Vendor
			EMReadScreen mfip_case_budg_10_perc_sanc, 					10, 7, 55
			EMReadScreen mfip_case_budg_unmet_need_after_pre_vndr_sanc, 10, 8, 55
			EMReadScreen mfip_case_budg_sanc_calc_food_portion, 		10, 9, 55
			EMReadScreen mfip_case_budg_sanc_calc_cash_portion, 		10, 10, 55
			EMReadScreen mfip_case_budg_pot_mand_vndr_pymts, 			10, 11, 55
			EMReadScreen mfip_case_budg_30_perc_sanc, 					10, 12, 55

			mfip_case_budg_10_perc_sanc = trim(mfip_case_budg_10_perc_sanc)
			mfip_case_budg_unmet_need_after_pre_vndr_sanc = trim(mfip_case_budg_unmet_need_after_pre_vndr_sanc)
			mfip_case_budg_sanc_calc_food_portion = trim(mfip_case_budg_sanc_calc_food_portion)
			mfip_case_budg_sanc_calc_cash_portion = trim(mfip_case_budg_sanc_calc_cash_portion)
			mfip_case_budg_pot_mand_vndr_pymts = trim(mfip_case_budg_pot_mand_vndr_pymts)
			mfip_case_budg_30_perc_sanc = trim(mfip_case_budg_30_perc_sanc)
			transmit

			Call write_value_and_transmit("X", 12, 44)		'Food portion Deduction
			EMReadScreen mfip_case_budg_non_citzn_fs_inelig_pers_count, 1, 10, 17
			EMReadScreen mfip_case_budg_non_citzn_fs_inelig_amt, 		10, 10, 45
			EMReadScreen mfip_case_budg_other_fs_inelig_pers_count, 	1, 12, 17
			EMReadScreen mfip_case_budg_other_fs_inelig_amt, 			10, 12, 45

			mfip_case_budg_non_citzn_fs_inelig_pers_count = trim(mfip_case_budg_non_citzn_fs_inelig_pers_count)
			mfip_case_budg_non_citzn_fs_inelig_amt = trim(mfip_case_budg_non_citzn_fs_inelig_amt)
			mfip_case_budg_other_fs_inelig_pers_count = trim(mfip_case_budg_other_fs_inelig_pers_count)
			mfip_case_budg_other_fs_inelig_amt = trim(mfip_case_budg_other_fs_inelig_amt)
			transmit

			transmit			'MFB2
			EMReadScreen mfip_case_budg_prorate_date, 8, 5, 19

			EMReadScreen mfip_case_budg_fed_food_benefit, 			10, 7, 32
			EMReadScreen mfip_case_budg_food_prorated_amt, 			10, 8, 32
			EMReadScreen mfip_case_budg_entitlement_cash_portion, 	10, 10, 32
			EMReadScreen mfip_case_budg_mand_sanc_vendor, 			10, 11, 32
			EMReadScreen mfip_case_budg_net_cash_after_sanc_portion, 10, 12, 32
			EMReadScreen mfip_case_budg_cash_prorated_amt, 			10, 13, 32
			EMReadScreen mfip_case_budg_state_food_benefit, 		10, 15, 32
			EMReadScreen mfip_case_budg_state_food_prorated_amt, 	10, 16, 32
			' EMReadScreen mfip_case_budg_entitlement_cash_portion, 10, 10, 32

			EMReadScreen mfip_case_budg_grant_amount, 				10, 5, 71
			EMReadScreen mfip_case_budg_amt_already_issued, 		10, 8, 71
			EMReadScreen mfip_case_budg_supplement_due, 			10, 9, 71
			EMReadScreen mfip_case_budg_overpayment, 				10, 10, 71
			EMReadScreen mfip_case_budg_adjusted_grant_amt, 		10, 11, 71
			EMReadScreen mfip_case_budg_recoupment, 				10, 12, 71
			EMReadScreen mfip_case_budg_total_food_issuance, 		10, 14, 71
			EMReadScreen mfip_case_budg_total_cash_issuance, 		10, 15, 71
			EMReadScreen mfip_case_budg_total_housing_grant_issuance, 10, 16, 71

			mfip_case_budg_prorate_date = trim(mfip_case_budg_prorate_date)
			mfip_case_budg_fed_food_benefit = trim(mfip_case_budg_fed_food_benefit)
			mfip_case_budg_food_prorated_amt = trim(mfip_case_budg_food_prorated_amt)
			mfip_case_budg_entitlement_cash_portion = trim(mfip_case_budg_entitlement_cash_portion)
			mfip_case_budg_mand_sanc_vendor = trim(mfip_case_budg_mand_sanc_vendor)
			mfip_case_budg_net_cash_after_sanc_portion = trim(mfip_case_budg_net_cash_after_sanc_portion)
			mfip_case_budg_cash_prorated_amt = trim(mfip_case_budg_cash_prorated_amt)
			mfip_case_budg_state_food_benefit = trim(mfip_case_budg_state_food_benefit)
			mfip_case_budg_state_food_prorated_amt = trim(mfip_case_budg_state_food_prorated_amt)
			mfip_case_budg_grant_amount = trim(mfip_case_budg_grant_amount)
			mfip_case_budg_amt_already_issued = trim(mfip_case_budg_amt_already_issued)
			mfip_case_budg_supplement_due = trim(mfip_case_budg_supplement_due)
			mfip_case_budg_overpayment = trim(mfip_case_budg_overpayment)
			mfip_case_budg_adjusted_grant_amt = trim(mfip_case_budg_adjusted_grant_amt)
			mfip_case_budg_recoupment = trim(mfip_case_budg_recoupment)
			mfip_case_budg_total_food_issuance = trim(mfip_case_budg_total_food_issuance)
			mfip_case_budg_total_cash_issuance = trim(mfip_case_budg_total_cash_issuance)
			mfip_case_budg_total_housing_grant_issuance = trim(mfip_case_budg_total_housing_grant_issuance)

			' Call write_value_and_transmit("X", 15, 3)			'State food benefit pop-up - I think this is duplicate
			Call write_value_and_transmit("X", 9, 44)			'Supplement pop-up
			EMReadScreen mfip_case_budg_food_supplement, 		10, 11, 32
			EMReadScreen mfip_case_budg_state_food_supplement, 	10, 16, 32
			EMReadScreen mfip_case_budg_cash_supplement, 		10, 11, 68
			EMReadScreen mfip_case_budg_housing_grant_supplement, 10, 16, 68

			mfip_case_budg_food_supplement = trim(mfip_case_budg_food_supplement)
			mfip_case_budg_state_food_supplement = trim(mfip_case_budg_state_food_supplement)
			mfip_case_budg_cash_supplement = trim(mfip_case_budg_cash_supplement)
			mfip_case_budg_housing_grant_supplement = trim(mfip_case_budg_housing_grant_supplement)
			transmit

			' Call write_value_and_transmit("X", 10, 44)			'Overpayment pop-up - MAYBE WE DON"T NEED THIS?
			Call write_value_and_transmit("X", 12, 44)			'Recoupment pop-up
			EMReadScreen mfip_case_budg_cash_recoupment, 10, 7, 51
			EMReadScreen mfip_case_budg_state_food_recoupment, 10, 8, 51
			EMReadScreen mfip_case_budg_food_recoupment, 10, 9, 51

			mfip_case_budg_cash_recoupment = trim(mfip_case_budg_cash_recoupment)
			mfip_case_budg_state_food_recoupment = trim(mfip_case_budg_state_food_recoupment)
			mfip_case_budg_food_recoupment = trim(mfip_case_budg_food_recoupment)
			transmit

			Call write_value_and_transmit("X", 14, 44)			'Total Food issuance pop-up
			EMReadScreen mfip_case_budg_fed_food_memb_count, 1, 7, 17
			EMReadScreen mfip_case_budg_fed_food_benefit_amt, 10, 7, 45
			EMReadScreen mfip_case_budg_state_food_memb_count, 1, 9, 17
			EMReadScreen mfip_case_budg_state_food_benefit_amt, 10, 9, 45

			mfip_case_budg_fed_food_memb_count = trim(mfip_case_budg_fed_food_memb_count)
			mfip_case_budg_fed_food_benefit_amt = trim(mfip_case_budg_fed_food_benefit_amt)
			mfip_case_budg_state_food_memb_count = trim(mfip_case_budg_state_food_memb_count)
			mfip_case_budg_state_food_benefit_amt = trim(mfip_case_budg_state_food_benefit_amt)
			transmit

			Call write_value_and_transmit("X", 15, 44)			'Total Cash Issuance pop-up
			EMReadScreen mfip_case_budg_tanf_cash_memb_count, 1, 8, 17
			EMReadScreen mfip_case_budg_tanf_cash_benefit_amt, 10, 8, 45
			EMReadScreen mfip_case_budg_state_cash_memb_count, 1, 10, 17
			EMReadScreen mfip_case_budg_state_cash_benefit_amt, 10, 10, 45

			mfip_case_budg_tanf_cash_memb_count = trim(mfip_case_budg_tanf_cash_memb_count)
			mfip_case_budg_tanf_cash_benefit_amt = trim(mfip_case_budg_tanf_cash_benefit_amt)
			mfip_case_budg_state_cash_memb_count = trim(mfip_case_budg_state_cash_memb_count)
			mfip_case_budg_state_cash_benefit_amt = trim(mfip_case_budg_state_cash_benefit_amt)
			transmit
			' Call write_value_and_transmit("X", 16, 44)			'MFIP Housing Grant Issuance pop-up - there is not federal housing grant
			transmit			'MFSM
			EMReadScreen mfip_approved_date, 8, 3, 14
			EMReadScreen mfip_process_date, 8, 2, 73
			EMReadScreen mfip_prev_approval, 4, 3, 73

			EMReadScreen mfip_case_last_approval_date, 8, 5, 31
			EMReadScreen mfip_case_current_prog_status, 12, 6, 31
			EMReadScreen mfip_case_eligibility_result, 12, 7, 31
			EMReadScreen mfip_case_hrf_reporting, 12, 8, 31
			EMReadScreen mfip_case_source_of_info, 4, 9, 31
			EMReadScreen mfip_case_benefit_impact, 12, 10, 31
			EMReadScreen mfip_case_review_date, 8, 11, 31
			EMReadScreen mfip_case_budget_cycle, 12, 12, 31
			EMReadScreen mfip_case_vendor_reason_code, 2, 13, 31

			EMReadScreen mfip_case_responsible_county, 2, 5, 73
			EMReadScreen mfip_case_service_county, 2, 6, 73
			EMReadScreen mfip_case_asst_unit_caregivers, 2, 7, 73
			EMReadScreen mfip_case_asst_unit_children, 2, 8, 73
			EMReadScreen mfip_case_total_assets, 10, 9, 71
			EMReadScreen mfip_case_maximum_assets, 10, 10, 71
			EMReadScreen mfip_case_summary_grant_amount, 10, 11, 71
			EMReadScreen mfip_case_summary_net_grant_amount, 10, 13, 71
			EMReadScreen mfip_case_summary_cash_portion, 10, 14, 71
			EMReadScreen mfip_case_summary_food_portion, 10, 15, 71
			EMReadScreen mfip_case_summary_housing_grant, 10, 16, 71

			If mfip_case_vendor_reason_code = "01" Then mfip_case_vendor_reason_info = "Client Request"
			If mfip_case_vendor_reason_code = "05" Then mfip_case_vendor_reason_info = "Money Mismanagement"
			If mfip_case_vendor_reason_code = "06" Then mfip_case_vendor_reason_info = "Social Service Non-Coop"
			If mfip_case_vendor_reason_code = "07" Then mfip_case_vendor_reason_info = "Residing in a Facility"
			If mfip_case_vendor_reason_code = "21" Then mfip_case_vendor_reason_info = "MFIP Sanction Related Vendor"
			If mfip_case_vendor_reason_code = "22" Then mfip_case_vendor_reason_info = "Convicted Drug Felon in Household"

			mfip_prev_approval = trim(mfip_prev_approval)
			mfip_case_last_approval_date = trim(mfip_case_last_approval_date)

			mfip_case_current_prog_status = trim(mfip_case_current_prog_status)
			mfip_case_eligibility_result = trim(mfip_case_eligibility_result)
			mfip_case_hrf_reporting = trim(mfip_case_hrf_reporting)
			mfip_case_source_of_info = trim(mfip_case_source_of_info)
			mfip_case_benefit_impact = trim(mfip_case_benefit_impact)

			mfip_case_budget_cycle = trim(mfip_case_budget_cycle)
			mfip_case_vendor_reason_code = trim(mfip_case_vendor_reason_code)

			mfip_case_asst_unit_caregivers = trim(mfip_case_asst_unit_caregivers)
			mfip_case_asst_unit_children = trim(mfip_case_asst_unit_children)
			mfip_case_total_assets = trim(mfip_case_total_assets)
			mfip_case_maximum_assets = trim(mfip_case_maximum_assets)
			mfip_case_summary_grant_amount = trim(mfip_case_summary_grant_amount)
			mfip_case_summary_net_grant_amount = trim(mfip_case_summary_net_grant_amount)
			mfip_case_summary_cash_portion = trim(mfip_case_summary_cash_portion)
			mfip_case_summary_food_portion = trim(mfip_case_summary_food_portion)
			mfip_case_summary_housing_grant = trim(mfip_case_summary_housing_grant)

			If mfip_case_asst_unit_caregivers = "0" Then mfip_child_only = True
		End If

		Call Back_to_SELF

		Call navigate_to_MAXIS_screen("MONY", "INQX")
		EMWriteScreen initial_search_month, 6, 38
		EMWriteScreen initial_search_year, 6, 41
		EMWriteScreen CM_plus_1_mo, 6, 53
		EMWriteScreen CM_plus_1_yr, 6, 56
		transmit

		inqd_row = 6
		tx_count = 0
		EMReadScreen chck_prog, 7, inqd_row, 16
		chck_prog = trim(chck_prog)
		check_count = 0
		MFSD_check_transaction_amount = 0

		Do while chck_prog <> ""
			If chck_prog = "SA" Then

				EMReadScreen inqd_issue_date, 8, inqd_row, 7
				inqd_issue_date = trim(inqd_issue_date)

				Call convert_date_into_MAXIS_footer_month(inqd_issue_date, check_footer_month, check_footer_year)
				EMReadScreen check_elig_month, 2, inqd_row, 62
				EMReadScreen check_elig_year, 2, inqd_row, 68

				If check_elig_month = elig_footer_month and check_elig_year = elig_footer_year Then
					MFSD_check_issue_date = inqd_issue_date
					MFSD_check_found = True
					MFSD_check_count = MFSD_check_count + 1

					EMReadScreen MFSD_check_status_code, 1, inqd_row, 26
					EMReadScreen MFSD_check_warrant_number, 8, inqd_row, 28
					EMReadScreen check_amount, 9, inqd_row, 37
					check_amount = trim(check_amount)
					EMReadScreen MFSD_check_type_code, 1, inqd_row, 48
					EMReadScreen MFSD_check_transaction_number, 9, inqd_row, 51
					EMReadScreen MFSD_check_from_date, 8, inqd_row, 62
					EMReadScreen MFSD_check_to_date, 8, inqd_row, 73
					EMReadScreen MFSD_check_month, 2, inqd_row, 62
					EMReadScreen MFSD_check_year, 2, inqd_row, 68
					If MFSD_check_month <> elig_footer_month or MFSD_check_year <> elig_footer_year Then MFSD_check_found = False
					check_amount = FormatNumber(check_amount, 2, -1, 0, -1)
					MFSD_check_transaction_amount = MFSD_check_transaction_amount + check_amount

					Call write_value_and_transmit("I", inqd_row, 4)
					EMReadScreen MFSD_check_payment_reason, 	30, 7, 17
					MFSD_check_payment_reason = trim(MFSD_check_payment_reason)
					If UCase(MFSD_check_payment_reason) <> "SPECIAL DIET" Then MFSD_check_found = False
					PF3

					If MFSD_check_found = True Then
						If IsDate(MFSD_check_issue_date) = True Then
							If DateDiff("d", date, MFSD_check_issue_date) = 0 Then
								If MFSD_check_found = True then MFSD_approved_today = True
							End If
							If developer_mode = True Then MFSD_approved_today = True			'TESTING OPTION'
						End if
					End If
					If MFSD_approved_today = True Then
						MFSD_overlap_exists = False
						MFSD_diet_info_missing = False
					End If
				End If
			End If

			tx_count = tx_count + 1
			inqd_row = inqd_row + 1
			If inqd_row = 18 Then
				PF8
				inqd_row = 6
				EMReadScreen end_of_list, 9, 24, 14
				If end_of_list = "LAST PAGE" Then Exit Do
			End If

			EMReadScreen chck_prog, 7, inqd_row, 16
			chck_prog = trim(chck_prog)
		Loop
		If MFSD_approved_today = True Then MFSD_check_transaction_amount = FormatNumber(MFSD_check_transaction_amount, 2, -1, 0, -1)

		PF3


		Call navigate_to_MAXIS_screen("MONY", "INQX")
		start_of_info = first_footer_month & "/1/" & first_footer_year
		start_of_info = DateAdd("m", -1, start_of_info)
		Call convert_date_into_MAXIS_footer_month(start_of_info, start_search_month, start_search_year)
		EMWriteScreen start_search_month, 6, 38
		EMWriteScreen start_search_year, 6, 41
		EMWriteScreen CM_plus_1_mo, 6, 53
		EMWriteScreen CM_plus_1_yr, 6, 56
		EMWriteScreen "X", 17, 50
		transmit

		inqd_row = 6
		tx_count = 0
		EMReadScreen chck_prog, 7, inqd_row, 16
		chck_prog = trim(chck_prog)

		Do while chck_prog <> ""
			EMReadScreen check_from_date, 8, inqd_row, 62
			EMReadScreen check_to_date, 8, inqd_row, 73

			check_from_date = DateAdd("d", 0, check_from_date)
			check_to_date = DateAdd("d", 0, check_to_date)

			check_benefit_month = DatePart("m", check_from_date)
			check_benefit_month = right("00"&check_benefit_month, 2)
			check_benefit_year = DatePart("yyyy", check_from_date)
			check_benefit_year = right(check_benefit_year, 2)

			Call write_value_and_transmit("I", inqd_row, 4)
			EMReadScreen payment_reason, 14, 7, 17
			PF3

			If check_benefit_month = elig_footer_month AND check_benefit_year = elig_footer_year AND payment_reason <> "Regular Grants" Then
				ReDim preserve mfip_check_issue_date(tx_count)
				ReDim preserve mfip_check_program(tx_count)
				ReDim preserve mfip_check_status_code(tx_count)
				ReDim preserve mfip_check_status_info(tx_count)
				ReDim preserve mfip_check_warrant_number(tx_count)
				ReDim preserve mfip_check_transaction_amount(tx_count)
				ReDim preserve mfip_check_type_code(tx_count)
				ReDim preserve mfip_check_type_info(tx_count)
				ReDim preserve mfip_check_transaction_number(tx_count)
				ReDim preserve mfip_check_from_date(tx_count)
				ReDim preserve mfip_check_to_date(tx_count)
				ReDim preserve mfip_check_payment_reason(tx_count)
				ReDim preserve mfip_check_payment_to_name(tx_count)
				ReDim preserve mfip_check_payment_to_address(tx_count)
				ReDim preserve mfip_check_mail_method(tx_count)
				ReDim preserve mfip_check_payment_method(tx_count)
				ReDim preserve mfip_check_vendor_number(tx_count)
				ReDim preserve mfip_check_fiche_number(tx_count)
				ReDim preserve mfip_check_payment_amount(tx_count)
				ReDim preserve mfip_check_entitement_amount(tx_count)
				ReDim preserve mfip_check_recoupment_amount(tx_count)
				ReDim preserve mfip_check_replacement_amount(tx_count)
				ReDim preserve mfip_check_cacnel_amount(tx_count)
				ReDim preserve mfip_check_food_portion_amount(tx_count)
				ReDim preserve mfip_check_reconciliation_date(tx_count)
				ReDim preserve mfip_check_cancel_reason(tx_count)
				ReDim preserve mfip_check_replacement_reason(tx_count)
				ReDim preserve mfip_check_picup_status(tx_count)
				ReDim preserve mfip_check_pickup_date(tx_count)
				ReDim preserve mfip_check_servicing_county(tx_count)
				ReDim preserve mfip_check_responsibility_county(tx_count)
				ReDim preserve mfip_check_adjusting_transaction(tx_count)
				ReDim preserve mfip_check_original_transaction(tx_count)
				ReDim preserve mfip_check_vendor_name(tx_count)
				ReDim preserve mfip_check_vendor_c_o(tx_count)
				ReDim preserve mfip_check_vendor_street_one(tx_count)
				ReDim preserve mfip_check_vendor_street_two(tx_count)
				ReDim preserve mfip_check_vendor_city(tx_count)
				ReDim preserve mfip_check_vendor_state(tx_count)
				ReDim preserve mfip_check_vendor_zip(tx_count)
				ReDim preserve mfip_check_vendor_grh_yn(tx_count)
				ReDim preserve mfip_check_vendor_non_profit_yn(tx_count)
				ReDim preserve mfip_check_vendor_phone(tx_count)
				ReDim preserve mfip_check_vendor_county(tx_count)
				ReDim preserve mfip_check_vendor_status_code(tx_count)
				ReDim preserve mfip_check_vendor_status_info(tx_count)
				ReDim preserve mfip_check_vendor_incorporated_yn(tx_count)
				ReDim preserve mfip_check_vendor_federal_tax_id(tx_count)
				ReDim preserve mfip_check_vendor_ssn(tx_count)
				ReDim preserve mfip_check_vendor_2nd_address_type_code(tx_count)
				ReDim preserve mfip_check_vendor_2nd_address_type_info(tx_count)
				ReDim preserve mfip_check_vendor_2nd_address_eff_date(tx_count)
				ReDim preserve mfip_check_vendor_2nd_name(tx_count)
				ReDim preserve mfip_check_vendor_2nd_c_o(tx_count)
				ReDim preserve mfip_check_vendor_2nd_street_one(tx_count)
				ReDim preserve mfip_check_vendor_2nd_street_two(tx_count)
				ReDim preserve mfip_check_vendor_2nd_city(tx_count)
				ReDim preserve mfip_check_vendor_2nd_state(tx_count)
				ReDim preserve mfip_check_vendor_2nd_zip(tx_count)
				ReDim preserve mfip_check_vendor_direct_deposit_yn(tx_count)
				ReDim preserve mfip_check_vendor_merge_vendor_number(tx_count)
				ReDim preserve mfip_check_vendor_acct_number_required_yn(tx_count)
				ReDim preserve mfip_check_vendor_blocked_county_numbers_list(tx_count)

				mfip_mony_check_found = True

				mfip_check_program(tx_count) = chck_prog
				EMReadScreen mfip_check_issue_date(tx_count), 8, inqd_row, 7
				mfip_check_issue_date(tx_count) = trim(mfip_check_issue_date(tx_count))
				If IsDate(mfip_check_issue_date(tx_count)) = True Then
					If DateDiff("d", date, mfip_check_issue_date(tx_count)) = 0 Then approved_today = True
				End if
				EMReadScreen mfip_check_status_code(tx_count), 1, inqd_row, 26
				If mfip_check_status_code(tx_count) = "C" Then mfip_check_status_info(tx_count) = "Cancel/Return"
				If mfip_check_status_code(tx_count) = "D" Then mfip_check_status_info(tx_count) = "Denied"
				If mfip_check_status_code(tx_count) = "I" Then mfip_check_status_info(tx_count) = "Issued"
				If mfip_check_status_code(tx_count) = "P" Then mfip_check_status_info(tx_count) = "Pending"
				If mfip_check_status_code(tx_count) = "R" Then mfip_check_status_info(tx_count) = "Cashed"
				If mfip_check_status_code(tx_count) = "S" Then mfip_check_status_info(tx_count) = "Partial Cancel"
				If mfip_check_status_code(tx_count) = "T" Then mfip_check_status_info(tx_count) = "Stopped/Cashed"
				If mfip_check_status_code(tx_count) = "X" Then mfip_check_status_info(tx_count) = "Stopped"
				If mfip_check_status_code(tx_count) = "B" Then mfip_check_status_info(tx_count) = "Cashed and Replaced"
				EMReadScreen mfip_check_warrant_number(tx_count), 8, inqd_row, 28
				EMReadScreen mfip_check_transaction_amount(tx_count), 9, inqd_row, 37
				mfip_check_transaction_amount(tx_count) = trim(mfip_check_transaction_amount(tx_count))
				EMReadScreen mfip_check_type_code(tx_count), 1, inqd_row, 48
				If mfip_check_type_code(tx_count) = "1" Then mfip_check_type_info(tx_count) = "Ongoing Issuance"
				If mfip_check_type_code(tx_count) = "2" Then mfip_check_type_info(tx_count) = "Same Day Local Issuance"
				If mfip_check_type_code(tx_count) = "3" Then mfip_check_type_info(tx_count) = "Replacement Issuance"
				If mfip_check_type_code(tx_count) = "4" Then mfip_check_type_info(tx_count) = "Same Day Issuance"
				If mfip_check_type_code(tx_count) = "5" Then mfip_check_type_info(tx_count) = "Nightly Issuance"
				If mfip_check_type_code(tx_count) = "6" Then mfip_check_type_info(tx_count) = "Manual Issuance"
				If mfip_check_type_code(tx_count) = "7" Then mfip_check_type_info(tx_count) = "EBT Rapid Electronic Issuance"
				If mfip_check_type_code(tx_count) = "8" Then mfip_check_type_info(tx_count) = "EBT Rapid Electronic Replacement"
				EMReadScreen mfip_check_transaction_number(tx_count), 9, inqd_row, 51
				EMReadScreen mfip_check_from_date(tx_count), 8, inqd_row, 62
				EMReadScreen mfip_check_to_date(tx_count), 8, inqd_row, 73

				Call write_value_and_transmit("I", inqd_row, 4)

				EMReadScreen mfip_check_payment_reason(tx_count), 	30, 7, 17
				EMReadScreen mfip_check_payment_to_name(tx_count), 	30, 8, 17
				EMReadScreen addr_one, 								30, 9, 17
				EMReadScreen addr_two, 								30, 10, 17
				mfip_check_payment_to_address(tx_count) = trim(trim(addr_one) & " " & trim(addr_two))
				EMReadScreen mfip_check_mail_method(tx_count), 			15, 4, 63
				EMReadScreen mfip_check_payment_method(tx_count), 		15, 5, 63
				EMReadScreen mfip_check_vendor_number(tx_count), 		15, 6, 63
				EMReadScreen mfip_check_fiche_number(tx_count), 		15, 7, 63
				EMReadScreen mfip_check_payment_amount(tx_count), 		10, 13, 16
				EMReadScreen mfip_check_entitement_amount(tx_count), 	10, 14, 16
				EMReadScreen mfip_check_recoupment_amount(tx_count), 	10, 15, 16
				EMReadScreen mfip_check_replacement_amount(tx_count), 	10, 16, 16
				EMReadScreen mfip_check_cacnel_amount(tx_count), 		10, 17, 16
				EMReadScreen mfip_check_food_portion_amount(tx_count), 	10, 18, 16
				EMReadScreen mfip_check_reconciliation_date(tx_count), 	8, 6, 43
				EMReadScreen mfip_check_cancel_reason(tx_count), 		30, 17, 41
				EMReadScreen mfip_check_replacement_reason(tx_count), 	30, 18, 46
				EMReadScreen mfip_check_picup_status(tx_count), 		10, 10, 70
				EMReadScreen mfip_check_pickup_date(tx_count), 			8, 11, 70
				EMReadScreen mfip_check_servicing_county(tx_count), 	2, 13, 70
				EMReadScreen mfip_check_responsibility_county(tx_count), 2, 14, 70
				EMReadScreen mfip_check_adjusting_transaction(tx_count), 10, 15, 70
				EMReadScreen mfip_check_original_transaction(tx_count), 10, 16, 70

				mfip_check_payment_reason(tx_count) = trim(mfip_check_payment_reason(tx_count))
				mfip_check_payment_to_name(tx_count) = trim(mfip_check_payment_to_name(tx_count))
				mfip_check_payment_to_address(tx_count) = trim(mfip_check_payment_to_address(tx_count))
				mfip_check_mail_method(tx_count) = trim(mfip_check_mail_method(tx_count))
				mfip_check_payment_method(tx_count) = trim(mfip_check_payment_method(tx_count))
				mfip_check_vendor_number(tx_count) = trim(mfip_check_vendor_number(tx_count))
				mfip_check_fiche_number(tx_count) = trim(mfip_check_fiche_number(tx_count))
				mfip_check_payment_amount(tx_count) = trim(mfip_check_payment_amount(tx_count))
				mfip_check_entitement_amount(tx_count) = trim(mfip_check_entitement_amount(tx_count))
				mfip_check_recoupment_amount(tx_count) = trim(mfip_check_recoupment_amount(tx_count))
				mfip_check_replacement_amount(tx_count) = trim(mfip_check_replacement_amount(tx_count))
				mfip_check_cacnel_amount(tx_count) = trim(mfip_check_cacnel_amount(tx_count))
				mfip_check_food_portion_amount(tx_count) = trim(mfip_check_food_portion_amount(tx_count))
				mfip_check_reconciliation_date(tx_count) = trim(mfip_check_reconciliation_date(tx_count))
				mfip_check_cancel_reason(tx_count) = trim(mfip_check_cancel_reason(tx_count))
				mfip_check_replacement_reason(tx_count) = trim(mfip_check_replacement_reason(tx_count))
				mfip_check_picup_status(tx_count) = trim(mfip_check_picup_status(tx_count))
				mfip_check_pickup_date(tx_count) = trim(mfip_check_pickup_date(tx_count))
				mfip_check_servicing_county(tx_count) = trim(mfip_check_servicing_county(tx_count))
				mfip_check_responsibility_county(tx_count) = trim(mfip_check_responsibility_county(tx_count))
				mfip_check_adjusting_transaction(tx_count) = trim(mfip_check_adjusting_transaction(tx_count))
				mfip_check_original_transaction(tx_count) = trim(mfip_check_original_transaction(tx_count))

				PF3
				tx_count = tx_count + 1
			End If

			inqd_row = inqd_row + 1
			EMReadScreen chck_prog, 7, inqd_row, 16
			chck_prog = trim(chck_prog)
		Loop
		PF3
		Call back_to_SELF

		If mfip_mony_check_found = True Then
			for each_trans = 0 to UBound(mfip_check_program)
				Call navigate_to_MAXIS_screen("MONY", "VNDS")

				Call write_value_and_transmit(mfip_check_vendor_number(each_trans), 4, 59)
				EMReadScreen mfip_check_vendor_name(each_trans), 					30, 3, 15
				EMReadScreen mfip_check_vendor_c_o(each_trans), 					30, 4, 15
				EMReadScreen mfip_check_vendor_street_one(each_trans), 				22, 5, 15
				EMReadScreen mfip_check_vendor_street_two(each_trans), 				22, 6, 15
				EMReadScreen mfip_check_vendor_city(each_trans), 					15, 7, 15
				EMReadScreen mfip_check_vendor_state(each_trans), 					2, 7, 36
				EMReadScreen mfip_check_vendor_zip(each_trans), 					10, 7, 46
				EMReadScreen mfip_check_vendor_grh_yn(each_trans), 					1, 4, 57
				EMReadScreen mfip_check_vendor_non_profit_yn(each_trans), 			1, 4, 78
				EMReadScreen mfip_check_vendor_phone(each_trans), 					16, 6, 54
				mfip_check_vendor_phone(each_trans) = "(" & replace(replace(mfip_check_vendor_phone(each_trans), " )  ", ")"), "  ", "-")
				EMReadScreen mfip_check_vendor_county(each_trans), 					2, 7, 61
				EMReadScreen mfip_check_vendor_status_code(each_trans), 			1, 16, 15
				If mfip_check_vendor_status_code(each_trans) = "A" Then mfip_check_vendor_status_info(each_trans) = "Active"
				If mfip_check_vendor_status_code(each_trans) = "D" Then mfip_check_vendor_status_info(each_trans) = "Delete"
				If mfip_check_vendor_status_code(each_trans) = "M" Then mfip_check_vendor_status_info(each_trans) = "Merged"
				If mfip_check_vendor_status_code(each_trans) = "P" Then mfip_check_vendor_status_info(each_trans) = "Pending"
				If mfip_check_vendor_status_code(each_trans) = "T" Then mfip_check_vendor_status_info(each_trans) = "Terminated"
				EMReadScreen mfip_check_vendor_incorporated_yn(each_trans), 		1, 9, 22
				EMReadScreen mfip_check_vendor_federal_tax_id(each_trans), 			9, 9, 41
				EMReadScreen mfip_check_vendor_ssn(each_trans), 					11, 9, 61
				If mfip_check_vendor_ssn(each_trans) = "___ __ ____" Then mfip_check_vendor_ssn(each_trans) = ""
				mfip_check_vendor_ssn(each_trans) = replace(mfip_check_vendor_ssn(each_trans), " ", "-")
				EMReadScreen mfip_check_vendor_2nd_address_type_code(each_trans), 	1, 10, 22
				If mfip_check_vendor_2nd_address_type_code(each_trans) = "1" Then mfip_check_vendor_2nd_address_type_info(each_trans) = "Mailing Address"
				If mfip_check_vendor_2nd_address_type_code(each_trans) = "2" Then mfip_check_vendor_2nd_address_type_info(each_trans) = "Court Order"
				EMReadScreen mfip_check_vendor_2nd_address_eff_date(each_trans), 	8, 11, 15
				If mfip_check_vendor_2nd_address_eff_date(each_trans) = "__ __ __" Then mfip_check_vendor_2nd_address_eff_date(each_trans) = ""
				mfip_check_vendor_2nd_address_eff_date(each_trans) = replace(mfip_check_vendor_2nd_address_eff_date(each_trans), " ", "/")
				EMReadScreen mfip_check_vendor_2nd_name(each_trans), 				30, 11, 15
				EMReadScreen mfip_check_vendor_2nd_c_o(each_trans), 				30, 12, 15
				EMReadScreen mfip_check_vendor_2nd_street_one(each_trans), 			22, 13, 15
				EMReadScreen mfip_check_vendor_2nd_street_two(each_trans), 			22, 14, 15
				EMReadScreen mfip_check_vendor_2nd_city(each_trans), 				15, 15, 15
				EMReadScreen mfip_check_vendor_2nd_state(each_trans), 				2, 15, 35
				EMReadScreen mfip_check_vendor_2nd_zip(each_trans), 				10, 15, 44
				EMReadScreen mfip_check_vendor_direct_deposit_yn(each_trans), 		1, 12, 76
				EMReadScreen mfip_check_vendor_merge_vendor_number(each_trans), 	8, 16, 38
				EMReadScreen mfip_check_vendor_acct_number_required_yn(each_trans), 1, 17, 74
				EMReadScreen mfip_check_vendor_blocked_county_numbers_list(each_trans), 29, 18, 23

				mfip_check_vendor_name(each_trans) = replace(mfip_check_vendor_name(each_trans), "_", "")
				mfip_check_vendor_c_o(each_trans) = replace(mfip_check_vendor_c_o(each_trans), "_", "")
				mfip_check_vendor_street_one(each_trans) = replace(mfip_check_vendor_street_one(each_trans), "_", "")
				mfip_check_vendor_street_two(each_trans) = replace(mfip_check_vendor_street_two(each_trans), "_", "")
				mfip_check_vendor_city(each_trans) = replace(mfip_check_vendor_city(each_trans), "_", "")
				mfip_check_vendor_zip(each_trans) = trim(mfip_check_vendor_zip(each_trans))
				mfip_check_vendor_zip(each_trans) = replace(mfip_check_vendor_zip(each_trans), " ", "-")

				mfip_check_vendor_federal_tax_id(each_trans) = replace(mfip_check_vendor_federal_tax_id(each_trans), "_", "")

				mfip_check_vendor_2nd_name(each_trans) = replace(mfip_check_vendor_2nd_name(each_trans), "_", "")
				mfip_check_vendor_2nd_c_o(each_trans) = replace(mfip_check_vendor_2nd_c_o(each_trans), "_", "")
				mfip_check_vendor_2nd_street_one(each_trans) = replace(mfip_check_vendor_2nd_street_one(each_trans), "_", "")
				mfip_check_vendor_2nd_street_two(each_trans) = replace(mfip_check_vendor_2nd_street_two(each_trans), "_", "")
				mfip_check_vendor_2nd_city(each_trans) = replace(mfip_check_vendor_2nd_city(each_trans), "_", "")
				mfip_check_vendor_2nd_zip(each_trans) = replace(mfip_check_vendor_2nd_zip(each_trans), "_", "")
				mfip_check_vendor_2nd_zip(each_trans) = trim(mfip_check_vendor_2nd_zip(each_trans))
				mfip_check_vendor_2nd_zip(each_trans) = replace(mfip_check_vendor_2nd_zip(each_trans), " ", "-")

				mfip_check_vendor_merge_vendor_number(each_trans) = replace(mfip_check_vendor_merge_vendor_number(each_trans), "_", "")
				mfip_check_vendor_acct_number_required_yn(each_trans) = replace(mfip_check_vendor_acct_number_required_yn(each_trans), "_", "")

				mfip_check_vendor_blocked_county_numbers_list(each_trans) = replace(mfip_check_vendor_blocked_county_numbers_list(each_trans), "_", "")
				mfip_check_vendor_blocked_county_numbers_list(each_trans) = trim((mfip_check_vendor_blocked_county_numbers_list(each_trans)))

				PF3
			Next
		End If

		ReDim mfip_vnda_vendor_number(0)
		ReDim mfip_vnda_vendor_name(0)
		ReDim mfip_vnda_reference_number(0)
		ReDim mfip_vnda_send_to_code(0)
		ReDim mfip_vnda_send_to_info(0)
		ReDim mfip_vnda_expense_type_code(0)
		ReDim mfip_vnda_expense_type_info(0)
		ReDim mfip_vnda_cash_payment_amount(0)
		ReDim mfip_vnda_hg_payment_amount(0)
		ReDim mfip_vnda_total_payment_amount(0)

		Call Back_to_SELF
		Call navigate_to_MAXIS_screen("MONY", "VNDA")

		EMWriteScreen elig_footer_month, 4, 55
		EMWriteScreen elig_footer_year, 4, 58
		Call write_value_and_transmit("X", 12, 16)
		EMReadScreen panel_location, 4, 4, 14
		If panel_location <> "Case" Then 			'this is on the initial search panel, if it says 'Case' it means we are still at the first screen
			auth_count = 0
			vnda_row = 6
			Do
				EMReadScreen vndr_nbr, 7, vnda_row, 3
				EMReadScreen vndr_send, 1, vnda_row, 57
				If vndr_nbr <> "_______" and vndr_send = "V" Then
					mfip_vnda_found = True

					ReDim preserve mfip_vnda_vendor_number(auth_count)
					ReDim preserve mfip_vnda_vendor_name(auth_count)
					ReDim preserve mfip_vnda_reference_number(auth_count)
					ReDim preserve mfip_vnda_send_to_code(auth_count)
					ReDim preserve mfip_vnda_send_to_info(auth_count)
					ReDim preserve mfip_vnda_expense_type_code(auth_count)
					ReDim preserve mfip_vnda_expense_type_info(auth_count)
					ReDim preserve mfip_vnda_cash_payment_amount(auth_count)
					ReDim preserve mfip_vnda_hg_payment_amount(auth_count)
					ReDim preserve mfip_vnda_total_payment_amount(auth_count)

					EMReadScreen mfip_vnda_vendor_number(auth_count), 7, vnda_row, 3
					EMReadScreen mfip_vnda_vendor_name(auth_count), 28, vnda_row, 11
					EMReadScreen mfip_vnda_reference_number(auth_count), 16, vnda_row, 40
					EMReadScreen mfip_vnda_send_to_code(auth_count), 1, vnda_row, 57
					EMReadScreen mfip_vnda_expense_type_code(auth_count), 2, vnda_row, 59
					EMReadScreen mfip_vnda_cash_payment_amount(auth_count), 8, vnda_row, 63
					EMReadScreen mfip_vnda_hg_payment_amount(auth_count), 8, vnda_row, 72

					mfip_vnda_vendor_number(auth_count) = replace(mfip_vnda_vendor_number(auth_count), "_", "")
					mfip_vnda_vendor_name(auth_count) = replace(mfip_vnda_vendor_name(auth_count), "_", "")
					mfip_vnda_reference_number(auth_count) = replace(mfip_vnda_reference_number(auth_count), "_", "")

					If mfip_vnda_send_to_code(auth_count) = "V" Then mfip_vnda_send_to_info(auth_count) = "Vendor"
					If mfip_vnda_send_to_code(auth_count) = "C" Then mfip_vnda_send_to_info(auth_count) = "Client"

					If mfip_vnda_expense_type_code(auth_count) = "01" Then mfip_vnda_expense_type_info(auth_count) = "Rent"
					If mfip_vnda_expense_type_code(auth_count) = "02" Then mfip_vnda_expense_type_info(auth_count) = "Mortgage"
					If mfip_vnda_expense_type_code(auth_count) = "03" Then mfip_vnda_expense_type_info(auth_count) = "Electric"
					If mfip_vnda_expense_type_code(auth_count) = "04" Then mfip_vnda_expense_type_info(auth_count) = "Heat"
					If mfip_vnda_expense_type_code(auth_count) = "05" Then mfip_vnda_expense_type_info(auth_count) = "Phone"
					If mfip_vnda_expense_type_code(auth_count) = "06" Then mfip_vnda_expense_type_info(auth_count) = "Water"
					If mfip_vnda_expense_type_code(auth_count) = "07" Then mfip_vnda_expense_type_info(auth_count) = "Food"
					If mfip_vnda_expense_type_code(auth_count) = "08" Then mfip_vnda_expense_type_info(auth_count) = "Personal Needs"
					If mfip_vnda_expense_type_code(auth_count) = "09" Then mfip_vnda_expense_type_info(auth_count) = "Household Needs"
					If mfip_vnda_expense_type_code(auth_count) = "10" Then mfip_vnda_expense_type_info(auth_count) = "Furniture"
					If mfip_vnda_expense_type_code(auth_count) = "11" Then mfip_vnda_expense_type_info(auth_count) = "Appliances"
					If mfip_vnda_expense_type_code(auth_count) = "12" Then mfip_vnda_expense_type_info(auth_count) = "Clothes"
					If mfip_vnda_expense_type_code(auth_count) = "13" Then mfip_vnda_expense_type_info(auth_count) = "Other"
					If mfip_vnda_expense_type_code(auth_count) = "15" Then mfip_vnda_expense_type_info(auth_count) = "MSA Eligible Spouse"
					If mfip_vnda_expense_type_code(auth_count) = "54" Then mfip_vnda_expense_type_info(auth_count) = "Rent with Landlord Notice"

					mfip_vnda_cash_payment_amount(auth_count) = trim(replace(mfip_vnda_cash_payment_amount(auth_count), "_", ""))
					mfip_vnda_hg_payment_amount(auth_count) = trim(replace(mfip_vnda_hg_payment_amount(auth_count), "_", ""))

					If mfip_vnda_cash_payment_amount(auth_count) = "" Then mfip_vnda_cash_payment_amount(auth_count) = 0
					If mfip_vnda_hg_payment_amount(auth_count) = "" Then mfip_vnda_hg_payment_amount(auth_count) = 0
					mfip_vnda_cash_payment_amount(auth_count) = mfip_vnda_cash_payment_amount(auth_count)*1
					mfip_vnda_hg_payment_amount(auth_count) = mfip_vnda_hg_payment_amount(auth_count)*1
					mfip_vnda_total_payment_amount(auth_count) = mfip_vnda_cash_payment_amount(auth_count) + mfip_vnda_hg_payment_amount(auth_count)
					auth_count = auth_count + 1
				End If
				vnda_row = vnda_row + 1
			Loop until vndr_nbr = "_______"
			PF3
		End If
	end sub
end class

class msa_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public revw_month
	public revw_status
	public revw_caf_date
	public revw_interview_date

	public msa_elig_ref_numbs()
	public msa_elig_membs_full_name()
	public msa_elig_membs_request_yn()
	public msa_elig_membs_member_code()
	public msa_elig_membs_member_info()
	public msa_elig_membs_counted()
	public msa_elig_membs_elig_status()
	public msa_elig_membs_elig_basis_code()
	public msa_elig_membs_elig_basis_info()
	public msa_elig_membs_begin_date()
	public msa_elig_membs_budget_cycle()
	public msa_elig_membs_test_absence()
	public msa_elig_membs_test_age()
	public msa_elig_membs_test_basis_of_eligibility()
	public msa_elig_membs_test_citizenship()
	public msa_elig_membs_test_dupl_assistance()
	public msa_elig_membs_test_fail_coop()
	public msa_elig_membs_test_fraud()
	public msa_elig_membs_test_ive_eligible()
	public msa_elig_membs_test_living_arrangement()
	public msa_elig_membs_test_ssi_basis()
	public msa_elig_membs_test_ssn_coop()
	public msa_elig_membs_test_unit_member()
	public msa_elig_membs_test_verif()
	public msa_elig_membs_test_absence_absent()
	public msa_elig_membs_test_absence_death()
	public msa_elig_membs_test_fail_coop_sign_iaas()
	public msa_elig_membs_test_fail_coop_applied_other_benefits()
	public msa_elig_membs_test_unit_member_faci()
	public msa_elig_membs_test_unit_member_relationship()
	public msa_elig_membs_test_verif_date_of_birth()
	public msa_elig_membs_test_verif_disability()
	public msa_elig_membs_test_verif_ssi()

	public msa_elig_budg_memb_gross_earned_income()
	public msa_elig_budg_memb_blind_disa_student()
	public msa_elig_budg_memb_standard_disregard()
	public msa_elig_budg_memb_earned_income()
	public msa_elig_budg_memb_standard_EI_disregard()
	public msa_elig_budg_memb_work_expense_disa()
	public msa_elig_budg_memb_earned_inc_subtotal()
	public msa_elig_budg_memb_earned_inc_disregard()
	public msa_elig_budg_memb_work_expense_blind()
	public msa_elig_budg_memb_net_earned_income()
	public msa_elig_budg_memb_special_needs_total()

	public msa_elig_case_test_applicant_eligible
	public msa_elig_case_test_application_withdrawn
	public msa_elig_case_test_eligible_member
	public msa_elig_case_test_fail_file
	public msa_elig_case_test_prosp_gross_income
	public msa_elig_case_test_prosp_net_income
	public msa_elig_case_test_residence
	public msa_elig_case_test_assets
	public msa_elig_case_test_retro_net_income
	public msa_elig_case_test_verif
	public msa_elig_case_shared_hh_yn

	public msa_elig_case_test_fail_file_revw
	public msa_elig_case_test_fail_file_hrf
	public msa_elig_case_test_prosp_gross_earned_income
	public msa_elig_case_test_prosp_gross_unearned_income
	public msa_elig_case_test_prosp_gross_deemed_income
	public msa_elig_case_test_prosp_total_gross_income
	public msa_elig_case_test_prosp_gross_ssi_need_standard
	public msa_elig_case_test_prosp_gross_ssi_standard_multiplier
	public msa_elig_case_test_prosp_gross_income_limit
	public msa_elig_case_test_total_countable_assets
	public msa_elig_case_test_maximum_assets
	public msa_elig_case_test_verif_acct
	public msa_elig_case_test_verif_addr
	public msa_elig_case_test_verif_busi
	public msa_elig_case_test_verif_cars
	public msa_elig_case_test_verif_jobs
	public msa_elig_case_test_verif_lump
	public msa_elig_case_test_verif_pact
	public msa_elig_case_test_verif_rbic
	public msa_elig_case_test_verif_secu
	public msa_elig_case_test_verif_spon
	public msa_elig_case_test_verif_stin
	public msa_elig_case_test_verif_unea

	public msa_elig_case_budg_type

	public msa_elig_budg_ssi_standard_fbr
	public msa_elig_budg_standard_disregard
	public msa_elig_budg_unearned_income
	public msa_elig_budg_deemed_income
	public msa_elig_budg_net_unearned_income
	public msa_elig_budg_net_earned_income

	public msa_elig_budg_spec_standard_ref_numb()
	public msa_elig_budg_spec_standard_type_code()
	public msa_elig_budg_spec_standard_type_info()
	public msa_elig_budg_spec_standard_amount()

	public msa_elig_budg_need_standard
	public msa_elig_budg_net_income
	public msa_elig_budg_msa_grant
	public msa_elig_budg_amount_already_issued
	public msa_elig_budg_supplement_due
	public msa_elig_budg_overpayment
	public msa_elig_budg_adjusted_grant_amount
	public msa_elig_budg_recoupment
	public msa_elig_budg_current_payment

	public msa_elig_budg_basic_needs_assistance_standard
	public msa_elig_budg_special_needs
	public msa_elig_budg_household_total_needs

	public msa_elig_summ_approved_date
	public msa_elig_summ_process_date
	public msa_elig_summ_date_last_approval
	public msa_elig_summ_curr_prog_status
	public msa_elig_summ_eligibility_result
	public msa_elig_summ_reporting_status
	public msa_elig_summ_source_of_info
	public msa_elig_summ_benefit
	public msa_elig_summ_recertification_date
	public msa_elig_summ_budget_cycle
	public msa_elig_summ_eligible_houshold_members
	public msa_elig_summ_shared_houshold
	public msa_elig_summ_vendor_reason_code
	public msa_elig_summ_vendor_reason_info
	public msa_elig_summ_responsible_county
	public msa_elig_summ_servicing_county
	public msa_elig_summ_total_assets
	public msa_elig_summ_maximum_assets
	public msa_elig_summ_grant
	public msa_elig_summ_current_payment
	public msa_elig_summ_worker_message

	public sub read_elig()
		approved_today = False
		approved_version_found = False

		call navigate_to_MAXIS_screen("ELIG", "MSA ")
		EMWriteScreen elig_footer_month, 20, 56
		EMWriteScreen elig_footer_year, 20, 59
		Call find_last_approved_ELIG_version(20, 79, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		If approved_version_found = True Then
			EMReadScreen approval_date, 8, 3, 14		'this is the actual approval date - not the process date'
			approval_date = DateAdd("d", 0, approval_date)
			If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
			If allow_late_note = True Then
				one_week_ago = DateAdd("d", -7, date)
				If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
			End If
			If developer_mode = True Then approved_today = True			'TESTING OPTION'
		End If
		If approved_today = True Then
			ReDim msa_elig_ref_numbs(0)
			ReDim msa_elig_membs_full_name(0)
			ReDim msa_elig_membs_request_yn(0)
			ReDim msa_elig_membs_member_code(0)
			ReDim msa_elig_membs_member_info(0)
			ReDim msa_elig_membs_counted(0)
			ReDim msa_elig_membs_elig_status(0)
			ReDim msa_elig_membs_elig_basis_code(0)
			ReDim msa_elig_membs_elig_basis_info(0)
			ReDim msa_elig_membs_begin_date(0)
			ReDim msa_elig_membs_budget_cycle(0)
			ReDim msa_elig_membs_test_absence(0)
			ReDim msa_elig_membs_test_age(0)
			ReDim msa_elig_membs_test_basis_of_eligibility(0)
			ReDim msa_elig_membs_test_citizenship(0)
			ReDim msa_elig_membs_test_dupl_assistance(0)
			ReDim msa_elig_membs_test_fail_coop(0)
			ReDim msa_elig_membs_test_fraud(0)
			ReDim msa_elig_membs_test_ive_eligible(0)
			ReDim msa_elig_membs_test_living_arrangement(0)
			ReDim msa_elig_membs_test_ssi_basis(0)
			ReDim msa_elig_membs_test_ssn_coop(0)
			ReDim msa_elig_membs_test_unit_member(0)
			ReDim msa_elig_membs_test_verif(0)
			ReDim msa_elig_membs_test_absence_absent(0)
			ReDim msa_elig_membs_test_absence_death(0)
			ReDim msa_elig_membs_test_fail_coop_sign_iaas(0)
			ReDim msa_elig_membs_test_fail_coop_applied_other_benefits(0)
			ReDim msa_elig_membs_test_unit_member_faci(0)
			ReDim msa_elig_membs_test_unit_member_relationship(0)
			ReDim msa_elig_membs_test_verif_date_of_birth(0)
			ReDim msa_elig_membs_test_verif_disability(0)
			ReDim msa_elig_membs_test_verif_ssi(0)
			ReDim msa_elig_budg_memb_gross_earned_income(0)
			ReDim msa_elig_budg_memb_blind_disa_student(0)
			ReDim msa_elig_budg_memb_standard_disregard(0)
			ReDim msa_elig_budg_memb_earned_income(0)
			ReDim msa_elig_budg_memb_standard_EI_disregard(0)
			ReDim msa_elig_budg_memb_work_expense_disa(0)
			ReDim msa_elig_budg_memb_earned_inc_subtotal(0)
			ReDim msa_elig_budg_memb_earned_inc_disregard(0)
			ReDim msa_elig_budg_memb_work_expense_blind(0)
			ReDim msa_elig_budg_memb_net_earned_income(0)
			ReDim msa_elig_budg_memb_special_needs_total(0)


			ReDim msa_elig_budg_spec_standard_ref_numb(0)
			ReDim msa_elig_budg_spec_standard_type_code(0)
			ReDim msa_elig_budg_spec_standard_type_info(0)
			ReDim msa_elig_budg_spec_standard_amount(0)

			elig_memb_count = 0
			msa_row = 7
			Do
				EMReadScreen ref_numb, 2, msa_row, 5

				ReDim preserve msa_elig_ref_numbs(elig_memb_count)
				ReDim preserve msa_elig_membs_full_name(elig_memb_count)
				ReDim preserve msa_elig_membs_request_yn(elig_memb_count)
				ReDim preserve msa_elig_membs_member_code(elig_memb_count)
				ReDim preserve msa_elig_membs_member_info(elig_memb_count)
				ReDim preserve msa_elig_membs_counted(elig_memb_count)
				ReDim preserve msa_elig_membs_elig_status(elig_memb_count)
				ReDim preserve msa_elig_membs_elig_basis_code(elig_memb_count)
				ReDim preserve msa_elig_membs_elig_basis_info(elig_memb_count)
				ReDim preserve msa_elig_membs_begin_date(elig_memb_count)
				ReDim preserve msa_elig_membs_budget_cycle(elig_memb_count)
				ReDim preserve msa_elig_membs_test_absence(elig_memb_count)
				ReDim preserve msa_elig_membs_test_age(elig_memb_count)
				ReDim preserve msa_elig_membs_test_basis_of_eligibility(elig_memb_count)
				ReDim preserve msa_elig_membs_test_citizenship(elig_memb_count)
				ReDim preserve msa_elig_membs_test_dupl_assistance(elig_memb_count)
				ReDim preserve msa_elig_membs_test_fail_coop(elig_memb_count)
				ReDim preserve msa_elig_membs_test_fraud(elig_memb_count)
				ReDim preserve msa_elig_membs_test_ive_eligible(elig_memb_count)
				ReDim preserve msa_elig_membs_test_living_arrangement(elig_memb_count)
				ReDim preserve msa_elig_membs_test_ssi_basis(elig_memb_count)
				ReDim preserve msa_elig_membs_test_ssn_coop(elig_memb_count)
				ReDim preserve msa_elig_membs_test_unit_member(elig_memb_count)
				ReDim preserve msa_elig_membs_test_verif(elig_memb_count)
				ReDim preserve msa_elig_membs_test_absence_absent(elig_memb_count)
				ReDim preserve msa_elig_membs_test_absence_death(elig_memb_count)
				ReDim preserve msa_elig_membs_test_fail_coop_sign_iaas(elig_memb_count)
				ReDim preserve msa_elig_membs_test_fail_coop_applied_other_benefits(elig_memb_count)
				ReDim preserve msa_elig_membs_test_unit_member_faci(elig_memb_count)
				ReDim preserve msa_elig_membs_test_unit_member_relationship(elig_memb_count)
				ReDim preserve msa_elig_membs_test_verif_date_of_birth(elig_memb_count)
				ReDim preserve msa_elig_membs_test_verif_disability(elig_memb_count)
				ReDim preserve msa_elig_membs_test_verif_ssi(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_gross_earned_income(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_blind_disa_student(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_standard_disregard(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_earned_income(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_standard_EI_disregard(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_work_expense_disa(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_earned_inc_subtotal(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_earned_inc_disregard(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_work_expense_blind(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_net_earned_income(elig_memb_count)
				ReDim preserve msa_elig_budg_memb_special_needs_total(elig_memb_count)

				msa_elig_ref_numbs(elig_memb_count) = ref_numb

				EMReadScreen msa_elig_membs_request_yn(elig_memb_count), 1, msa_row, 25

				EMReadScreen msa_elig_membs_member_code(elig_memb_count), 1, msa_row, 29
				EMReadScreen msa_elig_membs_counted(elig_memb_count), 10, msa_row, 33
				If msa_elig_membs_member_code(elig_memb_count) = "A" Then msa_elig_membs_member_info(elig_memb_count) = "Eligible"
				If msa_elig_membs_member_code(elig_memb_count) = "1" Then msa_elig_membs_member_info(elig_memb_count) = "Non-MSA Spouse"
				If msa_elig_membs_member_code(elig_memb_count) = "2" Then msa_elig_membs_member_info(elig_memb_count) = "Non-MSA Parent - Deem Income/Resources"
				If msa_elig_membs_member_code(elig_memb_count) = "4" Then msa_elig_membs_member_info(elig_memb_count) = "Step Parent - Deem Resources"
				If msa_elig_membs_member_code(elig_memb_count) = "N" Then msa_elig_membs_member_info(elig_memb_count) = "Not Counted"
				If msa_elig_membs_member_code(elig_memb_count) = "I" Then msa_elig_membs_member_info(elig_memb_count) = "Ineligible"
				msa_elig_membs_counted(elig_memb_count) = trim(msa_elig_membs_counted(elig_memb_count))

				EMReadScreen msa_elig_membs_elig_status(elig_memb_count), 10, msa_row, 46
				msa_elig_membs_elig_status(elig_memb_count) = trim(msa_elig_membs_elig_status(elig_memb_count))

				EMReadScreen msa_elig_membs_elig_basis_code(elig_memb_count), 1, msa_row, 59
				If msa_elig_membs_elig_basis_code(elig_memb_count) = "A" Then msa_elig_membs_elig_basis_info(elig_memb_count) = "Aged"
				If msa_elig_membs_elig_basis_code(elig_memb_count) = "B" Then msa_elig_membs_elig_basis_info(elig_memb_count) = "Blind"
				If msa_elig_membs_elig_basis_code(elig_memb_count) = "D" Then msa_elig_membs_elig_basis_info(elig_memb_count) = "Disabled"
				If msa_elig_membs_elig_basis_code(elig_memb_count) = "S" Then msa_elig_membs_elig_basis_info(elig_memb_count) = "SSI"
				If msa_elig_membs_elig_basis_code(elig_memb_count) = " " Then msa_elig_membs_elig_basis_info(elig_memb_count) = "Blank"

				EMReadScreen msa_elig_membs_begin_date(elig_memb_count), 8, msa_row, 63
				msa_elig_membs_begin_date(elig_memb_count) = trim(msa_elig_membs_begin_date(elig_memb_count))
				If msa_elig_membs_begin_date(elig_memb_count) <> "" then msa_elig_membs_begin_date(elig_memb_count) = replace(msa_elig_membs_begin_date(elig_memb_count), " ", "/")

				EMReadScreen msa_elig_membs_budget_cycle(elig_memb_count), 1, msa_row, 76
				If msa_elig_membs_budget_cycle(elig_memb_count) = "P" Then msa_elig_membs_budget_cycle(elig_memb_count) = "Prospective"
				If msa_elig_membs_budget_cycle(elig_memb_count) = "R" Then msa_elig_membs_budget_cycle(elig_memb_count) = "Retrospective"

				Call write_value_and_transmit("X", msa_row, 3)

				EMReadScreen full_name_information, 20, 7, 10
				full_name_information = trim(full_name_information)
				name_array = split(full_name_information, " ")
				For each name_parts in name_array
					If name_parts <> "" Then
						If len(name_parts) <> 1 Then msa_elig_membs_full_name(elig_memb_count) = msa_elig_membs_full_name(elig_memb_count) & " " & name_parts
					End If
				Next
				msa_elig_membs_full_name(elig_memb_count) = trim((msa_elig_membs_full_name(elig_memb_count)))

				EMReadScreen msa_elig_membs_test_absence(elig_memb_count), 				6, 10, 8
				EMReadScreen msa_elig_membs_test_age(elig_memb_count), 					6, 11, 8
				EMReadScreen msa_elig_membs_test_basis_of_eligibility(elig_memb_count), 6, 12, 8
				EMReadScreen msa_elig_membs_test_citizenship(elig_memb_count), 			6, 13, 8
				EMReadScreen msa_elig_membs_test_dupl_assistance(elig_memb_count), 		6, 14, 8
				EMReadScreen msa_elig_membs_test_fail_coop(elig_memb_count), 			6, 15, 8
				EMReadScreen msa_elig_membs_test_fraud(elig_memb_count), 				6, 16, 8

				EMReadScreen msa_elig_membs_test_ive_eligible(elig_memb_count), 		6, 10, 47
				EMReadScreen msa_elig_membs_test_living_arrangement(elig_memb_count), 	6, 11, 47
				EMReadScreen msa_elig_membs_test_ssi_basis(elig_memb_count), 			6, 12, 47
				EMReadScreen msa_elig_membs_test_ssn_coop(elig_memb_count), 			6, 13, 47
				EMReadScreen msa_elig_membs_test_unit_member(elig_memb_count), 			6, 14, 47
				EMReadScreen msa_elig_membs_test_verif(elig_memb_count), 				6, 15, 47

				msa_elig_membs_test_absence(elig_memb_count) = trim(msa_elig_membs_test_absence(elig_memb_count))
				msa_elig_membs_test_age(elig_memb_count) = trim(msa_elig_membs_test_age(elig_memb_count))
				msa_elig_membs_test_basis_of_eligibility(elig_memb_count) = trim(msa_elig_membs_test_basis_of_eligibility(elig_memb_count))
				msa_elig_membs_test_citizenship(elig_memb_count) = trim(msa_elig_membs_test_citizenship(elig_memb_count))
				msa_elig_membs_test_dupl_assistance(elig_memb_count) = trim(msa_elig_membs_test_dupl_assistance(elig_memb_count))
				msa_elig_membs_test_fail_coop(elig_memb_count) = trim(msa_elig_membs_test_fail_coop(elig_memb_count))
				msa_elig_membs_test_fraud(elig_memb_count) = trim(msa_elig_membs_test_fraud(elig_memb_count))

				msa_elig_membs_test_ive_eligible(elig_memb_count) = trim(msa_elig_membs_test_ive_eligible(elig_memb_count))
				msa_elig_membs_test_living_arrangement(elig_memb_count) = trim(msa_elig_membs_test_living_arrangement(elig_memb_count))
				msa_elig_membs_test_ssi_basis(elig_memb_count) = trim(msa_elig_membs_test_ssi_basis(elig_memb_count))
				msa_elig_membs_test_ssn_coop(elig_memb_count) = trim(msa_elig_membs_test_ssn_coop(elig_memb_count))
				msa_elig_membs_test_unit_member(elig_memb_count) = trim(msa_elig_membs_test_unit_member(elig_memb_count))
				msa_elig_membs_test_verif(elig_memb_count) = trim(msa_elig_membs_test_verif(elig_memb_count))

				Call write_value_and_transmit("X", 10, 6)
				EMReadScreen msa_elig_membs_test_absence_absent(elig_memb_count), 	6, 12, 40
				EMReadScreen msa_elig_membs_test_absence_death(elig_memb_count), 	6, 13, 40

				msa_elig_membs_test_absence_absent(elig_memb_count) = trim(msa_elig_membs_test_absence_absent(elig_memb_count))
				msa_elig_membs_test_absence_death(elig_memb_count) = trim(msa_elig_membs_test_absence_death(elig_memb_count))
				transmit

				Call write_value_and_transmit("X", 15, 6)
				EMReadScreen msa_elig_membs_test_fail_coop_sign_iaas(elig_memb_count), 				6, 12, 24
				EMReadScreen msa_elig_membs_test_fail_coop_applied_other_benefits(elig_memb_count), 6, 13, 24

				msa_elig_membs_test_fail_coop_sign_iaas(elig_memb_count) = trim(msa_elig_membs_test_fail_coop_sign_iaas(elig_memb_count))
				msa_elig_membs_test_fail_coop_applied_other_benefits(elig_memb_count) = trim(msa_elig_membs_test_fail_coop_applied_other_benefits(elig_memb_count))
				transmit

				Call write_value_and_transmit("X", 14, 45)
				EMReadScreen msa_elig_membs_test_unit_member_faci(elig_memb_count), 		6, 12, 24
				EMReadScreen msa_elig_membs_test_unit_member_relationship(elig_memb_count), 6, 13, 24

				msa_elig_membs_test_unit_member_faci(elig_memb_count) = trim(msa_elig_membs_test_unit_member_faci(elig_memb_count))
				msa_elig_membs_test_unit_member_relationship(elig_memb_count) = trim(msa_elig_membs_test_unit_member_relationship(elig_memb_count))
				transmit

				Call write_value_and_transmit("X", 15, 45)
				EMReadScreen msa_elig_membs_test_verif_date_of_birth(elig_memb_count), 	6, 12, 30
				EMReadScreen msa_elig_membs_test_verif_disability(elig_memb_count), 	6, 13, 30
				EMReadScreen msa_elig_membs_test_verif_ssi(elig_memb_count), 			6, 14, 30

				msa_elig_membs_test_verif_date_of_birth(elig_memb_count) = trim(msa_elig_membs_test_verif_date_of_birth(elig_memb_count))
				msa_elig_membs_test_verif_disability(elig_memb_count) = trim(msa_elig_membs_test_verif_disability(elig_memb_count))
				msa_elig_membs_test_verif_ssi(elig_memb_count) = trim(msa_elig_membs_test_verif_ssi(elig_memb_count))
				transmit

				transmit

				msa_row = msa_row + 1
				elig_memb_count = elig_memb_count + 1
				EMReadScreen next_ref_numb, 2, msa_row, 5
			Loop until next_ref_numb = "  "
			transmit 		'going to the next panel - MSCR

			EMReadScreen msa_elig_case_test_applicant_eligible, 	6, 6, 7
			EMReadScreen msa_elig_case_test_application_withdrawn, 	6, 7, 7
			EMReadScreen msa_elig_case_test_eligible_member, 		6, 8, 7
			EMReadScreen msa_elig_case_test_fail_file, 				6, 9, 7
			EMReadScreen msa_elig_case_test_prosp_gross_income, 	6, 10, 7

			EMReadScreen msa_elig_case_test_prosp_net_income, 	6, 6, 45
			EMReadScreen msa_elig_case_test_residence, 			6, 7, 45
			EMReadScreen msa_elig_case_test_assets, 			6, 8, 45
			EMReadScreen msa_elig_case_test_retro_net_income, 	6, 9, 45
			EMReadScreen msa_elig_case_test_verif, 				6, 10, 45

			EMReadScreen msa_elig_case_shared_hh_yn, 1, 13, 61

			msa_elig_case_test_applicant_eligible = trim(msa_elig_case_test_applicant_eligible)
			msa_elig_case_test_application_withdrawn = trim(msa_elig_case_test_application_withdrawn)
			msa_elig_case_test_eligible_member = trim(msa_elig_case_test_eligible_member)
			msa_elig_case_test_fail_file = trim(msa_elig_case_test_fail_file)
			msa_elig_case_test_prosp_gross_income = trim(msa_elig_case_test_prosp_gross_income)

			msa_elig_case_test_prosp_net_income = trim(msa_elig_case_test_prosp_net_income)
			msa_elig_case_test_residence = trim(msa_elig_case_test_residence)
			msa_elig_case_test_assets = trim(msa_elig_case_test_assets)
			msa_elig_case_test_retro_net_income = trim(msa_elig_case_test_retro_net_income)
			msa_elig_case_test_verif = trim(msa_elig_case_test_verif)

			If msa_elig_case_test_fail_file <> "NA" Then
				Call write_value_and_transmit("X", 9, 5)

				EMReadScreen msa_elig_case_test_fail_file_revw, 6, 8, 28
				EMReadScreen msa_elig_case_test_fail_file_hrf, 6, 9, 28

				msa_elig_case_test_fail_file_revw = trim(msa_elig_case_test_fail_file_revw)
				msa_elig_case_test_fail_file_hrf = trim(msa_elig_case_test_fail_file_hrf)
				transmit
			End If

			If msa_elig_case_test_prosp_gross_income <> "NA" Then
				Call write_value_and_transmit("X", 10, 5)

				EMReadScreen msa_elig_case_test_prosp_gross_earned_income, 		9, 9, 55
				EMReadScreen msa_elig_case_test_prosp_gross_unearned_income, 	9, 10, 55
				EMReadScreen msa_elig_case_test_prosp_gross_deemed_income, 		9, 11, 55

				EMReadScreen msa_elig_case_test_prosp_total_gross_income, 			9, 13, 55
				EMReadScreen msa_elig_case_test_prosp_gross_ssi_need_standard, 		9, 14, 55
				EMReadScreen msa_elig_case_test_prosp_gross_ssi_standard_multiplier, 1, 15, 63
				EMReadScreen msa_elig_case_test_prosp_gross_income_limit, 			9, 16, 55


				msa_elig_case_test_prosp_gross_earned_income = trim(msa_elig_case_test_prosp_gross_earned_income)
				msa_elig_case_test_prosp_gross_unearned_income = trim(msa_elig_case_test_prosp_gross_unearned_income)
				msa_elig_case_test_prosp_gross_deemed_income = trim(msa_elig_case_test_prosp_gross_deemed_income)

				msa_elig_case_test_prosp_total_gross_income = trim(msa_elig_case_test_prosp_total_gross_income)
				msa_elig_case_test_prosp_gross_ssi_need_standard = trim(msa_elig_case_test_prosp_gross_ssi_need_standard)
				msa_elig_case_test_prosp_gross_income_limit = trim(msa_elig_case_test_prosp_gross_income_limit)
				transmit
			End If

			If msa_elig_case_test_assets <> "NA" Then
				Call write_value_and_transmit("X", 8, 43)

				EMReadScreen msa_elig_case_test_total_countable_assets, 10, 8, 48
				EMReadScreen msa_elig_case_test_maximum_assets, 		10, 9, 48

				msa_elig_case_test_total_countable_assets = replace(msa_elig_case_test_total_countable_assets, "_", "")
				msa_elig_case_test_maximum_assets = replace(msa_elig_case_test_maximum_assets, "_", "")
				transmit
			End If

			If msa_elig_case_test_verif <> "NA" Then
				Call write_value_and_transmit("X", 10, 43)

				EMReadScreen msa_elig_case_test_verif_acct, 6, 6, 32
				EMReadScreen msa_elig_case_test_verif_addr, 6, 7, 32
				EMReadScreen msa_elig_case_test_verif_busi, 6, 8, 32
				EMReadScreen msa_elig_case_test_verif_cars, 6, 9, 32
				EMReadScreen msa_elig_case_test_verif_jobs, 6, 10, 32
				EMReadScreen msa_elig_case_test_verif_lump, 6, 11, 32
				EMReadScreen msa_elig_case_test_verif_pact, 6, 12, 32
				EMReadScreen msa_elig_case_test_verif_rbic, 6, 13, 32
				EMReadScreen msa_elig_case_test_verif_secu, 6, 14, 32
				EMReadScreen msa_elig_case_test_verif_spon, 6, 15, 32
				EMReadScreen msa_elig_case_test_verif_stin, 6, 16, 32
				EMReadScreen msa_elig_case_test_verif_unea, 6, 17, 32

				msa_elig_case_test_verif_acct = trim(msa_elig_case_test_verif_acct)
				msa_elig_case_test_verif_addr = trim(msa_elig_case_test_verif_addr)
				msa_elig_case_test_verif_busi = trim(msa_elig_case_test_verif_busi)
				msa_elig_case_test_verif_cars = trim(msa_elig_case_test_verif_cars)
				msa_elig_case_test_verif_jobs = trim(msa_elig_case_test_verif_jobs)
				msa_elig_case_test_verif_lump = trim(msa_elig_case_test_verif_lump)
				msa_elig_case_test_verif_pact = trim(msa_elig_case_test_verif_pact)
				msa_elig_case_test_verif_rbic = trim(msa_elig_case_test_verif_rbic)
				msa_elig_case_test_verif_secu = trim(msa_elig_case_test_verif_secu)
				msa_elig_case_test_verif_spon = trim(msa_elig_case_test_verif_spon)
				msa_elig_case_test_verif_stin = trim(msa_elig_case_test_verif_stin)
				msa_elig_case_test_verif_unea = trim(msa_elig_case_test_verif_unea)
				transmit
			End If

			transmit 		'going to the next panel - MSCB

			EmReadScreen msa_elig_case_budg_type, 12, 3, 25
			msa_elig_case_budg_type = trim(msa_elig_case_budg_type)

			If msa_elig_case_budg_type = "SSI TYPE" Then
				EMReadScreen msa_elig_budg_ssi_standard_fbr, 	9, 6, 32
				EMReadScreen msa_elig_budg_standard_disregard, 	9, 8, 32

				msa_elig_budg_ssi_standard_fbr = trim(msa_elig_budg_ssi_standard_fbr)
				msa_elig_budg_standard_disregard = trim(msa_elig_budg_standard_disregard)
			End If

			If msa_elig_case_budg_type = "Non-SSI TYPE" Then
				EMReadScreen msa_elig_budg_unearned_income, 	9, 6, 32
				EMReadScreen msa_elig_budg_deemed_income, 		9, 7, 32
				EMReadScreen msa_elig_budg_standard_disregard, 	9, 8, 32
				EMReadScreen msa_elig_budg_net_unearned_income, 9, 9, 32
				EMReadScreen msa_elig_budg_net_earned_income, 	9, 10, 32

				msa_elig_budg_unearned_income = trim(msa_elig_budg_unearned_income)
				msa_elig_budg_deemed_income = trim(msa_elig_budg_deemed_income)
				msa_elig_budg_standard_disregard = trim(msa_elig_budg_standard_disregard)
				msa_elig_budg_net_unearned_income = trim(msa_elig_budg_net_unearned_income)
				msa_elig_budg_net_earned_income = trim(msa_elig_budg_net_earned_income)
				If msa_elig_budg_deemed_income = "" Then msa_elig_budg_deemed_income = "0.00"

				Call write_value_and_transmit("X", 10, 3)

				EMReadScreen msa_elig_budg_gross_earned_income, 	9, 9, 42
				EMReadScreen msa_elig_budg_blind_disa_student, 		9, 10, 42
				EMReadScreen msa_elig_budg_earned_standard_disregard, 9, 11, 42
				EMReadScreen msa_elig_budg_earned_income, 			9, 12, 42
				EMReadScreen msa_elig_budg_standard_EI_disregard, 	9, 13, 42
				EMReadScreen msa_elig_budg_work_expense_disa, 		9, 14, 42
				EMReadScreen msa_elig_budg_earned_inc_subtotal, 	9, 15, 42
				EMReadScreen msa_elig_budg_earned_inc_disregard, 	9, 16, 42
				EMReadScreen msa_elig_budg_work_expense_blind, 		9, 17, 42

				EMReadScreen ref_numb_one, 2, 7, 62
				If ref_numb_one <> "  " Then
					For memn_count = 0 to UBound(msa_elig_ref_numbs)
						If ref_numb_one = msa_elig_ref_numbs(memn_count) Then
							EMReadScreen msa_elig_budg_memb_gross_earned_income(memn_count), 	9, 9, 54
							EMReadScreen msa_elig_budg_memb_blind_disa_student(memn_count), 	9, 10, 54
							EMReadScreen msa_elig_budg_memb_standard_disregard(memn_count), 	9, 11, 54
							EMReadScreen msa_elig_budg_memb_earned_income(memn_count), 			9, 12, 54
							EMReadScreen msa_elig_budg_memb_standard_EI_disregard(memn_count), 	9, 13, 54
							EMReadScreen msa_elig_budg_memb_work_expense_disa(memn_count), 		9, 14, 54
							EMReadScreen msa_elig_budg_memb_earned_inc_subtotal(memn_count), 	9, 15, 54
							EMReadScreen msa_elig_budg_memb_earned_inc_disregard(memn_count), 	9, 16, 54
							EMReadScreen msa_elig_budg_memb_work_expense_blind(memn_count), 	9, 17, 54
							EMReadScreen msa_elig_budg_memb_net_earned_income(memn_count), 		9, 18, 54

							msa_elig_budg_memb_gross_earned_income(memn_count) = trim(msa_elig_budg_memb_gross_earned_income(memn_count))
							msa_elig_budg_memb_blind_disa_student(memn_count) = trim(msa_elig_budg_memb_blind_disa_student(memn_count))
							msa_elig_budg_memb_standard_disregard(memn_count) = trim(msa_elig_budg_memb_standard_disregard(memn_count))
							msa_elig_budg_memb_earned_income(memn_count) = trim(msa_elig_budg_memb_earned_income(memn_count))
							msa_elig_budg_memb_standard_EI_disregard(memn_count) = trim(msa_elig_budg_memb_standard_EI_disregard(memn_count))
							msa_elig_budg_memb_work_expense_disa(memn_count) = trim(msa_elig_budg_memb_work_expense_disa(memn_count))
							msa_elig_budg_memb_earned_inc_subtotal(memn_count) = trim(msa_elig_budg_memb_earned_inc_subtotal(memn_count))
							msa_elig_budg_memb_earned_inc_disregard(memn_count) = trim(msa_elig_budg_memb_earned_inc_disregard(memn_count))
							msa_elig_budg_memb_work_expense_blind(memn_count) = trim(msa_elig_budg_memb_work_expense_blind(memn_count))
							msa_elig_budg_memb_net_earned_income(memn_count) = trim(msa_elig_budg_memb_net_earned_income(memn_count))
						End If
					Next
				End if

				EMReadScreen ref_numb_two, 2, 7, 75
				If ref_numb_two <> "  " Then
					For memn_count = 0 to UBound(msa_elig_ref_numbs)
						If ref_numb_two = msa_elig_ref_numbs(memn_count) Then
							EMReadScreen msa_elig_budg_memb_gross_earned_income(memn_count), 	9, 9, 67
							EMReadScreen msa_elig_budg_memb_blind_disa_student(memn_count), 	9, 10, 67
							EMReadScreen msa_elig_budg_memb_standard_disregard(memn_count), 	9, 11, 67
							EMReadScreen msa_elig_budg_memb_earned_income(memn_count), 			9, 12, 67
							EMReadScreen msa_elig_budg_memb_standard_EI_disregard(memn_count), 	9, 13, 67
							EMReadScreen msa_elig_budg_memb_work_expense_disa(memn_count), 		9, 14, 67
							EMReadScreen msa_elig_budg_memb_earned_inc_subtotal(memn_count), 	9, 15, 67
							EMReadScreen msa_elig_budg_memb_earned_inc_disregard(memn_count), 	9, 16, 67
							EMReadScreen msa_elig_budg_memb_work_expense_blind(memn_count), 	9, 17, 67
							EMReadScreen msa_elig_budg_memb_net_earned_income(memn_count), 		9, 18, 67

							msa_elig_budg_memb_gross_earned_income(memn_count) = trim(msa_elig_budg_memb_gross_earned_income(memn_count))
							msa_elig_budg_memb_blind_disa_student(memn_count) = trim(msa_elig_budg_memb_blind_disa_student(memn_count))
							msa_elig_budg_memb_standard_disregard(memn_count) = trim(msa_elig_budg_memb_standard_disregard(memn_count))
							msa_elig_budg_memb_earned_income(memn_count) = trim(msa_elig_budg_memb_earned_income(memn_count))
							msa_elig_budg_memb_standard_EI_disregard(memn_count) = trim(msa_elig_budg_memb_standard_EI_disregard(memn_count))
							msa_elig_budg_memb_work_expense_disa(memn_count) = trim(msa_elig_budg_memb_work_expense_disa(memn_count))
							msa_elig_budg_memb_earned_inc_subtotal(memn_count) = trim(msa_elig_budg_memb_earned_inc_subtotal(memn_count))
							msa_elig_budg_memb_earned_inc_disregard(memn_count) = trim(msa_elig_budg_memb_earned_inc_disregard(memn_count))
							msa_elig_budg_memb_work_expense_blind(memn_count) = trim(msa_elig_budg_memb_work_expense_blind(memn_count))
							msa_elig_budg_memb_net_earned_income(memn_count) = trim(msa_elig_budg_memb_net_earned_income(memn_count))
						End If
					Next
				End if
				transmit
			End If

			EMReadScreen msa_elig_budg_need_standard, 			9, 6, 72
			EMReadScreen msa_elig_budg_net_income, 				9, 7, 72
			EMReadScreen msa_elig_budg_msa_grant, 				9, 8, 72

			EMReadScreen msa_elig_budg_amount_already_issued, 	9, 11, 72
			EMReadScreen msa_elig_budg_supplement_due, 			9, 12, 72
			EMReadScreen msa_elig_budg_overpayment, 			9, 13, 72

			EMReadScreen msa_elig_budg_adjusted_grant_amount, 	9, 15, 72
			EMReadScreen msa_elig_budg_recoupment, 				9, 16, 72
			EMReadScreen msa_elig_budg_current_payment, 		9, 17, 72

			msa_elig_budg_need_standard = trim(msa_elig_budg_need_standard)
			msa_elig_budg_net_income = trim(msa_elig_budg_net_income)
			msa_elig_budg_msa_grant = trim(msa_elig_budg_msa_grant)

			msa_elig_budg_amount_already_issued = trim(msa_elig_budg_amount_already_issued)
			msa_elig_budg_supplement_due = trim(msa_elig_budg_supplement_due)
			msa_elig_budg_overpayment = trim(msa_elig_budg_overpayment)

			msa_elig_budg_adjusted_grant_amount = trim(msa_elig_budg_adjusted_grant_amount)
			msa_elig_budg_recoupment = trim(msa_elig_budg_recoupment)
			msa_elig_budg_current_payment = trim(msa_elig_budg_current_payment)


			Call write_value_and_transmit("X", 6, 43)
			EMReadScreen msa_elig_budg_basic_needs_assistance_standard, 10, 16, 59
			EMReadScreen msa_elig_budg_special_needs, 					10, 17, 59
			EMReadScreen msa_elig_budg_household_total_needs, 			10, 18, 59

			msa_elig_budg_basic_needs_assistance_standard = trim(msa_elig_budg_basic_needs_assistance_standard)
			msa_elig_budg_special_needs = trim(msa_elig_budg_special_needs)
			msa_elig_budg_household_total_needs = trim(msa_elig_budg_household_total_needs)

			msa_col = 6
			spec_needs_count = 0
			For msa_col = 6 to 42 step 36
				EMReadScreen ref_numb, 2, 5, msa_col+9
				If ref_numb <> "  " Then
					For msa_membs = 0 to UBound(msa_elig_ref_numbs)
						If msa_elig_ref_numbs(msa_membs) = ref_numb Then
							EMReadScreen amount_total, 8, 15, msa_col+26
							msa_elig_budg_memb_special_needs_total(msa_membs) = amount_total
						End If
					Next

					msa_row = 8
					EMReadScreen info_code, 2, msa_row, msa_col
					Do while info_code <> "__"
						ReDim preserve msa_elig_budg_spec_standard_ref_numb(spec_needs_count)
						ReDim preserve msa_elig_budg_spec_standard_type_code(spec_needs_count)
						ReDim preserve msa_elig_budg_spec_standard_type_info(spec_needs_count)
						ReDim preserve msa_elig_budg_spec_standard_amount(spec_needs_count)

						msa_elig_budg_spec_standard_ref_numb(spec_needs_count) = ref_numb
						msa_elig_budg_spec_standard_type_code(spec_needs_count) = info_code
						If info_code = "" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = ""
						If info_code = "01" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - High Protein > 79 Gr/Day"
						If info_code = "02" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Control Protein 40-60 GR/DAY"
						If info_code = "03" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Control Protein < 40 GR/DAY"
						If info_code = "04" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Low Cholesterol"
						If info_code = "05" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - High Residue"
						If info_code = "06" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Pregnancy and Lactation"
						If info_code = "07" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Gluten Free"
						If info_code = "08" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Lactose Free"
						If info_code = "09" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Anti Dumping"
						If info_code = "10" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Hypoglycemic"
						If info_code = "11" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "DIET - Ketogenic"
						If info_code = "RP" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "Representative Payee"
						If info_code = "GF" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "Guardianship Fee Max"
						If info_code = "SN" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "Shelter Need"
						If info_code = "RM" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "Restaurant Meals"
						If info_code = "EN" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "Excess Need"
						If info_code = "OT" Then msa_elig_budg_spec_standard_type_info(spec_needs_count) = "Other Need"

						EMReadScreen msa_elig_budg_spec_standard_amount(spec_needs_count), 8, msa_row, msa_col+26
						msa_elig_budg_spec_standard_amount(spec_needs_count) = trim(msa_elig_budg_spec_standard_amount(spec_needs_count))
						msa_row = msa_row + 1
						If msa_row = 14 Then
							PF20
							msa_row = 8
							EMReadScreen list_end, 21, 19, 4
							If list_end = "THIS IS THE LAST PAGE" Then Exit Do
						End If
						spec_needs_count = spec_needs_count + 1
						EMReadScreen info_code, 2, msa_row, msa_col
					Loop
				End If
			Next
			transmit

			transmit 		'going to the next panel - MSSM

			EMReadScreen msa_elig_summ_approved_date, 8, 3, 14
			EMReadScreen msa_elig_summ_process_date, 8, 2, 72
			EMReadScreen msa_elig_summ_date_last_approval, 8, 5, 29
			EMReadScreen msa_elig_summ_curr_prog_status, 12, 6, 29
			EMReadScreen msa_elig_summ_eligibility_result, 12, 7, 29
			EMReadScreen msa_elig_summ_reporting_status, 12, 8, 29
			EMReadScreen msa_elig_summ_source_of_info, 4, 10, 29
			EMReadScreen msa_elig_summ_benefit, 12, 11, 29
			EMReadScreen msa_elig_summ_recertification_date, 8, 12, 29
			EMReadScreen msa_elig_summ_budget_cycle, 5, 13, 29
			EMReadScreen msa_elig_summ_eligible_houshold_members, 1, 14, 29
			EMReadScreen msa_elig_summ_shared_houshold, 3, 15, 29
			EMReadScreen msa_elig_summ_vendor_reason_code, 2, 16, 18

			EMReadScreen msa_elig_summ_responsible_county, 2, 5, 73
			EMReadScreen msa_elig_summ_servicing_county, 2, 6, 73
			EMReadScreen msa_elig_summ_total_assets, 9, 7, 72
			EMReadScreen msa_elig_summ_maximum_assets, 9, 8, 72
			EMReadScreen msa_elig_summ_grant, 9, 11, 72
			EMReadScreen msa_elig_summ_current_payment, 9, 17, 72

			EMReadScreen msa_elig_summ_worker_message, 80, 18, 1

			msa_elig_summ_curr_prog_status = trim(msa_elig_summ_curr_prog_status)
			msa_elig_summ_eligibility_result = trim(msa_elig_summ_eligibility_result)
			msa_elig_summ_reporting_status = trim(msa_elig_summ_reporting_status)
			msa_elig_summ_benefit = trim(msa_elig_summ_benefit)
			msa_elig_summ_shared_houshold = trim(msa_elig_summ_shared_houshold)

			If msa_elig_summ_vendor_reason_code = "01" Then msa_elig_summ_vendor_reason_info = "Client Request"
			If msa_elig_summ_vendor_reason_code = "05" Then msa_elig_summ_vendor_reason_info = "Money Mismanagement"
			If msa_elig_summ_vendor_reason_code = "09" Then msa_elig_summ_vendor_reason_info = "Emergency"
			If msa_elig_summ_vendor_reason_code = "10" Then msa_elig_summ_vendor_reason_info = "Chemical Dependency"
			If msa_elig_summ_vendor_reason_code = "11" Then msa_elig_summ_vendor_reason_info = "No Residence"
			If msa_elig_summ_vendor_reason_code = "20" Then msa_elig_summ_vendor_reason_info = "Grant Diversion"

			msa_elig_summ_total_assets = trim(msa_elig_summ_total_assets)
			msa_elig_summ_maximum_assets = trim(msa_elig_summ_maximum_assets)
			msa_elig_summ_grant = trim(msa_elig_summ_grant)
			msa_elig_summ_current_payment = trim(msa_elig_summ_current_payment)

			msa_elig_summ_worker_message = trim(msa_elig_summ_worker_message)
		End if

		Call back_to_SELF
	end sub
end class

class ga_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public revw_month
	public hrf_month
	public revw_status
	public revw_caf_date
	public revw_interview_date
	public hrf_status
	public hrf_doc_date

	public ga_elig_case_status
	public ga_elig_file_unit_type_code
	public ga_elig_faci_file_unit_type_code
	public ga_elig_file_unit_type_info
	public ga_elig_faci_file_unit_type_info
	public ga_elig_memb_hh_count

	public ga_elig_ref_numbs()
	public ga_elig_membs_full_name()
	public ga_elig_membs_relationship_code()
	public ga_elig_membs_relationship_info()
	public ga_elig_membs_code()
	public ga_elig_membs_info()
	public ga_elig_membs_elig_basis_code()
	public ga_elig_membs_elig_basis_info()
	public ga_elig_membs_counted()
	public ga_elig_membs_elig_status()
	public ga_elig_membs_budget_cycle()
	public ga_elig_membs_elig_begin_date()
	public ga_elig_membs_test_absence()
	public ga_elig_membs_test_dupl_assistance()
	public ga_elig_membs_test_ga_coop()
	public ga_elig_membs_test_ive()
	public ga_elig_membs_test_ssi()
	public ga_elig_membs_test_lump_sum_payment()
	public ga_elig_membs_test_unit_member()
	public ga_elig_membs_test_imig_status_verif()
	public ga_elig_membs_test_imig_status()
	public ga_elig_membs_test_basis_of_elig()
	public ga_elig_membs_test_elig_other_prgm()
	public ga_elig_membs_test_ssn_coop()

	public ga_elig_case_test_appl_withdrawn
	public ga_elig_case_test_dupl_assistance
	public ga_elig_case_test_fail_coop
	public ga_elig_case_test_fail_file
	public ga_elig_case_test_eligible_member
	public ga_elig_case_test_prosp_net_income
	public ga_elig_case_test_retro_net_income
	public ga_elig_case_test_residence
	public ga_elig_case_test_assets
	public ga_elig_case_test_eligible_other_prgm
	public ga_elig_case_test_verif
	public ga_elig_case_test_lump_sum_payment

	public ga_elig_case_budg_gross_wages
	public ga_elig_case_budg_gross_self_emp
	public ga_elig_case_budg_total_gross_income
	public ga_elig_case_budg_standard_EI_disregard
	public ga_elig_case_budg_earned_income_subtotal
	public ga_elig_case_budg_earned_income_disregard_percent
	public ga_elig_case_budg_earned_income_disregard_amount
	public ga_elig_case_budg_total_deductions
	public ga_elig_case_budg_net_earned_income
	public ga_elig_case_budg_unearned_income
	public ga_elig_case_budg_counted_school_income
	public ga_elig_case_budg_total_deemed_income
	public ga_elig_case_budg_total_countable_income

	public ga_elig_case_budg_payment_standard
	public ga_elig_case_budg_payment_subtotal
	public ga_elig_case_budg_prorated_from
	public ga_elig_case_budg_prorated_to
	public ga_elig_case_budg_grant_subtotal
	public ga_elig_case_budg_total_assets
	public ga_elig_case_budg_ga_exclusion
	public ga_elig_case_budg_countable_assets
	public ga_elig_case_budg_maximum_assets
	public ga_elig_case_budg_reason_ga_exclusion
	public ga_elig_case_budg_pers_needs_payment_standard
	public ga_elig_case_budg_pers_needs_payment_subtotal
	public ga_elig_case_budg_pers_needs_prorated_from
	public ga_elig_case_budg_pers_needs_prorated_to
	public ga_elig_case_budg_pers_needs_grant_subtotal
	public ga_elig_case_budg_total_ga_grant_amount
	public ga_combined_payment_standard
	public ga_combined_payment_subtotal

	public ga_elig_summ_approved_date
	public ga_elig_summ_process_date
	public ga_elig_summ_date_last_approval
	public ga_elig_summ_curr_prog_status
	public ga_elig_summ_eligibility_result
	public ga_elig_summ_hrf_reporting
	public ga_elig_summ_source_of_info
	public ga_elig_summ_eligibility_begin_date
	public ga_elig_summ_eligiblity_review_date
	public ga_elig_summ_budget_cycle
	public ga_elig_summ_filing_unit_type_code
	public ga_elig_summ_filing_unit_type_info
	public ga_elig_summ_faci_unit_type_code
	public ga_elig_summ_faci_unit_type_info
	public ga_elig_summ_responsible_county
	public ga_elig_summ_vendor_reason_code
	public ga_elig_summ_vendor_reason_info
	public ga_elig_summ_total_assets
	public ga_elig_summ_client_faci_obligation
	public ga_elig_summ_standards
	public ga_elig_summ_counted_income
	public ga_elig_amt_already_issued		'TODO - find a case with amt already issued and with recoup -- DONE? maybe'
	public ga_elig_supplement_amt
	public ga_elig_recoupmment
	public ga_elig_summ_monthly_grant
	public ga_elig_summ_amount_to_be_paid
	public ga_elig_summ_action_code
	public ga_elig_summ_action_info
	public ga_elig_summ_reason_code
	public ga_elig_summ_reason_info
	public ga_elig_summ_worker_message

	public sub read_elig()
		approved_today = False
		approved_version_found = False
		ga_elig_memb_hh_count = 0

		call navigate_to_MAXIS_screen("ELIG", "GA  ")
		EMWriteScreen elig_footer_month, 20, 54
		EMWriteScreen elig_footer_year, 20, 57
		Call find_last_approved_ELIG_version(20, 78, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		If approved_version_found = True Then
			EMReadScreen approval_date, 8, 3, 15		'this is the actual approval date - not the process date'
			approval_date = DateAdd("d", 0, approval_date)
			If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
			If allow_late_note = True Then
				one_week_ago = DateAdd("d", -7, date)
				If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
			End If
			If developer_mode = True Then approved_today = True			'TESTING OPTION'
		End If
		If approved_today = True Then
	 		EMReadScreen ga_elig_case_status, 12, 18, 23
			EMReadScreen ga_elig_file_unit_type_code, 1, 18, 52
			EMReadScreen ga_elig_faci_file_unit_type_code, 1, 18, 77

			ga_elig_case_status = trim(ga_elig_case_status)

			If ga_elig_file_unit_type_code = "1" Then ga_elig_file_unit_type_info = "Single Adult"
			If ga_elig_file_unit_type_code = "2" Then ga_elig_file_unit_type_info = "Single Adult living with Parents"
			If ga_elig_file_unit_type_code = "3" Then ga_elig_file_unit_type_info = "Minor Child Outside the Home"
			If ga_elig_file_unit_type_code = "6" Then ga_elig_file_unit_type_info = "Married Couple"
			If ga_elig_file_unit_type_code = "9" Then ga_elig_file_unit_type_info = "Family State Food Program"

			If ga_elig_faci_file_unit_type_code = "5" Then ga_elig_faci_file_unit_type_info = "Personal Needs"

			ReDim ga_elig_ref_numbs(0)
			ReDim ga_elig_membs_full_name(0)
			ReDim ga_elig_membs_relationship_code(0)
			ReDim ga_elig_membs_relationship_info(0)
			ReDim ga_elig_membs_code(0)
			ReDim ga_elig_membs_info(0)
			ReDim ga_elig_membs_elig_basis_code(0)
			ReDim ga_elig_membs_counted(0)
			ReDim ga_elig_membs_elig_basis_info(0)
			ReDim ga_elig_membs_elig_status(0)
			ReDim ga_elig_membs_budget_cycle(0)
			ReDim ga_elig_membs_elig_begin_date(0)
			ReDim ga_elig_membs_test_absence(0)
			ReDim ga_elig_membs_test_dupl_assistance(0)
			ReDim ga_elig_membs_test_ga_coop(0)
			ReDim ga_elig_membs_test_ive(0)
			ReDim ga_elig_membs_test_ssi(0)
			ReDim ga_elig_membs_test_lump_sum_payment(0)
			ReDim ga_elig_membs_test_unit_member(0)
			ReDim ga_elig_membs_test_imig_status_verif(0)
			ReDim ga_elig_membs_test_imig_status(0)
			ReDim ga_elig_membs_test_basis_of_elig(0)
			ReDim ga_elig_membs_test_elig_other_prgm(0)
			ReDim ga_elig_membs_test_ssn_coop(0)

			elig_memb_count = 0
			ga_row = 8
			Do
				EMReadScreen ref_numb, 2, ga_row, 9

				ReDim preserve ga_elig_ref_numbs(elig_memb_count)
				ReDim preserve ga_elig_membs_full_name(elig_memb_count)
				ReDim preserve ga_elig_membs_relationship_code(elig_memb_count)
				ReDim preserve ga_elig_membs_relationship_info(elig_memb_count)
				ReDim preserve ga_elig_membs_code(elig_memb_count)
				ReDim preserve ga_elig_membs_info(elig_memb_count)
				ReDim preserve ga_elig_membs_elig_basis_code(elig_memb_count)
				ReDim preserve ga_elig_membs_elig_basis_info(elig_memb_count)
				ReDim preserve ga_elig_membs_counted(elig_memb_count)
				ReDim preserve ga_elig_membs_elig_status(elig_memb_count)
				ReDim preserve ga_elig_membs_budget_cycle(elig_memb_count)
				ReDim preserve ga_elig_membs_elig_begin_date(elig_memb_count)
				ReDim preserve ga_elig_membs_test_absence(elig_memb_count)
				ReDim preserve ga_elig_membs_test_dupl_assistance(elig_memb_count)
				ReDim preserve ga_elig_membs_test_ga_coop(elig_memb_count)
				ReDim preserve ga_elig_membs_test_ive(elig_memb_count)
				ReDim preserve ga_elig_membs_test_ssi(elig_memb_count)
				ReDim preserve ga_elig_membs_test_lump_sum_payment(elig_memb_count)
				ReDim preserve ga_elig_membs_test_unit_member(elig_memb_count)
				ReDim preserve ga_elig_membs_test_imig_status_verif(elig_memb_count)
				ReDim preserve ga_elig_membs_test_imig_status(elig_memb_count)
				ReDim preserve ga_elig_membs_test_basis_of_elig(elig_memb_count)
				ReDim preserve ga_elig_membs_test_elig_other_prgm(elig_memb_count)
				ReDim preserve ga_elig_membs_test_ssn_coop(elig_memb_count)

				ga_elig_ref_numbs(elig_memb_count) = ref_numb
				EMReadScreen full_name_information, 20, ga_row, 12
				full_name_information = trim(full_name_information)
				name_array = split(full_name_information, " ")
				For each name_parts in name_array
					If name_parts <> "" Then
						If len(name_parts) <> 1 Then ga_elig_membs_full_name(elig_memb_count) = ga_elig_membs_full_name(elig_memb_count) & " " & name_parts
					End If
				Next
				ga_elig_membs_full_name(elig_memb_count) = trim((ga_elig_membs_full_name(elig_memb_count)))
				EMReadScreen ga_elig_membs_relationship_code(elig_memb_count), 2, ga_row, 33


				If ga_elig_membs_relationship_code(elig_memb_count) = "01" Then ga_elig_membs_relationship_info(elig_memb_count) = "Applicant"
				If ga_elig_membs_relationship_code(elig_memb_count) = "02" Then ga_elig_membs_relationship_info(elig_memb_count) = "Spouse"
				If ga_elig_membs_relationship_code(elig_memb_count) = "03" Then ga_elig_membs_relationship_info(elig_memb_count) = "Child"
				If ga_elig_membs_relationship_code(elig_memb_count) = "04" Then ga_elig_membs_relationship_info(elig_memb_count) = "Parent"
				If ga_elig_membs_relationship_code(elig_memb_count) = "05" Then ga_elig_membs_relationship_info(elig_memb_count) = "Sibling"
				If ga_elig_membs_relationship_code(elig_memb_count) = "06" Then ga_elig_membs_relationship_info(elig_memb_count) = "Step Sibling"
				If ga_elig_membs_relationship_code(elig_memb_count) = "08" Then ga_elig_membs_relationship_info(elig_memb_count) = "Step Child"
				If ga_elig_membs_relationship_code(elig_memb_count) = "09" Then ga_elig_membs_relationship_info(elig_memb_count) = "Step Parent"
				If ga_elig_membs_relationship_code(elig_memb_count) = "10" Then ga_elig_membs_relationship_info(elig_memb_count) = "Aunt"
				If ga_elig_membs_relationship_code(elig_memb_count) = "11" Then ga_elig_membs_relationship_info(elig_memb_count) = "Uncle"
				If ga_elig_membs_relationship_code(elig_memb_count) = "12" Then ga_elig_membs_relationship_info(elig_memb_count) = "Niece"
				If ga_elig_membs_relationship_code(elig_memb_count) = "13" Then ga_elig_membs_relationship_info(elig_memb_count) = "Nephew"
				If ga_elig_membs_relationship_code(elig_memb_count) = "14" Then ga_elig_membs_relationship_info(elig_memb_count) = "Cousin"
				If ga_elig_membs_relationship_code(elig_memb_count) = "15" Then ga_elig_membs_relationship_info(elig_memb_count) = "Grandparent"
				If ga_elig_membs_relationship_code(elig_memb_count) = "16" Then ga_elig_membs_relationship_info(elig_memb_count) = "Grandchild"
				If ga_elig_membs_relationship_code(elig_memb_count) = "17" Then ga_elig_membs_relationship_info(elig_memb_count) = "Other Relative"
				If ga_elig_membs_relationship_code(elig_memb_count) = "18" Then ga_elig_membs_relationship_info(elig_memb_count) = "Legal Guardian"
				If ga_elig_membs_relationship_code(elig_memb_count) = "24" Then ga_elig_membs_relationship_info(elig_memb_count) = "Not Related"
				If ga_elig_membs_relationship_code(elig_memb_count) = "25" Then ga_elig_membs_relationship_info(elig_memb_count) = "Live-In Attendant"
				If ga_elig_membs_relationship_code(elig_memb_count) = "27" Then ga_elig_membs_relationship_info(elig_memb_count) = "Unknown"

				EMReadScreen ga_elig_membs_code(elig_memb_count), 1, ga_row, 48

				If ga_elig_membs_code(elig_memb_count) = "A" Then ga_elig_membs_info(elig_memb_count) = "Assistance Unit Member"
				If ga_elig_membs_code(elig_memb_count) = "C" Then ga_elig_membs_info(elig_memb_count) = "Deemer"
				If ga_elig_membs_code(elig_memb_count) = "F" Then ga_elig_membs_info(elig_memb_count) = "Ineligible - Counted without Deductions"
				If ga_elig_membs_code(elig_memb_count) = "S" Then ga_elig_membs_info(elig_memb_count) = "Ineligible - Counted with Deduction"
				If ga_elig_membs_code(elig_memb_count) = "G" Then ga_elig_membs_info(elig_memb_count) = "Ineligible Affects Grant"
				If ga_elig_membs_code(elig_memb_count) = "I" Then ga_elig_membs_info(elig_memb_count) = "Ineligible Par of Unit"
				If ga_elig_membs_code(elig_memb_count) = "L" Then ga_elig_membs_info(elig_memb_count) = "Other Adult Applicant"
				If ga_elig_membs_code(elig_memb_count) = "M" Then ga_elig_membs_info(elig_memb_count) = "Allocation Only"
				If ga_elig_membs_code(elig_memb_count) = "N" Then ga_elig_membs_info(elig_memb_count) = "Not Counted"
				If ga_elig_membs_code(elig_memb_count) = "U" Then ga_elig_membs_info(elig_memb_count) = "Unknown"

				If ga_elig_membs_code(elig_memb_count) = "A" Then ga_elig_membs_counted(elig_memb_count) = "COUNTED"
				If ga_elig_membs_code(elig_memb_count) = "F" Then ga_elig_membs_counted(elig_memb_count) = "COUNTED"
				If ga_elig_membs_code(elig_memb_count) = "S" Then ga_elig_membs_counted(elig_memb_count) = "COUNTED"
				If ga_elig_membs_code(elig_memb_count) = "G" Then ga_elig_membs_counted(elig_memb_count) = "COUNTED"
				If ga_elig_membs_code(elig_memb_count) = "I" Then ga_elig_membs_counted(elig_memb_count) = "COUNTED"
				If ga_elig_membs_code(elig_memb_count) = "L" Then ga_elig_membs_counted(elig_memb_count) = "COUNTED"
				If ga_elig_membs_code(elig_memb_count) = "C" Then ga_elig_membs_counted(elig_memb_count) = "Deemed"
				If ga_elig_membs_code(elig_memb_count) = "M" Then ga_elig_membs_counted(elig_memb_count) = "Not Counted"
				If ga_elig_membs_code(elig_memb_count) = "N" Then ga_elig_membs_counted(elig_memb_count) = "Not Counted"
				If ga_elig_membs_code(elig_memb_count) = "U" Then ga_elig_membs_counted(elig_memb_count) = "Not Counted"


				EMReadScreen ga_elig_membs_elig_basis_code(elig_memb_count), 2, ga_row, 52

				If ga_elig_membs_elig_basis_code(elig_memb_count) = "04" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Permanent Ill Or Incap"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "05" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Temporary Ill Or Incap"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "06" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Care Of Ill Or Incap Mbr"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "07" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Requires Services In Residence"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "09" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Mntl Ill Or Dev Disabled"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "10" then ga_elig_membs_elig_basis_info(elig_memb_count) = "SSI/RSDI Pend"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "11" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Appealing SSI/RSDI Denial"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "12" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Advanced Age"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "13" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Learning Disability"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "17" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Protect/Court Ordered"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "20" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Age 16 Or 17 SS Approval"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "25" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Emancipated Minor"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "28" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Unemployable"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "29" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Displaced Hmkr(Ft Student)"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "30" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Minor W/ Adult Unrelated"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "32" then ga_elig_membs_elig_basis_info(elig_memb_count) = "ESL, Adult/HS At Least Half Time, Adult"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "35" then ga_elig_membs_elig_basis_info(elig_memb_count) = "Drug/Alcohol Addiction(DAA)"
				If ga_elig_membs_elig_basis_code(elig_memb_count) = "99" then ga_elig_membs_elig_basis_info(elig_memb_count) = "No Elig Basis"

				EMReadScreen ga_elig_membs_elig_status(elig_memb_count), 4, ga_row, 57

				If ga_elig_membs_elig_status(elig_memb_count) = "ELIG" then
					ga_elig_membs_elig_status(elig_memb_count) = "ELIGIBLE"
					ga_elig_memb_hh_count = ga_elig_memb_hh_count + 1
				End If
				If ga_elig_membs_elig_status(elig_memb_count) = "INEL" then ga_elig_membs_elig_status(elig_memb_count) = "INELIGIBLE"
				EMReadScreen ga_elig_membs_budget_cycle(elig_memb_count), 1, ga_row, 63

				If ga_elig_membs_budget_cycle(elig_memb_count) = "P" then ga_elig_membs_budget_cycle(elig_memb_count) = "Prospective"
				If ga_elig_membs_budget_cycle(elig_memb_count) = "R" then ga_elig_membs_budget_cycle(elig_memb_count) = "Retrospective"

				EMReadScreen ga_elig_membs_elig_begin_date(elig_memb_count), 8, ga_row, 66

				Call write_value_and_transmit("X", ga_row, 6)

				EMReadScreen ga_elig_membs_test_absence(elig_memb_count), 			6, 11, 12
				EMReadScreen ga_elig_membs_test_dupl_assistance(elig_memb_count), 	6, 12, 12
				EMReadScreen ga_elig_membs_test_ga_coop(elig_memb_count), 			6, 13, 12
				EMReadScreen ga_elig_membs_test_ive(elig_memb_count), 				6, 14, 12
				EMReadScreen ga_elig_membs_test_ssi(elig_memb_count), 				6, 15, 12
				EMReadScreen ga_elig_membs_test_lump_sum_payment(elig_memb_count), 	6, 16, 12


				EMReadScreen ga_elig_membs_test_unit_member(elig_memb_count), 		6, 11, 42
				EMReadScreen ga_elig_membs_test_imig_status_verif(elig_memb_count), 6, 12, 42
				EMReadScreen ga_elig_membs_test_imig_status(elig_memb_count), 		6, 13, 42
				EMReadScreen ga_elig_membs_test_basis_of_elig(elig_memb_count), 	6, 14, 42
				EMReadScreen ga_elig_membs_test_elig_other_prgm(elig_memb_count), 	6, 15, 42
				EMReadScreen ga_elig_membs_test_ssn_coop(elig_memb_count), 			6, 16, 42

				ga_elig_membs_test_absence(elig_memb_count) = trim(ga_elig_membs_test_absence(elig_memb_count))
				ga_elig_membs_test_dupl_assistance(elig_memb_count) = trim(ga_elig_membs_test_dupl_assistance(elig_memb_count))
				ga_elig_membs_test_ga_coop(elig_memb_count) = trim(ga_elig_membs_test_ga_coop(elig_memb_count))
				ga_elig_membs_test_ive(elig_memb_count) = trim(ga_elig_membs_test_ive(elig_memb_count))
				ga_elig_membs_test_ssi(elig_memb_count) = trim(ga_elig_membs_test_ssi(elig_memb_count))
				ga_elig_membs_test_lump_sum_payment(elig_memb_count) = trim(ga_elig_membs_test_lump_sum_payment(elig_memb_count))

				ga_elig_membs_test_unit_member(elig_memb_count) = trim(ga_elig_membs_test_unit_member(elig_memb_count))
				ga_elig_membs_test_imig_status_verif(elig_memb_count) = trim(ga_elig_membs_test_imig_status_verif(elig_memb_count))
				ga_elig_membs_test_imig_status(elig_memb_count) = trim(ga_elig_membs_test_imig_status(elig_memb_count))
				ga_elig_membs_test_basis_of_elig(elig_memb_count) = trim(ga_elig_membs_test_basis_of_elig(elig_memb_count))
				ga_elig_membs_test_elig_other_prgm(elig_memb_count) = trim(ga_elig_membs_test_elig_other_prgm(elig_memb_count))
				ga_elig_membs_test_ssn_coop(elig_memb_count) = trim(ga_elig_membs_test_ssn_coop(elig_memb_count))

				transmit

				ga_row = ga_row + 1
				elig_memb_count = elig_memb_count + 1
				EMReadScreen next_ref_numb, 2, ga_row, 9
			Loop until next_ref_numb = "  "

			transmit 		'going to the next panel - GACR

			EMReadScreen ga_elig_case_test_appl_withdrawn, 		6, 8, 10
			EMReadScreen ga_elig_case_test_dupl_assistance, 	6, 9, 10
			EMReadScreen ga_elig_case_test_fail_coop, 			6, 10, 10
			EMReadScreen ga_elig_case_test_fail_file, 			6, 11, 10
			EMReadScreen ga_elig_case_test_eligible_member, 	6, 12, 10
			EMReadScreen ga_elig_case_test_prosp_net_income, 	6, 13, 10

			EMReadScreen ga_elig_case_test_retro_net_income, 	6, 8, 46
			EMReadScreen ga_elig_case_test_residence, 			6, 9, 46
			EMReadScreen ga_elig_case_test_assets, 				6, 10, 46
			EMReadScreen ga_elig_case_test_eligible_other_prgm, 6, 11, 46
			EMReadScreen ga_elig_case_test_verif, 				6, 12, 46
			EMReadScreen ga_elig_case_test_lump_sum_payment, 	6, 13, 46

			ga_elig_case_test_appl_withdrawn = trim(ga_elig_case_test_appl_withdrawn)
			ga_elig_case_test_dupl_assistance = trim(ga_elig_case_test_dupl_assistance)
			ga_elig_case_test_fail_coop = trim(ga_elig_case_test_fail_coop)
			ga_elig_case_test_fail_file = trim(ga_elig_case_test_fail_file)
			ga_elig_case_test_eligible_member = trim(ga_elig_case_test_eligible_member)
			ga_elig_case_test_prosp_net_income = trim(ga_elig_case_test_prosp_net_income)

			ga_elig_case_test_retro_net_income = trim(ga_elig_case_test_retro_net_income)
			ga_elig_case_test_residence = trim(ga_elig_case_test_residence)
			ga_elig_case_test_assets = trim(ga_elig_case_test_assets)
			ga_elig_case_test_eligible_other_prgm = trim(ga_elig_case_test_eligible_other_prgm)
			ga_elig_case_test_verif = trim(ga_elig_case_test_verif)
			ga_elig_case_test_lump_sum_payment = trim(ga_elig_case_test_lump_sum_payment)

			' Call write_value_and_transmit("X", 13, 4)		'This is the Prosp Net Income Pop-Up - this appears to match the information on GAb1 - so we are not reading it'

			transmit 		'going to the next panel - GAB1

			EMReadScreen ga_elig_case_budg_gross_wages, 					10, 6, 29
			EMReadScreen ga_elig_case_budg_gross_self_emp, 					10, 7, 29
			EMReadScreen ga_elig_case_budg_total_gross_income, 				10, 9, 29
			EMReadScreen ga_elig_case_budg_standard_EI_disregard, 			10, 13, 29
			EMReadScreen ga_elig_case_budg_earned_income_subtotal, 			10, 14, 29
			EMReadScreen ga_elig_case_budg_earned_income_disregard_percent, 2, 15, 23
			EMReadScreen ga_elig_case_budg_earned_income_disregard_amount, 	10, 15, 29
			EMReadScreen ga_elig_case_budg_total_deductions, 				10, 17, 29

			EMReadScreen ga_elig_case_budg_net_earned_income, 				10, 6, 71
			EMReadScreen ga_elig_case_budg_unearned_income, 				10, 8, 71
			EMReadScreen ga_elig_case_budg_counted_school_income, 			10, 10, 71
			EMReadScreen ga_elig_case_budg_total_deemed_income, 			10, 14, 71
			EMReadScreen ga_elig_case_budg_total_countable_income, 			10, 17, 71

			ga_elig_case_budg_gross_wages = trim(ga_elig_case_budg_gross_wages)
			ga_elig_case_budg_gross_self_emp = trim(ga_elig_case_budg_gross_self_emp)
			ga_elig_case_budg_total_gross_income = trim(ga_elig_case_budg_total_gross_income)
			ga_elig_case_budg_standard_EI_disregard = trim(ga_elig_case_budg_standard_EI_disregard)
			ga_elig_case_budg_earned_income_subtotal = trim(ga_elig_case_budg_earned_income_subtotal)
			ga_elig_case_budg_earned_income_disregard_percent = trim(ga_elig_case_budg_earned_income_disregard_percent)
			ga_elig_case_budg_earned_income_disregard_amount = trim(ga_elig_case_budg_earned_income_disregard_amount)
			ga_elig_case_budg_total_deductions = trim(ga_elig_case_budg_total_deductions)

			ga_elig_case_budg_net_earned_income = trim(ga_elig_case_budg_net_earned_income)
			ga_elig_case_budg_unearned_income = trim(ga_elig_case_budg_unearned_income)
			ga_elig_case_budg_counted_school_income = trim(ga_elig_case_budg_counted_school_income)
			ga_elig_case_budg_total_deemed_income = trim(ga_elig_case_budg_total_deemed_income)
			ga_elig_case_budg_total_countable_income = trim(ga_elig_case_budg_total_countable_income)

			If ga_elig_case_budg_gross_wages = "" Then ga_elig_case_budg_gross_wages = "0.00"
			If ga_elig_case_budg_gross_self_emp = "" Then ga_elig_case_budg_gross_self_emp = "0.00"
			If ga_elig_case_budg_earned_income_disregard_amount = "" Then ga_elig_case_budg_earned_income_disregard_amount = "0.00"
			If ga_elig_case_budg_unearned_income = "" Then ga_elig_case_budg_unearned_income = "0.00"
			If ga_elig_case_budg_counted_school_income = "" Then ga_elig_case_budg_counted_school_income = "0.00"
			If ga_elig_case_budg_total_deemed_income = "" Then ga_elig_case_budg_total_deemed_income = "0.00"

			transmit 		'going to the next panel - GAB2

			EMReadScreen ga_elig_case_budg_payment_standard, 	10, 6, 34
			' EMReadScreen ga_elig_case_budg_total_countable_income, 10, 7, 34
			EMReadScreen ga_elig_case_budg_payment_subtotal, 	10, 8, 34
			EMReadScreen ga_elig_case_budg_prorated_from, 		5, 10, 15
			EMReadScreen ga_elig_case_budg_prorated_to, 		5, 10, 25
			EMReadScreen ga_elig_case_budg_grant_subtotal, 		10, 11, 34
			EMReadScreen ga_elig_case_budg_total_assets, 		10, 14, 34
			EMReadScreen ga_elig_case_budg_ga_exclusion, 		10, 15, 34
			EMReadScreen ga_elig_case_budg_countable_assets, 	10, 16, 34
			EMReadScreen ga_elig_case_budg_maximum_assets, 		10, 17, 34
			EMReadScreen ga_elig_case_budg_reason_ga_exclusion, 10, 18, 34

			EMReadScreen ga_elig_case_budg_pers_needs_payment_standard, 10, 6, 72
			' EMReadScreen ga_elig_case_budg_total_countable_income, 10, 7, 72
			EMReadScreen ga_elig_case_budg_pers_needs_payment_subtotal, 10, 8, 72
			EMReadScreen ga_elig_case_budg_pers_needs_prorated_from, 	5, 10, 58
			EMReadScreen ga_elig_case_budg_pers_needs_prorated_to, 		5, 10, 68
			EMReadScreen ga_elig_case_budg_pers_needs_grant_subtotal, 	10, 11, 72
			EMReadScreen ga_elig_case_budg_total_ga_grant_amount, 		10, 13, 72

			ga_elig_case_budg_payment_standard = trim(ga_elig_case_budg_payment_standard)
			ga_elig_case_budg_payment_subtotal = trim(ga_elig_case_budg_payment_subtotal)
			ga_elig_case_budg_prorated_from = trim(ga_elig_case_budg_prorated_from)
			ga_elig_case_budg_prorated_to = trim(ga_elig_case_budg_prorated_to)
			ga_elig_case_budg_grant_subtotal = trim(ga_elig_case_budg_grant_subtotal)
			ga_elig_case_budg_total_assets = trim(ga_elig_case_budg_total_assets)
			ga_elig_case_budg_ga_exclusion = trim(ga_elig_case_budg_ga_exclusion)
			ga_elig_case_budg_countable_assets = trim(ga_elig_case_budg_countable_assets)
			ga_elig_case_budg_maximum_assets = trim(ga_elig_case_budg_maximum_assets)
			ga_elig_case_budg_reason_ga_exclusion = trim(ga_elig_case_budg_reason_ga_exclusion)

			ga_elig_case_budg_pers_needs_payment_standard = trim(ga_elig_case_budg_pers_needs_payment_standard)
			ga_elig_case_budg_pers_needs_payment_subtotal = trim(ga_elig_case_budg_pers_needs_payment_subtotal)
			ga_elig_case_budg_pers_needs_prorated_from = trim(ga_elig_case_budg_pers_needs_prorated_from)
			ga_elig_case_budg_pers_needs_prorated_to = trim(ga_elig_case_budg_pers_needs_prorated_to)
			ga_elig_case_budg_pers_needs_grant_subtotal = trim(ga_elig_case_budg_pers_needs_grant_subtotal)
			ga_elig_case_budg_total_ga_grant_amount = trim(ga_elig_case_budg_total_ga_grant_amount)

			number_reg_stndrd = ga_elig_case_budg_payment_standard
			number_reg_subtotal = ga_elig_case_budg_payment_subtotal
			If number_reg_stndrd = "" Then number_reg_stndrd = 0
			number_reg_stndrd = number_reg_stndrd * 1
			If number_reg_subtotal = "" Then number_reg_subtotal = 0
			number_reg_subtotal = number_reg_subtotal * 1

			number_pers_needs_stndrd = ga_elig_case_budg_pers_needs_payment_standard
			number_pers_needs_subtotal = ga_elig_case_budg_pers_needs_payment_subtotal
			If number_pers_needs_stndrd = "" Then number_pers_needs_stndrd = 0
			number_pers_needs_stndrd = number_pers_needs_stndrd * 1
			If number_pers_needs_subtotal = "" Then number_pers_needs_subtotal = 0
			number_pers_needs_subtotal = number_pers_needs_subtotal * 1

			ga_combined_payment_standard = number_reg_stndrd + number_pers_needs_stndrd
			ga_combined_payment_subtotal = number_reg_subtotal + number_pers_needs_subtotal
			ga_combined_payment_standard = FormatNumber(ga_combined_payment_standard, 2, -1, 0, -1)
			ga_combined_payment_subtotal = FormatNumber(ga_combined_payment_subtotal, 2, -1, 0, -1)

			If ga_elig_case_budg_prorated_from <> "" Then ga_elig_case_budg_prorated_from = replace(ga_elig_case_budg_prorated_from, " ", "/")
			If ga_elig_case_budg_prorated_to <> "" Then ga_elig_case_budg_prorated_to = replace(ga_elig_case_budg_prorated_to, " ", "/")
			If ga_elig_case_budg_pers_needs_prorated_from <> "" Then ga_elig_case_budg_pers_needs_prorated_from = replace(ga_elig_case_budg_pers_needs_prorated_from, " ", "/")
			If ga_elig_case_budg_pers_needs_prorated_to <> "" Then ga_elig_case_budg_pers_needs_prorated_to = replace(ga_elig_case_budg_pers_needs_prorated_to, " ", "/")

			transmit 		'going to the next panel - GASM

			EMReadScreen ga_elig_summ_approved_date, 8, 3, 15
			EMReadScreen ga_elig_summ_process_date, 8, 2, 73
			EMReadScreen ga_elig_summ_date_last_approval, 8, 5, 32
			EMReadScreen ga_elig_summ_curr_prog_status, 12, 6, 32
			EMReadScreen ga_elig_summ_eligibility_result, 12, 7, 32
			EMReadScreen ga_elig_summ_hrf_reporting, 12, 8, 32
			EMReadScreen ga_elig_summ_source_of_info, 4, 9, 32
			EMReadScreen ga_elig_summ_eligibility_begin_date, 8, 10, 32
			EMReadScreen ga_elig_summ_eligiblity_review_date, 8, 11, 32
			EMReadScreen ga_elig_summ_budget_cycle, 5, 12, 32
			EMReadScreen ga_elig_summ_filing_unit_type_code, 1, 13, 32
			EMReadScreen ga_elig_summ_faci_unit_type_code, 1, 14, 32
			EMReadScreen ga_elig_summ_responsible_county, 2, 15, 32
			EMReadScreen ga_elig_summ_vendor_reason_code, 2, 16, 32

			EMReadScreen ga_elig_summ_total_assets, 10, 5, 71
			EMReadScreen ga_elig_summ_client_faci_obligation, 10, 6, 71
			EMReadScreen ga_elig_summ_standards, 10, 7, 71
			EMReadScreen ga_elig_summ_counted_income, 10, 8, 71
			EMReadScreen ga_elig_summ_monthly_grant, 10, 9, 71
			EMReadScreen ga_elig_amt_already_issued, 10, 12, 71
			EMReadScreen ga_elig_supplement_amt, 10, 13, 71
			EMReadScreen ga_elig_summ_amount_to_be_paid, 10, 14, 71
			EMReadScreen ga_elig_summ_action_code, 1, 15, 53
			EMReadScreen ga_elig_summ_reason_code, 2, 16, 53

			EMReadScreen ga_elig_summ_worker_message, 80, 19, 1

			ga_elig_summ_curr_prog_status = trim(ga_elig_summ_curr_prog_status)
			ga_elig_summ_eligibility_result = trim(ga_elig_summ_eligibility_result)
			ga_elig_summ_hrf_reporting = trim(ga_elig_summ_hrf_reporting)

			If ga_elig_summ_filing_unit_type_code = "1" Then ga_elig_summ_filing_unit_type_info = "Single Adult"
			If ga_elig_summ_filing_unit_type_code = "2" Then ga_elig_summ_filing_unit_type_info = "Single Adult Lv W/ Parents"
			If ga_elig_summ_filing_unit_type_code = "3" Then ga_elig_summ_filing_unit_type_info = "Minor Child Outside Home"
			If ga_elig_summ_filing_unit_type_code = "6" Then ga_elig_summ_filing_unit_type_info = "Married Couple"
			If ga_elig_summ_filing_unit_type_code = "9" Then ga_elig_summ_filing_unit_type_info = "Family State Food Program"

			If ga_elig_summ_faci_unit_type_code = "5" Then ga_elig_summ_faci_unit_type_info = "Personal Needs"

			If ga_elig_summ_vendor_reason_code = "01" Then ga_elig_summ_vendor_reason_info = "Client Request"
			If ga_elig_summ_vendor_reason_code = "05" Then ga_elig_summ_vendor_reason_info = "Money Mismanagement"
			If ga_elig_summ_vendor_reason_code = "09" Then ga_elig_summ_vendor_reason_info = "Emergency"
			If ga_elig_summ_vendor_reason_code = "10" Then ga_elig_summ_vendor_reason_info = "Chemical Dependency"
			If ga_elig_summ_vendor_reason_code = "11" Then ga_elig_summ_vendor_reason_info = "No Residence"
			If ga_elig_summ_vendor_reason_code = "20" Then ga_elig_summ_vendor_reason_info = "Grant Diversion"

			ga_elig_summ_total_assets = trim(ga_elig_summ_total_assets)
			ga_elig_summ_client_faci_obligation = trim(ga_elig_summ_client_faci_obligation)
			ga_elig_summ_standards = trim(ga_elig_summ_standards)
			ga_elig_summ_counted_income = trim(ga_elig_summ_counted_income)
			ga_elig_summ_monthly_grant = trim(ga_elig_summ_monthly_grant)
			ga_elig_amt_already_issued = trim(ga_elig_amt_already_issued)
			ga_elig_supplement_amt = trim(ga_elig_supplement_amt)
			ga_elig_summ_amount_to_be_paid = trim(ga_elig_summ_amount_to_be_paid)

			If ga_elig_summ_action_code = "1" Then ga_elig_summ_action_info = "Open"
			If ga_elig_summ_action_code = "2" Then ga_elig_summ_action_info = "Suspend"
			If ga_elig_summ_action_code = "3" Then ga_elig_summ_action_info = "Unsuspend"
			If ga_elig_summ_action_code = "4" Then ga_elig_summ_action_info = "Review - Grant Change"
			If ga_elig_summ_action_code = "5" Then ga_elig_summ_action_info = "Close"
			If ga_elig_summ_action_code = "7" Then ga_elig_summ_action_info = "Grant Change - Chng Reported"
			If ga_elig_summ_action_code = "8" Then ga_elig_summ_action_info = "Review - No Grant Chng"
			If ga_elig_summ_action_code = "9" Then ga_elig_summ_action_info = "No Grant Chng - Chng Reported"
			If ga_elig_summ_action_code = "0" Then ga_elig_summ_action_info = "STAT Change - No Notice Rqrd"
			If ga_elig_summ_action_code = "C" Then ga_elig_summ_action_info = "Reinstate Closed Case"

			If ga_elig_summ_reason_code = "01" Then ga_elig_summ_reason_info = "Earned Income Increased"
			If ga_elig_summ_reason_code = "02" Then ga_elig_summ_reason_info = "Earned Income Decreased"
			If ga_elig_summ_reason_code = "03" Then ga_elig_summ_reason_info = "Unearned Income Increased"
			If ga_elig_summ_reason_code = "04" Then ga_elig_summ_reason_info = "Unearned Income Decreased"
			If ga_elig_summ_reason_code = "05" Then ga_elig_summ_reason_info = "Expenses/Deductions Increased"
			If ga_elig_summ_reason_code = "06" Then ga_elig_summ_reason_info = "Expenses/Deductions Decr"
			If ga_elig_summ_reason_code = "08" Then ga_elig_summ_reason_info = "No Proof Given"
			If ga_elig_summ_reason_code = "09" Then ga_elig_summ_reason_info = "Did Not Return Review Form"
			If ga_elig_summ_reason_code = "10" Then ga_elig_summ_reason_info = "Non Coop With GA Rules"
			If ga_elig_summ_reason_code = "12" Then ga_elig_summ_reason_info = "Must Apply For Other Benefit"
			If ga_elig_summ_reason_code = "14" Then ga_elig_summ_reason_info = "Not At Given Address"
			If ga_elig_summ_reason_code = "16" Then ga_elig_summ_reason_info = "Request Close"
			If ga_elig_summ_reason_code = "17" Then ga_elig_summ_reason_info = "Eligibility For Other Cash Program"
			If ga_elig_summ_reason_code = "18" Then ga_elig_summ_reason_info = "Non State Resident"
			If ga_elig_summ_reason_code = "19" Then ga_elig_summ_reason_info = "Client Died"
			If ga_elig_summ_reason_code = "20" Then ga_elig_summ_reason_info = "Household Member Died"
			If ga_elig_summ_reason_code = "22" Then ga_elig_summ_reason_info = "Excess Income"
			If ga_elig_summ_reason_code = "23" Then ga_elig_summ_reason_info = "Assets over the GA Limit"
			If ga_elig_summ_reason_code = "24" Then ga_elig_summ_reason_info = "Tranfer of Assets - No GA Eligiblity"
			If ga_elig_summ_reason_code = "27" Then ga_elig_summ_reason_info = "Fail To Sign Interim Assistance Agreemnt"
			If ga_elig_summ_reason_code = "28" Then ga_elig_summ_reason_info = "Program Requirements Have Been Met"
			If ga_elig_summ_reason_code = "30" Then ga_elig_summ_reason_info = "Household Size Change"
			If ga_elig_summ_reason_code = "31" Then ga_elig_summ_reason_info = "Review - No Change"
			If ga_elig_summ_reason_code = "32" Then ga_elig_summ_reason_info = "Begin Recoupment"
			If ga_elig_summ_reason_code = "33" Then ga_elig_summ_reason_info = "Change Recoupment"
			If ga_elig_summ_reason_code = "34" Then ga_elig_summ_reason_info = "End Recoupment"
			If ga_elig_summ_reason_code = "35" Then ga_elig_summ_reason_info = "New GA Basis Of Eligiblity"
			If ga_elig_summ_reason_code = "36" Then ga_elig_summ_reason_info = "Add/Change/Delete Vendor"
			If ga_elig_summ_reason_code = "39" Then ga_elig_summ_reason_info = "Person In/Out Facility"
			If ga_elig_summ_reason_code = "49" Then ga_elig_summ_reason_info = "No HRF"
			If ga_elig_summ_reason_code = "51" Then ga_elig_summ_reason_info = "Under Control Of Penal System"
			If ga_elig_summ_reason_code = "52" Then ga_elig_summ_reason_info = "Court Order Mitchell et al"
			If ga_elig_summ_reason_code = "54" Then ga_elig_summ_reason_info = "Not a GRH Facility"
			If ga_elig_summ_reason_code = "57" Then ga_elig_summ_reason_info = "Undocumented/Inelig Imig"
			If ga_elig_summ_reason_code = "59" Then ga_elig_summ_reason_info = "Imig-status not ver"
			If ga_elig_summ_reason_code = "61" Then ga_elig_summ_reason_info = "No GA Basis or Spouse w/none"
			If ga_elig_summ_reason_code = "62" Then ga_elig_summ_reason_info = "Lump Sum Payment"
			If ga_elig_summ_reason_code = "63" Then ga_elig_summ_reason_info = "Disqualified/Lump Sum"
			If ga_elig_summ_reason_code = "64" Then ga_elig_summ_reason_info = "Failed provide or apply SSN"
			If ga_elig_summ_reason_code = "66" Then ga_elig_summ_reason_info = "Eligible State wide MFIP"
			If ga_elig_summ_reason_code = "96" Then ga_elig_summ_reason_info = "April 2010 Legislation"
			If ga_elig_summ_reason_code = "97" Then ga_elig_summ_reason_info = "GRH Mass Change"
			If ga_elig_summ_reason_code = "98" Then ga_elig_summ_reason_info = "PNA Mass Change"

			ga_elig_summ_worker_message = trim(ga_elig_summ_worker_message)
		End If

		Call back_to_SELF
	end sub
end class

class deny_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public cash_family_or_adult

	public deny_cash_membs_ref_numbs()
	public deny_cash_membs_full_name()
	public deny_cash_membs_request_yn()
	public deny_cash_membs_dwp_test_absence()
	public deny_cash_membs_dwp_test_child_age()
	public deny_cash_membs_dwp_test_citizenship()
	public deny_cash_membs_dwp_test_citizenship_verif()
	public deny_cash_membs_dwp_test_dupl_assist()
	public deny_cash_membs_dwp_test_foster_care()
	public deny_cash_membs_dwp_test_fraud()
	public deny_cash_membs_dwp_test_minor_living_arrangement()
	public deny_cash_membs_dwp_test_post_60_removal()
	public deny_cash_membs_dwp_test_SSI()
	public deny_cash_membs_dwp_test_SSN_coop()
	public deny_cash_membs_dwp_test_Unit_member()
	public deny_cash_membs_dwp_test_unlawful_conduct()
	public deny_cash_membs_mfip_test_absence()
	public deny_cash_membs_mfip_test_child_age()
	public deny_cash_membs_mfip_test_citizenship()
	public deny_cash_membs_mfip_test_citizenship_verif()
	public deny_cash_membs_mfip_test_dupl_assist()
	public deny_cash_membs_mfip_test_foster_care()
	public deny_cash_membs_mfip_test_fraud()
	public deny_cash_membs_mfip_test_minor_living_arrangement()
	public deny_cash_membs_mfip_test_post_60_removal()
	public deny_cash_membs_mfip_test_SSI()
	public deny_cash_membs_mfip_test_SSN_coop()
	public deny_cash_membs_mfip_test_Unit_member()
	public deny_cash_membs_mfip_test_unlawful_conduct()
	public deny_cash_membs_msa_test_absence()
	public deny_cash_membs_msa_test_age()
	public deny_cash_membs_msa_test_basis_of_elig()
	public deny_cash_membs_msa_test_citizenship()
	public deny_cash_membs_msa_test_dupl_assist()
	public deny_cash_membs_msa_test_fail_coop()
	public deny_cash_membs_msa_test_fraud()
	public deny_cash_membs_msa_test_IVE_elig()
	public deny_cash_membs_msa_test_living_arrangment()
	public deny_cash_membs_msa_test_SSI_basis()
	public deny_cash_membs_msa_test_SSN_coop()
	public deny_cash_membs_msa_test_unit_member()
	public deny_cash_membs_msa_test_verif()
	public deny_cash_membs_ga_test_absence()
	public deny_cash_membs_ga_test_basis_of_elig()
	public deny_cash_membs_ga_test_dupl_assist()
	public deny_cash_membs_ga_test_ga_coop()
	public deny_cash_membs_ga_test_imig_status()
	public deny_cash_membs_ga_test_imig_verif()
	public deny_cash_membs_ga_test_IVE_elig()
	public deny_cash_membs_ga_test_lump_sum_payment()
	public deny_cash_membs_ga_test_SSI()
	public deny_cash_membs_ga_test_SSN_coop()
	public deny_cash_membs_ga_test_unit_member()

	public deny_cash_dwp_reason_code
	public deny_cash_mfip_reason_code
	public deny_cash_msa_reason_code
	public deny_cash_ga_reason_code
	public deny_cash_dwp_reason_info
	public deny_cash_mfip_reason_info
	public deny_cash_msa_reason_info
	public deny_cash_ga_reason_info
	public deny_cash_dwp_memo_info
	public deny_cash_mfip_memo_info
	public deny_cash_msa_memo_info
	public deny_cash_ga_memo_info
	public deny_cash_dwp_selection_line
	public deny_cash_mfip_selection_line
	public deny_cash_msa_selection_line
	public deny_cash_dwp_details_exists
	public deny_cash_mfip_details_exists
	public deny_cash_msa_details_exists
	public deny_cash_ga_details_exists
	public deny_cash_mfip_or_dwp

	public deny_dwp_elig_case_test_application_withdrawn
	public deny_dwp_elig_case_test_assets
	public deny_dwp_elig_case_test_CS_disqualification
	public deny_dwp_elig_case_test_death_of_applicant
	public deny_dwp_elig_case_test_dupl_assistance
	public deny_dwp_elig_case_test_eligible_child
	public deny_dwp_elig_case_test_ES_disqualification
	public deny_dwp_elig_case_test_fail_coop
	public deny_dwp_elig_case_test_four_month_limit
	public deny_dwp_elig_case_test_initial_income
	public deny_dwp_elig_case_test_MFIP_conversion
	public deny_dwp_elig_case_test_residence
	public deny_dwp_elig_case_test_strike
	public deny_dwp_elig_case_test_TANF_time_limit
	public deny_dwp_elig_case_test_transfer_of_assets
	public deny_dwp_elig_case_test_verif
	public deny_dwp_elig_case_test_new_spouse_income
	public deny_dwp_elig_initial_counted_earned_income
	public deny_dwp_elig_initial_dependent_care_expense
	public deny_dwp_elig_initial_counted_unearned_income
	public deny_dwp_elig_initial_counted_deemed_income
	public deny_dwp_elig_initial_child_support_exclusion
	public deny_dwp_elig_initial_total_counted_income
	public deny_dwp_elig_initial_family_wage_level
	public deny_dwp_elig_asset_CASH
	public deny_dwp_elig_asset_ACCT
	public deny_dwp_elig_asset_SECU
	public deny_dwp_elig_asset_CARS
	public deny_dwp_elig_asset_SPON
	public deny_dwp_elig_asset_total
	public deny_dwp_elig_asset_maximum
	public deny_dwp_elig_test_fail_coop_applied_other_benefits
	public deny_dwp_elig_test_fail_coop_provide_requested_info
	public deny_dwp_elig_test_fail_coop_IEVS
	public deny_dwp_elig_test_fail_coop_vendor_info
	public deny_dwp_elig_test_verif_ACCT
	public deny_dwp_elig_test_verif_BUSI
	public deny_dwp_elig_test_verif_CARS
	public deny_dwp_elig_test_verif_JOBS
	public deny_dwp_elig_test_verif_MEMB_dob
	public deny_dwp_elig_test_verif_MEMB_id
	public deny_dwp_elig_test_verif_PARE
	public deny_dwp_elig_test_verif_PREG
	public deny_dwp_elig_test_verif_RBIC
	public deny_dwp_elig_test_verif_ADDR
	public deny_dwp_elig_test_verif_SCHL
	public deny_dwp_elig_test_verif_SECU
	public deny_dwp_elig_test_verif_SPON
	public deny_dwp_elig_test_verif_UNEA

	public deny_mfip_case_test_appl_withdraw
	public deny_mfip_case_test_asset
	public deny_mfip_case_test_death_applicant
	public deny_mfip_case_test_dupl_assist
	public deny_mfip_case_test_elig_child
	public deny_mfip_case_test_fail_coop
	public deny_mfip_case_test_fail_file
	public deny_mfip_case_test_initial_income
	public deny_mfip_case_test_minor_liv_arrange
	public deny_mfip_case_test_monthly_income
	public deny_mfip_case_test_post_60_disq
	public deny_mfip_case_test_residence
	public deny_mfip_case_test_sanction_limit
	public deny_mfip_case_test_strike
	public deny_mfip_case_test_TANF_time_limit
	public deny_mfip_case_test_transfer_asset
	public deny_mfip_case_test_verif
	public deny_mfip_case_test_275_new_spouse_income
	public deny_mfip_fs_case_test_fail_coop_snap_qc
	public deny_mfip_fs_case_test_opt_out_cash
	public deny_mfip_fs_case_test_opt_out_housing_grant
	public deny_mfip_verif_ACCT
	public deny_mfip_verif_BUSI
	public deny_mfip_verif_CARS
	public deny_mfip_verif_JOBS
	public deny_mfip_verif_MEMB_dob
	public deny_mfip_verif_MEMB_id
	public deny_mfip_verif_PARE
	public deny_mfip_verif_PREG
	public deny_mfip_verif_RBIC
	public deny_mfip_verif_ADDR
	public deny_mfip_verif_SCHL
	public deny_mfip_verif_SECU
	public deny_mfip_verif_SHEL
	public deny_mfip_verif_SPON
	public deny_mfip_verif_UNEA
	public deny_mfip_verif_MEMI
	public deny_mfip_counted_asset_CASH
	public deny_mfip_counted_asset_ACCT
	public deny_mfip_counted_asset_SECU
	public deny_mfip_counted_asset_CARS
	public deny_mfip_counted_asset_SPON
	public deny_mfip_counted_asset_total
	public deny_mfip_counted_asset_max
	public deny_mfip_initial_income_earned
	public deny_mfip_initial_income_deoendant_care
	public deny_mfip_initial_income_unearned
	public deny_mfip_initial_income_deemed
	public deny_mfip_initial_income_cses_exclusion
	public deny_mfip_initial_income_total
	public deny_mfip_initial_income_family_wage_level

	public deny_msa_elig_case_test_applicant_eligible
	public deny_msa_elig_case_test_application_withdrawn
	public deny_msa_elig_case_test_eligible_member
	public deny_msa_elig_case_test_fail_file
	public deny_msa_elig_case_test_prosp_gross_income
	public deny_msa_elig_case_test_prosp_net_income
	public deny_msa_elig_case_test_residence
	public deny_msa_elig_case_test_assets
	public deny_msa_elig_case_test_retro_net_income
	public deny_msa_elig_case_test_verif
	public deny_msa_elig_case_shared_hh_yn
	public deny_msa_elig_case_test_verif_acct
	public deny_msa_elig_case_test_verif_addr
	public deny_msa_elig_case_test_verif_busi
	public deny_msa_elig_case_test_verif_cars
	public deny_msa_elig_case_test_verif_jobs
	public deny_msa_elig_case_test_verif_lump
	public deny_msa_elig_case_test_verif_pact
	public deny_msa_elig_case_test_verif_rbic
	public deny_msa_elig_case_test_verif_secu
	public deny_msa_elig_case_test_verif_spon
	public deny_msa_elig_case_test_verif_stin
	public deny_msa_elig_case_test_verif_unea
	public deny_msa_elig_budg_need_standard
	public deny_msa_elig_budg_net_income

	public deny_dwp_elig_explanation
	public deny_mfip_elig_explanation
	public deny_ga_elig_explanation
	public deny_msa_elig_explanation

	public deny_cash_worker_message_one
	public deny_cash_worker_message_two
	public deny_cash_worker_message_three

	public sub read_elig()
		approved_today = False
		approved_version_found = False

		call navigate_to_MAXIS_screen("ELIG", "DENY")
		EMWriteScreen elig_footer_month, 19, 54
		EMWriteScreen elig_footer_year, 19, 57
		Call find_last_approved_ELIG_version(19, 78, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		If approved_version_found = True Then
			EMReadScreen approval_date, 8, 3, 14		'this is the actual approval date - not the process date'
			approval_date = DateAdd("d", 0, approval_date)
			If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
			If allow_late_note = True Then
				one_week_ago = DateAdd("d", -7, date)
				If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
			End If
			If developer_mode = True Then approved_today = True			'TESTING OPTION'
		End If
		If approved_today = True Then
			ReDim deny_cash_membs_ref_numbs(0)
			ReDim deny_cash_membs_full_name(0)
			ReDim deny_cash_membs_request_yn(0)
			ReDim deny_cash_membs_dwp_test_absence(0)
			ReDim deny_cash_membs_dwp_test_child_age(0)
			ReDim deny_cash_membs_dwp_test_citizenship(0)
			ReDim deny_cash_membs_dwp_test_citizenship_verif(0)
			ReDim deny_cash_membs_dwp_test_dupl_assist(0)
			ReDim deny_cash_membs_dwp_test_foster_care(0)
			ReDim deny_cash_membs_dwp_test_fraud(0)
			ReDim deny_cash_membs_dwp_test_minor_living_arrangement(0)
			ReDim deny_cash_membs_dwp_test_post_60_removal(0)
			ReDim deny_cash_membs_dwp_test_SSI(0)
			ReDim deny_cash_membs_dwp_test_SSN_coop(0)
			ReDim deny_cash_membs_dwp_test_Unit_member(0)
			ReDim deny_cash_membs_dwp_test_unlawful_conduct(0)
			ReDim deny_cash_membs_mfip_test_absence(0)
			ReDim deny_cash_membs_mfip_test_child_age(0)
			ReDim deny_cash_membs_mfip_test_citizenship(0)
			ReDim deny_cash_membs_mfip_test_citizenship_verif(0)
			ReDim deny_cash_membs_mfip_test_dupl_assist(0)
			ReDim deny_cash_membs_mfip_test_foster_care(0)
			ReDim deny_cash_membs_mfip_test_fraud(0)
			ReDim deny_cash_membs_mfip_test_minor_living_arrangement(0)
			ReDim deny_cash_membs_mfip_test_post_60_removal(0)
			ReDim deny_cash_membs_mfip_test_SSI(0)
			ReDim deny_cash_membs_mfip_test_SSN_coop(0)
			ReDim deny_cash_membs_mfip_test_Unit_member(0)
			ReDim deny_cash_membs_mfip_test_unlawful_conduct(0)
			ReDim deny_cash_membs_msa_test_absence(0)
			ReDim deny_cash_membs_msa_test_age(0)
			ReDim deny_cash_membs_msa_test_basis_of_elig(0)
			ReDim deny_cash_membs_msa_test_citizenship(0)
			ReDim deny_cash_membs_msa_test_dupl_assist(0)
			ReDim deny_cash_membs_msa_test_fail_coop(0)
			ReDim deny_cash_membs_msa_test_fraud(0)
			ReDim deny_cash_membs_msa_test_IVE_elig(0)
			ReDim deny_cash_membs_msa_test_living_arrangment(0)
			ReDim deny_cash_membs_msa_test_SSI_basis(0)
			ReDim deny_cash_membs_msa_test_SSN_coop(0)
			ReDim deny_cash_membs_msa_test_unit_member(0)
			ReDim deny_cash_membs_msa_test_verif(0)
			ReDim deny_cash_membs_ga_test_absence(0)
			ReDim deny_cash_membs_ga_test_basis_of_elig(0)
			ReDim deny_cash_membs_ga_test_dupl_assist(0)
			ReDim deny_cash_membs_ga_test_ga_coop(0)
			ReDim deny_cash_membs_ga_test_imig_status(0)
			ReDim deny_cash_membs_ga_test_imig_verif(0)
			ReDim deny_cash_membs_ga_test_IVE_elig(0)
			ReDim deny_cash_membs_ga_test_lump_sum_payment(0)
			ReDim deny_cash_membs_ga_test_SSI(0)
			ReDim deny_cash_membs_ga_test_SSN_coop(0)
			ReDim deny_cash_membs_ga_test_unit_member(0)

			row = 8
			memb_count = 0
			Do
				ReDim preserve deny_cash_membs_ref_numbs(memb_count)
				ReDim preserve deny_cash_membs_full_name(memb_count)
				ReDim preserve deny_cash_membs_request_yn(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_absence(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_child_age(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_citizenship(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_citizenship_verif(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_dupl_assist(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_foster_care(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_fraud(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_minor_living_arrangement(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_post_60_removal(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_SSI(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_SSN_coop(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_Unit_member(memb_count)
				ReDim preserve deny_cash_membs_dwp_test_unlawful_conduct(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_absence(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_child_age(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_citizenship(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_citizenship_verif(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_dupl_assist(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_foster_care(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_fraud(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_minor_living_arrangement(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_post_60_removal(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_SSI(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_SSN_coop(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_Unit_member(memb_count)
				ReDim preserve deny_cash_membs_mfip_test_unlawful_conduct(memb_count)
				ReDim preserve deny_cash_membs_msa_test_absence(memb_count)
				ReDim preserve deny_cash_membs_msa_test_age(memb_count)
				ReDim preserve deny_cash_membs_msa_test_basis_of_elig(memb_count)
				ReDim preserve deny_cash_membs_msa_test_citizenship(memb_count)
				ReDim preserve deny_cash_membs_msa_test_dupl_assist(memb_count)
				ReDim preserve deny_cash_membs_msa_test_fail_coop(memb_count)
				ReDim preserve deny_cash_membs_msa_test_fraud(memb_count)
				ReDim preserve deny_cash_membs_msa_test_IVE_elig(memb_count)
				ReDim preserve deny_cash_membs_msa_test_living_arrangment(memb_count)
				ReDim preserve deny_cash_membs_msa_test_SSI_basis(memb_count)
				ReDim preserve deny_cash_membs_msa_test_SSN_coop(memb_count)
				ReDim preserve deny_cash_membs_msa_test_unit_member(memb_count)
				ReDim preserve deny_cash_membs_msa_test_verif(memb_count)
				ReDim preserve deny_cash_membs_ga_test_absence(memb_count)
				ReDim preserve deny_cash_membs_ga_test_basis_of_elig(memb_count)
				ReDim preserve deny_cash_membs_ga_test_dupl_assist(memb_count)
				ReDim preserve deny_cash_membs_ga_test_ga_coop(memb_count)
				ReDim preserve deny_cash_membs_ga_test_imig_status(memb_count)
				ReDim preserve deny_cash_membs_ga_test_imig_verif(memb_count)
				ReDim preserve deny_cash_membs_ga_test_IVE_elig(memb_count)
				ReDim preserve deny_cash_membs_ga_test_lump_sum_payment(memb_count)
				ReDim preserve deny_cash_membs_ga_test_SSI(memb_count)
				ReDim preserve deny_cash_membs_ga_test_SSN_coop(memb_count)
				ReDim preserve deny_cash_membs_ga_test_unit_member(memb_count)

				EMReadScreen deny_cash_membs_ref_numbs(memb_count), 2, row, 5
				EMReadScreen deny_cash_membs_full_name(memb_count), 25, row, 11
				EMReadScreen deny_cash_membs_request_yn(memb_count), 1, row, 42

				Call write_value_and_transmit("X", row, 47)		'DWP Tests'
				EMReadScreen deny_cash_membs_dwp_test_absence(memb_count), 				6, 7, 10
				EMReadScreen deny_cash_membs_dwp_test_child_age(memb_count), 			6, 8, 10
				EMReadScreen deny_cash_membs_dwp_test_citizenship(memb_count), 			6, 9, 10
				EMReadScreen deny_cash_membs_dwp_test_citizenship_verif(memb_count), 	6, 10, 10
				EMReadScreen deny_cash_membs_dwp_test_dupl_assist(memb_count), 			6, 11, 10
				EMReadScreen deny_cash_membs_dwp_test_foster_care(memb_count), 			6, 12, 10
				EMReadScreen deny_cash_membs_dwp_test_fraud(memb_count), 				6, 13, 10

				EMReadScreen deny_cash_membs_dwp_test_minor_living_arrangement(memb_count), 6, 7, 42
				EMReadScreen deny_cash_membs_dwp_test_post_60_removal(memb_count), 			6, 8, 42
				EMReadScreen deny_cash_membs_dwp_test_SSI(memb_count), 						6, 9, 42
				EMReadScreen deny_cash_membs_dwp_test_SSN_coop(memb_count), 				6, 10, 42
				EMReadScreen deny_cash_membs_dwp_test_Unit_member(memb_count), 				6, 11, 42
				EMReadScreen deny_cash_membs_dwp_test_unlawful_conduct(memb_count), 		6, 12, 42
				transmit

				Call write_value_and_transmit("X", row, 52)		'MFIP Tests'
				EMReadScreen deny_cash_membs_mfip_test_absence(memb_count), 			6, 7, 10
				EMReadScreen deny_cash_membs_mfip_test_child_age(memb_count), 			6, 8, 10
				EMReadScreen deny_cash_membs_mfip_test_citizenship(memb_count), 		6, 9, 10
				EMReadScreen deny_cash_membs_mfip_test_citizenship_verif(memb_count), 	6, 10, 10
				EMReadScreen deny_cash_membs_mfip_test_dupl_assist(memb_count), 		6, 11, 10
				EMReadScreen deny_cash_membs_mfip_test_foster_care(memb_count), 		6, 12, 10
				EMReadScreen deny_cash_membs_mfip_test_fraud(memb_count), 				6, 13, 10

				EMReadScreen deny_cash_membs_mfip_test_minor_living_arrangement(memb_count), 6, 7, 42
				EMReadScreen deny_cash_membs_mfip_test_post_60_removal(memb_count), 		6, 8, 42
				EMReadScreen deny_cash_membs_mfip_test_SSI(memb_count), 					6, 9, 42
				EMReadScreen deny_cash_membs_mfip_test_SSN_coop(memb_count), 				6, 10, 42
				EMReadScreen deny_cash_membs_mfip_test_Unit_member(memb_count), 			6, 11, 42
				EMReadScreen deny_cash_membs_mfip_test_unlawful_conduct(memb_count), 		6, 12, 42
				transmit

				Call write_value_and_transmit("X", row, 67)		'MSA Tests'
				EMReadScreen deny_cash_membs_msa_test_absence(memb_count), 			6, 7, 10
				EMReadScreen deny_cash_membs_msa_test_age(memb_count), 				6, 8, 10
				EMReadScreen deny_cash_membs_msa_test_basis_of_elig(memb_count), 	6, 9, 10
				EMReadScreen deny_cash_membs_msa_test_citizenship(memb_count), 		6, 10, 10
				EMReadScreen deny_cash_membs_msa_test_dupl_assist(memb_count), 		6, 11, 10
				EMReadScreen deny_cash_membs_msa_test_fail_coop(memb_count), 		6, 12, 10
				EMReadScreen deny_cash_membs_msa_test_fraud(memb_count), 			6, 13, 10

				EMReadScreen deny_cash_membs_msa_test_IVE_elig(memb_count), 		6, 7, 42
				EMReadScreen deny_cash_membs_msa_test_living_arrangment(memb_count), 6, 8, 42
				EMReadScreen deny_cash_membs_msa_test_SSI_basis(memb_count), 		6, 9, 42
				EMReadScreen deny_cash_membs_msa_test_SSN_coop(memb_count), 		6, 10, 42
				EMReadScreen deny_cash_membs_msa_test_unit_member(memb_count), 		6, 11, 42
				EMReadScreen deny_cash_membs_msa_test_verif(memb_count), 			6, 12, 42
				transmit

				Call write_value_and_transmit("X", row, 72)		'GA Tests'
				EMReadScreen deny_cash_membs_ga_test_absence(memb_count), 		6, 7, 10
				EMReadScreen deny_cash_membs_ga_test_basis_of_elig(memb_count), 6, 8, 10
				EMReadScreen deny_cash_membs_ga_test_dupl_assist(memb_count), 	6, 9, 10
				EMReadScreen deny_cash_membs_ga_test_ga_coop(memb_count), 		6, 10, 10
				EMReadScreen deny_cash_membs_ga_test_imig_status(memb_count), 	6, 11, 10
				EMReadScreen deny_cash_membs_ga_test_imig_verif(memb_count), 	6, 12, 10

				EMReadScreen deny_cash_membs_ga_test_IVE_elig(memb_count), 			6, 7, 42
				EMReadScreen deny_cash_membs_ga_test_lump_sum_payment(memb_count), 	6, 8, 42
				EMReadScreen deny_cash_membs_ga_test_SSI(memb_count), 				6, 9, 42
				EMReadScreen deny_cash_membs_ga_test_SSN_coop(memb_count), 			6, 10, 42
				EMReadScreen deny_cash_membs_ga_test_unit_member(memb_count), 		6, 11, 42
				transmit
				row = row + 1
				memb_count = memb_count + 1
				EMReadScreen next_ref_number, 2, row, 5
			Loop until next_ref_number = "  "

			transmit 		'Move to the next panel - CASM

			EMReadScreen deny_cash_dwp_reason_code, 2, 8, 46
			EMReadScreen deny_cash_mfip_reason_code, 2, 9, 46
			EMReadScreen deny_cash_msa_reason_code, 2, 12, 46
			EMReadScreen deny_cash_ga_reason_code, 2, 13, 46
			deny_cash_mfip_or_dwp = ""
			If deny_cash_dwp_reason_code = "01" and deny_cash_mfip_reason_code <> "01" Then deny_cash_mfip_or_dwp = "MFIP"
			If deny_cash_dwp_reason_code <> "01" and deny_cash_mfip_reason_code = "01" Then deny_cash_mfip_or_dwp = "DWP"

			If deny_cash_dwp_reason_code = "" Then deny_cash_dwp_reason_info = ""
			If deny_cash_dwp_reason_code = "01" Then
				deny_cash_dwp_reason_info = "No Eligible Child"
				If deny_cash_mfip_or_dwp = "MFIP" Then deny_cash_dwp_reason_info = "Assessed for MFIP"
			End If
			If deny_cash_dwp_reason_code = "02" Then deny_cash_dwp_reason_info = "Application Withdrawn"
			If deny_cash_dwp_reason_code = "03" Then deny_cash_dwp_reason_info = "Initial Income"
			If deny_cash_dwp_reason_code = "04" Then deny_cash_dwp_reason_info = "Assets"
			If deny_cash_dwp_reason_code = "05" Then deny_cash_dwp_reason_info = "Fail To Cooperate"
			If deny_cash_dwp_reason_code = "06" Then deny_cash_dwp_reason_info = "Child Support Disqualification"
			If deny_cash_dwp_reason_code = "07" Then deny_cash_dwp_reason_info = "Employment Services Disqualification"
			If deny_cash_dwp_reason_code = "08" Then deny_cash_dwp_reason_info = "Death"
			If deny_cash_dwp_reason_code = "09" Then deny_cash_dwp_reason_info = "Residence"
			If deny_cash_dwp_reason_code = "10" Then deny_cash_dwp_reason_info = "Transfer of Resources"
			If deny_cash_dwp_reason_code = "11" Then deny_cash_dwp_reason_info = "Verification"
			If deny_cash_dwp_reason_code = "12" Then deny_cash_dwp_reason_info = "Strike"
			If deny_cash_dwp_reason_code = "13" Then deny_cash_dwp_reason_info = "Program Active"
			If deny_cash_dwp_reason_code = "14" Then deny_cash_dwp_reason_info = "4 Month Limit"
			If deny_cash_dwp_reason_code = "15" Then deny_cash_dwp_reason_info = "MFIP Conversion"
			If deny_cash_dwp_reason_code = "23" Then deny_cash_dwp_reason_info = "Duplicate Assistance"
			If deny_cash_dwp_reason_code = "99" Then deny_cash_dwp_reason_info = "PND2 Denial"
			If deny_cash_dwp_reason_code = "TL" Then deny_cash_dwp_reason_info = "TANF Time Limit"
			If deny_cash_dwp_reason_code = "" Then deny_cash_dwp_memo_info = ""
			If deny_cash_dwp_reason_code = "01" Then deny_cash_dwp_memo_info = "this case does not have an eligible child."
			If deny_cash_dwp_reason_code = "02" Then deny_cash_dwp_memo_info = "you withdrew your request for Cash Assistance."
			If deny_cash_dwp_reason_code = "03" Then deny_cash_dwp_memo_info = "your income exceeds the income limit."
			If deny_cash_dwp_reason_code = "04" Then deny_cash_dwp_memo_info = "your assets exceed the asset limit."
			If deny_cash_dwp_reason_code = "05" Then deny_cash_dwp_memo_info = "you did not comply with all the program requirements."
			If deny_cash_dwp_reason_code = "06" Then deny_cash_dwp_memo_info = "you need to cooperate with Child Support requirements."
			If deny_cash_dwp_reason_code = "07" Then deny_cash_dwp_memo_info = "you need to cooperate with Employment Services requirements."
			If deny_cash_dwp_reason_code = "08" Then deny_cash_dwp_memo_info = "the applicant has died."
			If deny_cash_dwp_reason_code = "09" Then deny_cash_dwp_memo_info = "you must be a resident of Minnesota for 30 days."
			If deny_cash_dwp_reason_code = "10" Then deny_cash_dwp_memo_info = "you transferred assets."
			If deny_cash_dwp_reason_code = "11" Then deny_cash_dwp_memo_info = "you did not provide required verifications."
			If deny_cash_dwp_reason_code = "12" Then deny_cash_dwp_memo_info = "you have a household member on strike."
			If deny_cash_dwp_reason_code = "13" Then deny_cash_dwp_memo_info = "you have another program active."
			If deny_cash_dwp_reason_code = "14" Then deny_cash_dwp_memo_info = "you have used all 4 months of DWP."
			If deny_cash_dwp_reason_code = "15" Then deny_cash_dwp_memo_info = "this case does not appear likely to benefit from DWP."
			If deny_cash_dwp_reason_code = "23" Then deny_cash_dwp_memo_info = "you already have cash assistance."
			If deny_cash_dwp_reason_code = "99" Then deny_cash_dwp_memo_info = "you did not complete the application process."
			If deny_cash_dwp_reason_code = "TL" Then deny_cash_dwp_memo_info = "you have used all 60 TANF months available."

			If deny_cash_mfip_reason_code = "" Then deny_cash_mfip_reason_info = ""
			If deny_cash_mfip_reason_code = "01" Then
				deny_cash_mfip_reason_info = "No Eligible Child"
				If deny_cash_mfip_or_dwp = "DWP" Then deny_cash_mfip_reason_info = "Assessed for DWP"
			End If
			If deny_cash_mfip_reason_code = "02" Then deny_cash_mfip_reason_info = "Application Withdrawn"
			If deny_cash_mfip_reason_code = "03" Then deny_cash_mfip_reason_info = "Initial Income"
			If deny_cash_mfip_reason_code = "04" Then deny_cash_mfip_reason_info = "Monthly Income"
			If deny_cash_mfip_reason_code = "05" Then deny_cash_mfip_reason_info = "Assets"
			If deny_cash_mfip_reason_code = "06" Then deny_cash_mfip_reason_info = "Fail To Cooperate"
			If deny_cash_mfip_reason_code = "07" Then deny_cash_mfip_reason_info = "Fail To Cooperate with IEVS"
			If deny_cash_mfip_reason_code = "08" Then deny_cash_mfip_reason_info = "Death"
			If deny_cash_mfip_reason_code = "09" Then deny_cash_mfip_reason_info = "Residence"
			If deny_cash_mfip_reason_code = "10" Then deny_cash_mfip_reason_info = "Transfer of Resources"
			If deny_cash_mfip_reason_code = "11" Then deny_cash_mfip_reason_info = "Verification"
			If deny_cash_mfip_reason_code = "12" Then deny_cash_mfip_reason_info = "Strike"
			If deny_cash_mfip_reason_code = "13" Then deny_cash_mfip_reason_info = "Fail To File"
			If deny_cash_mfip_reason_code = "14" Then deny_cash_mfip_reason_info = "Program Active"
			If deny_cash_mfip_reason_code = "23" Then deny_cash_mfip_reason_info = "Duplicate Assistance"
			If deny_cash_mfip_reason_code = "24" Then deny_cash_mfip_reason_info = "Minor Living Arrangement"
			If deny_cash_mfip_reason_code = "TL" Then deny_cash_mfip_reason_info = "TANF Time Limit"
			If deny_cash_mfip_reason_code = "33" Then deny_cash_mfip_reason_info = "Diversionary Work Program"
			If deny_cash_mfip_reason_code = "34" Then deny_cash_mfip_reason_info = "Sanction Period"
			If deny_cash_mfip_reason_code = "35" Then deny_cash_mfip_reason_info = "Sanction Date Compliance"
			If deny_cash_mfip_reason_code = "99" Then deny_cash_mfip_reason_info = "PND2 Denial System Entered"
			If deny_cash_mfip_reason_code = "" Then deny_cash_mfip_memo_info = ""
			If deny_cash_mfip_reason_code = "01" Then deny_cash_mfip_memo_info = "this case does not have an eligible child."
			If deny_cash_mfip_reason_code = "02" Then deny_cash_mfip_memo_info = "you withdrew your request for Cash Assistance."
			If deny_cash_mfip_reason_code = "03" Then deny_cash_mfip_memo_info = "your income exceeds the income limit."
			If deny_cash_mfip_reason_code = "04" Then deny_cash_mfip_memo_info = "your income exceeds the income limit."
			If deny_cash_mfip_reason_code = "05" Then deny_cash_mfip_memo_info = "your assets exceed the asset limit."
			If deny_cash_mfip_reason_code = "06" Then deny_cash_mfip_memo_info = "you did not comply with all the program requirements."
			If deny_cash_mfip_reason_code = "07" Then deny_cash_mfip_memo_info = "you did not comply with a request about an income data source."
			If deny_cash_mfip_reason_code = "08" Then deny_cash_mfip_memo_info = "the applicant has died."
			If deny_cash_mfip_reason_code = "09" Then deny_cash_mfip_memo_info = "you must be a resident of Minnesota for 30 days."
			If deny_cash_mfip_reason_code = "10" Then deny_cash_mfip_memo_info = "you transferred assets."
			If deny_cash_mfip_reason_code = "11" Then deny_cash_mfip_memo_info = "you did not provide required verifications."
			If deny_cash_mfip_reason_code = "12" Then deny_cash_mfip_memo_info = "you have a household member on strike."
			If deny_cash_mfip_reason_code = "13" Then deny_cash_mfip_memo_info = "you did not complete required reports."
			If deny_cash_mfip_reason_code = "14" Then deny_cash_mfip_memo_info = "you have another program active."
			If deny_cash_mfip_reason_code = "23" Then deny_cash_mfip_memo_info = "you already have cash assistance."
			If deny_cash_mfip_reason_code = "24" Then deny_cash_mfip_memo_info = "the living arrangment of minors in the home has not been approved."
			If deny_cash_mfip_reason_code = "TL" Then deny_cash_mfip_memo_info = "you have used all 60 TANF months available."
			If deny_cash_mfip_reason_code = "33" Then deny_cash_mfip_memo_info = "this case appears to be likely to benefit from DWP."
			If deny_cash_mfip_reason_code = "34" Then deny_cash_mfip_memo_info = "you are currently in MFIP Sanction."
			If deny_cash_mfip_reason_code = "35" Then deny_cash_mfip_memo_info = "you have not complied to avoid sanction in time."
			If deny_cash_mfip_reason_code = "99" Then deny_cash_mfip_memo_info = "you did not complete the application process."

			If deny_cash_msa_reason_code = "" Then deny_cash_msa_reason_info = ""
			If deny_cash_msa_reason_code = "01" Then deny_cash_msa_reason_info = "No Eligible Member"
			If deny_cash_msa_reason_code = "03" Then deny_cash_msa_reason_info = "Verification"
			If deny_cash_msa_reason_code = "08" Then deny_cash_msa_reason_info = "Application Withdrawn"
			If deny_cash_msa_reason_code = "10" Then deny_cash_msa_reason_info = "Residence"
			If deny_cash_msa_reason_code = "11" Then deny_cash_msa_reason_info = "Assets"
			If deny_cash_msa_reason_code = "24" Then deny_cash_msa_reason_info = "Program Active"
			If deny_cash_msa_reason_code = "28" Then deny_cash_msa_reason_info = "Fail To File"
			If deny_cash_msa_reason_code = "29" Then deny_cash_msa_reason_info = "Applicant Eligible"
			If deny_cash_msa_reason_code = "30" Then deny_cash_msa_reason_info = "Prospective Gross Income"
			If deny_cash_msa_reason_code = "31" Then deny_cash_msa_reason_info = "Prospective Net Income"
			If deny_cash_msa_reason_code = "99" Then deny_cash_msa_reason_info = "PND2 Denial System Entered"
			If deny_cash_msa_reason_code = "01" Then deny_cash_msa_memo_info = "no one in the household meets MSA eligibility criteria."
			If deny_cash_msa_reason_code = "03" Then deny_cash_msa_memo_info = "you did not provide required verifications."
			If deny_cash_msa_reason_code = "08" Then deny_cash_msa_memo_info = "you withdrew your request for Cash Assistance."
			If deny_cash_msa_reason_code = "10" Then deny_cash_msa_memo_info = "you must be a resident of Minnesota for 30 days."
			If deny_cash_msa_reason_code = "11" Then deny_cash_msa_memo_info = "your assets exceed the asset limit."
			If deny_cash_msa_reason_code = "24" Then deny_cash_msa_memo_info = "you have another program active."
			If deny_cash_msa_reason_code = "28" Then deny_cash_msa_memo_info = "you did not complete required reports."
			If deny_cash_msa_reason_code = "29" Then deny_cash_msa_memo_info = "Applicant Eligible"
			If deny_cash_msa_reason_code = "30" Then deny_cash_msa_memo_info = "your income exceeds the income limit."
			If deny_cash_msa_reason_code = "31" Then deny_cash_msa_memo_info = "your income exceeds the income limit."
			If deny_cash_msa_reason_code = "99" Then deny_cash_msa_memo_info = "you did not complete the application process."

			If deny_cash_ga_reason_code = "" Then deny_cash_ga_reason_info = ""
			If deny_cash_ga_reason_code = "01" Then deny_cash_ga_reason_info = "No Eligible Person"
			If deny_cash_ga_reason_code = "02" Then deny_cash_ga_reason_info = "Net Income"
			If deny_cash_ga_reason_code = "03" Then deny_cash_ga_reason_info = "Verification"
			If deny_cash_ga_reason_code = "04" Then deny_cash_ga_reason_info = "Non Cooperation"
			If deny_cash_ga_reason_code = "06" Then deny_cash_ga_reason_info = "Other Benefits"
			If deny_cash_ga_reason_code = "07" Then deny_cash_ga_reason_info = "Address Unknown"
			If deny_cash_ga_reason_code = "08" Then deny_cash_ga_reason_info = "Application Withdrawn"
			If deny_cash_ga_reason_code = "09" Then deny_cash_ga_reason_info = "Client Request"
			If deny_cash_ga_reason_code = "10" Then deny_cash_ga_reason_info = "Residence"
			If deny_cash_ga_reason_code = "11" Then deny_cash_ga_reason_info = "Assets"
			If deny_cash_ga_reason_code = "12" Then deny_cash_ga_reason_info = "Transfer of Resource"
			If deny_cash_ga_reason_code = "14" Then deny_cash_ga_reason_info = "Interim Assistance Agreement"
			If deny_cash_ga_reason_code = "15" Then deny_cash_ga_reason_info = "Out Of County"
			If deny_cash_ga_reason_code = "16" Then deny_cash_ga_reason_info = "Disqualify"
			If deny_cash_ga_reason_code = "17" Then deny_cash_ga_reason_info = "Interview"
			If deny_cash_ga_reason_code = "19" Then deny_cash_ga_reason_info = "Fail to File"
			If deny_cash_ga_reason_code = "21" Then deny_cash_ga_reason_info = "Duplicate Assistance"
			If deny_cash_ga_reason_code = "22" Then deny_cash_ga_reason_info = "Death"
			If deny_cash_ga_reason_code = "23" Then deny_cash_ga_reason_info = "Eligible Other Benefits"
			If deny_cash_ga_reason_code = "26" Then deny_cash_ga_reason_info = "Program Active"
			If deny_cash_ga_reason_code = "29" Then deny_cash_ga_reason_info = "Lump Sum"
			If deny_cash_ga_reason_code = "99" Then deny_cash_ga_reason_info = "PND2 Denial System Entered"
			If deny_cash_ga_reason_code = "01" Then deny_cash_ga_memo_info = "no one in the household meets GA eligibility criteria."
			If deny_cash_ga_reason_code = "02" Then deny_cash_ga_memo_info = "your income exceeds the income limit."
			If deny_cash_ga_reason_code = "03" Then deny_cash_ga_memo_info = "you did not provide required verifications."
			If deny_cash_ga_reason_code = "04" Then deny_cash_ga_memo_info = "you did not comply with all the program requirements."
			If deny_cash_ga_reason_code = "06" Then deny_cash_ga_memo_info = "you may have access to other benefits."
			If deny_cash_ga_reason_code = "07" Then deny_cash_ga_memo_info = "your address is unknown."
			If deny_cash_ga_reason_code = "08" Then deny_cash_ga_memo_info = "you withdrew your request for Cash Assistance."
			If deny_cash_ga_reason_code = "09" Then deny_cash_ga_memo_info = "you withdrew your request for Cash Assistance."
			If deny_cash_ga_reason_code = "10" Then deny_cash_ga_memo_info = "you must be a resident of Minnesota for 30 days."
			If deny_cash_ga_reason_code = "11" Then deny_cash_ga_memo_info = "your assets exceed the asset limit."
			If deny_cash_ga_reason_code = "12" Then deny_cash_ga_memo_info = "you transferred assets."
			If deny_cash_ga_reason_code = "14" Then deny_cash_ga_memo_info = "you did not complete the Interim Assistance Agreements."
			If deny_cash_ga_reason_code = "15" Then deny_cash_ga_memo_info = "you are not residing in Hennepin County."
			If deny_cash_ga_reason_code = "16" Then deny_cash_ga_memo_info = "you have been disqualified from receipt of Cash Assistance."
			If deny_cash_ga_reason_code = "17" Then deny_cash_ga_memo_info = "you did not complete the application interview."
			If deny_cash_ga_reason_code = "19" Then deny_cash_ga_memo_info = "you did not complete required reports."
			If deny_cash_ga_reason_code = "21" Then deny_cash_ga_memo_info = "you already have cash assistance."
			If deny_cash_ga_reason_code = "22" Then deny_cash_ga_memo_info = "the applicant has died."
			If deny_cash_ga_reason_code = "23" Then deny_cash_ga_memo_info = "you may have access to other benefits."
			If deny_cash_ga_reason_code = "26" Then deny_cash_ga_memo_info = "you have another program active."
			If deny_cash_ga_reason_code = "29" Then deny_cash_ga_memo_info = "you have received a lump sum income making you ineligible."
			If deny_cash_ga_reason_code = "99" Then deny_cash_ga_memo_info = "you did not complete the application process."

			EMReadScreen deny_cash_dwp_selection_line, 1, 8, 20
			EMReadScreen deny_cash_mfip_selection_line, 1, 9, 20
			EMReadScreen deny_cash_msa_selection_line, 1, 12, 20

			deny_cash_dwp_details_exists = False
			deny_cash_mfip_details_exists = False
			deny_cash_msa_details_exists = False
			deny_cash_ga_details_exists = True

			If deny_cash_ga_reason_info = "No Eligible Person" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Address Unknown" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Application Withdrawn" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Client Request" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Residence" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Interim Assistance Agreement" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Out Of County" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Interview" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Duplicate Assistance" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Death" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "Program Active" Then deny_cash_ga_details_exists = False
			If deny_cash_ga_reason_info = "PND2 Denial System Entered" Then deny_cash_ga_details_exists = False


			If deny_cash_dwp_selection_line = "_" Then
				Call write_value_and_transmit("X", 8, 20)
				deny_cash_dwp_details_exists = True

				transmit

				EMReadScreen deny_dwp_elig_case_test_application_withdrawn, 	6, 6, 7
				EMReadScreen deny_dwp_elig_case_test_assets, 				6, 7, 7
				EMReadScreen deny_dwp_elig_case_test_CS_disqualification, 	6, 8, 7
				EMReadScreen deny_dwp_elig_case_test_death_of_applicant, 	6, 9, 7
				EMReadScreen deny_dwp_elig_case_test_dupl_assistance, 		6, 10, 7
				EMReadScreen deny_dwp_elig_case_test_eligible_child, 		6, 11, 7
				EMReadScreen deny_dwp_elig_case_test_ES_disqualification, 	6, 12, 7
				EMReadScreen deny_dwp_elig_case_test_fail_coop, 				6, 13, 7
				EMReadScreen deny_dwp_elig_case_test_four_month_limit, 		6, 14, 7

				EMReadScreen deny_dwp_elig_case_test_initial_income, 		6, 6, 45
				EMReadScreen deny_dwp_elig_case_test_MFIP_conversion, 		6, 7, 45
				EMReadScreen deny_dwp_elig_case_test_residence, 				6, 8, 45
				EMReadScreen deny_dwp_elig_case_test_strike, 				6, 9, 45
				EMReadScreen deny_dwp_elig_case_test_TANF_time_limit, 		6, 10, 45
				EMReadScreen deny_dwp_elig_case_test_transfer_of_assets, 	6, 11, 45
				EMReadScreen deny_dwp_elig_case_test_verif, 					6, 12, 45

				EMReadScreen deny_dwp_elig_case_test_new_spouse_income, 		6, 17, 7

				deny_dwp_elig_case_test_application_withdrawn = trim(deny_dwp_elig_case_test_application_withdrawn)
				deny_dwp_elig_case_test_assets = trim(deny_dwp_elig_case_test_assets)
				deny_dwp_elig_case_test_CS_disqualification = trim(deny_dwp_elig_case_test_CS_disqualification)
				deny_dwp_elig_case_test_death_of_applicant = trim(deny_dwp_elig_case_test_death_of_applicant)
				deny_dwp_elig_case_test_dupl_assistance = trim(deny_dwp_elig_case_test_dupl_assistance)
				deny_dwp_elig_case_test_eligible_child = trim(deny_dwp_elig_case_test_eligible_child)
				deny_dwp_elig_case_test_ES_disqualification = trim(deny_dwp_elig_case_test_ES_disqualification)
				deny_dwp_elig_case_test_fail_coop = trim(deny_dwp_elig_case_test_fail_coop)
				deny_dwp_elig_case_test_four_month_limit = trim(deny_dwp_elig_case_test_four_month_limit)

				deny_dwp_elig_case_test_initial_income = trim(deny_dwp_elig_case_test_initial_income)
				deny_dwp_elig_case_test_MFIP_conversion = trim(deny_dwp_elig_case_test_MFIP_conversion)
				deny_dwp_elig_case_test_residence = trim(deny_dwp_elig_case_test_residence)
				deny_dwp_elig_case_test_strike = trim(deny_dwp_elig_case_test_strike)
				deny_dwp_elig_case_test_TANF_time_limit = trim(deny_dwp_elig_case_test_TANF_time_limit)
				deny_dwp_elig_case_test_transfer_of_assets = trim(deny_dwp_elig_case_test_transfer_of_assets)
				deny_dwp_elig_case_test_verif = trim(deny_dwp_elig_case_test_verif)

				deny_dwp_elig_case_test_new_spouse_income = trim(deny_dwp_elig_case_test_new_spouse_income)

				If deny_dwp_elig_case_test_assets <> "NA" Then
					Call write_value_and_transmit("X", 7, 5)

					EMReadScreen deny_dwp_elig_asset_CASH, 9, 8, 54
					EMReadScreen deny_dwp_elig_asset_ACCT, 9, 9, 54
					EMReadScreen deny_dwp_elig_asset_SECU, 9, 10, 54
					EMReadScreen deny_dwp_elig_asset_CARS, 9, 11, 54
					EMReadScreen deny_dwp_elig_asset_SPON, 9, 12, 54

					EMReadScreen deny_dwp_elig_asset_total, 9, 17, 54
					EMReadScreen deny_dwp_elig_asset_maximum, 9, 18, 54

					deny_dwp_elig_asset_CASH = trim(deny_dwp_elig_asset_CASH)
					deny_dwp_elig_asset_ACCT = trim(deny_dwp_elig_asset_ACCT)
					deny_dwp_elig_asset_SECU = trim(deny_dwp_elig_asset_SECU)
					deny_dwp_elig_asset_CARS = trim(deny_dwp_elig_asset_CARS)
					deny_dwp_elig_asset_SPON = trim(deny_dwp_elig_asset_SPON)
					deny_dwp_elig_asset_total = trim(deny_dwp_elig_asset_total)
					deny_dwp_elig_asset_maximum = trim(deny_dwp_elig_asset_maximum)

					transmit
				End If

				If deny_dwp_elig_case_test_fail_coop <> "NA" Then
					Call write_value_and_transmit("X", 13, 5)

					EMReadScreen deny_dwp_elig_test_fail_coop_applied_other_benefits, 6, 10, 30
					EMReadScreen deny_dwp_elig_test_fail_coop_provide_requested_info, 6, 11, 30
					EMReadScreen deny_dwp_elig_test_fail_coop_IEVS, 6, 12, 30
					EMReadScreen deny_dwp_elig_test_fail_coop_vendor_info, 6, 13, 30

					deny_dwp_elig_test_fail_coop_applied_other_benefits = trim(deny_dwp_elig_test_fail_coop_applied_other_benefits)
					deny_dwp_elig_test_fail_coop_provide_requested_info = trim(deny_dwp_elig_test_fail_coop_provide_requested_info)
					deny_dwp_elig_test_fail_coop_IEVS = trim(deny_dwp_elig_test_fail_coop_IEVS)
					deny_dwp_elig_test_fail_coop_vendor_info = trim(deny_dwp_elig_test_fail_coop_vendor_info)

					transmit
				End If

				If deny_dwp_elig_case_test_initial_income = "FAILED" Then
					Call write_value_and_transmit("X", 6, 43)

					EMReadScreen deny_dwp_elig_initial_counted_earned_income, 	9, 8, 42
					EMReadScreen deny_dwp_elig_initial_dependent_care_expense, 	9, 9, 42
					EMReadScreen deny_dwp_elig_initial_counted_unearned_income, 	9, 10, 42
					EMReadScreen deny_dwp_elig_initial_counted_deemed_income, 	9, 11, 42
					EMReadScreen deny_dwp_elig_initial_child_support_exclusion, 	9, 12, 42
					EMReadScreen deny_dwp_elig_initial_total_counted_income, 	9, 13, 42
					EMReadScreen deny_dwp_elig_initial_family_wage_level, 		9, 15, 42

					deny_dwp_elig_initial_counted_earned_income = trim(deny_dwp_elig_initial_counted_earned_income)
					deny_dwp_elig_initial_dependent_care_expense = trim(deny_dwp_elig_initial_dependent_care_expense)
					deny_dwp_elig_initial_counted_unearned_income = trim(deny_dwp_elig_initial_counted_unearned_income)
					deny_dwp_elig_initial_counted_deemed_income = trim(deny_dwp_elig_initial_counted_deemed_income)
					deny_dwp_elig_initial_child_support_exclusion = trim(deny_dwp_elig_initial_child_support_exclusion)
					deny_dwp_elig_initial_total_counted_income = trim(deny_dwp_elig_initial_total_counted_income)
					deny_dwp_elig_initial_family_wage_level = trim(deny_dwp_elig_initial_family_wage_level)

					'TODO - read member specific detail'

					transmit
				End If

				If deny_dwp_elig_case_test_verif <> "NA" Then
					Call write_value_and_transmit("X", 12, 43)

					EMReadScreen deny_dwp_elig_test_verif_ACCT, 		6, 5, 32
					EMReadScreen deny_dwp_elig_test_verif_BUSI, 		6, 6, 32
					EMReadScreen deny_dwp_elig_test_verif_CARS, 		6, 7, 32
					EMReadScreen deny_dwp_elig_test_verif_JOBS, 		6, 8, 32
					EMReadScreen deny_dwp_elig_test_verif_MEMB_dob, 	6, 9, 32
					EMReadScreen deny_dwp_elig_test_verif_MEMB_id, 	6, 10, 32
					EMReadScreen deny_dwp_elig_test_verif_PARE, 		6, 11, 32
					EMReadScreen deny_dwp_elig_test_verif_PREG, 		6, 12, 32
					EMReadScreen deny_dwp_elig_test_verif_RBIC, 		6, 13, 32
					EMReadScreen deny_dwp_elig_test_verif_ADDR, 		6, 14, 32
					EMReadScreen deny_dwp_elig_test_verif_SCHL, 		6, 15, 32
					EMReadScreen deny_dwp_elig_test_verif_SECU, 		6, 16, 32
					EMReadScreen deny_dwp_elig_test_verif_SPON, 		6, 17, 32
					EMReadScreen deny_dwp_elig_test_verif_UNEA, 		6, 18, 32

					deny_dwp_elig_test_verif_ACCT = trim(deny_dwp_elig_test_verif_ACCT)
					deny_dwp_elig_test_verif_BUSI = trim(deny_dwp_elig_test_verif_BUSI)
					deny_dwp_elig_test_verif_CARS = trim(deny_dwp_elig_test_verif_CARS)
					deny_dwp_elig_test_verif_JOBS = trim(deny_dwp_elig_test_verif_JOBS)
					deny_dwp_elig_test_verif_MEMB_dob = trim(deny_dwp_elig_test_verif_MEMB_dob)
					deny_dwp_elig_test_verif_MEMB_id = trim(deny_dwp_elig_test_verif_MEMB_id)
					deny_dwp_elig_test_verif_PARE = trim(deny_dwp_elig_test_verif_PARE)
					deny_dwp_elig_test_verif_PREG = trim(deny_dwp_elig_test_verif_PREG)
					deny_dwp_elig_test_verif_RBIC = trim(deny_dwp_elig_test_verif_RBIC)
					deny_dwp_elig_test_verif_ADDR = trim(deny_dwp_elig_test_verif_ADDR)
					deny_dwp_elig_test_verif_SCHL = trim(deny_dwp_elig_test_verif_SCHL)
					deny_dwp_elig_test_verif_SECU = trim(deny_dwp_elig_test_verif_SECU)
					deny_dwp_elig_test_verif_SPON = trim(deny_dwp_elig_test_verif_SPON)
					deny_dwp_elig_test_verif_UNEA = trim(deny_dwp_elig_test_verif_UNEA)

					transmit

				End If
				PF3
			End if

			If deny_cash_mfip_selection_line = "_" Then
				Call write_value_and_transmit("X", 9, 20)
				deny_cash_mfip_details_exists = True

				transmit			'MFCR

				EMReadScreen deny_mfip_case_test_appl_withdraw, 		6, 6, 7
				EMReadScreen deny_mfip_case_test_asset, 				6, 7, 7
				EMReadScreen deny_mfip_case_test_death_applicant, 	6, 8, 7
				EMReadScreen deny_mfip_case_test_dupl_assist, 		6, 9, 7
				EMReadScreen deny_mfip_case_test_elig_child, 		6, 10, 7
				EMReadScreen deny_mfip_case_test_fail_coop, 			6, 11, 7
				EMReadScreen deny_mfip_case_test_fail_file, 			6, 12, 7
				EMReadScreen deny_mfip_case_test_initial_income, 	6, 13, 7
				EMReadScreen deny_mfip_case_test_minor_liv_arrange, 	6, 14, 7

				EMReadScreen deny_mfip_case_test_monthly_income, 		6, 6, 46
				EMReadScreen deny_mfip_case_test_post_60_disq, 			6, 7, 46
				EMReadScreen deny_mfip_case_test_residence, 				6, 8, 46
				EMReadScreen deny_mfip_case_test_sanction_limit, 		6, 9, 46
				EMReadScreen deny_mfip_case_test_strike, 				6, 10, 46
				EMReadScreen deny_mfip_case_test_TANF_time_limit, 		6, 11, 46
				EMReadScreen deny_mfip_case_test_transfer_asset, 		6, 12, 46
				EMReadScreen deny_mfip_case_test_verif, 					6, 13, 46
				EMReadScreen deny_mfip_case_test_275_new_spouse_income, 	6, 14, 46

				EMReadScreen deny_mfip_fs_case_test_fail_coop_snap_qc, 		6, 17, 7
				EMReadScreen deny_mfip_fs_case_test_opt_out_cash, 			6, 17, 46
				EMReadScreen deny_mfip_fs_case_test_opt_out_housing_grant, 	6, 18, 46

				deny_mfip_case_test_appl_withdraw = trim(deny_mfip_case_test_appl_withdraw)
				deny_mfip_case_test_asset = trim(deny_mfip_case_test_asset)
				deny_mfip_case_test_death_applicant = trim(deny_mfip_case_test_death_applicant)
				deny_mfip_case_test_dupl_assist = trim(deny_mfip_case_test_dupl_assist)
				deny_mfip_case_test_elig_child = trim(deny_mfip_case_test_elig_child)
				deny_mfip_case_test_fail_coop = trim(deny_mfip_case_test_fail_coop)
				deny_mfip_case_test_fail_file = trim(deny_mfip_case_test_fail_file)
				deny_mfip_case_test_initial_income = trim(deny_mfip_case_test_initial_income)
				deny_mfip_case_test_minor_liv_arrange = trim(deny_mfip_case_test_minor_liv_arrange)
				deny_mfip_case_test_monthly_income = trim(deny_mfip_case_test_monthly_income)
				deny_mfip_case_test_post_60_disq = trim(deny_mfip_case_test_post_60_disq)
				deny_mfip_case_test_residence = trim(deny_mfip_case_test_residence)
				deny_mfip_case_test_sanction_limit = trim(deny_mfip_case_test_sanction_limit)
				deny_mfip_case_test_strike = trim(deny_mfip_case_test_strike)
				deny_mfip_case_test_TANF_time_limit = trim(deny_mfip_case_test_TANF_time_limit)
				deny_mfip_case_test_transfer_asset = trim(deny_mfip_case_test_transfer_asset)
				deny_mfip_case_test_verif = trim(deny_mfip_case_test_verif)
				deny_mfip_case_test_275_new_spouse_income = trim(deny_mfip_case_test_275_new_spouse_income)
				deny_mfip_fs_case_test_fail_coop_snap_qc = trim(deny_mfip_fs_case_test_fail_coop_snap_qc)
				deny_mfip_fs_case_test_opt_out_cash = trim(deny_mfip_fs_case_test_opt_out_cash)
				deny_mfip_fs_case_test_opt_out_housing_grant = trim(deny_mfip_fs_case_test_opt_out_housing_grant)

				If deny_mfip_case_test_asset = "FAILED" Then

					Call write_value_and_transmit("X", 7, 5)						'ASSETS
					' MsgBox "In Asset Pop-UP"
					EMReadScreen deny_mfip_counted_asset_CASH, 	10, 6, 47
					EMReadScreen deny_mfip_counted_asset_ACCT, 	10, 7, 47
					EMReadScreen deny_mfip_counted_asset_SECU, 	10, 8, 47
					EMReadScreen deny_mfip_counted_asset_CARS, 	10, 9, 47
					EMReadScreen deny_mfip_counted_asset_SPON, 	10, 10, 47
					EMReadScreen deny_mfip_counted_asset_total, 	10, 12, 47
					EMReadScreen deny_mfip_counted_asset_max, 	10, 13, 47

					deny_mfip_counted_asset_CASH = trim(deny_mfip_counted_asset_CASH)
					deny_mfip_counted_asset_ACCT = trim(deny_mfip_counted_asset_ACCT)
					deny_mfip_counted_asset_SECU = trim(deny_mfip_counted_asset_SECU)
					deny_mfip_counted_asset_CARS = trim(deny_mfip_counted_asset_CARS)
					deny_mfip_counted_asset_SPON = trim(deny_mfip_counted_asset_SPON)
					deny_mfip_counted_asset_total = trim(deny_mfip_counted_asset_total)
					deny_mfip_counted_asset_max = trim(deny_mfip_counted_asset_max)

					transmit
				End If

				If deny_mfip_case_test_verif = "FAILED" Then

					Call write_value_and_transmit("X", 13, 44)						'ASSETS

					EMReadScreen deny_mfip_verif_ACCT, 6, 5, 28
					EMReadScreen deny_mfip_verif_BUSI, 6, 6, 28
					EMReadScreen deny_mfip_verif_CARS, 6, 7, 28
					EMReadScreen deny_mfip_verif_JOBS, 6, 8, 28
					EMReadScreen deny_mfip_verif_MEMB_dob, 6, 9, 28
					EMReadScreen deny_mfip_verif_MEMB_id, 6, 10, 28
					EMReadScreen deny_mfip_verif_PARE, 6, 11, 28
					EMReadScreen deny_mfip_verif_PREG, 6, 12, 28
					EMReadScreen deny_mfip_verif_RBIC, 6, 13, 28
					EMReadScreen deny_mfip_verif_ADDR, 6, 14, 28
					EMReadScreen deny_mfip_verif_SCHL, 6, 15, 28
					EMReadScreen deny_mfip_verif_SECU, 6, 16, 28
					EMReadScreen deny_mfip_verif_SHEL, 6, 17, 28
					EMReadScreen deny_mfip_verif_SPON, 6, 18, 28
					EMReadScreen deny_mfip_verif_UNEA, 6, 19, 28
					EMReadScreen deny_mfip_verif_MEMI, 6, 20, 28

					deny_mfip_verif_ACCT = UCase(deny_mfip_verif_ACCT)
					deny_mfip_verif_BUSI = UCase(deny_mfip_verif_BUSI)
					deny_mfip_verif_CARS = UCase(deny_mfip_verif_CARS)
					deny_mfip_verif_JOBS = UCase(deny_mfip_verif_JOBS)
					deny_mfip_verif_MEMB_dob = UCase(deny_mfip_verif_MEMB_dob)
					deny_mfip_verif_MEMB_id = UCase(deny_mfip_verif_MEMB_id)
					deny_mfip_verif_PARE = UCase(deny_mfip_verif_PARE)
					deny_mfip_verif_PREG = UCase(deny_mfip_verif_PREG)
					deny_mfip_verif_RBIC = UCase(deny_mfip_verif_RBIC)
					deny_mfip_verif_ADDR = UCase(deny_mfip_verif_ADDR)
					deny_mfip_verif_SCHL = UCase(deny_mfip_verif_SCHL)
					deny_mfip_verif_SECU = UCase(deny_mfip_verif_SECU)
					deny_mfip_verif_SHEL = UCase(deny_mfip_verif_SHEL)
					deny_mfip_verif_UNEA = UCase(deny_mfip_verif_UNEA)
					deny_mfip_verif_SPON = UCase(deny_mfip_verif_SPON)
					deny_mfip_verif_MEMI = UCase(deny_mfip_verif_MEMI)

					transmit
				End if

				Call write_value_and_transmit("X", 13, 5)						'INITIAL INCOME
				EMReadScreen deny_mfip_initial_income_earned, 			10, 8, 51
				EMReadScreen deny_mfip_initial_income_deoendant_care, 	10, 9, 51
				EMReadScreen deny_mfip_initial_income_unearned, 			10, 10, 51
				EMReadScreen deny_mfip_initial_income_deemed, 			10, 11, 51
				EMReadScreen deny_mfip_initial_income_cses_exclusion, 	10, 12, 51
				EMReadScreen deny_mfip_initial_income_total, 			10, 13, 51
				EMReadScreen deny_mfip_initial_income_family_wage_level, 10, 15, 51

				deny_mfip_initial_income_earned = trim(deny_mfip_initial_income_earned)
				deny_mfip_initial_income_deoendant_care = trim(deny_mfip_initial_income_deoendant_care)
				deny_mfip_initial_income_unearned = trim(deny_mfip_initial_income_unearned)
				deny_mfip_initial_income_deemed = trim(deny_mfip_initial_income_deemed)
				deny_mfip_initial_income_cses_exclusion = trim(deny_mfip_initial_income_cses_exclusion)
				deny_mfip_initial_income_total = trim(deny_mfip_initial_income_total)
				deny_mfip_initial_income_family_wage_level = trim(deny_mfip_initial_income_family_wage_level)

				PF3

				PF3
			End if

			If deny_cash_msa_selection_line = "_" Then
				Call write_value_and_transmit("X", 12, 20)
				deny_cash_msa_details_exists = True
				transmit

				EMReadScreen deny_msa_elig_case_test_applicant_eligible, 	6, 6, 7
				EMReadScreen deny_msa_elig_case_test_application_withdrawn, 6, 7, 7
				EMReadScreen deny_msa_elig_case_test_eligible_member, 		6, 8, 7
				EMReadScreen deny_msa_elig_case_test_fail_file, 			6, 9, 7
				EMReadScreen deny_msa_elig_case_test_prosp_gross_income, 	6, 10, 7

				EMReadScreen deny_msa_elig_case_test_prosp_net_income, 	6, 6, 45
				EMReadScreen deny_msa_elig_case_test_residence, 		6, 7, 45
				EMReadScreen deny_msa_elig_case_test_assets, 			6, 8, 45
				EMReadScreen deny_msa_elig_case_test_retro_net_income, 	6, 9, 45
				EMReadScreen deny_msa_elig_case_test_verif, 			6, 10, 45

				EMReadScreen deny_msa_elig_case_shared_hh_yn, 1, 13, 61

				deny_msa_elig_case_test_applicant_eligible = trim(msa_elig_case_test_applicant_eligible)
				deny_msa_elig_case_test_application_withdrawn = trim(msa_elig_case_test_application_withdrawn)
				deny_msa_elig_case_test_eligible_member = trim(msa_elig_case_test_eligible_member)
				deny_msa_elig_case_test_fail_file = trim(msa_elig_case_test_fail_file)
				deny_msa_elig_case_test_prosp_gross_income = trim(msa_elig_case_test_prosp_gross_income)

				deny_msa_elig_case_test_prosp_net_income = trim(deny_msa_elig_case_test_prosp_net_income)
				deny_msa_elig_case_test_residence = trim(deny_msa_elig_case_test_residence)
				deny_msa_elig_case_test_assets = trim(deny_msa_elig_case_test_assets)
				deny_msa_elig_case_test_retro_net_income = trim(deny_msa_elig_case_test_retro_net_income)
				deny_msa_elig_case_test_verif = trim(deny_msa_elig_case_test_verif)

				If deny_msa_elig_case_test_verif <> "NA" Then
					Call write_value_and_transmit("X", 10, 43)

					EMReadScreen deny_msa_elig_case_test_verif_acct, 6, 6, 32
					EMReadScreen deny_msa_elig_case_test_verif_addr, 6, 7, 32
					EMReadScreen deny_msa_elig_case_test_verif_busi, 6, 8, 32
					EMReadScreen deny_msa_elig_case_test_verif_cars, 6, 9, 32
					EMReadScreen deny_msa_elig_case_test_verif_jobs, 6, 10, 32
					EMReadScreen deny_msa_elig_case_test_verif_lump, 6, 11, 32
					EMReadScreen deny_msa_elig_case_test_verif_pact, 6, 12, 32
					EMReadScreen deny_msa_elig_case_test_verif_rbic, 6, 13, 32
					EMReadScreen deny_msa_elig_case_test_verif_secu, 6, 14, 32
					EMReadScreen deny_msa_elig_case_test_verif_spon, 6, 15, 32
					EMReadScreen deny_msa_elig_case_test_verif_stin, 6, 16, 32
					EMReadScreen deny_msa_elig_case_test_verif_unea, 6, 17, 32

					deny_msa_elig_case_test_verif_acct = trim(deny_msa_elig_case_test_verif_acct)
					deny_msa_elig_case_test_verif_addr = trim(deny_msa_elig_case_test_verif_addr)
					deny_msa_elig_case_test_verif_busi = trim(deny_msa_elig_case_test_verif_busi)
					deny_msa_elig_case_test_verif_cars = trim(deny_msa_elig_case_test_verif_cars)
					deny_msa_elig_case_test_verif_jobs = trim(deny_msa_elig_case_test_verif_jobs)
					deny_msa_elig_case_test_verif_lump = trim(deny_msa_elig_case_test_verif_lump)
					deny_msa_elig_case_test_verif_pact = trim(deny_msa_elig_case_test_verif_pact)
					deny_msa_elig_case_test_verif_rbic = trim(deny_msa_elig_case_test_verif_rbic)
					deny_msa_elig_case_test_verif_secu = trim(deny_msa_elig_case_test_verif_secu)
					deny_msa_elig_case_test_verif_spon = trim(deny_msa_elig_case_test_verif_spon)
					deny_msa_elig_case_test_verif_stin = trim(deny_msa_elig_case_test_verif_stin)
					deny_msa_elig_case_test_verif_unea = trim(deny_msa_elig_case_test_verif_unea)
					transmit
				End If
				transmit 		'going to the next panel - MSCB

				EMReadScreen deny_msa_elig_budg_need_standard, 	9, 6, 72
				EMReadScreen deny_msa_elig_budg_net_income, 	9, 7, 72

				deny_msa_elig_budg_need_standard = trim(deny_msa_elig_budg_need_standard)
				deny_msa_elig_budg_net_income = trim(deny_msa_elig_budg_net_income)

				PF3
			End if

			EMReadScreen deny_cash_worker_message_one, 75, 16, 2
			EMReadScreen deny_cash_worker_message_two, 75, 17, 2
			EMReadScreen deny_cash_worker_message_three, 75, 18, 2

			deny_cash_worker_message_one = trim(deny_cash_worker_message_one)
			deny_cash_worker_message_two = trim(deny_cash_worker_message_two)
			deny_cash_worker_message_three = trim(deny_cash_worker_message_three)
		End If

		Call back_to_SELF
	end sub
end class

class grh_eligibility_detail

	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public revw_month
	public hrf_month
	public revw_status
	public revw_type
	public revw_caf_date
	public revw_interview_date
	public hrf_status
	public hrf_doc_date
	public appears_supportive_housing_disregard_case

	public grh_elig_memb_ref_numb
	public grh_elig_memb_full_name
	public grh_elig_memb_code
	public grh_elig_memb_info
	public grh_elig_memb_elig_status
	public grh_elig_memb_elig_type_code
	public grh_elig_memb_elig_type_info
	public grh_elig_memb_begin_date

	public grh_elig_case_test_application_withdrawn
	public grh_elig_case_test_pben_coop
	public grh_elig_case_test_elig_thru_other_program
	public grh_elig_case_test_fail_file
	public grh_elig_case_test_placement
	public grh_elig_case_test_state_residence
	public grh_elig_case_test_assets
	public grh_elig_case_test_death_of_applicant
	public grh_elig_case_test_elig_type
	public grh_elig_case_test_income
	public grh_elig_case_test_setting
	public grh_elig_case_test_verif

	public grh_elig_case_test_fail_file_sr
	public grh_elig_case_test_fail_file_er
	public grh_elig_case_test_asset_total
	public grh_elig_case_test_asset_limit
	public grh_elig_case_test_verif_ACCT
	public grh_elig_case_test_verif_BUSI
	public grh_elig_case_test_verif_CARS
	public grh_elig_case_test_verif_DISA
	public grh_elig_case_test_verif_JOBS
	public grh_elig_case_test_verif_LUMP
	public grh_elig_case_test_verif_MEMB_id
	public grh_elig_case_test_verif_MEMB_dob

	public grh_elig_case_test_verif_PBEN
	public grh_elig_case_test_verif_PACT
	public grh_elig_case_test_verif_RBIC
	public grh_elig_case_test_verif_SECU
	public grh_elig_case_test_verif_STIN
	public grh_elig_case_test_verif_UNEA
	public grh_elig_case_test_verif_TRTX_housing_instability
	public grh_elig_case_test_verif_TRTX_psn_rate_2

	public grh_elig_budg_exists
	public grh_elig_budg_personal_needs
	public grh_elig_budg_prior_inc_reduce
	public grh_elig_budg_inc_unavail_1st_month
	public grh_elig_budg_total_deductions
	public grh_elig_budg_counted_income
	public grh_elig_supp_hsg_disregard
	public grh_elig_budg_total_income

	public grh_elig_budg_SSI_standard_fbr
	public grh_elig_budg_other_countable_PA_grant
	public grh_elig_budg_PASS_disregard
	public grh_elig_budg_MFIP_standard_for_one
	public grh_elig_budg_RSDI_income
	public grh_elig_budg_other_unearned_income
	public grh_elig_budg_earned_income
	public grh_elig_budg_student_EI_disregard
	public grh_elig_budg_standard_EI_disregard
	public grh_elig_budg_earned_income_50_perc_disregard
	public grh_elig_budg_impairment_work_expense
	public grh_elig_budg_child_support_expense
	public grh_elig_budg_child_unmet_need
	public grh_elig_budg_earned_income_subtotal
	public grh_elig_budg_EW_spousal_allocation

	public grh_elig_budg_vendor_number_one
	public grh_elig_budg_total_days_one_one
	public grh_elig_budg_vnd2_rate_limit_one
	public grh_elig_budg_room_board_doc_one
	public grh_elig_budg_total_ssr_rate_one
	public grh_elig_budg_income_test_one
	public grh_elig_payment_grh_state_amount_one
	public grh_elig_payment_county_liability_one
	public grh_elig_payment_total_one
	public grh_elig_payment_amount_already_issued_one

	public grh_elig_budg_vendor_number_two
	public grh_elig_budg_total_days_one_two
	public grh_elig_budg_vnd2_rate_limit_two
	public grh_elig_budg_room_board_doc_two
	public grh_elig_budg_total_ssr_rate_two
	public grh_elig_budg_income_test_two
	public grh_elig_payment_grh_state_amount_two
	public grh_elig_payment_county_liability_two
	public grh_elig_payment_total_two
	public grh_elig_payment_amount_already_issued_two

	public grh_elig_budg_room_board_doc_one_vnd2_days
	public grh_elig_budg_room_board_doc_one_vnd2_rate
	public grh_elig_budg_room_board_doc_one_vnd2_total
	public grh_elig_budg_room_board_doc_one_faci_doc_days
	public grh_elig_budg_room_board_doc_one_faci_doc_rate
	public grh_elig_budg_room_board_doc_one_faci_doc_total
	public grh_elig_budg_room_board_doc_one_total
	public grh_elig_budg_room_board_doc_two_vnd2_days
	public grh_elig_budg_room_board_doc_two_vnd2_rate
	public grh_elig_budg_room_board_doc_two_vnd2_total
	public grh_elig_budg_room_board_doc_two_faci_doc_days
	public grh_elig_budg_room_board_doc_two_faci_doc_rate
	public grh_elig_budg_room_board_doc_two_faci_doc_total
	public grh_elig_budg_room_board_doc_two_total
	public grh_elig_budg_total_ssr_rate_one_days
	public grh_elig_budg_total_ssr_rate_one_rate
	public grh_elig_budg_total_ssr_rate_one_total
	public grh_elig_budg_total_ssr_rate_two_days
	public grh_elig_budg_total_ssr_rate_two_rate
	public grh_elig_budg_total_ssr_rate_two_total
	public grh_elig_payment_county_liability_one_vnd2_co_supp_days
	public grh_elig_payment_county_liability_one_vnd2_co_supp_rate
	public grh_elig_payment_county_liability_one_vnd2_co_supp_total
	public grh_elig_payment_county_liability_one_faci_doc_in_excess_days
	public grh_elig_payment_county_liability_one_faci_doc_in_excess_rate
	public grh_elig_payment_county_liability_one_faci_doc_in_excess_total
	public grh_elig_payment_county_liability_one_total
	public grh_elig_payment_county_liability_two_vnd2_co_supp_days
	public grh_elig_payment_county_liability_two_vnd2_co_supp_rate
	public grh_elig_payment_county_liability_two_vnd2_co_supp_total
	public grh_elig_payment_county_liability_two_faci_doc_in_excess_days
	public grh_elig_payment_county_liability_two_faci_doc_in_excess_rate
	public grh_elig_payment_county_liability_two_faci_doc_in_excess_total
	public grh_elig_payment_county_liability_two_total
	public grh_elig_payment_remaining_income

	public grh_elig_approved_date
	public grh_elig_process_date
	public grh_elig_date_last_approval
	public grh_elig_current_progream_status
	public grh_elig_source_of_info
	public grh_elig_eligibility_result
	' public grh_elig_vendor_number
	public grh_elig_elig_review_date
	public grh_elig_reporting_status
	public grh_elig_responsible_county
	public grh_elig_pre_or_post_pay_one_code
	public grh_elig_pre_or_post_pay_one_info
	public grh_elig_payable_amount_one
	public grh_elig_amount_already_issued_one
	public grh_elig_setting_overpayment_one
	public grh_elig_client_obligation_one
	public grh_elig_pre_or_post_pay_two_code
	public grh_elig_pre_or_post_pay_two_info
	public grh_elig_payable_amount_two
	public grh_elig_amount_already_issued_two
	public grh_elig_setting_overpayment_two
	public grh_elig_client_obligation_two

	public grh_vendor_one_name
	public grh_vendor_one_c_o
	public grh_vendor_one_street_one
	public grh_vendor_one_street_two
	public grh_vendor_one_city
	public grh_vendor_one_state
	public grh_vendor_one_zip
	public grh_vendor_one_grh_yn
	public grh_vendor_one_non_profit_yn
	public grh_vendor_one_phone
	public grh_vendor_one_county
	public grh_vendor_one_status_code
	public grh_vendor_one_status_info
	public grh_vendor_one_incorporated_yn
	public grh_vendor_one_federal_tax_id
	public grh_vendor_one_ssn
	public grh_vendor_one_2nd_address_type_code
	public grh_vendor_one_2nd_address_type_info
	public grh_vendor_one_2nd_address_eff_date
	public grh_vendor_one_2nd_name
	public grh_vendor_one_2nd_c_o
	public grh_vendor_one_2nd_street_one
	public grh_vendor_one_2nd_street_two
	public grh_vendor_one_2nd_city
	public grh_vendor_one_2nd_state
	public grh_vendor_one_2nd_zip
	public grh_vendor_one_direct_deposit_yn
	public grh_vendor_one_merge_vendor_number
	public grh_vendor_one_acct_number_required_yn
	public grh_vendor_one_blocked_county_numbers_list
	public grh_vendor_one_health_dept_license_1_code
	public grh_vendor_one_health_dept_license_2_code
	public grh_vendor_one_health_dept_license_3_code

	public grh_vendor_two_name
	public grh_vendor_two_c_o
	public grh_vendor_two_street_one
	public grh_vendor_two_street_two
	public grh_vendor_two_city
	public grh_vendor_two_state
	public grh_vendor_two_zip
	public grh_vendor_two_grh_yn
	public grh_vendor_two_non_profit_yn
	public grh_vendor_two_phone
	public grh_vendor_two_county
	public grh_vendor_two_status_code
	public grh_vendor_two_status_info
	public grh_vendor_two_incorporated_yn
	public grh_vendor_two_federal_tax_id
	public grh_vendor_two_ssn
	public grh_vendor_two_2nd_address_type_code
	public grh_vendor_two_2nd_address_type_info
	public grh_vendor_two_2nd_address_eff_date
	public grh_vendor_two_2nd_name
	public grh_vendor_two_2nd_c_o
	public grh_vendor_two_2nd_street_one
	public grh_vendor_two_2nd_street_two
	public grh_vendor_two_2nd_city
	public grh_vendor_two_2nd_state
	public grh_vendor_two_2nd_zip
	public grh_vendor_two_direct_deposit_yn
	public grh_vendor_two_merge_vendor_number
	public grh_vendor_two_acct_number_required_yn
	public grh_vendor_two_blocked_county_numbers_list
	public grh_vendor_two_health_dept_license_1_code
	public grh_vendor_two_health_dept_license_2_code
	public grh_vendor_two_health_dept_license_3_code

	public sub read_elig()
		approved_today = False
		approved_version_found = False
		skip_budget = False
		supportive_housing_disregard_applies_to_this_month = False
		footer_month_date = elig_footer_month & "/1/" & elig_footer_year
		footer_month_date = DateAdd("d", 0, footer_month_date)
		If DateDiff("d", #10/1/24#, footer_month_date) >= 0 Then supportive_housing_disregard_applies_to_this_month = True

		call navigate_to_MAXIS_screen("ELIG", "GRH ")
		EMWriteScreen elig_footer_month, 20, 55
		EMWriteScreen elig_footer_year, 20, 58
		Call find_last_approved_ELIG_version(20, 79, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		If approved_version_found = True Then
			EMReadScreen approval_date, 8, 3, 14		'this is the actual approval date - not the process date'
			approval_date = DateAdd("d", 0, approval_date)
			If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
			If allow_late_note = True Then
				one_week_ago = DateAdd("d", -7, date)
				If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
			End If
			If developer_mode = True Then approved_today = True			'TESTING OPTION'
		End If
		If approved_today = True Then
			appears_supportive_housing_disregard_case = True
			EMReadScreen grh_elig_memb_ref_numb, 2, 6, 3
			EMReadScreen grh_elig_memb_full_name, 15, 6, 7
			EMReadScreen grh_elig_memb_code, 1, 6, 24
			If grh_elig_memb_code = "A" Then grh_elig_memb_info  = "Counted"
			EMReadScreen grh_elig_memb_elig_status, 10, 6, 41
			EMReadScreen grh_elig_memb_elig_type_code, 2, 6, 53
			If grh_elig_memb_elig_type_code = "01" Then  grh_elig_memb_elig_type_info = "SSI"
			If grh_elig_memb_elig_type_code = "02" Then  grh_elig_memb_elig_type_info = "MFIP"
			If grh_elig_memb_elig_type_code = "03" Then  grh_elig_memb_elig_type_info = "Blind"
			If grh_elig_memb_elig_type_code = "04" Then  grh_elig_memb_elig_type_info = "Disabled"
			If grh_elig_memb_elig_type_code = "05" Then  grh_elig_memb_elig_type_info = "Aged"
			If grh_elig_memb_elig_type_code = "06" Then  grh_elig_memb_elig_type_info = "Adult"
			If grh_elig_memb_elig_type_code = "07" Then  grh_elig_memb_elig_type_info = "None"
			If grh_elig_memb_elig_type_code = "08" Then  grh_elig_memb_elig_type_info = "Residential Treatment"
			' MsgBox "grh_elig_memb_elig_type_info - " & grh_elig_memb_elig_type_info & vbCr & "grh_elig_memb_elig_type_code - " & grh_elig_memb_elig_type_code
			If grh_elig_memb_elig_type_info = "MFIP" Then appears_supportive_housing_disregard_case = False
			If grh_elig_memb_elig_type_info = "None" Then appears_supportive_housing_disregard_case = False
			If grh_elig_memb_elig_type_info = "Residential Treatment" Then appears_supportive_housing_disregard_case = False

			EMReadScreen grh_elig_memb_begin_date, 8, 6, 68

			grh_elig_memb_full_name = trim(grh_elig_memb_full_name)
			grh_elig_memb_elig_status = trim(grh_elig_memb_elig_status)

			grh_elig_memb_begin_date = replace(grh_elig_memb_begin_date, " ", "/")

			EMReadScreen grh_elig_case_test_application_withdrawn, 	6, 8, 8
			EMReadScreen grh_elig_case_test_pben_coop, 				6, 9, 8
			EMReadScreen grh_elig_case_test_elig_thru_other_program, 6, 10, 8
			EMReadScreen grh_elig_case_test_fail_file, 				6, 11, 8
			EMReadScreen grh_elig_case_test_placement, 				6, 12, 8
			EMReadScreen grh_elig_case_test_state_residence, 		6, 13, 8

			EMReadScreen grh_elig_case_test_assets, 				6, 8, 45
			EMReadScreen grh_elig_case_test_death_of_applicant, 	6, 9, 45
			EMReadScreen grh_elig_case_test_elig_type, 				6, 10, 45
			EMReadScreen grh_elig_case_test_income, 				6, 11, 45
			EMReadScreen grh_elig_case_test_setting, 				6, 12, 45
			EMReadScreen grh_elig_case_test_verif, 					6, 13, 45

			grh_elig_case_test_application_withdrawn = trim(grh_elig_case_test_application_withdrawn)
			grh_elig_case_test_pben_coop = trim(grh_elig_case_test_pben_coop)
			grh_elig_case_test_elig_thru_other_program = trim(grh_elig_case_test_elig_thru_other_program)
			grh_elig_case_test_fail_file = trim(grh_elig_case_test_fail_file)
			grh_elig_case_test_placement = trim(grh_elig_case_test_placement)
			grh_elig_case_test_state_residence = trim(grh_elig_case_test_state_residence)

			grh_elig_case_test_assets = trim(grh_elig_case_test_assets)
			grh_elig_case_test_death_of_applicant = trim(grh_elig_case_test_death_of_applicant)
			grh_elig_case_test_elig_type = trim(grh_elig_case_test_elig_type)
			grh_elig_case_test_income = trim(grh_elig_case_test_income)
			grh_elig_case_test_setting = trim(grh_elig_case_test_setting)
			grh_elig_case_test_verif = trim(grh_elig_case_test_verif)

			If grh_elig_case_test_fail_file = "FAILED" Then EMWriteScreen "X", 11, 4
			If grh_elig_case_test_assets = "FAILED" Then EMWriteScreen "X", 8, 41
			If grh_elig_case_test_verif = "FAILED" Then EMWriteScreen "X", 13, 41

			Do
				transmit

				EMReadScreen fail_file_pop_up, 16, 8, 39
				EMReadScreen assets_pop_up, 11, 8, 30
				EMReadScreen verif_pop_up, 24, 5, 32

				If fail_file_pop_up = "SIX MONTH REPORT" Then
					EMReadScreen grh_elig_case_test_fail_file_sr, 6, 8, 30
					EMReadScreen grh_elig_case_test_fail_file_er, 6, 9, 30

					grh_elig_case_test_fail_file_sr = trim(ucase(grh_elig_case_test_fail_file_sr))
					grh_elig_case_test_fail_file_er = trim(ucase(grh_elig_case_test_fail_file_er))
				End If

				If assets_pop_up = "Asset Total" Then
					EMReadScreen grh_elig_case_test_asset_total, 8, 8, 45
					EMReadScreen grh_elig_case_test_asset_limit, 8, 10, 45

					grh_elig_case_test_asset_total = trim(grh_elig_case_test_asset_total)
					grh_elig_case_test_asset_limit = trim(grh_elig_case_test_asset_limit)
				End If

				If verif_pop_up = "Verification Test Pop-up" Then
					EMReadScreen grh_elig_case_test_verif_ACCT, 	6, 7, 10
					EMReadScreen grh_elig_case_test_verif_BUSI, 	6, 8, 10
					EMReadScreen grh_elig_case_test_verif_CARS, 	6, 9, 10
					EMReadScreen grh_elig_case_test_verif_DISA, 	6, 10, 10
					EMReadScreen grh_elig_case_test_verif_JOBS, 	6, 11, 10
					EMReadScreen grh_elig_case_test_verif_LUMP, 	6, 12, 10
					EMReadScreen grh_elig_case_test_verif_MEMB_id, 	6, 13, 10
					EMReadScreen grh_elig_case_test_verif_MEMB_dob, 6, 14, 10

					EMReadScreen grh_elig_case_test_verif_PACT, 	6, 7, 45
					EMReadScreen grh_elig_case_test_verif_PBEN, 	6, 8, 45
					EMReadScreen grh_elig_case_test_verif_RBIC, 	6, 9, 45
					EMReadScreen grh_elig_case_test_verif_SECU, 	6, 10, 45
					EMReadScreen grh_elig_case_test_verif_STIN, 	6, 11, 45
					EMReadScreen grh_elig_case_test_verif_UNEA, 	6, 12, 45
					EMReadScreen grh_elig_case_test_verif_TRTX_housing_instability, 6, 13, 45
					EMReadScreen grh_elig_case_test_verif_TRTX_psn_rate_2, 6, 14, 45

					grh_elig_case_test_verif_ACCT = trim(ucase(grh_elig_case_test_verif_ACCT))
					grh_elig_case_test_verif_BUSI = trim(ucase(grh_elig_case_test_verif_BUSI))
					grh_elig_case_test_verif_CARS = trim(ucase(grh_elig_case_test_verif_CARS))
					grh_elig_case_test_verif_DISA = trim(ucase(grh_elig_case_test_verif_DISA))
					grh_elig_case_test_verif_JOBS = trim(ucase(grh_elig_case_test_verif_JOBS))
					grh_elig_case_test_verif_LUMP = trim(ucase(grh_elig_case_test_verif_LUMP))
					grh_elig_case_test_verif_MEMB_id = trim(ucase(grh_elig_case_test_verif_MEMB_id))
					grh_elig_case_test_verif_MEMB_dob = trim(ucase(grh_elig_case_test_verif_MEMB_dob))

					grh_elig_case_test_verif_PACT = trim(ucase(grh_elig_case_test_verif_PACT))
					grh_elig_case_test_verif_PBEN = trim(ucase(grh_elig_case_test_verif_PBEN))
					grh_elig_case_test_verif_RBIC = trim(ucase(grh_elig_case_test_verif_RBIC))
					grh_elig_case_test_verif_SECU = trim(ucase(grh_elig_case_test_verif_SECU))
					grh_elig_case_test_verif_STIN = trim(ucase(grh_elig_case_test_verif_STIN))
					grh_elig_case_test_verif_UNEA = trim(ucase(grh_elig_case_test_verif_UNEA))
					grh_elig_case_test_verif_TRTX_housing_instability = trim(ucase(grh_elig_case_test_verif_TRTX_housing_instability))
					grh_elig_case_test_verif_TRTX_psn_rate_2 = trim(ucase(grh_elig_case_test_verif_TRTX_psn_rate_2))
				End If

				EMReadScreen panel_check_GRPB, 34, 3, 23
				EMReadScreen panel_check_GRFB, 4, 3, 47
				If panel_check_GRFB = "GRFB" Then
					skip_budget = True
					Exit Do
				End If
			Loop until InStr(panel_check_GRPB, "GRPB") <> 0

			grh_elig_budg_exists = False
			If skip_budget = False Then
				grh_elig_budg_exists = True
				If grh_elig_memb_elig_type_info = "SSI" Then
					EMReadScreen grh_elig_budg_SSI_standard_fbr, 		8, 6, 29
					EMReadScreen grh_elig_budg_other_countable_PA_grant, 8, 7, 29

					EMReadScreen grh_elig_budg_PASS_disregard,			8, 10, 29
					EMReadScreen grh_elig_budg_personal_needs, 			8, 11, 29
					EMReadScreen grh_elig_budg_prior_inc_reduce, 		8, 12, 29
					EMReadScreen grh_elig_budg_inc_unavail_1st_month, 	8, 13, 29

					EMReadScreen grh_elig_budg_total_deductions, 		8, 16, 29
					If supportive_housing_disregard_applies_to_this_month = False Then EMReadScreen grh_elig_budg_counted_income, 8, 17, 29
					If supportive_housing_disregard_applies_to_this_month = True Then
						EMReadScreen grh_elig_supp_hsg_disregard, 		8, 17, 29
						EMReadScreen grh_elig_budg_counted_income, 		8, 18, 29
					End If

					grh_elig_budg_SSI_standard_fbr = replace(grh_elig_budg_SSI_standard_fbr, "_", "")
					grh_elig_budg_other_countable_PA_grant = replace(grh_elig_budg_other_countable_PA_grant, "_", "")

					grh_elig_budg_PASS_disregard = replace(grh_elig_budg_PASS_disregard, "_", "")
					grh_elig_budg_personal_needs = replace(grh_elig_budg_personal_needs, "_", "")
					grh_elig_budg_prior_inc_reduce = replace(grh_elig_budg_prior_inc_reduce, "_", "")
					grh_elig_budg_inc_unavail_1st_month = replace(grh_elig_budg_inc_unavail_1st_month, "_", "")
					grh_elig_supp_hsg_disregard = replace(grh_elig_supp_hsg_disregard, "_", "")

					grh_elig_budg_total_deductions = trim(grh_elig_budg_total_deductions)
					grh_elig_budg_counted_income = trim(grh_elig_budg_counted_income)
				End If

				If grh_elig_memb_elig_type_info = "MFIP" Then
					EMReadScreen grh_elig_budg_MFIP_standard_for_one, 	8, 6, 31
					EMReadScreen grh_elig_budg_personal_needs, 			8, 9, 31
					EMReadScreen grh_elig_budg_prior_inc_reduce, 		8, 10, 31
					EMReadScreen grh_elig_budg_inc_unavail_1st_month, 	8, 11, 31
					EMReadScreen grh_elig_budg_total_deductions, 		8, 14, 31
					EMReadScreen grh_elig_budg_counted_income,	 		8, 15, 31

					grh_elig_budg_MFIP_standard_for_one = trim(grh_elig_budg_MFIP_standard_for_one)

					grh_elig_budg_personal_needs = replace(grh_elig_budg_personal_needs, "_", "")
					grh_elig_budg_prior_inc_reduce = replace(grh_elig_budg_prior_inc_reduce, "_", "")
					grh_elig_budg_inc_unavail_1st_month = replace(grh_elig_budg_inc_unavail_1st_month, "_", "")

					grh_elig_budg_total_deductions = trim(grh_elig_budg_total_deductions)
					grh_elig_budg_counted_income = trim(grh_elig_budg_counted_income)
				End If

				If grh_elig_memb_elig_type_info = "Blind" or grh_elig_memb_elig_type_info = "Disabled" or grh_elig_memb_elig_type_info = "Aged" or grh_elig_memb_elig_type_info = "Adult" Then
					If grh_elig_memb_elig_type_info = "Aged" or grh_elig_memb_elig_type_info = "Adult" Then
						EMReadScreen grh_elig_budg_RSDI_income, 			8, 8, 27
						EMReadScreen grh_elig_budg_other_unearned_income, 	8, 9, 27
						EMReadScreen grh_elig_budg_earned_income, 			8, 10, 27
						EMReadScreen grh_elig_budg_total_income, 			8, 11, 27
					Else
						EMReadScreen grh_elig_budg_RSDI_income, 			8, 7, 27
						EMReadScreen grh_elig_budg_other_unearned_income, 	8, 8, 27
						EMReadScreen grh_elig_budg_earned_income,	 		8, 9, 27
						EMReadScreen grh_elig_budg_total_income, 			8, 10, 27
					End If

					If grh_elig_memb_elig_type_info = "Adult" Then
						EMReadScreen grh_elig_budg_total_deductions, 		8, 14, 27
						If supportive_housing_disregard_applies_to_this_month = False Then EMReadScreen grh_elig_budg_counted_income, 		8, 15, 27
						If supportive_housing_disregard_applies_to_this_month = True Then
							EMReadScreen grh_elig_supp_hsg_disregard, 		8, 15, 27
							EMReadScreen grh_elig_budg_counted_income, 		8, 16, 27
						End If
					Else
						EMReadScreen grh_elig_budg_total_deductions, 		8, 15, 27
						If supportive_housing_disregard_applies_to_this_month = False Then EMReadScreen grh_elig_budg_counted_income, 		8, 16, 27
						If supportive_housing_disregard_applies_to_this_month = True Then
							EMReadScreen grh_elig_supp_hsg_disregard, 		8, 16, 27
							EMReadScreen grh_elig_budg_counted_income, 		8, 17, 27
						End If
					End If

					EMReadScreen grh_elig_budg_standard_EI_disregard, 			8, 8, 70

					If grh_elig_memb_elig_type_info = "Blind" Then
						EMReadScreen grh_elig_budg_student_EI_disregard, 			8, 7, 70
						EMReadScreen grh_elig_budg_earned_income_50_perc_disregard, 8, 9, 70
						EMReadScreen grh_elig_budg_impairment_work_expense, 		8, 10, 70
						EMReadScreen grh_elig_budg_personal_needs, 					8, 11, 70
						EMReadScreen grh_elig_budg_child_support_expense, 			8, 12, 70
						EMReadScreen grh_elig_budg_child_unmet_need, 				8, 13, 70
					End If


					If grh_elig_memb_elig_type_info = "Disabled" Then
						EMReadScreen grh_elig_budg_student_EI_disregard, 			8, 7, 70
						EMReadScreen grh_elig_budg_impairment_work_expense, 		8, 9, 70
						EMReadScreen grh_elig_budg_earned_income_50_perc_disregard, 8, 10, 70
						EMReadScreen grh_elig_budg_personal_needs, 					8, 11, 70
						EMReadScreen grh_elig_budg_child_support_expense, 			8, 12, 70
						EMReadScreen grh_elig_budg_child_unmet_need, 				8, 13, 70
					End If

					If grh_elig_memb_elig_type_info = "Aged" Then
						EMReadScreen grh_elig_budg_earned_income_50_perc_disregard, 8, 9, 70
						EMReadScreen grh_elig_budg_personal_needs, 					8, 10, 70
						EMReadScreen grh_elig_budg_child_support_expense, 			8, 11, 70
						EMReadScreen grh_elig_budg_child_unmet_need, 				8, 12, 70
						EMReadScreen grh_elig_budg_EW_spousal_allocation, 			8, 13, 70
					End If

					If grh_elig_memb_elig_type_info = "Adult" Then
						EMReadScreen grh_elig_budg_earned_income_subtotal, 			8, 9, 70
						EMReadScreen grh_elig_budg_earned_income_50_perc_disregard, 8, 10, 70
						EMReadScreen grh_elig_budg_personal_needs, 					8, 11, 70
						EMReadScreen grh_elig_budg_child_support_expense, 			8, 12, 70
						EMReadScreen grh_elig_budg_child_unmet_need, 				8, 13, 70
					End If

					EMReadScreen grh_elig_budg_prior_inc_reduce, 				8, 14, 70
					EMReadScreen grh_elig_budg_inc_unavail_1st_month, 			8, 15, 70

					grh_elig_budg_RSDI_income = replace(grh_elig_budg_RSDI_income, "_", "")
					grh_elig_budg_other_unearned_income = replace(grh_elig_budg_other_unearned_income, "_", "")
					grh_elig_budg_earned_income = replace(grh_elig_budg_earned_income, "_", "")
					grh_elig_budg_total_income = trim(grh_elig_budg_total_income)

					If grh_elig_budg_RSDI_income = "" Then grh_elig_budg_RSDI_income = "0.00"
					If grh_elig_budg_other_unearned_income = "" Then grh_elig_budg_other_unearned_income = "0.00"
					If grh_elig_budg_earned_income = "" Then grh_elig_budg_earned_income = "0.00"

					If grh_elig_budg_RSDI_income = "0.00" and grh_elig_budg_other_unearned_income = "0.00" Then appears_supportive_housing_disregard_case = False

					grh_elig_budg_total_deductions = trim(grh_elig_budg_total_deductions)
					grh_elig_budg_counted_income = trim(grh_elig_budg_counted_income)

					grh_elig_budg_student_EI_disregard = replace(grh_elig_budg_student_EI_disregard, "_", "")
					grh_elig_budg_standard_EI_disregard = trim(grh_elig_budg_standard_EI_disregard)
					grh_elig_budg_earned_income_subtotal = trim(grh_elig_budg_earned_income_subtotal)
					grh_elig_budg_impairment_work_expense = replace(grh_elig_budg_impairment_work_expense, "_", "")
					grh_elig_budg_earned_income_50_perc_disregard = trim(grh_elig_budg_earned_income_50_perc_disregard)
					grh_elig_budg_personal_needs = replace(grh_elig_budg_personal_needs, "_", "")
					grh_elig_budg_child_support_expense = replace(grh_elig_budg_child_support_expense, "_", "")
					grh_elig_budg_child_unmet_need = replace(grh_elig_budg_child_unmet_need, "_", "")
					grh_elig_budg_EW_spousal_allocation = replace(grh_elig_budg_EW_spousal_allocation, "_", "")
					grh_elig_budg_prior_inc_reduce = replace(grh_elig_budg_prior_inc_reduce, "_", "")
					grh_elig_budg_inc_unavail_1st_month = replace(grh_elig_budg_inc_unavail_1st_month, "_", "")
					grh_elig_supp_hsg_disregard = replace(grh_elig_supp_hsg_disregard, "_", "")
				End If

				If grh_elig_memb_elig_type_info = "Residential Treatment" Then
					EMReadScreen grh_elig_budg_total_income, 		8, 12, 25
					EMReadScreen grh_elig_budg_total_deductions, 	8, 15, 25
					EMReadScreen grh_elig_budg_counted_income, 		8, 16, 25

					grh_elig_budg_total_income = trim(grh_elig_budg_total_income)
					grh_elig_budg_total_deductions = trim(grh_elig_budg_total_deductions)
					grh_elig_budg_counted_income = trim(grh_elig_budg_counted_income)
				End If

				transmit 		'go to next panel - GRFB'
			End If

			EMReadScreen grh_elig_budg_vendor_number_one, 	8, 6, 25
			EMReadScreen grh_elig_budg_total_days_one_one, 	8, 7, 25
			EMReadScreen grh_elig_budg_vnd2_rate_limit_one, 8, 8, 25
			EMReadScreen grh_elig_budg_room_board_doc_one, 	8, 9, 25
			' EMReadScreen grh_elig_budg_counted_income, 8, 6, 25
			EMReadScreen grh_elig_budg_total_ssr_rate_one, 	8, 11, 25
			EMReadScreen grh_elig_budg_income_test_one, 	8, 12, 25

			EMReadScreen grh_elig_payment_grh_state_amount_one, 		8, 14, 25
			EMReadScreen grh_elig_payment_county_liability_one, 		8, 15, 25
			' EMReadScreen grh_elig_payment_counted_income, 8, 6, 25
			EMReadScreen grh_elig_payment_total_one, 					8, 17, 25
			EMReadScreen grh_elig_payment_amount_already_issued_one, 	8, 18, 25

			If grh_elig_budg_vendor_number_one = "00000000" Then grh_elig_budg_vendor_number_one = ""
			grh_elig_budg_total_days_one_one = trim(grh_elig_budg_total_days_one_one)
			grh_elig_budg_vnd2_rate_limit_one = trim(grh_elig_budg_vnd2_rate_limit_one)
			grh_elig_budg_room_board_doc_one = trim(grh_elig_budg_room_board_doc_one)
			grh_elig_budg_total_ssr_rate_one = trim(grh_elig_budg_total_ssr_rate_one)
			grh_elig_budg_income_test_one = trim(grh_elig_budg_income_test_one)
			grh_elig_payment_grh_state_amount_one = trim(grh_elig_payment_grh_state_amount_one)
			grh_elig_payment_county_liability_one = trim(grh_elig_payment_county_liability_one)
			grh_elig_payment_total_one = trim(grh_elig_payment_total_one)
			grh_elig_payment_amount_already_issued_one = trim(grh_elig_payment_amount_already_issued_one)

			EMReadScreen grh_elig_budg_vendor_number_two, 	8, 6, 44
			EMReadScreen grh_elig_budg_total_days_one_two, 	8, 7, 44
			EMReadScreen grh_elig_budg_vnd2_rate_limit_two, 8, 8, 44
			EMReadScreen grh_elig_budg_room_board_doc_two, 	8, 9, 44
			' EMReadScreen grh_elig_budg_counted_income, 8, 6, 25
			EMReadScreen grh_elig_budg_total_ssr_rate_two, 	8, 11, 44
			EMReadScreen grh_elig_budg_income_test_two, 	8, 12, 44

			EMReadScreen grh_elig_payment_grh_state_amount_two, 		8, 14, 44
			EMReadScreen grh_elig_payment_county_liability_two, 		8, 15, 44
			' EMReadScreen grh_elig_payment_counted_income, 8, 6, 25
			EMReadScreen grh_elig_payment_total_two, 					8, 17, 44
			EMReadScreen grh_elig_payment_amount_already_issued_two, 	8, 18, 44

			If grh_elig_budg_vendor_number_two = "00000000" Then grh_elig_budg_vendor_number_two = ""
			grh_elig_budg_total_days_one_two = trim(grh_elig_budg_total_days_one_two)
			grh_elig_budg_vnd2_rate_limit_two = trim(grh_elig_budg_vnd2_rate_limit_two)
			grh_elig_budg_room_board_doc_two = trim(grh_elig_budg_room_board_doc_two)
			grh_elig_budg_total_ssr_rate_two = trim(grh_elig_budg_total_ssr_rate_two)
			grh_elig_budg_income_test_two = trim(grh_elig_budg_income_test_two)
			grh_elig_payment_grh_state_amount_two = trim(grh_elig_payment_grh_state_amount_two)
			grh_elig_payment_county_liability_two = trim(grh_elig_payment_county_liability_two)
			grh_elig_payment_total_two = trim(grh_elig_payment_total_two)
			grh_elig_payment_amount_already_issued_two = trim(grh_elig_payment_amount_already_issued_two)

			If grh_elig_budg_vendor_number_one <> "" Then
				Call write_value_and_transmit("X", 9, 3)
				EMReadScreen vendor_number_displayed, 8, 16, 26
				vendor_number_displayed = trim(vendor_number_displayed)
				vendor_number_displayed = right("00000000" & vendor_number_displayed, 8)
				If vendor_number_displayed = grh_elig_budg_vendor_number_one Then
					EMReadScreen grh_elig_budg_room_board_doc_one_vnd2_days, 4, 19, 36
					EMReadScreen grh_elig_budg_room_board_doc_one_vnd2_rate, 8, 19, 48
					EMReadScreen grh_elig_budg_room_board_doc_one_vnd2_total, 8, 19, 64

					EMReadScreen grh_elig_budg_room_board_doc_one_faci_doc_days, 4, 20, 36
					EMReadScreen grh_elig_budg_room_board_doc_one_faci_doc_rate, 8, 20, 48
					EMReadScreen grh_elig_budg_room_board_doc_one_faci_doc_total, 8, 20, 64

					EMReadScreen grh_elig_budg_room_board_doc_one_total, 8, 21, 64
				ElseIf vendor_number_displayed = grh_elig_budg_vendor_number_two Then
					EMReadScreen grh_elig_budg_room_board_doc_two_vnd2_days, 4, 19, 36
					EMReadScreen grh_elig_budg_room_board_doc_two_vnd2_rate, 8, 19, 48
					EMReadScreen grh_elig_budg_room_board_doc_two_vnd2_total, 8, 19, 64

					EMReadScreen grh_elig_budg_room_board_doc_two_faci_doc_days, 4, 20, 36
					EMReadScreen grh_elig_budg_room_board_doc_two_faci_doc_rate, 8, 20, 48
					EMReadScreen grh_elig_budg_room_board_doc_two_faci_doc_total, 8, 20, 64

					EMReadScreen grh_elig_budg_room_board_doc_two_total, 8, 21, 64
				End If
				transmit

				EMReadScreen another_vendor_display, 11, 17, 14
				If another_vendor_display = "VENDOR NAME" Then
					EMReadScreen vendor_number_displayed, 8, 16, 26
					vendor_number_displayed = trim(vendor_number_displayed)
					vendor_number_displayed = right("00000000" & vendor_number_displayed, 8)
					If vendor_number_displayed = grh_elig_budg_vendor_number_one Then
						EMReadScreen grh_elig_budg_room_board_doc_one_vnd2_days, 4, 19, 36
						EMReadScreen grh_elig_budg_room_board_doc_one_vnd2_rate, 8, 19, 48
						EMReadScreen grh_elig_budg_room_board_doc_one_vnd2_total, 8, 19, 64

						EMReadScreen grh_elig_budg_room_board_doc_one_faci_doc_days, 4, 20, 36
						EMReadScreen grh_elig_budg_room_board_doc_one_faci_doc_rate, 8, 20, 48
						EMReadScreen grh_elig_budg_room_board_doc_one_faci_doc_total, 8, 20, 64

						EMReadScreen grh_elig_budg_room_board_doc_one_total, 8, 21, 64
					ElseIf vendor_number_displayed = grh_elig_budg_vendor_number_two Then
						EMReadScreen grh_elig_budg_room_board_doc_two_vnd2_days, 4, 19, 36
						EMReadScreen grh_elig_budg_room_board_doc_two_vnd2_rate, 8, 19, 48
						EMReadScreen grh_elig_budg_room_board_doc_two_vnd2_total, 8, 19, 64

						EMReadScreen grh_elig_budg_room_board_doc_two_faci_doc_days, 4, 20, 36
						EMReadScreen grh_elig_budg_room_board_doc_two_faci_doc_rate, 8, 20, 48
						EMReadScreen grh_elig_budg_room_board_doc_two_faci_doc_total, 8, 20, 64

						EMReadScreen grh_elig_budg_room_board_doc_two_total, 8, 21, 64
					End If
					transmit
				End If
				grh_elig_budg_room_board_doc_one_vnd2_days = trim(grh_elig_budg_room_board_doc_one_vnd2_days)
				grh_elig_budg_room_board_doc_one_vnd2_rate = trim(grh_elig_budg_room_board_doc_one_vnd2_rate)
				grh_elig_budg_room_board_doc_one_vnd2_total = trim(grh_elig_budg_room_board_doc_one_vnd2_total)

				grh_elig_budg_room_board_doc_one_faci_doc_days = trim(grh_elig_budg_room_board_doc_one_faci_doc_days)
				grh_elig_budg_room_board_doc_one_faci_doc_rate = trim(grh_elig_budg_room_board_doc_one_faci_doc_rate)
				grh_elig_budg_room_board_doc_one_faci_doc_total = trim(grh_elig_budg_room_board_doc_one_faci_doc_total)

				grh_elig_budg_room_board_doc_one_total = trim(grh_elig_budg_room_board_doc_one_total)


				grh_elig_budg_room_board_doc_two_vnd2_days = trim(grh_elig_budg_room_board_doc_two_vnd2_days)
				grh_elig_budg_room_board_doc_two_vnd2_rate = trim(grh_elig_budg_room_board_doc_two_vnd2_rate)
				grh_elig_budg_room_board_doc_two_vnd2_total = trim(grh_elig_budg_room_board_doc_two_vnd2_total)

				grh_elig_budg_room_board_doc_two_faci_doc_days = trim(grh_elig_budg_room_board_doc_two_faci_doc_days)
				grh_elig_budg_room_board_doc_two_faci_doc_rate = trim(grh_elig_budg_room_board_doc_two_faci_doc_rate)
				grh_elig_budg_room_board_doc_two_faci_doc_total = trim(grh_elig_budg_room_board_doc_two_faci_doc_total)

				grh_elig_budg_room_board_doc_two_total = trim(grh_elig_budg_room_board_doc_two_total)

				Call write_value_and_transmit("X", 11, 3)
				For row = 14 to 19
					EMReadScreen vendor_number_displayed, 8, row, 8
					vendor_number_displayed = trim(vendor_number_displayed)
					vendor_number_displayed = right("00000000" & vendor_number_displayed, 8)
					If vendor_number_displayed = grh_elig_budg_vendor_number_one Then
						EMReadScreen grh_elig_budg_total_ssr_rate_one_days, 5, row, 42
						EMReadScreen grh_elig_budg_total_ssr_rate_one_rate, 9, row, 48
						EMReadScreen grh_elig_budg_total_ssr_rate_one_total, 9, row, 58
					ElseIf vendor_number_displayed = grh_elig_budg_vendor_number_two Then
						EMReadScreen grh_elig_budg_total_ssr_rate_two_days, 5, row, 42
						EMReadScreen grh_elig_budg_total_ssr_rate_two_rate, 9, row, 48
						EMReadScreen grh_elig_budg_total_ssr_rate_two_total, 9, row, 58
					End If
				Next
				grh_elig_budg_total_ssr_rate_one_days = trim(grh_elig_budg_total_ssr_rate_one_days)
				grh_elig_budg_total_ssr_rate_one_rate = trim(grh_elig_budg_total_ssr_rate_one_rate)
				grh_elig_budg_total_ssr_rate_one_total = trim(grh_elig_budg_total_ssr_rate_one_total)
				grh_elig_budg_total_ssr_rate_two_days = trim(grh_elig_budg_total_ssr_rate_two_days)
				grh_elig_budg_total_ssr_rate_two_rate = trim(grh_elig_budg_total_ssr_rate_two_rate)
				grh_elig_budg_total_ssr_rate_two_total = trim(grh_elig_budg_total_ssr_rate_two_total)
				transmit

				Call write_value_and_transmit("X", 15, 3)

				EMReadScreen vendor_number_displayed, 8, 2, 26
				vendor_number_displayed = trim(vendor_number_displayed)
				vendor_number_displayed = right("00000000" & vendor_number_displayed, 8)
				If vendor_number_displayed = grh_elig_budg_vendor_number_one Then
					EMReadScreen grh_elig_payment_county_liability_one_vnd2_co_supp_days, 4, 5, 42
					EMReadScreen grh_elig_payment_county_liability_one_vnd2_co_supp_rate, 8, 5, 55
					EMReadScreen grh_elig_payment_county_liability_one_vnd2_co_supp_total, 8, 5, 68

					EMReadScreen grh_elig_payment_county_liability_one_faci_doc_in_excess_days, 4, 6, 42
					EMReadScreen grh_elig_payment_county_liability_one_faci_doc_in_excess_rate, 8, 6, 55
					EMReadScreen grh_elig_payment_county_liability_one_faci_doc_in_excess_total, 8, 6, 68

					EMReadScreen grh_elig_payment_county_liability_one_total, 8, 7, 68
				ElseIf vendor_number_displayed = grh_elig_budg_vendor_number_two Then
					EMReadScreen grh_elig_payment_county_liability_two_vnd2_co_supp_days, 4, 5, 42
					EMReadScreen grh_elig_payment_county_liability_two_vnd2_co_supp_rate, 8, 5, 55
					EMReadScreen grh_elig_payment_county_liability_two_vnd2_co_supp_total, 8, 5, 68

					EMReadScreen grh_elig_payment_county_liability_two_faci_doc_in_excess_days, 4, 6, 42
					EMReadScreen grh_elig_payment_county_liability_two_faci_doc_in_excess_rate, 8, 6, 55
					EMReadScreen grh_elig_payment_county_liability_two_faci_doc_in_excess_total, 8, 6, 68

					EMReadScreen grh_elig_payment_county_liability_two_total, 8, 7, 68
				End If
				transmit

				EMReadScreen another_vendor_display, 11, 3, 14
				If another_vendor_display = "Vendor Name]" Then
					EMReadScreen vendor_number_displayed, 8, 2, 26
					vendor_number_displayed = trim(vendor_number_displayed)
					vendor_number_displayed = right("00000000" & vendor_number_displayed, 8)
					If vendor_number_displayed = grh_elig_budg_vendor_number_one Then
						EMReadScreen grh_elig_payment_county_liability_one_vnd2_co_supp_days, 4, 5, 42
						EMReadScreen grh_elig_payment_county_liability_one_vnd2_co_supp_rate, 8, 5, 55
						EMReadScreen grh_elig_payment_county_liability_one_vnd2_co_supp_total, 8, 5, 68

						EMReadScreen grh_elig_payment_county_liability_one_faci_doc_in_excess_days, 4, 6, 42
						EMReadScreen grh_elig_payment_county_liability_one_faci_doc_in_excess_rate, 8, 6, 55
						EMReadScreen grh_elig_payment_county_liability_one_faci_doc_in_excess_total, 8, 6, 68

						EMReadScreen grh_elig_payment_county_liability_one_total, 8, 6, 68
					ElseIf vendor_number_displayed = grh_elig_budg_vendor_number_two Then
						EMReadScreen grh_elig_payment_county_liability_two_vnd2_co_supp_days, 4, 5, 42
						EMReadScreen grh_elig_payment_county_liability_two_vnd2_co_supp_rate, 8, 5, 55
						EMReadScreen grh_elig_payment_county_liability_two_vnd2_co_supp_total, 8, 5, 68

						EMReadScreen grh_elig_payment_county_liability_two_faci_doc_in_excess_days, 4, 6, 42
						EMReadScreen grh_elig_payment_county_liability_two_faci_doc_in_excess_rate, 8, 6, 55
						EMReadScreen grh_elig_payment_county_liability_two_faci_doc_in_excess_total, 8, 6, 68

						EMReadScreen grh_elig_payment_county_liability_two_total, 8, 7, 68
					End If
					transmit
				End If
				grh_elig_payment_county_liability_one_vnd2_co_supp_days = trim(grh_elig_payment_county_liability_one_vnd2_co_supp_days)
				grh_elig_payment_county_liability_one_vnd2_co_supp_rate = trim(grh_elig_payment_county_liability_one_vnd2_co_supp_rate)
				grh_elig_payment_county_liability_one_vnd2_co_supp_total = trim(grh_elig_payment_county_liability_one_vnd2_co_supp_total)

				grh_elig_payment_county_liability_one_faci_doc_in_excess_days = trim(grh_elig_payment_county_liability_one_faci_doc_in_excess_days)
				grh_elig_payment_county_liability_one_faci_doc_in_excess_rate = trim(grh_elig_payment_county_liability_one_faci_doc_in_excess_rate)
				grh_elig_payment_county_liability_one_faci_doc_in_excess_total = trim(grh_elig_payment_county_liability_one_faci_doc_in_excess_total)

				grh_elig_payment_county_liability_one_total = trim(grh_elig_payment_county_liability_one_total)


				grh_elig_payment_county_liability_two_vnd2_co_supp_days = trim(grh_elig_payment_county_liability_two_vnd2_co_supp_days)
				grh_elig_payment_county_liability_two_vnd2_co_supp_rate = trim(grh_elig_payment_county_liability_two_vnd2_co_supp_rate)
				grh_elig_payment_county_liability_two_vnd2_co_supp_total = trim(grh_elig_payment_county_liability_two_vnd2_co_supp_total)

				grh_elig_payment_county_liability_two_faci_doc_in_excess_days = trim(grh_elig_payment_county_liability_two_faci_doc_in_excess_days)
				grh_elig_payment_county_liability_two_faci_doc_in_excess_rate = trim(grh_elig_payment_county_liability_two_faci_doc_in_excess_rate)
				grh_elig_payment_county_liability_two_faci_doc_in_excess_total = trim(grh_elig_payment_county_liability_two_faci_doc_in_excess_total)

				grh_elig_payment_county_liability_two_total = trim(grh_elig_payment_county_liability_two_total)

				transmit

				Call write_value_and_transmit("X", 16, 3)
				EMReadScreen grh_elig_payment_remaining_income, 9, 4, 53
				grh_elig_payment_remaining_income = trim(grh_elig_payment_remaining_income)
				transmit
			End If

			transmit 		'go to next panel - GRSM

			EMReadScreen grh_elig_approved_date, 8, 3, 14
			EMReadScreen grh_elig_process_date, 8, 2, 72

			EMReadScreen grh_elig_date_last_approval, 		8, 5, 31
			EMReadScreen grh_elig_current_progream_status, 	10, 6, 31
			EMReadScreen grh_elig_source_of_info, 			4, 7, 31
			EMReadScreen grh_elig_eligibility_result, 		10, 8, 31

			EMReadScreen grh_elig_elig_review_date, 	8, 6, 69
			EMReadScreen grh_elig_reporting_status, 	8, 7, 69
			EMReadScreen grh_elig_responsible_county, 	2, 8, 69

			grh_elig_current_progream_status = trim(grh_elig_current_progream_status)
			grh_elig_eligibility_result = trim(grh_elig_eligibility_result)

			grh_elig_elig_review_date = replace(grh_elig_elig_review_date, " ", "/")
			grh_elig_reporting_status = trim(grh_elig_reporting_status)

			' EMReadScreen grh_elig_vendor_number, 		8, 10, 32
			EMReadScreen grh_elig_pre_or_post_pay_one_code, 2, 11, 38
			EMReadScreen grh_elig_payable_amount_one, 		9, 12, 31

			EMReadScreen grh_elig_amount_already_issued_one, 9, 13, 31
			EMReadScreen grh_elig_setting_overpayment_one, 	9, 16, 31
			EMReadScreen grh_elig_client_obligation_one, 	9, 17, 31

			If grh_elig_pre_or_post_pay_one_code = "07" Then grh_elig_pre_or_post_pay_one_info = "Pre-pay"
			If grh_elig_pre_or_post_pay_one_code = "08" Then grh_elig_pre_or_post_pay_one_info = "Post-pay Hold"
			If grh_elig_pre_or_post_pay_one_code = "20" Then grh_elig_pre_or_post_pay_one_info = "Release Post-pay"
			grh_elig_payable_amount_one = trim(grh_elig_payable_amount_one)
			grh_elig_amount_already_issued_one = trim(grh_elig_amount_already_issued_one)
			grh_elig_setting_overpayment_one = trim(grh_elig_setting_overpayment_one)
			grh_elig_client_obligation_one = trim(grh_elig_client_obligation_one)
			If grh_elig_client_obligation_one = "" Then grh_elig_client_obligation_one = "0.00"

			EMReadScreen grh_elig_pre_or_post_pay_two_code, 2, 11, 57
			EMReadScreen grh_elig_payable_amount_two, 		9, 12, 50

			EMReadScreen grh_elig_amount_already_issued_two, 9, 13, 50
			EMReadScreen grh_elig_setting_overpayment_two, 	9, 16, 50
			EMReadScreen grh_elig_client_obligation_two, 	9, 17, 50

			If grh_elig_pre_or_post_pay_two_code = "07" Then grh_elig_pre_or_post_pay_two_info = "Pre-pay"
			If grh_elig_pre_or_post_pay_two_code = "08" Then grh_elig_pre_or_post_pay_two_info = "Post-pay Hold"
			If grh_elig_pre_or_post_pay_two_code = "20" Then grh_elig_pre_or_post_pay_two_info = "Release Post-pay"
			grh_elig_payable_amount_two = trim(grh_elig_payable_amount_two)
			grh_elig_amount_already_issued_two = trim(grh_elig_amount_already_issued_two)
			grh_elig_setting_overpayment_two = trim(grh_elig_setting_overpayment_two)
			grh_elig_client_obligation_two = trim(grh_elig_client_obligation_two)
			If grh_elig_client_obligation_two = "" Then grh_elig_client_obligation_two = "0.00"

			call back_to_SELF

			Call navigate_to_MAXIS_screen("MONY", "VNDS")
			supportive_housing_vendor = False

			If grh_elig_budg_vendor_number_one <> "" Then
				Call write_value_and_transmit(grh_elig_budg_vendor_number_one, 4, 59)
				EMReadScreen grh_vendor_one_name, 					30, 3, 15
				EMReadScreen grh_vendor_one_c_o, 					30, 4, 15
				EMReadScreen grh_vendor_one_street_one, 			22, 5, 15
				EMReadScreen grh_vendor_one_street_two, 			22, 6, 15
				EMReadScreen grh_vendor_one_city, 					15, 7, 15
				EMReadScreen grh_vendor_one_state, 					2, 7, 36
				EMReadScreen grh_vendor_one_zip, 					10, 7, 46
				EMReadScreen grh_vendor_one_grh_yn, 				1, 4, 57
				EMReadScreen grh_vendor_one_non_profit_yn, 			1, 4, 78
				EMReadScreen grh_vendor_one_phone, 					16, 6, 54
				grh_vendor_one_phone = "(" & replace(replace(grh_vendor_one_phone, " )  ", ")"), "  ", "-")
				EMReadScreen grh_vendor_one_county, 				2, 7, 61
				EMReadScreen grh_vendor_one_status_code, 			1, 16, 15
				If grh_vendor_one_status_code = "A" Then grh_vendor_one_status_info = "Active"
				If grh_vendor_one_status_code = "D" Then grh_vendor_one_status_info = "Delete"
				If grh_vendor_one_status_code = "M" Then grh_vendor_one_status_info = "Merged"
				If grh_vendor_one_status_code = "P" Then grh_vendor_one_status_info = "Pending"
				If grh_vendor_one_status_code = "T" Then grh_vendor_one_status_info = "Terminated"
				EMReadScreen grh_vendor_one_incorporated_yn, 		1, 9, 22
				EMReadScreen grh_vendor_one_federal_tax_id, 		9, 9, 41
				EMReadScreen grh_vendor_one_ssn, 					11, 9, 61
				If grh_vendor_one_ssn = "___ __ ____" Then grh_vendor_one_ssn = ""
				grh_vendor_one_ssn = replace(grh_vendor_one_ssn, " ", "-")
				EMReadScreen grh_vendor_one_2nd_address_type_code, 	1, 10, 22
				If grh_vendor_one_2nd_address_type_code = "1" Then grh_vendor_one_2nd_address_type_info = "Mailing Address"
				If grh_vendor_one_2nd_address_type_code = "2" Then grh_vendor_one_2nd_address_type_info = "Court Order"
				EMReadScreen grh_vendor_one_2nd_address_eff_date, 	8, 11, 15
				If grh_vendor_one_2nd_address_eff_date = "__ __ __" Then grh_vendor_one_2nd_address_eff_date = ""
				grh_vendor_one_2nd_address_eff_date = replace(grh_vendor_one_2nd_address_eff_date, " ", "/")
				EMReadScreen grh_vendor_one_2nd_name, 				30, 11, 15
				EMReadScreen grh_vendor_one_2nd_c_o, 				30, 12, 15
				EMReadScreen grh_vendor_one_2nd_street_one, 		22, 13, 15
				EMReadScreen grh_vendor_one_2nd_street_two, 		22, 14, 15
				EMReadScreen grh_vendor_one_2nd_city, 				15, 15, 15
				EMReadScreen grh_vendor_one_2nd_state, 				2, 15, 35
				EMReadScreen grh_vendor_one_2nd_zip, 				10, 15, 44
				EMReadScreen grh_vendor_one_direct_deposit_yn, 		1, 12, 76
				EMReadScreen grh_vendor_one_merge_vendor_number, 	8, 16, 38
				EMReadScreen grh_vendor_one_acct_number_required_yn, 1, 17, 74
				EMReadScreen grh_vendor_one_blocked_county_numbers_list, 29, 18, 23

				grh_vendor_one_name = replace(grh_vendor_one_name, "_", "")
				grh_vendor_one_c_o = replace(grh_vendor_one_c_o, "_", "")
				grh_vendor_one_street_one = replace(grh_vendor_one_street_one, "_", "")
				grh_vendor_one_street_two = replace(grh_vendor_one_street_two, "_", "")
				grh_vendor_one_city = replace(grh_vendor_one_city, "_", "")
				grh_vendor_one_zip = trim(grh_vendor_one_zip)
				grh_vendor_one_zip = replace(grh_vendor_one_zip, " ", "-")

				grh_vendor_one_federal_tax_id = replace(grh_vendor_one_federal_tax_id, "_", "")

				grh_vendor_one_2nd_name = replace(grh_vendor_one_2nd_name, "_", "")
				grh_vendor_one_2nd_c_o = replace(grh_vendor_one_2nd_c_o, "_", "")
				grh_vendor_one_2nd_street_one = replace(grh_vendor_one_2nd_street_one, "_", "")
				grh_vendor_one_2nd_street_two = replace(grh_vendor_one_2nd_street_two, "_", "")
				grh_vendor_one_2nd_city = replace(grh_vendor_one_2nd_city, "_", "")
				grh_vendor_one_2nd_zip = replace(grh_vendor_one_2nd_zip, "_", "")
				grh_vendor_one_2nd_zip = trim(grh_vendor_one_2nd_zip)
				grh_vendor_one_2nd_zip = replace(grh_vendor_one_2nd_zip, " ", "-")

				grh_vendor_one_merge_vendor_number = replace(grh_vendor_one_merge_vendor_number, "_", "")
				grh_vendor_one_acct_number_required_yn = replace(grh_vendor_one_acct_number_required_yn, "_", "")

				grh_vendor_one_blocked_county_numbers_list = replace(grh_vendor_one_blocked_county_numbers_list, "_", "")
				grh_vendor_one_blocked_county_numbers_list = trim(grh_vendor_one_blocked_county_numbers_list)

				transmit
				EMReadScreen grh_vendor_one_current_rate_period_code, 1, 6, 24

				If grh_vendor_one_current_rate_period_code = "1" Then grh_vendor_one_current_rate_period_info = "Calendar Year"
				If grh_vendor_one_current_rate_period_code = "2" Then grh_vendor_one_current_rate_period_info = "Fiscal Year"
				If grh_vendor_one_current_rate_period_code = "3" Then grh_vendor_one_current_rate_period_info = "Federal Fiscal Year"
				If grh_vendor_one_current_rate_period_code = "4" Then grh_vendor_one_current_rate_period_info = "Other"

				EMReadScreen grh_vendor_one_rate_from_date, 7, 6, 47
				EMReadScreen grh_vendor_one_rate_to_date, 7, 6, 61
				EMReadScreen grh_vendor_one_initial_rate_date, 10, 7, 21
				EMReadScreen grh_vendor_one_NPI_number, 10, 7, 41
				EMReadScreen grh_vendor_one_family_foster_care_yn, 1, 8, 69
				EMReadScreen grh_vendor_one_rate_limit, 8, 9, 24
				EMReadScreen grh_vendor_one_exempt_reason_code, 2, 9, 69
				If grh_vendor_one_exempt_reason_code = "01" Then grh_vendor_one_exempt_reason_info = "Andrew Board & Care"
				If grh_vendor_one_exempt_reason_code = "04" Then grh_vendor_one_exempt_reason_info = "Aldrich"
				If grh_vendor_one_exempt_reason_code = "05" Then grh_vendor_one_exempt_reason_info = "Amy Johnson"
				If grh_vendor_one_exempt_reason_code = "09" Then grh_vendor_one_exempt_reason_info = "Quinlan Home"
				If grh_vendor_one_exempt_reason_code = "10" Then grh_vendor_one_exempt_reason_info = "Revere Home"
				If grh_vendor_one_exempt_reason_code = "11" Then grh_vendor_one_exempt_reason_info = "River Oaks"
				If grh_vendor_one_exempt_reason_code = "12" Then grh_vendor_one_exempt_reason_info = "Special Srvices"
				If grh_vendor_one_exempt_reason_code = "14" Then grh_vendor_one_exempt_reason_info = "Albert Lea"
				If grh_vendor_one_exempt_reason_code = "15" Then grh_vendor_one_exempt_reason_info = "Metro Demo"
				If grh_vendor_one_exempt_reason_code = "16" Then grh_vendor_one_exempt_reason_info = "Broadway"
				If grh_vendor_one_exempt_reason_code = "18" Then grh_vendor_one_exempt_reason_info = "Murphy's Board and Care"
				If grh_vendor_one_exempt_reason_code = "25" Then grh_vendor_one_exempt_reason_info = "Valley Home"
				If grh_vendor_one_exempt_reason_code = "26" Then grh_vendor_one_exempt_reason_info = "LTH Supportive Housing"
				If grh_vendor_one_exempt_reason_code = "27" Then grh_vendor_one_exempt_reason_info = "Boarding Care Home"
				If grh_vendor_one_exempt_reason_code = "28" Then grh_vendor_one_exempt_reason_info = "Banked Bed"
				If grh_vendor_one_exempt_reason_code = "29" Then grh_vendor_one_exempt_reason_info = "Tribe Certified Housing"

				EMReadScreen grh_vendor_one_DHS_license_1_code, 2, 10, 24
				If grh_vendor_one_DHS_license_1_code = "__" Then grh_vendor_one_DHS_license_1_info = ""
				If grh_vendor_one_DHS_license_1_code = "01" Then grh_vendor_one_DHS_license_1_info = "SILS- Developmental Disabled Rule 18"
				If grh_vendor_one_DHS_license_1_code = "02" Then grh_vendor_one_DHS_license_1_info = "Developmentaly Diabled Rule 34"
				If grh_vendor_one_DHS_license_1_code = "03" Then grh_vendor_one_DHS_license_1_info = "Adult Mentally Ill Rule 36"
				If grh_vendor_one_DHS_license_1_code = "04" Then grh_vendor_one_DHS_license_1_info = "Adult Foster Care Rule 203"
				If grh_vendor_one_DHS_license_1_code = "05" Then grh_vendor_one_DHS_license_1_info = "Mentally Retarded Waiver Rule 42"
				If grh_vendor_one_DHS_license_1_code = "06" Then grh_vendor_one_DHS_license_1_info = "Pregnant Woman Shelter Rule 6"
				If grh_vendor_one_DHS_license_1_code = "07" Then grh_vendor_one_DHS_license_1_info = "Other DHS license"
				If grh_vendor_one_DHS_license_1_code = "08" Then grh_vendor_one_DHS_license_1_info = "No DHS License"
				If grh_vendor_one_DHS_license_1_code = "09" Then grh_vendor_one_DHS_license_1_info = "Physical Handicap Rule 80"
				If grh_vendor_one_DHS_license_1_code = "10" Then grh_vendor_one_DHS_license_1_info = "Child Foster Care Rules 1 & 8"
				If grh_vendor_one_DHS_license_1_code = "11" Then grh_vendor_one_DHS_license_1_info = "Chemical Dependancy Rule 35"
				EMReadScreen grh_vendor_one_DHS_license_2_code, 2, 10, 27
				If grh_vendor_one_DHS_license_2_code = "__" Then grh_vendor_one_DHS_license_2_info = ""
				If grh_vendor_one_DHS_license_2_code = "01" Then grh_vendor_one_DHS_license_2_info = "SILS- Developmental Disabled Rule 18"
				If grh_vendor_one_DHS_license_2_code = "02" Then grh_vendor_one_DHS_license_2_info = "Developmentaly Diabled Rule 34"
				If grh_vendor_one_DHS_license_2_code = "03" Then grh_vendor_one_DHS_license_2_info = "Adult Mentally Ill Rule 36"
				If grh_vendor_one_DHS_license_2_code = "04" Then grh_vendor_one_DHS_license_2_info = "Adult Foster Care Rule 203"
				If grh_vendor_one_DHS_license_2_code = "05" Then grh_vendor_one_DHS_license_2_info = "Mentally Retarded Waiver Rule 42"
				If grh_vendor_one_DHS_license_2_code = "06" Then grh_vendor_one_DHS_license_2_info = "Pregnant Woman Shelter Rule 6"
				If grh_vendor_one_DHS_license_2_code = "07" Then grh_vendor_one_DHS_license_2_info = "Other DHS license"
				If grh_vendor_one_DHS_license_2_code = "08" Then grh_vendor_one_DHS_license_2_info = "No DHS License"
				If grh_vendor_one_DHS_license_2_code = "09" Then grh_vendor_one_DHS_license_2_info = "Physical Handicap Rule 80"
				If grh_vendor_one_DHS_license_2_code = "10" Then grh_vendor_one_DHS_license_2_info = "Child Foster Care Rules 1 & 8"
				If grh_vendor_one_DHS_license_2_code = "11" Then grh_vendor_one_DHS_license_2_info = "Chemical Dependancy Rule 35"
				EMReadScreen grh_vendor_one_DHS_license_3_code, 2, 10, 30
				If grh_vendor_one_DHS_license_3_code = "__" Then grh_vendor_one_DHS_license_3_info = ""
				If grh_vendor_one_DHS_license_3_code = "01" Then grh_vendor_one_DHS_license_3_info = "SILS- Developmental Disabled Rule 18"
				If grh_vendor_one_DHS_license_3_code = "02" Then grh_vendor_one_DHS_license_3_info = "Developmentaly Diabled Rule 34"
				If grh_vendor_one_DHS_license_3_code = "03" Then grh_vendor_one_DHS_license_3_info = "Adult Mentally Ill Rule 36"
				If grh_vendor_one_DHS_license_3_code = "04" Then grh_vendor_one_DHS_license_3_info = "Adult Foster Care Rule 203"
				If grh_vendor_one_DHS_license_3_code = "05" Then grh_vendor_one_DHS_license_3_info = "Mentally Retarded Waiver Rule 42"
				If grh_vendor_one_DHS_license_3_code = "06" Then grh_vendor_one_DHS_license_3_info = "Pregnant Woman Shelter Rule 6"
				If grh_vendor_one_DHS_license_3_code = "07" Then grh_vendor_one_DHS_license_3_info = "Other DHS license"
				If grh_vendor_one_DHS_license_3_code = "08" Then grh_vendor_one_DHS_license_3_info = "No DHS License"
				If grh_vendor_one_DHS_license_3_code = "09" Then grh_vendor_one_DHS_license_3_info = "Physical Handicap Rule 80"
				If grh_vendor_one_DHS_license_3_code = "10" Then grh_vendor_one_DHS_license_3_info = "Child Foster Care Rules 1 & 8"
				If grh_vendor_one_DHS_license_3_code = "11" Then grh_vendor_one_DHS_license_3_info = "Chemical Dependancy Rule 35"

				EMReadScreen grh_vendor_one_health_dept_license_1_code, 2, 10, 69
				If grh_vendor_one_health_dept_license_1_code = "__" Then grh_vendor_one_health_dept_license_1_info = ""
				If grh_vendor_one_health_dept_license_1_code = "01" Then grh_vendor_one_health_dept_license_1_info = "Nursing Home"
				If grh_vendor_one_health_dept_license_1_code = "02" Then grh_vendor_one_health_dept_license_1_info = "Boarding Care Home"
				If grh_vendor_one_health_dept_license_1_code = "03" Then grh_vendor_one_health_dept_license_1_info = "Supervised Living Facility"
				If grh_vendor_one_health_dept_license_1_code = "04" Then grh_vendor_one_health_dept_license_1_info = "Board and Lodging"
				If grh_vendor_one_health_dept_license_1_code = "05" Then grh_vendor_one_health_dept_license_1_info = "Hotal/Restaurant"
				If grh_vendor_one_health_dept_license_1_code = "06" Then grh_vendor_one_health_dept_license_1_info = "Board & Lodge with Special Services"
				If grh_vendor_one_health_dept_license_1_code = "07" Then grh_vendor_one_health_dept_license_1_info = "Tribal License"
				If grh_vendor_one_health_dept_license_1_code = "08" Then grh_vendor_one_health_dept_license_1_info = "Metro Demo"
				If grh_vendor_one_health_dept_license_1_code = "09" Then grh_vendor_one_health_dept_license_1_info = "Housing with Services"
				If grh_vendor_one_health_dept_license_1_code = "10" Then
					grh_vendor_one_health_dept_license_1_info = "Supportive Housing"
					supportive_housing_vendor = True
				End If
				EMReadScreen grh_vendor_one_health_dept_license_2_code, 2, 10, 72
				If grh_vendor_one_health_dept_license_2_code = "__" Then grh_vendor_one_health_dept_license_2_info = ""
				If grh_vendor_one_health_dept_license_2_code = "01" Then grh_vendor_one_health_dept_license_2_info = "Nursing Home"
				If grh_vendor_one_health_dept_license_2_code = "02" Then grh_vendor_one_health_dept_license_2_info = "Boarding Care Home"
				If grh_vendor_one_health_dept_license_2_code = "03" Then grh_vendor_one_health_dept_license_2_info = "Supervised Living Facility"
				If grh_vendor_one_health_dept_license_2_code = "04" Then grh_vendor_one_health_dept_license_2_info = "Board and Lodging"
				If grh_vendor_one_health_dept_license_2_code = "05" Then grh_vendor_one_health_dept_license_2_info = "Hotal/Restaurant"
				If grh_vendor_one_health_dept_license_2_code = "06" Then grh_vendor_one_health_dept_license_2_info = "Board & Lodge with Special Services"
				If grh_vendor_one_health_dept_license_2_code = "07" Then grh_vendor_one_health_dept_license_2_info = "Tribal License"
				If grh_vendor_one_health_dept_license_2_code = "08" Then grh_vendor_one_health_dept_license_2_info = "Metro Demo"
				If grh_vendor_one_health_dept_license_2_code = "09" Then grh_vendor_one_health_dept_license_2_info = "Housing with Services"
				If grh_vendor_one_health_dept_license_2_code = "10" Then
					grh_vendor_one_health_dept_license_2_info = "Supportive Housing"
					supportive_housing_vendor = True
				End If
				EMReadScreen grh_vendor_one_health_dept_license_3_code, 2, 10, 75
				If grh_vendor_one_health_dept_license_3_code = "__" Then grh_vendor_one_health_dept_license_3_info = ""
				If grh_vendor_one_health_dept_license_3_code = "01" Then grh_vendor_one_health_dept_license_3_info = "Nursing Home"
				If grh_vendor_one_health_dept_license_3_code = "02" Then grh_vendor_one_health_dept_license_3_info = "Boarding Care Home"
				If grh_vendor_one_health_dept_license_3_code = "03" Then grh_vendor_one_health_dept_license_3_info = "Supervised Living Facility"
				If grh_vendor_one_health_dept_license_3_code = "04" Then grh_vendor_one_health_dept_license_3_info = "Board and Lodging"
				If grh_vendor_one_health_dept_license_3_code = "05" Then grh_vendor_one_health_dept_license_3_info = "Hotal/Restaurant"
				If grh_vendor_one_health_dept_license_3_code = "06" Then grh_vendor_one_health_dept_license_3_info = "Board & Lodge with Special Services"
				If grh_vendor_one_health_dept_license_3_code = "07" Then grh_vendor_one_health_dept_license_3_info = "Tribal License"
				If grh_vendor_one_health_dept_license_3_code = "08" Then grh_vendor_one_health_dept_license_3_info = "Metro Demo"
				If grh_vendor_one_health_dept_license_3_code = "09" Then grh_vendor_one_health_dept_license_3_info = "Housing with Services"
				If grh_vendor_one_health_dept_license_3_code = "10" Then
					grh_vendor_one_health_dept_license_3_info = "Supportive Housing"
					supportive_housing_vendor = True
				End If

				EMReadScreen grh_vendor_one_number_of_licesned_beds, 4, 11, 24
				EMReadScreen grh_vendor_one_total_GRH_agreement_beds, 4, 11, 69
				EMReadScreen grh_vendor_one_resident_disa_type_1_code, 2,  12, 24
				If grh_vendor_one_resident_disa_type_1_code = "__" Then grh_vendor_one_resident_disa_type_1_info = ""
				If grh_vendor_one_resident_disa_type_1_code = "01" Then grh_vendor_one_resident_disa_type_1_info = "Development Disabled"
				If grh_vendor_one_resident_disa_type_1_code = "02" Then grh_vendor_one_resident_disa_type_1_info = "Chemically Dependent"
				If grh_vendor_one_resident_disa_type_1_code = "03" Then grh_vendor_one_resident_disa_type_1_info = "Mentally Ill"
				If grh_vendor_one_resident_disa_type_1_code = "04" Then grh_vendor_one_resident_disa_type_1_info = "Physically Handicapped"
				If grh_vendor_one_resident_disa_type_1_code = "05" Then grh_vendor_one_resident_disa_type_1_info = "Elderly"
				If grh_vendor_one_resident_disa_type_1_code = "06" Then grh_vendor_one_resident_disa_type_1_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_one_resident_disa_type_1_code = "08" Then grh_vendor_one_resident_disa_type_1_info = "None of the Above"

				EMReadScreen grh_vendor_one_resident_disa_type_2_code, 2,  12, 24
				If grh_vendor_one_resident_disa_type_2_code = "__" Then grh_vendor_one_resident_disa_type_2_info = ""
				If grh_vendor_one_resident_disa_type_2_code = "01" Then grh_vendor_one_resident_disa_type_2_info = "Development Disabled"
				If grh_vendor_one_resident_disa_type_2_code = "02" Then grh_vendor_one_resident_disa_type_2_info = "Chemically Dependent"
				If grh_vendor_one_resident_disa_type_2_code = "03" Then grh_vendor_one_resident_disa_type_2_info = "Mentally Ill"
				If grh_vendor_one_resident_disa_type_2_code = "04" Then grh_vendor_one_resident_disa_type_2_info = "Physically Handicapped"
				If grh_vendor_one_resident_disa_type_2_code = "05" Then grh_vendor_one_resident_disa_type_2_info = "Elderly"
				If grh_vendor_one_resident_disa_type_2_code = "06" Then grh_vendor_one_resident_disa_type_2_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_one_resident_disa_type_2_code = "08" Then grh_vendor_one_resident_disa_type_2_info = "None of the Above"

				EMReadScreen grh_vendor_one_resident_disa_type_3_code, 2,  12, 24
				If grh_vendor_one_resident_disa_type_3_code = "__" Then grh_vendor_one_resident_disa_type_3_info = ""
				If grh_vendor_one_resident_disa_type_3_code = "01" Then grh_vendor_one_resident_disa_type_3_info = "Development Disabled"
				If grh_vendor_one_resident_disa_type_3_code = "02" Then grh_vendor_one_resident_disa_type_3_info = "Chemically Dependent"
				If grh_vendor_one_resident_disa_type_3_code = "03" Then grh_vendor_one_resident_disa_type_3_info = "Mentally Ill"
				If grh_vendor_one_resident_disa_type_3_code = "04" Then grh_vendor_one_resident_disa_type_3_info = "Physically Handicapped"
				If grh_vendor_one_resident_disa_type_3_code = "05" Then grh_vendor_one_resident_disa_type_3_info = "Elderly"
				If grh_vendor_one_resident_disa_type_3_code = "06" Then grh_vendor_one_resident_disa_type_3_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_one_resident_disa_type_3_code = "08" Then grh_vendor_one_resident_disa_type_3_info = "None of the Above"

				EMReadScreen grh_vendor_one_resident_disa_type_4_code, 2,  12, 24
				If grh_vendor_one_resident_disa_type_4_code = "__" Then grh_vendor_one_resident_disa_type_4_info = ""
				If grh_vendor_one_resident_disa_type_4_code = "01" Then grh_vendor_one_resident_disa_type_4_info = "Development Disabled"
				If grh_vendor_one_resident_disa_type_4_code = "02" Then grh_vendor_one_resident_disa_type_4_info = "Chemically Dependent"
				If grh_vendor_one_resident_disa_type_4_code = "03" Then grh_vendor_one_resident_disa_type_4_info = "Mentally Ill"
				If grh_vendor_one_resident_disa_type_4_code = "04" Then grh_vendor_one_resident_disa_type_4_info = "Physically Handicapped"
				If grh_vendor_one_resident_disa_type_4_code = "05" Then grh_vendor_one_resident_disa_type_4_info = "Elderly"
				If grh_vendor_one_resident_disa_type_4_code = "06" Then grh_vendor_one_resident_disa_type_4_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_one_resident_disa_type_4_code = "08" Then grh_vendor_one_resident_disa_type_4_info = "None of the Above"

				EMReadScreen grh_vendor_one_resident_disa_type_5_code, 2,  12, 24
				If grh_vendor_one_resident_disa_type_5_code = "__" Then grh_vendor_one_resident_disa_type_5_info = ""
				If grh_vendor_one_resident_disa_type_5_code = "01" Then grh_vendor_one_resident_disa_type_5_info = "Development Disabled"
				If grh_vendor_one_resident_disa_type_5_code = "02" Then grh_vendor_one_resident_disa_type_5_info = "Chemically Dependent"
				If grh_vendor_one_resident_disa_type_5_code = "03" Then grh_vendor_one_resident_disa_type_5_info = "Mentally Ill"
				If grh_vendor_one_resident_disa_type_5_code = "04" Then grh_vendor_one_resident_disa_type_5_info = "Physically Handicapped"
				If grh_vendor_one_resident_disa_type_5_code = "05" Then grh_vendor_one_resident_disa_type_5_info = "Elderly"
				If grh_vendor_one_resident_disa_type_5_code = "06" Then grh_vendor_one_resident_disa_type_5_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_one_resident_disa_type_5_code = "08" Then grh_vendor_one_resident_disa_type_5_info = "None of the Above"

				EMReadScreen grh_vendor_one_room_and_board_rate_one_monthly, 8, 15, 54
				EMReadScreen grh_vendor_one_room_and_board_rate_one_per_diem, 8, 15, 68
				EMReadScreen grh_vendor_one_SSR_monthly, 8, 16, 54
				EMReadScreen grh_vendor_one_SSR_per_diem, 8, 16, 68

				grh_vendor_one_room_and_board_rate_one_monthly = replace(grh_vendor_one_room_and_board_rate_one_monthly, "_", "")
				grh_vendor_one_room_and_board_rate_one_per_diem = trim(grh_vendor_one_room_and_board_rate_one_per_diem)
				grh_vendor_one_SSR_monthly = replace(grh_vendor_one_SSR_monthly, "_", "")
				grh_vendor_one_SSR_per_diem = trim(grh_vendor_one_SSR_per_diem)

				PF3
			End If

			If grh_elig_budg_vendor_number_two <> "" Then
				Call write_value_and_transmit(grh_elig_budg_vendor_number_two, 4, 59)
				EMReadScreen grh_vendor_two_name, 					30, 3, 15
				EMReadScreen grh_vendor_two_c_o, 					30, 4, 15
				EMReadScreen grh_vendor_two_street_one, 			22, 5, 15
				EMReadScreen grh_vendor_two_street_two, 			22, 6, 15
				EMReadScreen grh_vendor_two_city, 					15, 7, 15
				EMReadScreen grh_vendor_two_state, 					2, 7, 36
				EMReadScreen grh_vendor_two_zip, 					10, 7, 46
				EMReadScreen grh_vendor_two_grh_yn, 				1, 4, 57
				EMReadScreen grh_vendor_two_non_profit_yn, 			1, 4, 78
				EMReadScreen grh_vendor_two_phone, 					16, 6, 54
				grh_vendor_two_phone = "(" & replace(replace(grh_vendor_two_phone, " )  ", ")"), "  ", "-")
				EMReadScreen grh_vendor_two_county, 				2, 7, 61
				EMReadScreen grh_vendor_two_status_code, 			1, 16, 15
				If grh_vendor_two_status_code = "A" Then grh_vendor_two_status_info = "Active"
				If grh_vendor_two_status_code = "D" Then grh_vendor_two_status_info = "Delete"
				If grh_vendor_two_status_code = "M" Then grh_vendor_two_status_info = "Merged"
				If grh_vendor_two_status_code = "P" Then grh_vendor_two_status_info = "Pending"
				If grh_vendor_two_status_code = "T" Then grh_vendor_two_status_info = "Terminated"
				EMReadScreen grh_vendor_two_incorporated_yn, 		1, 9, 22
				EMReadScreen grh_vendor_two_federal_tax_id, 			9, 9, 41
				EMReadScreen grh_vendor_two_ssn, 					11, 9, 61
				If grh_vendor_two_ssn = "___ __ ____" Then grh_vendor_two_ssn = ""
				grh_vendor_two_ssn = replace(grh_vendor_two_ssn, " ", "-")
				EMReadScreen grh_vendor_two_2nd_address_type_code, 	1, 10, 22
				If grh_vendor_two_2nd_address_type_code = "1" Then grh_vendor_two_2nd_address_type_info = "Mailing Address"
				If grh_vendor_two_2nd_address_type_code = "2" Then grh_vendor_two_2nd_address_type_info = "Court Order"
				EMReadScreen grh_vendor_two_2nd_address_eff_date, 	8, 11, 15
				If grh_vendor_two_2nd_address_eff_date = "__ __ __" Then grh_vendor_two_2nd_address_eff_date = ""
				grh_vendor_two_2nd_address_eff_date = replace(grh_vendor_two_2nd_address_eff_date, " ", "/")
				EMReadScreen grh_vendor_two_2nd_name, 				30, 11, 15
				EMReadScreen grh_vendor_two_2nd_c_o, 				30, 12, 15
				EMReadScreen grh_vendor_two_2nd_street_one, 		22, 13, 15
				EMReadScreen grh_vendor_two_2nd_street_two, 		22, 14, 15
				EMReadScreen grh_vendor_two_2nd_city, 				15, 15, 15
				EMReadScreen grh_vendor_two_2nd_state, 				2, 15, 35
				EMReadScreen grh_vendor_two_2nd_zip, 				10, 15, 44
				EMReadScreen grh_vendor_two_direct_deposit_yn, 		1, 12, 76
				EMReadScreen grh_vendor_two_merge_vendor_number, 	8, 16, 38
				EMReadScreen grh_vendor_two_acct_number_required_yn, 1, 17, 74
				EMReadScreen grh_vendor_two_blocked_county_numbers_list, 29, 18, 23

				grh_vendor_two_name = replace(grh_vendor_two_name, "_", "")
				grh_vendor_two_c_o = replace(grh_vendor_two_c_o, "_", "")
				grh_vendor_two_street_one = replace(grh_vendor_two_street_one, "_", "")
				grh_vendor_two_street_two = replace(grh_vendor_two_street_two, "_", "")
				grh_vendor_two_city = replace(grh_vendor_two_city, "_", "")
				grh_vendor_two_zip = trim(grh_vendor_two_zip)
				grh_vendor_two_zip = replace(grh_vendor_two_zip, " ", "-")

				grh_vendor_two_federal_tax_id = replace(grh_vendor_two_federal_tax_id, "_", "")

				grh_vendor_two_2nd_name = replace(grh_vendor_two_2nd_name, "_", "")
				grh_vendor_two_2nd_c_o = replace(grh_vendor_two_2nd_c_o, "_", "")
				grh_vendor_two_2nd_street_one = replace(grh_vendor_two_2nd_street_one, "_", "")
				grh_vendor_two_2nd_street_two = replace(grh_vendor_two_2nd_street_two, "_", "")
				grh_vendor_two_2nd_city = replace(grh_vendor_two_2nd_city, "_", "")
				grh_vendor_two_2nd_zip = replace(grh_vendor_two_2nd_zip, "_", "")
				grh_vendor_two_2nd_zip = trim(grh_vendor_two_2nd_zip)
				grh_vendor_two_2nd_zip = replace(grh_vendor_two_2nd_zip, " ", "-")

				grh_vendor_two_merge_vendor_number = replace(grh_vendor_two_merge_vendor_number, "_", "")
				grh_vendor_two_acct_number_required_yn = replace(grh_vendor_two_acct_number_required_yn, "_", "")

				grh_vendor_two_blocked_county_numbers_list = replace(grh_vendor_two_blocked_county_numbers_list, "_", "")
				grh_vendor_two_blocked_county_numbers_list = trim(grh_vendor_two_blocked_county_numbers_list)

				transmit
				EMReadScreen grh_vendor_two_current_rate_period_code, 1, 6, 24

				If grh_vendor_two_current_rate_period_code = "1" Then grh_vendor_two_current_rate_period_info = "Calendar Year"
				If grh_vendor_two_current_rate_period_code = "2" Then grh_vendor_two_current_rate_period_info = "Fiscal Year"
				If grh_vendor_two_current_rate_period_code = "3" Then grh_vendor_two_current_rate_period_info = "Federal Fiscal Year"
				If grh_vendor_two_current_rate_period_code = "4" Then grh_vendor_two_current_rate_period_info = "Other"

				EMReadScreen grh_vendor_two_rate_from_date, 7, 6, 47
				EMReadScreen grh_vendor_two_rate_to_date, 7, 6, 61
				EMReadScreen grh_vendor_two_initial_rate_date, 10, 7, 21
				EMReadScreen grh_vendor_two_NPI_number, 10, 7, 41
				EMReadScreen grh_vendor_two_family_foster_care_yn, 1, 8, 69
				EMReadScreen grh_vendor_two_rate_limit, 8, 9, 24
				EMReadScreen grh_vendor_two_exempt_reason_code, 2, 9, 69
				If grh_vendor_two_exempt_reason_code = "01" Then grh_vendor_two_exempt_reason_info = "Andrew Board & Care"
				If grh_vendor_two_exempt_reason_code = "04" Then grh_vendor_two_exempt_reason_info = "Aldrich"
				If grh_vendor_two_exempt_reason_code = "05" Then grh_vendor_two_exempt_reason_info = "Amy Johnson"
				If grh_vendor_two_exempt_reason_code = "09" Then grh_vendor_two_exempt_reason_info = "Quinlan Home"
				If grh_vendor_two_exempt_reason_code = "10" Then grh_vendor_two_exempt_reason_info = "Revere Home"
				If grh_vendor_two_exempt_reason_code = "11" Then grh_vendor_two_exempt_reason_info = "River Oaks"
				If grh_vendor_two_exempt_reason_code = "12" Then grh_vendor_two_exempt_reason_info = "Special Srvices"
				If grh_vendor_two_exempt_reason_code = "14" Then grh_vendor_two_exempt_reason_info = "Albert Lea"
				If grh_vendor_two_exempt_reason_code = "15" Then grh_vendor_two_exempt_reason_info = "Metro Demo"
				If grh_vendor_two_exempt_reason_code = "16" Then grh_vendor_two_exempt_reason_info = "Broadway"
				If grh_vendor_two_exempt_reason_code = "18" Then grh_vendor_two_exempt_reason_info = "Murphy's Board and Care"
				If grh_vendor_two_exempt_reason_code = "25" Then grh_vendor_two_exempt_reason_info = "Valley Home"
				If grh_vendor_two_exempt_reason_code = "26" Then grh_vendor_two_exempt_reason_info = "LTH Supportive Housing"
				If grh_vendor_two_exempt_reason_code = "27" Then grh_vendor_two_exempt_reason_info = "Boarding Care Home"
				If grh_vendor_two_exempt_reason_code = "28" Then grh_vendor_two_exempt_reason_info = "Banked Bed"
				If grh_vendor_two_exempt_reason_code = "29" Then grh_vendor_two_exempt_reason_info = "Tribe Certified Housing"

				EMReadScreen grh_vendor_two_DHS_license_1_code, 2, 10, 24
				If grh_vendor_two_DHS_license_1_code = "__" Then grh_vendor_two_DHS_license_1_info = ""
				If grh_vendor_two_DHS_license_1_code = "01" Then grh_vendor_two_DHS_license_1_info = "SILS- Developmental Disabled Rule 18"
				If grh_vendor_two_DHS_license_1_code = "02" Then grh_vendor_two_DHS_license_1_info = "Developmentaly Diabled Rule 34"
				If grh_vendor_two_DHS_license_1_code = "03" Then grh_vendor_two_DHS_license_1_info = "Adult Mentally Ill Rule 36"
				If grh_vendor_two_DHS_license_1_code = "04" Then grh_vendor_two_DHS_license_1_info = "Adult Foster Care Rule 203"
				If grh_vendor_two_DHS_license_1_code = "05" Then grh_vendor_two_DHS_license_1_info = "Mentally Retarded Waiver Rule 42"
				If grh_vendor_two_DHS_license_1_code = "06" Then grh_vendor_two_DHS_license_1_info = "Pregnant Woman Shelter Rule 6"
				If grh_vendor_two_DHS_license_1_code = "07" Then grh_vendor_two_DHS_license_1_info = "Other DHS license"
				If grh_vendor_two_DHS_license_1_code = "08" Then grh_vendor_two_DHS_license_1_info = "No DHS License"
				If grh_vendor_two_DHS_license_1_code = "09" Then grh_vendor_two_DHS_license_1_info = "Physical Handicap Rule 80"
				If grh_vendor_two_DHS_license_1_code = "10" Then grh_vendor_two_DHS_license_1_info = "Child Foster Care Rules 1 & 8"
				If grh_vendor_two_DHS_license_1_code = "11" Then grh_vendor_two_DHS_license_1_info = "Chemical Dependancy Rule 35"
				EMReadScreen grh_vendor_two_DHS_license_2_code, 2, 10, 27
				If grh_vendor_two_DHS_license_2_code = "__" Then grh_vendor_two_DHS_license_2_info = ""
				If grh_vendor_two_DHS_license_2_code = "01" Then grh_vendor_two_DHS_license_2_info = "SILS- Developmental Disabled Rule 18"
				If grh_vendor_two_DHS_license_2_code = "02" Then grh_vendor_two_DHS_license_2_info = "Developmentaly Diabled Rule 34"
				If grh_vendor_two_DHS_license_2_code = "03" Then grh_vendor_two_DHS_license_2_info = "Adult Mentally Ill Rule 36"
				If grh_vendor_two_DHS_license_2_code = "04" Then grh_vendor_two_DHS_license_2_info = "Adult Foster Care Rule 203"
				If grh_vendor_two_DHS_license_2_code = "05" Then grh_vendor_two_DHS_license_2_info = "Mentally Retarded Waiver Rule 42"
				If grh_vendor_two_DHS_license_2_code = "06" Then grh_vendor_two_DHS_license_2_info = "Pregnant Woman Shelter Rule 6"
				If grh_vendor_two_DHS_license_2_code = "07" Then grh_vendor_two_DHS_license_2_info = "Other DHS license"
				If grh_vendor_two_DHS_license_2_code = "08" Then grh_vendor_two_DHS_license_2_info = "No DHS License"
				If grh_vendor_two_DHS_license_2_code = "09" Then grh_vendor_two_DHS_license_2_info = "Physical Handicap Rule 80"
				If grh_vendor_two_DHS_license_2_code = "10" Then grh_vendor_two_DHS_license_2_info = "Child Foster Care Rules 1 & 8"
				If grh_vendor_two_DHS_license_2_code = "11" Then grh_vendor_two_DHS_license_2_info = "Chemical Dependancy Rule 35"
				EMReadScreen grh_vendor_two_DHS_license_3_code, 2, 10, 30
				If grh_vendor_two_DHS_license_3_code = "__" Then grh_vendor_two_DHS_license_3_info = ""
				If grh_vendor_two_DHS_license_3_code = "01" Then grh_vendor_two_DHS_license_3_info = "SILS- Developmental Disabled Rule 18"
				If grh_vendor_two_DHS_license_3_code = "02" Then grh_vendor_two_DHS_license_3_info = "Developmentaly Diabled Rule 34"
				If grh_vendor_two_DHS_license_3_code = "03" Then grh_vendor_two_DHS_license_3_info = "Adult Mentally Ill Rule 36"
				If grh_vendor_two_DHS_license_3_code = "04" Then grh_vendor_two_DHS_license_3_info = "Adult Foster Care Rule 203"
				If grh_vendor_two_DHS_license_3_code = "05" Then grh_vendor_two_DHS_license_3_info = "Mentally Retarded Waiver Rule 42"
				If grh_vendor_two_DHS_license_3_code = "06" Then grh_vendor_two_DHS_license_3_info = "Pregnant Woman Shelter Rule 6"
				If grh_vendor_two_DHS_license_3_code = "07" Then grh_vendor_two_DHS_license_3_info = "Other DHS license"
				If grh_vendor_two_DHS_license_3_code = "08" Then grh_vendor_two_DHS_license_3_info = "No DHS License"
				If grh_vendor_two_DHS_license_3_code = "09" Then grh_vendor_two_DHS_license_3_info = "Physical Handicap Rule 80"
				If grh_vendor_two_DHS_license_3_code = "10" Then grh_vendor_two_DHS_license_3_info = "Child Foster Care Rules 1 & 8"
				If grh_vendor_two_DHS_license_3_code = "11" Then grh_vendor_two_DHS_license_3_info = "Chemical Dependancy Rule 35"

				EMReadScreen grh_vendor_two_health_dept_license_1_code, 2, 10, 69
				If grh_vendor_two_health_dept_license_1_code = "__" Then grh_vendor_two_health_dept_license_1_info = ""
				If grh_vendor_two_health_dept_license_1_code = "01" Then grh_vendor_two_health_dept_license_1_info = "Nursing Home"
				If grh_vendor_two_health_dept_license_1_code = "02" Then grh_vendor_two_health_dept_license_1_info = "Boarding Care Home"
				If grh_vendor_two_health_dept_license_1_code = "03" Then grh_vendor_two_health_dept_license_1_info = "Supervised Living Facility"
				If grh_vendor_two_health_dept_license_1_code = "04" Then grh_vendor_two_health_dept_license_1_info = "Board and Lodging"
				If grh_vendor_two_health_dept_license_1_code = "05" Then grh_vendor_two_health_dept_license_1_info = "Hotal/Restaurant"
				If grh_vendor_two_health_dept_license_1_code = "06" Then grh_vendor_two_health_dept_license_1_info = "Board & Lodge with Special Services"
				If grh_vendor_two_health_dept_license_1_code = "07" Then grh_vendor_two_health_dept_license_1_info = "Tribal License"
				If grh_vendor_two_health_dept_license_1_code = "08" Then grh_vendor_two_health_dept_license_1_info = "Metro Demo"
				If grh_vendor_two_health_dept_license_1_code = "09" Then grh_vendor_two_health_dept_license_1_info = "Housing with Services"
				If grh_vendor_two_health_dept_license_1_code = "10" Then
					grh_vendor_two_health_dept_license_1_info = "Supportive Housing"
					supportive_housing_vendor = True
				End If
				EMReadScreen grh_vendor_two_health_dept_license_2_code, 2, 10, 72
				If grh_vendor_two_health_dept_license_2_code = "__" Then grh_vendor_two_health_dept_license_2_info = ""
				If grh_vendor_two_health_dept_license_2_code = "01" Then grh_vendor_two_health_dept_license_2_info = "Nursing Home"
				If grh_vendor_two_health_dept_license_2_code = "02" Then grh_vendor_two_health_dept_license_2_info = "Boarding Care Home"
				If grh_vendor_two_health_dept_license_2_code = "03" Then grh_vendor_two_health_dept_license_2_info = "Supervised Living Facility"
				If grh_vendor_two_health_dept_license_2_code = "04" Then grh_vendor_two_health_dept_license_2_info = "Board and Lodging"
				If grh_vendor_two_health_dept_license_2_code = "05" Then grh_vendor_two_health_dept_license_2_info = "Hotal/Restaurant"
				If grh_vendor_two_health_dept_license_2_code = "06" Then grh_vendor_two_health_dept_license_2_info = "Board & Lodge with Special Services"
				If grh_vendor_two_health_dept_license_2_code = "07" Then grh_vendor_two_health_dept_license_2_info = "Tribal License"
				If grh_vendor_two_health_dept_license_2_code = "08" Then grh_vendor_two_health_dept_license_2_info = "Metro Demo"
				If grh_vendor_two_health_dept_license_2_code = "09" Then grh_vendor_two_health_dept_license_2_info = "Housing with Services"
				If grh_vendor_two_health_dept_license_2_code = "10" Then
					grh_vendor_two_health_dept_license_2_info = "Supportive Housing"
					supportive_housing_vendor = True
				End If
				EMReadScreen grh_vendor_two_health_dept_license_3_code, 2, 10, 75
				If grh_vendor_two_health_dept_license_3_code = "__" Then grh_vendor_two_health_dept_license_3_info = ""
				If grh_vendor_two_health_dept_license_3_code = "01" Then grh_vendor_two_health_dept_license_3_info = "Nursing Home"
				If grh_vendor_two_health_dept_license_3_code = "02" Then grh_vendor_two_health_dept_license_3_info = "Boarding Care Home"
				If grh_vendor_two_health_dept_license_3_code = "03" Then grh_vendor_two_health_dept_license_3_info = "Supervised Living Facility"
				If grh_vendor_two_health_dept_license_3_code = "04" Then grh_vendor_two_health_dept_license_3_info = "Board and Lodging"
				If grh_vendor_two_health_dept_license_3_code = "05" Then grh_vendor_two_health_dept_license_3_info = "Hotal/Restaurant"
				If grh_vendor_two_health_dept_license_3_code = "06" Then grh_vendor_two_health_dept_license_3_info = "Board & Lodge with Special Services"
				If grh_vendor_two_health_dept_license_3_code = "07" Then grh_vendor_two_health_dept_license_3_info = "Tribal License"
				If grh_vendor_two_health_dept_license_3_code = "08" Then grh_vendor_two_health_dept_license_3_info = "Metro Demo"
				If grh_vendor_two_health_dept_license_3_code = "09" Then grh_vendor_two_health_dept_license_3_info = "Housing with Services"
				If grh_vendor_two_health_dept_license_3_code = "10" Then
					grh_vendor_two_health_dept_license_3_info = "Supportive Housing"
					supportive_housing_vendor = True
				End If

				EMReadScreen grh_vendor_two_number_of_licesned_beds, 4, 11, 24
				EMReadScreen grh_vendor_two_total_GRH_agreement_beds, 4, 11, 69
				EMReadScreen grh_vendor_two_resident_disa_type_1_code, 2,  12, 24
				If grh_vendor_two_resident_disa_type_1_code = "__" Then grh_vendor_two_resident_disa_type_1_info = ""
				If grh_vendor_two_resident_disa_type_1_code = "01" Then grh_vendor_two_resident_disa_type_1_info = "Development Disabled"
				If grh_vendor_two_resident_disa_type_1_code = "02" Then grh_vendor_two_resident_disa_type_1_info = "Chemically Dependent"
				If grh_vendor_two_resident_disa_type_1_code = "03" Then grh_vendor_two_resident_disa_type_1_info = "Mentally Ill"
				If grh_vendor_two_resident_disa_type_1_code = "04" Then grh_vendor_two_resident_disa_type_1_info = "Physically Handicapped"
				If grh_vendor_two_resident_disa_type_1_code = "05" Then grh_vendor_two_resident_disa_type_1_info = "Elderly"
				If grh_vendor_two_resident_disa_type_1_code = "06" Then grh_vendor_two_resident_disa_type_1_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_two_resident_disa_type_1_code = "08" Then grh_vendor_two_resident_disa_type_1_info = "None of the Above"

				EMReadScreen grh_vendor_two_resident_disa_type_2_code, 2,  12, 24
				If grh_vendor_two_resident_disa_type_2_code = "__" Then grh_vendor_two_resident_disa_type_2_info = ""
				If grh_vendor_two_resident_disa_type_2_code = "01" Then grh_vendor_two_resident_disa_type_2_info = "Development Disabled"
				If grh_vendor_two_resident_disa_type_2_code = "02" Then grh_vendor_two_resident_disa_type_2_info = "Chemically Dependent"
				If grh_vendor_two_resident_disa_type_2_code = "03" Then grh_vendor_two_resident_disa_type_2_info = "Mentally Ill"
				If grh_vendor_two_resident_disa_type_2_code = "04" Then grh_vendor_two_resident_disa_type_2_info = "Physically Handicapped"
				If grh_vendor_two_resident_disa_type_2_code = "05" Then grh_vendor_two_resident_disa_type_2_info = "Elderly"
				If grh_vendor_two_resident_disa_type_2_code = "06" Then grh_vendor_two_resident_disa_type_2_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_two_resident_disa_type_2_code = "08" Then grh_vendor_two_resident_disa_type_2_info = "None of the Above"

				EMReadScreen grh_vendor_two_resident_disa_type_3_code, 2,  12, 24
				If grh_vendor_two_resident_disa_type_3_code = "__" Then grh_vendor_two_resident_disa_type_3_info = ""
				If grh_vendor_two_resident_disa_type_3_code = "01" Then grh_vendor_two_resident_disa_type_3_info = "Development Disabled"
				If grh_vendor_two_resident_disa_type_3_code = "02" Then grh_vendor_two_resident_disa_type_3_info = "Chemically Dependent"
				If grh_vendor_two_resident_disa_type_3_code = "03" Then grh_vendor_two_resident_disa_type_3_info = "Mentally Ill"
				If grh_vendor_two_resident_disa_type_3_code = "04" Then grh_vendor_two_resident_disa_type_3_info = "Physically Handicapped"
				If grh_vendor_two_resident_disa_type_3_code = "05" Then grh_vendor_two_resident_disa_type_3_info = "Elderly"
				If grh_vendor_two_resident_disa_type_3_code = "06" Then grh_vendor_two_resident_disa_type_3_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_two_resident_disa_type_3_code = "08" Then grh_vendor_two_resident_disa_type_3_info = "None of the Above"

				EMReadScreen grh_vendor_two_resident_disa_type_4_code, 2,  12, 24
				If grh_vendor_two_resident_disa_type_4_code = "__" Then grh_vendor_two_resident_disa_type_4_info = ""
				If grh_vendor_two_resident_disa_type_4_code = "01" Then grh_vendor_two_resident_disa_type_4_info = "Development Disabled"
				If grh_vendor_two_resident_disa_type_4_code = "02" Then grh_vendor_two_resident_disa_type_4_info = "Chemically Dependent"
				If grh_vendor_two_resident_disa_type_4_code = "03" Then grh_vendor_two_resident_disa_type_4_info = "Mentally Ill"
				If grh_vendor_two_resident_disa_type_4_code = "04" Then grh_vendor_two_resident_disa_type_4_info = "Physically Handicapped"
				If grh_vendor_two_resident_disa_type_4_code = "05" Then grh_vendor_two_resident_disa_type_4_info = "Elderly"
				If grh_vendor_two_resident_disa_type_4_code = "06" Then grh_vendor_two_resident_disa_type_4_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_two_resident_disa_type_4_code = "08" Then grh_vendor_two_resident_disa_type_4_info = "None of the Above"

				EMReadScreen grh_vendor_two_resident_disa_type_5_code, 2,  12, 24
				If grh_vendor_two_resident_disa_type_5_code = "__" Then grh_vendor_two_resident_disa_type_5_info = ""
				If grh_vendor_two_resident_disa_type_5_code = "01" Then grh_vendor_two_resident_disa_type_5_info = "Development Disabled"
				If grh_vendor_two_resident_disa_type_5_code = "02" Then grh_vendor_two_resident_disa_type_5_info = "Chemically Dependent"
				If grh_vendor_two_resident_disa_type_5_code = "03" Then grh_vendor_two_resident_disa_type_5_info = "Mentally Ill"
				If grh_vendor_two_resident_disa_type_5_code = "04" Then grh_vendor_two_resident_disa_type_5_info = "Physically Handicapped"
				If grh_vendor_two_resident_disa_type_5_code = "05" Then grh_vendor_two_resident_disa_type_5_info = "Elderly"
				If grh_vendor_two_resident_disa_type_5_code = "06" Then grh_vendor_two_resident_disa_type_5_info = "Deaf/Blind or Brain Injured"
				If grh_vendor_two_resident_disa_type_5_code = "08" Then grh_vendor_two_resident_disa_type_5_info = "None of the Above"

				EMReadScreen grh_vendor_two_room_and_board_rate_two_monthly, 8, 15, 54
				EMReadScreen grh_vendor_two_room_and_board_rate_two_per_diem, 8, 15, 68
				EMReadScreen grh_vendor_two_SSR_monthly, 8, 16, 54
				EMReadScreen grh_vendor_two_SSR_per_diem, 8, 16, 68

				grh_vendor_two_room_and_board_rate_one_monthly = replace(grh_vendor_two_room_and_board_rate_one_monthly, "_", "")
				grh_vendor_two_room_and_board_rate_one_per_diem = trim(grh_vendor_two_room_and_board_rate_one_per_diem)
				grh_vendor_two_SSR_monthly = replace(grh_vendor_two_SSR_monthly, "_", "")
				grh_vendor_two_SSR_per_diem = trim(grh_vendor_two_SSR_per_diem)

				PF3
			End If
			If supportive_housing_vendor = False Then appears_supportive_housing_disregard_case = False

		End if

		Call back_to_SELF
	end sub

end class

class emer_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public emer_appl_date

	public initial_search_month
	public initial_search_year

	public emer_program
	public household_size
	public manual_hh_count
	public emer_fpg_limit
	public emer_inelig_fpg_limit
	public mony_check_found
	public bus_ticket_approval
	public bus_ticket_detail

	public emer_check_issue_date()
	public emer_check_program()
	public emer_check_status_code()
	public emer_check_status_info()
	public emer_check_warrant_number()
	public emer_check_transaction_amount()
	public emer_check_type_code()
	public emer_check_type_info()
	public emer_check_transaction_number()
	public emer_check_from_date()
	public emer_check_to_date()
	public emer_check_payment_reason()
	public emer_check_payment_to_name()
	public emer_check_payment_to_address()
	public emer_check_mail_method()
	public emer_check_payment_method()
	public emer_check_vendor_number()
	public emer_check_fiche_number()
	public emer_check_payment_amount()
	public emer_check_entitement_amount()
	public emer_check_recoupment_amount()
	public emer_check_replacement_amount()
	public emer_check_cacnel_amount()
	public emer_check_food_portion_amount()
	public emer_check_reconciliation_date()
	public emer_check_cancel_reason()
	public emer_check_replacement_reason()
	public emer_check_picup_status()
	public emer_check_pickup_date()
	public emer_check_servicing_county()
	public emer_check_responsibility_county()
	public emer_check_adjusting_transaction()
	public emer_check_original_transaction()
	public emer_check_vendor_name()
	public emer_check_vendor_c_o()
	public emer_check_vendor_street_one()
	public emer_check_vendor_street_two()
	public emer_check_vendor_city()
	public emer_check_vendor_state()
	public emer_check_vendor_zip()
	public emer_check_vendor_grh_yn()
	public emer_check_vendor_non_profit_yn()
	public emer_check_vendor_phone()
	public emer_check_vendor_county()
	public emer_check_vendor_status_code()
	public emer_check_vendor_status_info()
	public emer_check_vendor_incorporated_yn()
	public emer_check_vendor_federal_tax_id()
	public emer_check_vendor_ssn()
	public emer_check_vendor_2nd_address_type_code()
	public emer_check_vendor_2nd_address_type_info()
	public emer_check_vendor_2nd_address_eff_date()
	public emer_check_vendor_2nd_name()
	public emer_check_vendor_2nd_c_o()
	public emer_check_vendor_2nd_street_one()
	public emer_check_vendor_2nd_street_two()
	public emer_check_vendor_2nd_city()
	public emer_check_vendor_2nd_state()
	public emer_check_vendor_2nd_zip()
	public emer_check_vendor_direct_deposit_yn()
	public emer_check_vendor_merge_vendor_number()
	public emer_check_vendor_acct_number_required_yn()
	public emer_check_vendor_blocked_county_numbers_list()

	public emer_elig_case_test_citizenship
	public emer_elig_case_test_coop_MFIP
	public emer_elig_case_test_copayment
	public emer_elig_case_test_cost_effective
	public emer_elig_case_test_eligible_child
	public emer_elig_case_test_emergency
	public emer_elig_case_test_equitable_interest
	public emer_elig_case_test_residency
	public emer_elig_case_test_resources
	public emer_elig_case_test_verif
	public emer_elig_case_test_12_month
	public emer_elig_case_test_coop_work
	public emer_elig_case_test_county_allocation
	public emer_elig_case_test_elig_other_program
	public emer_elig_case_test_200_percent_fpg

	public emer_elig_available_gross_earned_income
	public emer_elig_available_actual_work_expense
	public emer_elig_available_net_earned_income
	public emer_elig_available_unearned_income
	public emer_elig_available_assets
	public emer_elig_available_other_assets
	public emer_elig_available_total_income_assets
	public emer_elig_expense_rent_mortgage
	public emer_elig_expense_fuel
	public emer_elig_expense_electric
	public emer_elig_expense_msa_standard
	public emer_elig_expense_car_payment
	public emer_elig_expense_phone
	public emer_elig_expense_food
	public emer_elig_expense_other
	public emer_elig_total_basic_needs
	public emer_elig_expense_net_income_assets

	public emer_elig_approved_date
	public emer_elig_process_date
	public emer_elig_summ_date_last_approval
	public emer_elig_summ_current_program_status
	public emer_elig_summ_eligibility_result
	public emer_elig_summ_last_used

	public emer_elig_summ_adults_in_unit
	public emer_elig_summ_children_in_unit
	public emer_elig_summ_begin_date
	public emer_elig_summ_end_date

	public emer_elig_summ_need_foreclosure
	public emer_elig_summ_need_temp_shelter
	public emer_elig_summ_need_other_shelter
	public emer_elig_summ_need_utility
	public emer_elig_summ_need_other
	public emer_elig_summ_need_total
	public emer_elig_summ_payment


	public emer_elig_ref_numbs()
	public emer_elig_membs_full_name()
	public emer_elig_membs_request_yn()
	public emer_elig_membs_code()
	public emer_elig_membs_info()
	public emer_elig_membs_fund_fact()
	public emer_elig_membs_adult_or_child()
	public emer_elig_membs_elig_status()
	public emer_elig_membs_12_month_test()
	public emer_elig_membs_last_emer_begin_date()

	public sub read_elig()
		approved_today = False
		approved_version_found = False
		mony_check_found = False

		ReDim emer_check_issue_date(0)
		ReDim emer_check_program(0)
		ReDim emer_check_status_code(0)
		ReDim emer_check_status_info(0)
		ReDim emer_check_warrant_number(0)
		ReDim emer_check_transaction_amount(0)
		ReDim emer_check_type_code(0)
		ReDim emer_check_type_info(0)
		ReDim emer_check_transaction_number(0)
		ReDim emer_check_from_date(0)
		ReDim emer_check_to_date(0)
		ReDim emer_check_payment_reason(0)
		ReDim emer_check_payment_to_name(0)
		ReDim emer_check_payment_to_address(0)
		ReDim emer_check_mail_method(0)
		ReDim emer_check_payment_method(0)
		ReDim emer_check_vendor_number(0)
		ReDim emer_check_fiche_number(0)
		ReDim emer_check_payment_amount(0)
		ReDim emer_check_entitement_amount(0)
		ReDim emer_check_recoupment_amount(0)
		ReDim emer_check_replacement_amount(0)
		ReDim emer_check_cacnel_amount(0)
		ReDim emer_check_food_portion_amount(0)
		ReDim emer_check_reconciliation_date(0)
		ReDim emer_check_cancel_reason(0)
		ReDim emer_check_replacement_reason(0)
		ReDim emer_check_picup_status(0)
		ReDim emer_check_pickup_date(0)
		ReDim emer_check_servicing_county(0)
		ReDim emer_check_responsibility_county(0)
		ReDim emer_check_adjusting_transaction(0)
		ReDim emer_check_original_transaction(0)
		ReDim emer_check_vendor_name(0)
		ReDim emer_check_vendor_c_o(0)
		ReDim emer_check_vendor_street_one(0)
		ReDim emer_check_vendor_street_two(0)
		ReDim emer_check_vendor_city(0)
		ReDim emer_check_vendor_state(0)
		ReDim emer_check_vendor_zip(0)
		ReDim emer_check_vendor_grh_yn(0)
		ReDim emer_check_vendor_non_profit_yn(0)
		ReDim emer_check_vendor_phone(0)
		ReDim emer_check_vendor_county(0)
		ReDim emer_check_vendor_status_code(0)
		ReDim emer_check_vendor_status_info(0)
		ReDim emer_check_vendor_incorporated_yn(0)
		ReDim emer_check_vendor_federal_tax_id(0)
		ReDim emer_check_vendor_ssn(0)
		ReDim emer_check_vendor_2nd_address_type_code(0)
		ReDim emer_check_vendor_2nd_address_type_info(0)
		ReDim emer_check_vendor_2nd_address_eff_date(0)
		ReDim emer_check_vendor_2nd_name(0)
		ReDim emer_check_vendor_2nd_c_o(0)
		ReDim emer_check_vendor_2nd_street_one(0)
		ReDim emer_check_vendor_2nd_street_two(0)
		ReDim emer_check_vendor_2nd_city(0)
		ReDim emer_check_vendor_2nd_state(0)
		ReDim emer_check_vendor_2nd_zip(0)
		ReDim emer_check_vendor_direct_deposit_yn(0)
		ReDim emer_check_vendor_merge_vendor_number(0)
		ReDim emer_check_vendor_acct_number_required_yn(0)
		ReDim emer_check_vendor_blocked_county_numbers_list(0)

		ReDim emer_elig_ref_numbs(0)
		ReDim emer_elig_membs_full_name(0)
		ReDim emer_elig_membs_request_yn(0)
		ReDim emer_elig_membs_code(0)
		ReDim emer_elig_membs_info(0)
		ReDim emer_elig_membs_fund_fact(0)
		ReDim emer_elig_membs_adult_or_child(0)
		ReDim emer_elig_membs_elig_status(0)
		ReDim emer_elig_membs_12_month_test(0)
		ReDim emer_elig_membs_last_emer_begin_date(0)

		Call navigate_to_MAXIS_screen("MONY", "INQX")
		EMWriteScreen initial_search_month, 6, 38
		EMWriteScreen initial_search_year, 6, 41
		EMWriteScreen CM_plus_1_mo, 6, 53
		EMWriteScreen CM_plus_1_yr, 6, 56
		EMWriteScreen "X", 9, 50
		EMWriteScreen "X", 11, 50
		EMWriteScreen "X", 12, 50
		transmit

		inqd_row = 6
		tx_count = 0
		EMReadScreen chck_prog, 7, inqd_row, 16
		chck_prog = trim(chck_prog)

		Do while chck_prog <> ""
			ReDim preserve emer_check_issue_date(tx_count)
			ReDim preserve emer_check_program(tx_count)
			ReDim preserve emer_check_status_code(tx_count)
			ReDim preserve emer_check_status_info(tx_count)
			ReDim preserve emer_check_warrant_number(tx_count)
			ReDim preserve emer_check_transaction_amount(tx_count)
			ReDim preserve emer_check_type_code(tx_count)
			ReDim preserve emer_check_type_info(tx_count)
			ReDim preserve emer_check_transaction_number(tx_count)
			ReDim preserve emer_check_from_date(tx_count)
			ReDim preserve emer_check_to_date(tx_count)
			ReDim preserve emer_check_payment_reason(tx_count)
			ReDim preserve emer_check_payment_to_name(tx_count)
			ReDim preserve emer_check_payment_to_address(tx_count)
			ReDim preserve emer_check_mail_method(tx_count)
			ReDim preserve emer_check_payment_method(tx_count)
			ReDim preserve emer_check_vendor_number(tx_count)
			ReDim preserve emer_check_fiche_number(tx_count)
			ReDim preserve emer_check_payment_amount(tx_count)
			ReDim preserve emer_check_entitement_amount(tx_count)
			ReDim preserve emer_check_recoupment_amount(tx_count)
			ReDim preserve emer_check_replacement_amount(tx_count)
			ReDim preserve emer_check_cacnel_amount(tx_count)
			ReDim preserve emer_check_food_portion_amount(tx_count)
			ReDim preserve emer_check_reconciliation_date(tx_count)
			ReDim preserve emer_check_cancel_reason(tx_count)
			ReDim preserve emer_check_replacement_reason(tx_count)
			ReDim preserve emer_check_picup_status(tx_count)
			ReDim preserve emer_check_pickup_date(tx_count)
			ReDim preserve emer_check_servicing_county(tx_count)
			ReDim preserve emer_check_responsibility_county(tx_count)
			ReDim preserve emer_check_adjusting_transaction(tx_count)
			ReDim preserve emer_check_original_transaction(tx_count)
			ReDim preserve emer_check_vendor_name(tx_count)
			ReDim preserve emer_check_vendor_c_o(tx_count)
			ReDim preserve emer_check_vendor_street_one(tx_count)
			ReDim preserve emer_check_vendor_street_two(tx_count)
			ReDim preserve emer_check_vendor_city(tx_count)
			ReDim preserve emer_check_vendor_state(tx_count)
			ReDim preserve emer_check_vendor_zip(tx_count)
			ReDim preserve emer_check_vendor_grh_yn(tx_count)
			ReDim preserve emer_check_vendor_non_profit_yn(tx_count)
			ReDim preserve emer_check_vendor_phone(tx_count)
			ReDim preserve emer_check_vendor_county(tx_count)
			ReDim preserve emer_check_vendor_status_code(tx_count)
			ReDim preserve emer_check_vendor_status_info(tx_count)
			ReDim preserve emer_check_vendor_incorporated_yn(tx_count)
			ReDim preserve emer_check_vendor_federal_tax_id(tx_count)
			ReDim preserve emer_check_vendor_ssn(tx_count)
			ReDim preserve emer_check_vendor_2nd_address_type_code(tx_count)
			ReDim preserve emer_check_vendor_2nd_address_type_info(tx_count)
			ReDim preserve emer_check_vendor_2nd_address_eff_date(tx_count)
			ReDim preserve emer_check_vendor_2nd_name(tx_count)
			ReDim preserve emer_check_vendor_2nd_c_o(tx_count)
			ReDim preserve emer_check_vendor_2nd_street_one(tx_count)
			ReDim preserve emer_check_vendor_2nd_street_two(tx_count)
			ReDim preserve emer_check_vendor_2nd_city(tx_count)
			ReDim preserve emer_check_vendor_2nd_state(tx_count)
			ReDim preserve emer_check_vendor_2nd_zip(tx_count)
			ReDim preserve emer_check_vendor_direct_deposit_yn(tx_count)
			ReDim preserve emer_check_vendor_merge_vendor_number(tx_count)
			ReDim preserve emer_check_vendor_acct_number_required_yn(tx_count)
			ReDim preserve emer_check_vendor_blocked_county_numbers_list(tx_count)

			mony_check_found = True
			emer_check_program(tx_count) = chck_prog
			EMReadScreen emer_check_issue_date(tx_count), 8, inqd_row, 7
			emer_check_issue_date(tx_count) = trim(emer_check_issue_date(tx_count))
			If IsDate(emer_check_issue_date(tx_count)) = True Then
				If DateDiff("d", date, emer_check_issue_date(tx_count)) = 0 Then approved_today = True
			End if
			EMReadScreen emer_check_status_code(tx_count), 1, inqd_row, 26
			If emer_check_status_code(tx_count) = "C" Then emer_check_status_info(tx_count) = "Cancel/Return"
			If emer_check_status_code(tx_count) = "D" Then emer_check_status_info(tx_count) = "Denied"
			If emer_check_status_code(tx_count) = "I" Then emer_check_status_info(tx_count) = "Issued"
			If emer_check_status_code(tx_count) = "P" Then emer_check_status_info(tx_count) = "Pending"
			If emer_check_status_code(tx_count) = "R" Then emer_check_status_info(tx_count) = "Cashed"
			If emer_check_status_code(tx_count) = "S" Then emer_check_status_info(tx_count) = "Partial Cancel"
			If emer_check_status_code(tx_count) = "T" Then emer_check_status_info(tx_count) = "Stopped/Cashed"
			If emer_check_status_code(tx_count) = "X" Then emer_check_status_info(tx_count) = "Stopped"
			If emer_check_status_code(tx_count) = "B" Then emer_check_status_info(tx_count) = "Cashed and Replaced"
			EMReadScreen emer_check_warrant_number(tx_count), 8, inqd_row, 28
			EMReadScreen emer_check_transaction_amount(tx_count), 9, inqd_row, 37
			emer_check_transaction_amount(tx_count) = trim(emer_check_transaction_amount(tx_count))
			EMReadScreen emer_check_type_code(tx_count), 1, inqd_row, 48
			If emer_check_type_code(tx_count) = "1" Then emer_check_type_info(tx_count) = "Ongoing Issuance"
			If emer_check_type_code(tx_count) = "2" Then emer_check_type_info(tx_count) = "Same Day Local Issuance"
			If emer_check_type_code(tx_count) = "3" Then emer_check_type_info(tx_count) = "Replacement Issuance"
			If emer_check_type_code(tx_count) = "4" Then emer_check_type_info(tx_count) = "Same Day Issuance"
			If emer_check_type_code(tx_count) = "5" Then emer_check_type_info(tx_count) = "Nightly Issuance"
			If emer_check_type_code(tx_count) = "6" Then emer_check_type_info(tx_count) = "Manual Issuance"
			If emer_check_type_code(tx_count) = "7" Then emer_check_type_info(tx_count) = "EBT Rapid Electronic Issuance"
			If emer_check_type_code(tx_count) = "8" Then emer_check_type_info(tx_count) = "EBT Rapid Electronic Replacement"
			EMReadScreen emer_check_transaction_number(tx_count), 9, inqd_row, 51
			EMReadScreen emer_check_from_date(tx_count), 8, inqd_row, 62
			EMReadScreen emer_check_to_date(tx_count), 8, inqd_row, 73

			Call write_value_and_transmit("I", inqd_row, 4)


			EMReadScreen emer_check_payment_reason(tx_count), 	30, 7, 17
			EMReadScreen emer_check_payment_to_name(tx_count), 	30, 8, 17
			EMReadScreen addr_one, 								30, 9, 17
			EMReadScreen addr_two, 								30, 10, 17
			emer_check_payment_to_address(tx_count) = trim(trim(addr_one) & " " & trim(addr_two))
			EMReadScreen emer_check_mail_method(tx_count), 			15, 4, 63
			EMReadScreen emer_check_payment_method(tx_count), 		15, 5, 63
			EMReadScreen emer_check_vendor_number(tx_count), 		15, 6, 63
			EMReadScreen emer_check_fiche_number(tx_count), 		15, 7, 63
			EMReadScreen emer_check_payment_amount(tx_count), 		10, 13, 16
			EMReadScreen emer_check_entitement_amount(tx_count), 	10, 14, 16
			EMReadScreen emer_check_recoupment_amount(tx_count), 	10, 15, 16
			EMReadScreen emer_check_replacement_amount(tx_count), 	10, 16, 16
			EMReadScreen emer_check_cacnel_amount(tx_count), 		10, 17, 16
			EMReadScreen emer_check_food_portion_amount(tx_count), 	10, 18, 16
			EMReadScreen emer_check_reconciliation_date(tx_count), 	8, 6, 43
			EMReadScreen emer_check_cancel_reason(tx_count), 		30, 17, 41
			EMReadScreen emer_check_replacement_reason(tx_count), 	30, 18, 46
			EMReadScreen emer_check_picup_status(tx_count), 		10, 10, 70
			EMReadScreen emer_check_pickup_date(tx_count), 			8, 11, 70
			EMReadScreen emer_check_servicing_county(tx_count), 	2, 13, 70
			EMReadScreen emer_check_responsibility_county(tx_count), 2, 14, 70
			EMReadScreen emer_check_adjusting_transaction(tx_count), 10, 15, 70
			EMReadScreen emer_check_original_transaction(tx_count), 10, 16, 70

			emer_check_payment_reason(tx_count) = trim(emer_check_payment_reason(tx_count))
			emer_check_payment_to_name(tx_count) = trim(emer_check_payment_to_name(tx_count))
			emer_check_payment_to_address(tx_count) = trim(emer_check_payment_to_address(tx_count))
			emer_check_mail_method(tx_count) = trim(emer_check_mail_method(tx_count))
			emer_check_payment_method(tx_count) = trim(emer_check_payment_method(tx_count))
			emer_check_vendor_number(tx_count) = trim(emer_check_vendor_number(tx_count))
			emer_check_fiche_number(tx_count) = trim(emer_check_fiche_number(tx_count))
			emer_check_payment_amount(tx_count) = trim(emer_check_payment_amount(tx_count))
			emer_check_entitement_amount(tx_count) = trim(emer_check_entitement_amount(tx_count))
			emer_check_recoupment_amount(tx_count) = trim(emer_check_recoupment_amount(tx_count))
			emer_check_replacement_amount(tx_count) = trim(emer_check_replacement_amount(tx_count))
			emer_check_cacnel_amount(tx_count) = trim(emer_check_cacnel_amount(tx_count))
			emer_check_food_portion_amount(tx_count) = trim(emer_check_food_portion_amount(tx_count))
			emer_check_reconciliation_date(tx_count) = trim(emer_check_reconciliation_date(tx_count))
			emer_check_cancel_reason(tx_count) = trim(emer_check_cancel_reason(tx_count))
			emer_check_replacement_reason(tx_count) = trim(emer_check_replacement_reason(tx_count))
			emer_check_picup_status(tx_count) = trim(emer_check_picup_status(tx_count))
			emer_check_pickup_date(tx_count) = trim(emer_check_pickup_date(tx_count))
			emer_check_servicing_county(tx_count) = trim(emer_check_servicing_county(tx_count))
			emer_check_responsibility_county(tx_count) = trim(emer_check_responsibility_county(tx_count))
			emer_check_adjusting_transaction(tx_count) = trim(emer_check_adjusting_transaction(tx_count))
			emer_check_original_transaction(tx_count) = trim(emer_check_original_transaction(tx_count))

			PF3

			tx_count = tx_count + 1
			inqd_row = inqd_row + 1
			EMReadScreen chck_prog, 7, inqd_row, 16
			chck_prog = trim(chck_prog)
		Loop
		PF3

		for each_trans = 0 to UBound(emer_check_program)
			Call navigate_to_MAXIS_screen("MONY", "VNDS")

			Call write_value_and_transmit(emer_check_vendor_number(each_trans), 4, 59)
			EMReadScreen emer_check_vendor_name(each_trans), 					30, 3, 15
			EMReadScreen emer_check_vendor_c_o(each_trans), 					30, 4, 15
			EMReadScreen emer_check_vendor_street_one(each_trans), 				22, 5, 15
			EMReadScreen emer_check_vendor_street_two(each_trans), 				22, 6, 15
			EMReadScreen emer_check_vendor_city(each_trans), 					15, 7, 15
			EMReadScreen emer_check_vendor_state(each_trans), 					2, 7, 36
			EMReadScreen emer_check_vendor_zip(each_trans), 					10, 7, 46
			EMReadScreen emer_check_vendor_grh_yn(each_trans), 					1, 4, 57
			EMReadScreen emer_check_vendor_non_profit_yn(each_trans), 			1, 4, 78
			EMReadScreen emer_check_vendor_phone(each_trans), 					16, 6, 54
			emer_check_vendor_phone(each_trans) = "(" & replace(replace(emer_check_vendor_phone(each_trans), " )  ", ")"), "  ", "-")
			EMReadScreen emer_check_vendor_county(each_trans), 					2, 7, 61
			EMReadScreen emer_check_vendor_status_code(each_trans), 			1, 16, 15
			If emer_check_vendor_status_code(each_trans) = "A" Then emer_check_vendor_status_info(each_trans) = "Active"
			If emer_check_vendor_status_code(each_trans) = "D" Then emer_check_vendor_status_info(each_trans) = "Delete"
			If emer_check_vendor_status_code(each_trans) = "M" Then emer_check_vendor_status_info(each_trans) = "Merged"
			If emer_check_vendor_status_code(each_trans) = "P" Then emer_check_vendor_status_info(each_trans) = "Pending"
			If emer_check_vendor_status_code(each_trans) = "T" Then emer_check_vendor_status_info(each_trans) = "Terminated"
			EMReadScreen emer_check_vendor_incorporated_yn(each_trans), 		1, 9, 22
			EMReadScreen emer_check_vendor_federal_tax_id(each_trans), 			9, 9, 41
			EMReadScreen emer_check_vendor_ssn(each_trans), 					11, 9, 61
			If emer_check_vendor_ssn(each_trans) = "___ __ ____" Then emer_check_vendor_ssn(each_trans) = ""
			emer_check_vendor_ssn(each_trans) = replace(emer_check_vendor_ssn(each_trans), " ", "-")
			EMReadScreen emer_check_vendor_2nd_address_type_code(each_trans), 	1, 10, 22
			If emer_check_vendor_2nd_address_type_code(each_trans) = "1" Then emer_check_vendor_2nd_address_type_info(each_trans) = "Mailing Address"
			If emer_check_vendor_2nd_address_type_code(each_trans) = "2" Then emer_check_vendor_2nd_address_type_info(each_trans) = "Court Order"
			EMReadScreen emer_check_vendor_2nd_address_eff_date(each_trans), 	8, 11, 15
			If emer_check_vendor_2nd_address_eff_date(each_trans) = "__ __ __" Then emer_check_vendor_2nd_address_eff_date(each_trans) = ""
			emer_check_vendor_2nd_address_eff_date(each_trans) = replace(emer_check_vendor_2nd_address_eff_date(each_trans), " ", "/")
			EMReadScreen emer_check_vendor_2nd_name(each_trans), 				30, 11, 15
			EMReadScreen emer_check_vendor_2nd_c_o(each_trans), 				30, 12, 15
			EMReadScreen emer_check_vendor_2nd_street_one(each_trans), 			22, 13, 15
			EMReadScreen emer_check_vendor_2nd_street_two(each_trans), 			22, 14, 15
			EMReadScreen emer_check_vendor_2nd_city(each_trans), 				15, 15, 15
			EMReadScreen emer_check_vendor_2nd_state(each_trans), 				2, 15, 35
			EMReadScreen emer_check_vendor_2nd_zip(each_trans), 				10, 15, 44
			EMReadScreen emer_check_vendor_direct_deposit_yn(each_trans), 		1, 12, 76
			EMReadScreen emer_check_vendor_merge_vendor_number(each_trans), 	8, 16, 38
			EMReadScreen emer_check_vendor_acct_number_required_yn(each_trans), 1, 17, 74
			EMReadScreen emer_check_vendor_blocked_county_numbers_list(each_trans), 29, 18, 23

			emer_check_vendor_name(each_trans) = replace(emer_check_vendor_name(each_trans), "_", "")
			emer_check_vendor_c_o(each_trans) = replace(emer_check_vendor_c_o(each_trans), "_", "")
			emer_check_vendor_street_one(each_trans) = replace(emer_check_vendor_street_one(each_trans), "_", "")
			emer_check_vendor_street_two(each_trans) = replace(emer_check_vendor_street_two(each_trans), "_", "")
			emer_check_vendor_city(each_trans) = replace(emer_check_vendor_city(each_trans), "_", "")
			emer_check_vendor_zip(each_trans) = trim(emer_check_vendor_zip(each_trans))
			emer_check_vendor_zip(each_trans) = replace(emer_check_vendor_zip(each_trans), " ", "-")

			emer_check_vendor_federal_tax_id(each_trans) = replace(emer_check_vendor_federal_tax_id(each_trans), "_", "")

			emer_check_vendor_2nd_name(each_trans) = replace(emer_check_vendor_2nd_name(each_trans), "_", "")
			emer_check_vendor_2nd_c_o(each_trans) = replace(emer_check_vendor_2nd_c_o(each_trans), "_", "")
			emer_check_vendor_2nd_street_one(each_trans) = replace(emer_check_vendor_2nd_street_one(each_trans), "_", "")
			emer_check_vendor_2nd_street_two(each_trans) = replace(emer_check_vendor_2nd_street_two(each_trans), "_", "")
			emer_check_vendor_2nd_city(each_trans) = replace(emer_check_vendor_2nd_city(each_trans), "_", "")
			emer_check_vendor_2nd_zip(each_trans) = replace(emer_check_vendor_2nd_zip(each_trans), "_", "")
			emer_check_vendor_2nd_zip(each_trans) = trim(emer_check_vendor_2nd_zip(each_trans))
			emer_check_vendor_2nd_zip(each_trans) = replace(emer_check_vendor_2nd_zip(each_trans), " ", "-")

			emer_check_vendor_merge_vendor_number(each_trans) = replace(emer_check_vendor_merge_vendor_number(each_trans), "_", "")
			emer_check_vendor_acct_number_required_yn(each_trans) = replace(emer_check_vendor_acct_number_required_yn(each_trans), "_", "")

			emer_check_vendor_blocked_county_numbers_list(each_trans) = replace(emer_check_vendor_blocked_county_numbers_list(each_trans), "_", "")
			emer_check_vendor_blocked_county_numbers_list(each_trans) = trim((emer_check_vendor_blocked_county_numbers_list(each_trans)))

			PF3
		Next

		call navigate_to_MAXIS_screen("ELIG", "    ")
		EMWriteScreen elig_footer_month, 20, 55
		EMWriteScreen elig_footer_year, 20, 58
		call navigate_to_MAXIS_screen("ELIG", "EMER")
		Call find_last_approved_ELIG_version(20, 79, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		manual_hh_count = 0
		If approved_version_found = False Then approved_today = False
		If approved_version_found = True Then

			If IsDate(elig_version_date) = True Then
				EMReadScreen approval_date, 8, 3, 14		'this is the actual approval date - not the process date'
				approval_date = DateAdd("d", 0, approval_date)
				If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
				If allow_late_note = True Then
					one_week_ago = DateAdd("d", -7, date)
					If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
				End If
				If developer_mode = True Then approved_today = True			'TESTING OPTION'
			End if

			if approved_today = True Then
				EMReadScreen emer_program, 2, 4, 45

				ff_col = 59
				ac_col = 64
				es_col = 69
				If emer_program = "EA" Then
					rn_col = 6
					fn_col = 9
					rq_col = 33
					mc_col = 38
				End If
				If emer_program = "EG" Then
					rn_col = 8
					fn_col = 13
					rq_col = 37
					mc_col = 44
					emer_program = "EGA"
				End If

				emer_row = 8
				memb_count = 0
				Do
					EMReadScreen ref_numb, 2, emer_row, rn_col

					ReDim preserve emer_elig_ref_numbs(memb_count)
					ReDim preserve emer_elig_membs_full_name(memb_count)
					ReDim preserve emer_elig_membs_request_yn(memb_count)
					ReDim preserve emer_elig_membs_code(memb_count)
					ReDim preserve emer_elig_membs_info(memb_count)
					ReDim preserve emer_elig_membs_fund_fact(memb_count)
					ReDim preserve emer_elig_membs_adult_or_child(memb_count)
					ReDim preserve emer_elig_membs_elig_status(memb_count)
					ReDim preserve emer_elig_membs_12_month_test(memb_count)
					ReDim preserve emer_elig_membs_last_emer_begin_date(memb_count)

					emer_elig_ref_numbs(memb_count) = ref_numb
					EMReadScreen emer_elig_membs_full_name(memb_count), 		20, emer_row, fn_col
					EMReadScreen emer_elig_membs_request_yn(memb_count), 		1, emer_row, rq_col
					EMReadScreen emer_elig_membs_code(memb_count), 				1, emer_row, mc_col
					If emer_program = "EA" Then EMReadScreen emer_elig_membs_fund_fact(memb_count), 		1, emer_row, ff_col
					EMReadScreen emer_elig_membs_adult_or_child(memb_count), 	1, emer_row, ac_col
					EMReadScreen emer_elig_membs_elig_status(memb_count), 		10, emer_row, es_col

					If emer_elig_membs_code(memb_count) = "A" Then emer_elig_membs_info(memb_count) = "Counted Eligible"
					If emer_elig_membs_code(memb_count) = "F" Then emer_elig_membs_info(memb_count) = "Counted Ineligible"
					If emer_elig_membs_code(memb_count) = "N" Then emer_elig_membs_info(memb_count) = "Not Counted Ineligible"
					If emer_elig_membs_code(memb_count) = "A" OR emer_elig_membs_code(memb_count) = "F" Then manual_hh_count = manual_hh_count + 1
					' MsgBox "MEMB CODE - " & emer_elig_membs_code(memb_count) & vbCr & "manual_hh_count - " & manual_hh_count

					If emer_elig_membs_adult_or_child(memb_count) = "A" Then emer_elig_membs_adult_or_child(memb_count) = "Adult"
					If emer_elig_membs_adult_or_child(memb_count) = "C" Then emer_elig_membs_adult_or_child(memb_count) = "Child"

					emer_elig_membs_full_name(memb_count) = trim((emer_elig_membs_full_name(memb_count)))
					emer_elig_membs_elig_status(memb_count) = trim((emer_elig_membs_elig_status(memb_count)))

					If emer_program = "EA" Then EMWriteScreen "X", emer_row, 4

					memb_count = memb_count + 1
					emer_row = emer_row + 1
					EMReadScreen next_ref_numb, 2, emer_row,rn_col
				Loop until next_ref_numb = "  "

				transmit
				If emer_program = "EA" Then
					Do
						EMReadScreen person_name, 20, 18, 18
						person_name = trim(person_name)
						For each_memb = 0 to UBound(emer_elig_ref_numbs)
							If emer_elig_membs_full_name(each_memb) = person_name Then
								EMReadScreen emer_elig_membs_12_month_test(each_memb), 6, 13, 26
								EMReadScreen emer_elig_membs_last_emer_begin_date(each_memb), 8, 15, 29

								emer_elig_membs_12_month_test(each_memb) = trim(emer_elig_membs_12_month_test(each_memb))
								emer_elig_membs_last_emer_begin_date(each_memb) = trim(emer_elig_membs_last_emer_begin_date(each_memb))
							End If
						Next

						transmit
						EMReadScreen emer_panel, 4, 3, 49
					Loop until emer_panel = "EMCR"

					EMReadScreen emer_elig_case_test_citizenship, 		6, 8, 14
					EMReadScreen emer_elig_case_test_coop_MFIP, 		6, 9, 14
					EMReadScreen emer_elig_case_test_copayment, 		6, 10, 14
					EMReadScreen emer_elig_case_test_cost_effective, 	6, 11, 14
					EMReadScreen emer_elig_case_test_eligible_child, 	6, 12, 14
					EMReadScreen emer_elig_case_test_emergency, 		6, 13, 14

					EMReadScreen emer_elig_case_test_equitable_interest, 6, 8, 48
					EMReadScreen emer_elig_case_test_residency, 		6, 9, 48
					EMReadScreen emer_elig_case_test_resources, 		6, 10, 48
					EMReadScreen emer_elig_case_test_verif, 			6, 11, 48
					EMReadScreen emer_elig_case_test_12_month, 			6, 12, 48

					emer_elig_case_test_citizenship = trim(emer_elig_case_test_citizenship)
					emer_elig_case_test_coop_MFIP = trim(emer_elig_case_test_coop_MFIP)
					emer_elig_case_test_copayment = trim(emer_elig_case_test_copayment)
					emer_elig_case_test_cost_effective = trim(emer_elig_case_test_cost_effective)
					emer_elig_case_test_eligible_child = trim(emer_elig_case_test_eligible_child)
					emer_elig_case_test_emergency = trim(emer_elig_case_test_emergency)

					emer_elig_case_test_equitable_interest = trim(emer_elig_case_test_equitable_interest)
					emer_elig_case_test_residency = trim(emer_elig_case_test_residency)
					emer_elig_case_test_resources = trim(emer_elig_case_test_resources)
					emer_elig_case_test_verif = trim(emer_elig_case_test_verif)
					emer_elig_case_test_12_month = trim(emer_elig_case_test_12_month)
				End If

				If emer_program = "EGA" Then
					EMReadScreen emer_elig_case_test_coop_work, 		6, 9, 7
					EMReadScreen emer_elig_case_test_copayment, 		6, 10, 7
					EMReadScreen emer_elig_case_test_cost_effective, 	6, 11, 7
					EMReadScreen emer_elig_case_test_county_allocation, 6, 12, 7
					EMReadScreen emer_elig_case_test_elig_other_program,6, 13, 7
					EMReadScreen emer_elig_case_test_emergency, 		6, 14, 7

					EMReadScreen emer_elig_case_test_equitable_interest, 6, 9, 49
					EMReadScreen emer_elig_case_test_resources, 		6, 10, 49
					EMReadScreen emer_elig_case_test_residency, 		6, 11, 49
					EMReadScreen emer_elig_case_test_verif, 			6, 12, 49
					EMReadScreen emer_elig_case_test_12_month, 			6, 13, 49
					EMReadScreen emer_elig_case_test_200_percent_fpg, 	6, 14, 49

					emer_elig_case_test_coop_work = trim(emer_elig_case_test_coop_work)
					emer_elig_case_test_copayment = trim(emer_elig_case_test_copayment)
					emer_elig_case_test_cost_effective = trim(emer_elig_case_test_cost_effective)
					emer_elig_case_test_county_allocation = trim(emer_elig_case_test_county_allocation)
					emer_elig_case_test_elig_other_program = trim(emer_elig_case_test_elig_other_program)
					emer_elig_case_test_emergency = trim(emer_elig_case_test_emergency)

					emer_elig_case_test_equitable_interest = trim(emer_elig_case_test_equitable_interest)
					emer_elig_case_test_resources = trim(emer_elig_case_test_resources)
					emer_elig_case_test_residency = trim(emer_elig_case_test_residency)
					emer_elig_case_test_verif = trim(emer_elig_case_test_verif)
					emer_elig_case_test_12_month = trim(emer_elig_case_test_12_month)
					emer_elig_case_test_200_percent_fpg = trim(emer_elig_case_test_200_percent_fpg)
				End If

				transmit 		'going to EMAV'

				EMReadScreen emer_elig_available_gross_earned_income, 	9, 7, 32
				EMReadScreen emer_elig_available_actual_work_expense, 	9, 8, 32
				EMReadScreen emer_elig_available_net_earned_income, 	9, 9, 32

				EMReadScreen emer_elig_available_unearned_income, 		9, 7, 71
				EMReadScreen emer_elig_available_assets, 				9, 8, 17
				EMReadScreen emer_elig_available_other_assets, 			9, 9, 71
				EMReadScreen emer_elig_available_total_income_assets, 	9, 10, 71

				EMReadScreen emer_elig_expense_rent_mortgage, 		9, 13, 32
				EMReadScreen emer_elig_expense_fuel,	 			9, 14, 32
				EMReadScreen emer_elig_expense_electric, 			9, 15, 32
				EMReadScreen emer_elig_expense_msa_standard, 		9, 16, 32

				EMReadScreen emer_elig_expense_car_payment, 		9, 13, 71
				EMReadScreen emer_elig_expense_phone, 				9, 14, 71
				EMReadScreen emer_elig_expense_food, 				9, 15, 71
				EMReadScreen emer_elig_expense_other, 				9, 16, 71
				EMReadScreen emer_elig_total_basic_needs, 			9, 17, 71
				EMReadScreen emer_elig_expense_net_income_assets, 	9, 18, 71

				emer_elig_available_gross_earned_income = trim(emer_elig_available_gross_earned_income)
				emer_elig_available_actual_work_expense = trim(emer_elig_available_actual_work_expense)
				emer_elig_available_net_earned_income = trim(emer_elig_available_net_earned_income)
				emer_elig_available_unearned_income = trim(emer_elig_available_unearned_income)
				emer_elig_available_assets = trim(emer_elig_available_assets)
				emer_elig_available_other_assets = trim(emer_elig_available_other_assets)
				emer_elig_available_total_income_assets = trim(emer_elig_available_total_income_assets)
				emer_elig_expense_rent_mortgage = trim(emer_elig_expense_rent_mortgage)
				emer_elig_expense_fuel = trim(emer_elig_expense_fuel)
				emer_elig_expense_electric = trim(emer_elig_expense_electric)
				emer_elig_expense_msa_standard = trim(emer_elig_expense_msa_standard)
				emer_elig_expense_car_payment = trim(emer_elig_expense_car_payment)
				emer_elig_expense_phone = trim(emer_elig_expense_phone)
				emer_elig_expense_food = trim(emer_elig_expense_food)
				emer_elig_expense_other = trim(emer_elig_expense_other)
				emer_elig_total_basic_needs = trim(emer_elig_total_basic_needs)
				emer_elig_expense_net_income_assets = trim(emer_elig_expense_net_income_assets)

				emer_elig_available_gross_earned_income = replace(emer_elig_available_gross_earned_income, "_", "")
				emer_elig_available_actual_work_expense = replace(emer_elig_available_actual_work_expense, "_", "")
				emer_elig_available_net_earned_income = replace(emer_elig_available_net_earned_income, "_", "")
				emer_elig_available_unearned_income = replace(emer_elig_available_unearned_income, "_", "")
				emer_elig_available_assets = replace(emer_elig_available_assets, "_", "")
				emer_elig_available_other_assets = replace(emer_elig_available_other_assets, "_", "")
				emer_elig_available_total_income_assets = replace(emer_elig_available_total_income_assets, "_", "")
				emer_elig_expense_rent_mortgage = replace(emer_elig_expense_rent_mortgage, "_", "")
				emer_elig_expense_fuel = replace(emer_elig_expense_fuel, "_", "")
				emer_elig_expense_electric = replace(emer_elig_expense_electric, "_", "")
				emer_elig_expense_msa_standard = replace(emer_elig_expense_msa_standard, "_", "")
				emer_elig_expense_car_payment = replace(emer_elig_expense_car_payment, "_", "")
				emer_elig_expense_phone = replace(emer_elig_expense_phone, "_", "")
				emer_elig_expense_food = replace(emer_elig_expense_food, "_", "")
				emer_elig_expense_other = replace(emer_elig_expense_other, "_", "")
				emer_elig_total_basic_needs = replace(emer_elig_total_basic_needs, "_", "")
				emer_elig_expense_net_income_assets = replace(emer_elig_expense_net_income_assets, "_", "")

				transmit 'go to EMSM'

				EMReadScreen emer_elig_approved_date, 			8, 3, 14
				EMReadScreen emer_elig_process_date, 			8, 2, 73
				EMReadScreen emer_elig_summ_date_last_approval, 8, 6, 32
				EMReadScreen emer_elig_summ_current_program_status, 10, 7, 32
				EMReadScreen emer_elig_summ_eligibility_result, 10, 8, 32
				EMReadScreen emer_elig_summ_last_used, 			8, 9, 32

				EMReadScreen emer_elig_summ_adults_in_unit, 	2, 6, 73
				EMReadScreen emer_elig_summ_children_in_unit, 	2, 7, 73
				EMReadScreen emer_elig_summ_begin_date, 		8, 8, 71
				EMReadScreen emer_elig_summ_end_date, 			8, 9, 71

				EMReadScreen emer_elig_summ_need_foreclosure, 	9, 11, 32
				EMReadScreen emer_elig_summ_need_temp_shelter, 	9, 12, 32
				EMReadScreen emer_elig_summ_need_other_shelter, 9, 13, 32
				EMReadScreen emer_elig_summ_need_utility, 		9, 14, 32
				EMReadScreen emer_elig_summ_need_other, 		9, 15, 32
				EMReadScreen emer_elig_summ_need_total, 		9, 16, 32

				EMReadScreen emer_elig_summ_payment, 			9, 13, 71

				emer_elig_summ_date_last_approval = trim(emer_elig_summ_date_last_approval)
				emer_elig_summ_current_program_status = trim(emer_elig_summ_current_program_status)
				emer_elig_summ_last_used = trim(emer_elig_summ_last_used)

				emer_elig_summ_adults_in_unit = trim(emer_elig_summ_adults_in_unit)
				emer_elig_summ_children_in_unit = trim(emer_elig_summ_children_in_unit)

				emer_elig_summ_eligibility_result = replace(emer_elig_summ_eligibility_result, "_", "")

				emer_elig_summ_need_foreclosure = replace(emer_elig_summ_need_foreclosure, "_", "")
				emer_elig_summ_need_temp_shelter = replace(emer_elig_summ_need_temp_shelter, "_", "")
				emer_elig_summ_need_other_shelter = replace(emer_elig_summ_need_other_shelter, "_", "")
				emer_elig_summ_need_utility = replace(emer_elig_summ_need_utility, "_", "")
				emer_elig_summ_need_other = replace(emer_elig_summ_need_other, "_", "")

				emer_elig_summ_need_total = trim(emer_elig_summ_need_total)
				emer_elig_summ_payment = trim(emer_elig_summ_payment)

				emer_elig_summ_adults_in_unit = emer_elig_summ_adults_in_unit * 1
				emer_elig_summ_children_in_unit = emer_elig_summ_children_in_unit * 1

				household_size = emer_elig_summ_adults_in_unit + emer_elig_summ_children_in_unit
				emer_fpg_limit = 0
				emer_inelig_fpg_limit = 0

				'Determine the 200% FPG for household_size
				Call determine_200_percent_of_FPG(emer_program, emer_appl_date, household_size, emer_fpg_limit)
				'Convert emer_fpg_limit to currency format
				emer_fpg_limit = FormatNumber(emer_fpg_limit, 2, -1, 0, -1)

				'Determine the 200% FPG for manual_hh_count
				Call determine_200_percent_of_FPG(emer_program, emer_appl_date, manual_hh_count, emer_inelig_fpg_limit)
				'Convert emer_inelig_fpg_limit to currency format
				emer_inelig_fpg_limit = FormatNumber(emer_inelig_fpg_limit, 2, -1, 0, -1)

			End If
			''TODO - open foreclosure and utility pop-up
		End If

		Call back_to_SELF
	end sub
end class


class snap_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	public elig_version_number
	public elig_version_date
	public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public revw_month
	public hrf_month
	public revw_status
	public revw_type
	public revw_caf_date
	public revw_interview_date
	public hrf_status
	public hrf_doc_date

	public snap_elig_ref_numbs()
	public snap_elig_membs_request_yn()
	public snap_elig_membs_code()
	public snap_elig_membs_status_info()
	public snap_elig_membs_counted()
	public snap_elig_membs_state_food()
	public snap_elig_membs_eligibility()
	public snap_elig_membs_begin_date()
	public snap_elig_membs_budget_cycle()

	public snap_elig_membs_abawd()
	public snap_elig_membs_absence()
	public snap_elig_membs_roomer()
	public snap_elig_membs_boarder()
	public snap_elig_membs_citizenship()
	public snap_elig_membs_citizenship_coop()
	public snap_elig_membs_cmdty()
	public snap_elig_membs_disq()
	public snap_elig_membs_dupl_assist()
	public snap_elig_membs_fraud()
	public snap_elig_membs_eligible_student()
	public snap_elig_membs_institution()
	public snap_elig_membs_mfip_elig()
	public snap_elig_membs_non_applcnt()
	public snap_elig_membs_residence()
	public snap_elig_membs_ssn_coop()
	public snap_elig_membs_unit_memb()
	public snap_elig_membs_work_reg()
	public snap_elig_membs_failed_test()
	public snap_elig_membs_drug_felon_test()

	public snap_expedited
	public snap_uhfs
	public snap_exp_package_includes_month_one
	public snap_exp_package_includes_month_two
	public elig_membs_list
	public inelig_membs_list
	public snap_prorated
	public snap_earned_income_budgeted
	public snap_unearned_income_budgeted
	public snap_shel_costs_budgeted
	public snap_hest_costs_budgeted
	public snap_categorical_eligibility
	public snap_case_appl_withdrawn_test
	public snap_case_applct_elig_test
	public snap_case_comdty_test
	public snap_case_disq_test
	public snap_case_dupl_assist_test
	public snap_case_eligible_person_test
	public snap_case_fail_coop_test
	public snap_case_fail_file_test
	public snap_case_prosp_gross_inc_test
	public snap_case_prosp_net_inc_test
	public snap_case_recert_test
	public snap_case_residence_test
	public snap_case_resource_test
	public snap_case_retro_gross_inc_test
	public snap_case_retro_net_inc_test
	public snap_case_strike_test
	public snap_case_xfer_resource_inc_test
	public snap_case_verif_test
	public snap_case_verif_test_MEMB_ID
	public snap_case_verif_test_ACCT
	public snap_case_verif_test_PACT
	public snap_case_verif_test_ADDR
	public snap_case_verif_test_SECU
	public snap_case_verif_test_RBIC
	public snap_case_verif_test_BUSI
	public snap_case_verif_test_SPON
	public snap_case_verif_test_STIN
	public snap_case_verif_test_UNEA
	public snap_case_verif_test_JOBS
	public snap_case_verif_test_STWK
	public snap_case_verif_test_STRK
	public snap_case_voltry_quit_test
	public snap_case_work_reg_test
	public snap_fail_file_hrf
	public snap_fail_file_sr
	public snap_resource_cash
	public snap_resource_acct
	public snap_resource_secu
	public snap_resource_cars
	public snap_resource_rest
	public snap_resource_other
	public snap_resource_burial
	public snap_resource_spon
	public snap_resource_total
	public snap_resource_max
	public snap_budg_gross_wages
	public snap_budg_self_emp
	public snap_budg_total_earned_inc
	public snap_budg_pa_grant_inc
	public snap_budg_rsdi_inc
	public snap_budg_ssi_inc
	public snap_budg_va_inc
	public snap_budg_uc_wc_inc
	public snap_budg_cses_inc
	public snap_budg_other_unea_inc
	public snap_budg_total_unea_inc
	public snap_budg_schl_inc
	public snap_budg_farm_ofset
	public snap_budg_total_gross_inc
	public snap_budg_max_gross_inc
	public snap_budg_deduct_standard
	public snap_budg_deduct_earned
	public snap_budg_deduct_medical
	public snap_budg_deduct_depndt_care
	public snap_budg_deduct_cses
	public snap_budg_total_deduct
	public snap_budg_net_inc
	public snap_budg_shel_rent_mort
	public snap_budg_shel_prop_tax
	public snap_budg_shel_home_ins
	public snap_budg_shel_electricity
	public snap_budg_shel_heat_ac
	public snap_budg_shel_water_garbage
	public snap_budg_shel_phone
	public snap_budg_shel_other
	public snap_budg_housing_exp_total
	public snap_budg_utilities_exp_total
	public snap_budg_utilities_list
	public snap_budg_shel_total
	public snap_budg_50_perc_net_inc
	public snap_budg_adj_shel_costs
	public snap_budg_max_allow_shel
	public snap_budg_shel_expenses
	' public snap_budg_net_adj_inc
	public snap_budg_max_net_adj_inc
	public snap_benefit_monthly_fs_allot
	public snap_benefit_drug_felon_sanc_amt
	public snap_benefit_amt_already_issued
	public snap_benefit_recoup_amount
	public snap_benefit_benefit_amount
	public snap_benefit_state_food_amt
	public snap_benefit_fed_food_amt
	public snap_benefit_recoup_from_fed_fs
	public snap_benefit_recoup_from_state_fs
	public snap_approved_date
	public snap_date_last_approval
	public snap_curr_prog_status
	public snap_elig_result
	public snap_reporting_status
	public snap_info_source
	public snap_benefit
	public snap_elig_revw_date
	public snap_budget_cycle
	public snap_budg_numb_in_assist_unit
	public adults_recv_snap
	public children_recv_snap
	public snap_budg_total_resources
	public snap_budg_max_resources
	public snap_budg_net_adj_inc
	public snap_bug_30_percent_net_adj_inc
	public snap_budg_thrifty_food_plan
	public snap_benefit_monthly_fs_allotment
	public snap_benefit_prorated_amt
	public snap_benefit_prorated_date
	public snap_benefit_amt
	public snap_exp_criteria_migrant_destitute
	public snap_exp_criteria_resource_100_income_150
	public snap_exp_criteria_resource_income_less_shelter
	public snap_exp_verif_status_postponed
	public snap_exp_verif_status_out_of_state
	public snap_exp_verif_status_all_provided
	public snap_elig_worker_message_one
	public snap_elig_worker_message_two


	public sub read_elig()
		approved_today = False
		approved_version_found = False

		snap_expedited = False
		snap_uhfs = False
		snap_exp_package_includes_month_one = False
		snap_exp_package_includes_month_two = False
		snap_prorated = False
		snap_earned_income_budgeted = False
		snap_unearned_income_budgeted = False
		snap_shel_costs_budgeted = False
		snap_hest_costs_budgeted = False
		snap_categorical_eligibility = ""

		ReDim snap_elig_ref_numbs(0)
		ReDim snap_elig_membs_request_yn(0)
		ReDim snap_elig_membs_code(0)
		ReDim snap_elig_membs_status_info(0)
		ReDim snap_elig_membs_counted(0)
		ReDim snap_elig_membs_state_food(0)
		ReDim snap_elig_membs_eligibility(0)
		ReDim snap_elig_membs_begin_date(0)
		ReDim snap_elig_membs_budget_cycle(0)
		ReDim snap_elig_membs_abawd(0)
		ReDim snap_elig_membs_absence(0)
		ReDim snap_elig_membs_roomer(0)
		ReDim snap_elig_membs_boarder(0)
		ReDim snap_elig_membs_citizenship(0)
		ReDim snap_elig_membs_citizenship_coop(0)
		ReDim snap_elig_membs_cmdty(0)
		ReDim snap_elig_membs_disq(0)
		ReDim snap_elig_membs_dupl_assist(0)
		ReDim snap_elig_membs_fraud(0)
		ReDim snap_elig_membs_eligible_student(0)
		ReDim snap_elig_membs_institution(0)
		ReDim snap_elig_membs_mfip_elig(0)
		ReDim snap_elig_membs_non_applcnt(0)
		ReDim snap_elig_membs_residence(0)
		ReDim snap_elig_membs_ssn_coop(0)
		ReDim snap_elig_membs_unit_memb(0)
		ReDim snap_elig_membs_work_reg(0)
		ReDim snap_elig_membs_failed_test(0)
		ReDim snap_elig_membs_drug_felon_test(0)

		call navigate_to_MAXIS_screen("ELIG", "FS  ")
		EMWriteScreen elig_footer_month, 19, 54
		EMWriteScreen elig_footer_year, 19, 57
		Call find_last_approved_ELIG_version(19, 78, elig_version_number, elig_version_date, elig_version_result, approved_version_found)
		If approved_version_found = True Then
			EMReadScreen approval_date, 8, 3, 14		'this is the actual approval date - not the process date'
			approval_date = DateAdd("d", 0, approval_date)
			If DateDiff("d", date, elig_version_date) = 0 Then approved_today = True
			If elig_footer_month = "10" AND elig_footer_year = "22" then 		'9/10/22 is the day that DHS created background results for MASS CHANGE for SNAP and we will allow this date to be used as the process date
				If DateDiff("d", #9/10/2022#, elig_version_date) = 0 AND DateDiff("d", date, approval_date) = 0 Then approved_today = True
			End If
			If allow_late_note = True Then
				one_week_ago = DateAdd("d", -7, date)
				If DateDiff("d", one_week_ago, elig_version_date) >= 0 Then approved_today = True
			End If
			If developer_mode = True Then approved_today = True			'TESTING OPTION'
		End If
		If approved_today = True Then
			row = 7
			elig_memb_count = 0
			elig_membs_list = ""
			inelig_membs_list = ""
			Do
				EMReadScreen ref_numb, 2, row, 10

				ReDim preserve snap_elig_ref_numbs(elig_memb_count)
				ReDim preserve snap_elig_membs_request_yn(elig_memb_count)
				ReDim preserve snap_elig_membs_code(elig_memb_count)
				ReDim preserve snap_elig_membs_status_info(elig_memb_count)
				ReDim preserve snap_elig_membs_counted(elig_memb_count)
				ReDim preserve snap_elig_membs_state_food(elig_memb_count)
				ReDim preserve snap_elig_membs_eligibility(elig_memb_count)
				ReDim preserve snap_elig_membs_begin_date(elig_memb_count)
				ReDim preserve snap_elig_membs_budget_cycle(elig_memb_count)

				ReDim preserve snap_elig_membs_abawd(elig_memb_count)
				ReDim preserve snap_elig_membs_absence(elig_memb_count)
				ReDim preserve snap_elig_membs_roomer(elig_memb_count)
				ReDim preserve snap_elig_membs_boarder(elig_memb_count)
				ReDim preserve snap_elig_membs_citizenship(elig_memb_count)
				ReDim preserve snap_elig_membs_citizenship_coop(elig_memb_count)
				ReDim preserve snap_elig_membs_cmdty(elig_memb_count)
				ReDim preserve snap_elig_membs_disq(elig_memb_count)
				ReDim preserve snap_elig_membs_dupl_assist(elig_memb_count)
				ReDim preserve snap_elig_membs_fraud(elig_memb_count)
				ReDim preserve snap_elig_membs_eligible_student(elig_memb_count)
				ReDim preserve snap_elig_membs_institution(elig_memb_count)
				ReDim preserve snap_elig_membs_mfip_elig(elig_memb_count)
				ReDim preserve snap_elig_membs_non_applcnt(elig_memb_count)
				ReDim preserve snap_elig_membs_residence(elig_memb_count)
				ReDim preserve snap_elig_membs_ssn_coop(elig_memb_count)
				ReDim preserve snap_elig_membs_unit_memb(elig_memb_count)
				ReDim preserve snap_elig_membs_work_reg(elig_memb_count)
				ReDim preserve snap_elig_membs_failed_test(elig_memb_count)
				ReDim preserve snap_elig_membs_drug_felon_test(elig_memb_count)

				snap_elig_ref_numbs(elig_memb_count) = ref_numb
				EMReadScreen snap_elig_membs_request_yn(elig_memb_count), 1, row, 32
				EMReadScreen snap_elig_membs_code(elig_memb_count), 1, row, 35
				EMReadScreen memb_count, 11, row, 39
				EMReadScreen memb_state_food, 1, row, 50
				EMReadScreen memb_elig, 10, row, 57
				EMReadScreen snap_elig_membs_begin_date(elig_memb_count), 8, row, 68
				EMReadScreen memb_budg_cycle, 1, row, 78

				If snap_elig_membs_code(elig_memb_count) = "A" Then snap_elig_membs_status_info(elig_memb_count) = "Eligible"
				If snap_elig_membs_code(elig_memb_count) = "C" Then snap_elig_membs_status_info(elig_memb_count) = "Citizenship"
				If snap_elig_membs_code(elig_memb_count) = "F" Then snap_elig_membs_status_info(elig_memb_count) = "Fraud, DISQ, Work Reg"
				If snap_elig_membs_code(elig_memb_count) = "D" Then snap_elig_membs_status_info(elig_memb_count) = "Duplicate Assistance"
				If snap_elig_membs_code(elig_memb_count) = "I" Then snap_elig_membs_status_info(elig_memb_count) = "Ineligible"
				If snap_elig_membs_code(elig_memb_count) = "N" Then snap_elig_membs_status_info(elig_memb_count) = "Unit Member"
				If snap_elig_membs_code(elig_memb_count) = "S" Then snap_elig_membs_status_info(elig_memb_count) = "Ineligible Student"
				If snap_elig_membs_code(elig_memb_count) = "U" Then snap_elig_membs_status_info(elig_memb_count) = "Unknown"
				snap_elig_membs_counted(elig_memb_count) = trim(memb_count)
				If memb_state_food = "Y" Then snap_elig_membs_state_food(elig_memb_count) = True
				If memb_state_food = "N" Then snap_elig_membs_state_food(elig_memb_count) = False
				snap_elig_membs_eligibility(elig_memb_count) = trim(memb_elig)
				If memb_budg_cycle = "P" Then snap_elig_membs_budget_cycle(elig_memb_count) = "Prospective"
				If memb_budg_cycle = "R" Then snap_elig_membs_budget_cycle(elig_memb_count) = "Retrospective"
				If snap_elig_membs_eligibility(elig_memb_count) = "ELIGIBLE" Then elig_membs_list = elig_membs_list & "Memb " & snap_elig_ref_numbs(elig_memb_count) & ", "
				If snap_elig_membs_eligibility(elig_memb_count) = "INELIGIBLE" Then inelig_membs_list = inelig_membs_list & "Memb " & snap_elig_ref_numbs(elig_memb_count) & ", "

				Call write_value_and_transmit("X", row, 5)

				EMReadScreen memb_abawd, 			6, 6, 20
				EMReadScreen memb_absence, 			6, 7, 20
				EMReadScreen memb_roomer, 			6, 8, 20
				EMReadScreen memb_boarder, 			6, 9, 20
				EMReadScreen memb_citizenship, 		6, 10, 20
				EMReadScreen memb_citizenship_coop, 6, 11, 20
				EMReadScreen memb_cmdty, 			6, 12, 20
				EMReadScreen memb_disq,				6, 13, 20
				EMReadScreen memb_dupl_assist, 		6, 14, 20

				snap_elig_membs_abawd(elig_memb_count) = trim(memb_abawd)
				snap_elig_membs_absence(elig_memb_count) = trim(memb_absence)
				snap_elig_membs_roomer(elig_memb_count) = trim(memb_roomer)
				snap_elig_membs_boarder(elig_memb_count) = trim(memb_boarder)
				snap_elig_membs_citizenship(elig_memb_count) = trim(memb_citizenship)
				snap_elig_membs_citizenship_coop(elig_memb_count) = trim(memb_citizenship_coop)
				snap_elig_membs_cmdty(elig_memb_count) = trim(memb_cmdty)
				snap_elig_membs_disq(elig_memb_count) = trim(memb_disq)
				snap_elig_membs_dupl_assist(elig_memb_count) = trim(memb_dupl_assist)

				EMReadScreen memb_fraud, 			6, 6, 54
				EMReadScreen memb_eligible_student, 6, 7, 54
				EMReadScreen memb_institution, 		6, 8, 54
				EMReadScreen memb_mfip_elig, 		6, 9, 54
				EMReadScreen memb_non_applcnt, 		6, 10, 54
				EMReadScreen memb_residence, 		6, 11, 54
				EMReadScreen memb_ssn_coop, 		6, 12, 54
				EMReadScreen memb_unit_memb, 		6, 13, 54
				EMReadScreen memb_work_reg, 		6, 14, 54

				snap_elig_membs_fraud(elig_memb_count) = trim(memb_fraud)
				snap_elig_membs_eligible_student(elig_memb_count) = trim(memb_eligible_student)
				snap_elig_membs_institution(elig_memb_count) = trim(memb_institution)
				snap_elig_membs_mfip_elig(elig_memb_count) = trim(memb_mfip_elig)
				snap_elig_membs_non_applcnt(elig_memb_count) = trim(memb_non_applcnt)
				snap_elig_membs_residence(elig_memb_count) = trim(memb_residence)
				snap_elig_membs_ssn_coop(elig_memb_count) = trim(memb_ssn_coop)
				snap_elig_membs_unit_memb(elig_memb_count) = trim(memb_unit_memb)
				snap_elig_membs_work_reg(elig_memb_count) = trim(memb_work_reg)

				snap_elig_membs_failed_test(elig_memb_count) = False

				If snap_elig_membs_abawd(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_absence(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_roomer(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_boarder(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_citizenship(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_citizenship_coop(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_cmdty(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_disq(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_dupl_assist(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_fraud(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_eligible_student(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_institution(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_mfip_elig(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_non_applcnt(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_residence(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_ssn_coop(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_unit_memb(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				If snap_elig_membs_work_reg(elig_memb_count) = "FAILED" Then snap_elig_membs_failed_test(elig_memb_count) = True
				transmit


				elig_memb_count = elig_memb_count + 1
				row = row + 1
				If row = 18 Then
					PF8
					EMReadScreen end_of_list, 26, 24, 5
					If end_of_list = "NO MORE MEMBERS TO DISPLAY" Then Exit Do
					row = 7
				End If
				EMReadScreen next_ref_numb, 2, row, 10
			Loop until next_ref_numb = "  "

			elig_membs_list = trim(elig_membs_list)
			inelig_membs_list = trim(inelig_membs_list)
			If right(elig_membs_list, 1) = "," Then elig_membs_list = left(elig_membs_list, len(elig_membs_list)-1)
			If right(inelig_membs_list, 1) = "," Then inelig_membs_list = left(inelig_membs_list, len(inelig_membs_list)-1)

			transmit 		'FSCR
			EMReadScreen case_expedited_indicator, 9, 4, 3
			If case_expedited_indicator = "EXPEDITED" Then snap_expedited = True
			EMReadScreen case_uhfs_indicator, 11, 5, 4
			If case_uhfs_indicator = "UNCLE HARRY" Then snap_uhfs = True

			EMReadScreen snap_case_appl_withdrawn_test, 	6, 7, 9
			EMReadScreen snap_case_applct_elig_test, 		6, 8, 9
			EMReadScreen snap_case_comdty_test, 			6, 9, 9
			EMReadScreen snap_case_disq_test, 				6, 10, 9
			EMReadScreen snap_case_dupl_assist_test, 		6, 11, 9
			EMReadScreen snap_case_eligible_person_test, 	6, 12, 9
			EMReadScreen snap_case_fail_coop_test, 			6, 13, 9
			EMReadScreen snap_case_fail_file_test, 			6, 14, 9
			EMReadScreen snap_case_prosp_gross_inc_test, 	6, 15, 9
			EMReadScreen snap_case_prosp_net_inc_test, 		6, 16, 9
			snap_case_appl_withdrawn_test = trim(snap_case_appl_withdrawn_test)
			snap_case_applct_elig_test = trim(snap_case_applct_elig_test)
			snap_case_comdty_test = trim(snap_case_comdty_test)
			snap_case_disq_test = trim(snap_case_disq_test)
			snap_case_dupl_assist_test = trim(snap_case_dupl_assist_test)
			snap_case_eligible_person_test = trim(snap_case_eligible_person_test)
			snap_case_fail_coop_test = trim(snap_case_fail_coop_test)
			snap_case_fail_file_test = trim(snap_case_fail_file_test)
			snap_case_prosp_gross_inc_test = trim(snap_case_prosp_gross_inc_test)
			snap_case_prosp_net_inc_test = trim(snap_case_prosp_net_inc_test)

			EMReadScreen snap_case_recert_test, 			6, 7, 49
			EMReadScreen snap_case_residence_test, 			6, 8, 49
			EMReadScreen snap_case_resource_test, 			6, 9, 49
			EMReadScreen snap_case_retro_gross_inc_test, 	6, 10, 49
			EMReadScreen snap_case_retro_net_inc_test, 		6, 11, 49
			EMReadScreen snap_case_strike_test, 			6, 12, 49
			EMReadScreen snap_case_xfer_resource_inc_test, 	6, 13, 49
			EMReadScreen snap_case_verif_test, 				6, 14, 49
			EMReadScreen snap_case_voltry_quit_test, 		6, 15, 49
			EMReadScreen snap_case_work_reg_test, 			6, 16, 49
			snap_case_recert_test = trim(snap_case_recert_test)
			snap_case_residence_test = trim(snap_case_residence_test)
			snap_case_resource_test = trim(snap_case_resource_test)
			snap_case_retro_gross_inc_test = trim(snap_case_retro_gross_inc_test)
			snap_case_retro_net_inc_test = trim(snap_case_retro_net_inc_test)
			snap_case_strike_test = trim(snap_case_strike_test)
			snap_case_xfer_resource_inc_test = trim(snap_case_xfer_resource_inc_test)
			snap_case_verif_test = trim(snap_case_verif_test)
			snap_case_voltry_quit_test = trim(snap_case_voltry_quit_test)
			snap_case_work_reg_test = trim(snap_case_work_reg_test)

			Call write_value_and_transmit("X", 14, 4)		''Fail to File Detail
			EMReadScreen snap_fail_file_hrf, 6, 10, 32
			EMReadScreen snap_fail_file_sr, 6, 11, 32
			transmit
			snap_fail_file_hrf = trim(snap_fail_file_hrf)
			snap_fail_file_sr = trim(snap_fail_file_sr)

			Call write_value_and_transmit("X", 14, 4)		''Resource Detail
			EMReadScreen snap_resource_cash, 	10, 8, 47
			EMReadScreen snap_resource_acct, 	10, 9, 47
			EMReadScreen snap_resource_secu, 	10, 10, 47
			EMReadScreen snap_resource_cars, 	10, 11, 47
			EMReadScreen snap_resource_rest, 	10, 12, 47
			EMReadScreen snap_resource_other, 	10, 13, 47
			EMReadScreen snap_resource_burial, 	10, 14, 47
			EMReadScreen snap_resource_spon, 	10, 15, 47
			EMReadScreen snap_resource_total, 	10, 17, 47
			EMReadScreen snap_resource_max, 	10, 18, 47
			transmit

			snap_resource_cash = trim(snap_resource_cash)
			snap_resource_acct = trim(snap_resource_acct)
			snap_resource_secu = trim(snap_resource_secu)
			snap_resource_cars = trim(snap_resource_cars)
			snap_resource_rest = trim(snap_resource_rest)
			snap_resource_other = trim(snap_resource_other)
			snap_resource_burial = trim(snap_resource_burial)
			snap_resource_spon = trim(snap_resource_spon)
			snap_resource_total = trim(snap_resource_total)
			snap_resource_max = trim(snap_resource_max)

			If snap_case_verif_test = "FAILED" Then
				Call write_value_and_transmit("X", 14, 44)
				EMReadScreen snap_case_verif_test_MEMB_ID, 6, 7, 30
				EMReadScreen snap_case_verif_test_ACCT, 6, 8, 30
				EMReadScreen snap_case_verif_test_PACT, 6, 9, 30
				EMReadScreen snap_case_verif_test_ADDR, 6, 10, 30
				EMReadScreen snap_case_verif_test_SECU, 6, 11, 30
				EMReadScreen snap_case_verif_test_RBIC, 6, 12, 30
				EMReadScreen snap_case_verif_test_BUSI, 6, 13, 30
				EMReadScreen snap_case_verif_test_SPON, 6, 14, 30
				EMReadScreen snap_case_verif_test_STIN, 6, 15, 30
				EMReadScreen snap_case_verif_test_UNEA, 6, 16, 30
				EMReadScreen snap_case_verif_test_JOBS, 6, 17, 30
				EMReadScreen snap_case_verif_test_STWK, 6, 18, 30
				EMReadScreen snap_case_verif_test_STRK, 6, 19, 30
				transmit

				snap_case_verif_test_MEMB_ID = trim(snap_case_verif_test_MEMB_ID)
				snap_case_verif_test_ACCT = trim(snap_case_verif_test_ACCT)
				snap_case_verif_test_PACT = trim(snap_case_verif_test_PACT)
				snap_case_verif_test_ADDR = trim(snap_case_verif_test_ADDR)
				snap_case_verif_test_SECU = trim(snap_case_verif_test_SECU)
				snap_case_verif_test_RBIC = trim(snap_case_verif_test_RBIC)
				snap_case_verif_test_BUSI = trim(snap_case_verif_test_BUSI)
				snap_case_verif_test_SPON = trim(snap_case_verif_test_SPON)
				snap_case_verif_test_STIN = trim(snap_case_verif_test_STIN)
				snap_case_verif_test_UNEA = trim(snap_case_verif_test_UNEA)
				snap_case_verif_test_JOBS = trim(snap_case_verif_test_JOBS)
				snap_case_verif_test_STWK = trim(snap_case_verif_test_STWK)
				snap_case_verif_test_STRK = trim(snap_case_verif_test_STRK)
			End If

			transmit 		'FSB1
			EMReadScreen snap_budg_gross_wages, 		10, 5, 31
			EMReadScreen snap_budg_self_emp, 			10, 6, 31
			EMReadScreen snap_budg_total_earned_inc, 	10, 8, 31

			snap_budg_gross_wages = trim(snap_budg_gross_wages)
			snap_budg_self_emp = trim(snap_budg_self_emp)
			snap_budg_total_earned_inc = trim(snap_budg_total_earned_inc)
			If snap_budg_total_earned_inc = "" Then snap_budg_total_earned_inc = "0.00"


			EMReadScreen snap_budg_pa_grant_inc, 	10, 10, 31
			EMReadScreen snap_budg_rsdi_inc, 		10, 11, 31
			EMReadScreen snap_budg_ssi_inc, 		10, 12, 31
			EMReadScreen snap_budg_va_inc, 			10, 13, 31
			EMReadScreen snap_budg_uc_wc_inc, 		10, 14, 31
			EMReadScreen snap_budg_cses_inc, 		10, 15, 31
			EMReadScreen snap_budg_other_unea_inc, 	10, 16, 31
			EMReadScreen snap_budg_total_unea_inc, 	10, 18, 31

			snap_budg_pa_grant_inc = trim(snap_budg_pa_grant_inc)
			snap_budg_rsdi_inc = trim(snap_budg_rsdi_inc)
			snap_budg_ssi_inc = trim(snap_budg_ssi_inc)
			snap_budg_va_inc = trim(snap_budg_va_inc)
			snap_budg_uc_wc_inc = trim(snap_budg_uc_wc_inc)
			snap_budg_cses_inc = trim(snap_budg_cses_inc)
			snap_budg_other_unea_inc = trim(snap_budg_other_unea_inc)
			snap_budg_total_unea_inc = trim(snap_budg_total_unea_inc)
			If snap_budg_total_unea_inc = "" Then snap_budg_total_unea_inc = "0.00"

			EMReadScreen snap_budg_schl_inc, 			10, 5, 71
			EMReadScreen snap_budg_farm_ofset, 			10, 6, 71
			EMReadScreen snap_budg_total_gross_inc, 	10, 7, 71
			EMReadScreen snap_budg_max_gross_inc, 		10, 8, 71

			EMReadScreen snap_budg_deduct_standard, 	10, 10, 71
			EMReadScreen snap_budg_deduct_earned, 		10, 11, 71
			EMReadScreen snap_budg_deduct_medical, 		10, 12, 71
			EMReadScreen snap_budg_deduct_depndt_care, 	10, 13, 71
			EMReadScreen snap_budg_deduct_cses, 		10, 14, 71
			EMReadScreen snap_budg_total_deduct, 		10, 16, 71

			EMReadScreen snap_budg_net_inc, 			10, 18, 71

			snap_budg_schl_inc = trim(snap_budg_schl_inc)
			snap_budg_farm_ofset = trim(snap_budg_farm_ofset)
			snap_budg_total_gross_inc = trim(snap_budg_total_gross_inc)
			snap_budg_max_gross_inc = trim(snap_budg_max_gross_inc)
			snap_budg_deduct_standard = trim(snap_budg_deduct_standard)
			snap_budg_deduct_earned = trim(snap_budg_deduct_earned)
			snap_budg_deduct_medical = trim(snap_budg_deduct_medical)
			snap_budg_deduct_depndt_care = trim(snap_budg_deduct_depndt_care)
			snap_budg_deduct_cses = trim(snap_budg_deduct_cses)
			snap_budg_total_deduct = trim(snap_budg_total_deduct)
			snap_budg_net_inc = trim(snap_budg_net_inc)

			transmit 		'FSB2
			EMReadScreen snap_budg_shel_rent_mort, 		10, 5, 27
			EMReadScreen snap_budg_shel_prop_tax, 		10, 6, 27
			EMReadScreen snap_budg_shel_home_ins, 		10, 7, 27
			EMReadScreen snap_budg_shel_electricity, 	10, 8, 27
			EMReadScreen snap_budg_shel_heat_ac, 		10, 9, 27
			EMReadScreen snap_budg_shel_water_garbage, 	10, 10, 27
			EMReadScreen snap_budg_shel_phone, 			10, 11, 27
			EMReadScreen snap_budg_shel_other, 			10, 12, 27
			EMReadScreen snap_budg_shel_total, 			10, 14, 27
			EMReadScreen snap_budg_50_perc_net_inc, 	10, 15, 27
			EMReadScreen snap_budg_adj_shel_costs, 		10, 17, 27

			snap_budg_shel_rent_mort = trim(snap_budg_shel_rent_mort)
			snap_budg_shel_prop_tax = trim(snap_budg_shel_prop_tax)
			snap_budg_shel_home_ins = trim(snap_budg_shel_home_ins)
			snap_budg_shel_electricity = trim(snap_budg_shel_electricity)
			snap_budg_shel_heat_ac = trim(snap_budg_shel_heat_ac)
			snap_budg_shel_water_garbage = trim(snap_budg_shel_water_garbage)
			snap_budg_shel_phone = trim(snap_budg_shel_phone)
			snap_budg_shel_other = trim(snap_budg_shel_other)
			snap_budg_shel_total = trim(snap_budg_shel_total)
			snap_budg_50_perc_net_inc = trim(snap_budg_50_perc_net_inc)
			snap_budg_adj_shel_costs = trim(snap_budg_adj_shel_costs)

			If snap_budg_shel_rent_mort = "" Then snap_budg_shel_rent_mort = 0
			If snap_budg_shel_prop_tax = "" Then snap_budg_shel_prop_tax = 0
			If snap_budg_shel_home_ins = "" Then snap_budg_shel_home_ins = 0
			If snap_budg_shel_electricity = "" Then snap_budg_shel_electricity = 0
			If snap_budg_shel_heat_ac = "" Then snap_budg_shel_heat_ac = 0
			If snap_budg_shel_water_garbage = "" Then snap_budg_shel_water_garbage = 0
			If snap_budg_shel_phone = "" Then snap_budg_shel_phone = 0
			If snap_budg_shel_other = "" Then snap_budg_shel_other = 0

			snap_budg_shel_rent_mort = snap_budg_shel_rent_mort*1
			snap_budg_shel_prop_tax = snap_budg_shel_prop_tax*1
			snap_budg_shel_home_ins = snap_budg_shel_home_ins*1
			snap_budg_shel_electricity = snap_budg_shel_electricity*1
			snap_budg_shel_heat_ac = snap_budg_shel_heat_ac*1
			snap_budg_shel_water_garbage = snap_budg_shel_water_garbage*1
			snap_budg_shel_phone = snap_budg_shel_phone*1
			snap_budg_shel_other = snap_budg_shel_other*1

			snap_budg_housing_exp_total = snap_budg_shel_rent_mort + snap_budg_shel_prop_tax + snap_budg_shel_home_ins + snap_budg_shel_other
			snap_budg_utilities_exp_total = snap_budg_shel_electricity + snap_budg_shel_heat_ac + snap_budg_shel_phone

			snap_budg_utilities_list = "None"
			If snap_budg_shel_heat_ac <> 0 Then
				snap_budg_utilities_list = "Heat and AC"
			ElseIf snap_budg_shel_electricity <> 0 and snap_budg_shel_phone <> 0 Then
				snap_budg_utilities_list = "Electricity and Phone"
			ElseIf snap_budg_shel_electricity <> 0 Then
				snap_budg_utilities_list = "Electricity"
			ElseIf snap_budg_shel_phone <> 0 Then
				snap_budg_utilities_list = "Phone"
			End If
			snap_budg_housing_exp_total = FormatNumber(snap_budg_housing_exp_total, 2, -1, 0, -1)
			snap_budg_utilities_exp_total = FormatNumber(snap_budg_utilities_exp_total, 2, -1, 0, -1)

			snap_budg_shel_rent_mort = FormatNumber(snap_budg_shel_rent_mort, 2, -1, 0, -1)
			snap_budg_shel_prop_tax = FormatNumber(snap_budg_shel_prop_tax, 2, -1, 0, -1)
			snap_budg_shel_home_ins = FormatNumber(snap_budg_shel_home_ins, 2, -1, 0, -1)
			snap_budg_shel_electricity = FormatNumber(snap_budg_shel_electricity, 2, -1, 0, -1)
			snap_budg_shel_heat_ac = FormatNumber(snap_budg_shel_heat_ac, 2, -1, 0, -1)
			snap_budg_shel_water_garbage = FormatNumber(snap_budg_shel_water_garbage, 2, -1, 0, -1)
			snap_budg_shel_phone = FormatNumber(snap_budg_shel_phone, 2, -1, 0, -1)
			snap_budg_shel_other = FormatNumber(snap_budg_shel_other, 2, -1, 0, -1)

			EMReadScreen snap_budg_max_allow_shel, 			10, 5, 71
			EMReadScreen snap_budg_shel_expenses, 			10, 6, 71
			' EMReadScreen fsb2_net_adj_inc, 				10, 7, 71
			EMReadScreen snap_budg_max_net_adj_inc, 		10, 8, 71
			EMReadScreen snap_benefit_monthly_fs_allot, 	10, 10, 71
			EMReadScreen snap_benefit_drug_felon_sanc_amt, 	10, 12, 71
			EMReadScreen snap_benefit_amt_already_issued, 	 10, 13, 71
			EMReadScreen snap_benefit_recoup_amount, 		10, 14, 71
			EMReadScreen snap_benefit_benefit_amount, 		10, 16, 71
			EMReadScreen snap_benefit_state_food_amt, 		10, 17, 71
			EMReadScreen snap_benefit_fed_food_amt, 		10, 18, 71

			snap_budg_max_allow_shel = trim(snap_budg_max_allow_shel)
			snap_budg_shel_expenses = trim(snap_budg_shel_expenses)

			If snap_budg_shel_expenses <> "" Then
				numb_snap_budg_shel_expenses = snap_budg_shel_expenses*1
				numb_snap_budg_max_allow_shel = snap_budg_max_allow_shel*1
				If numb_snap_budg_shel_expenses > numb_snap_budg_max_allow_shel Then
					snap_budg_max_allow_shel = ""
				End If
			End If
			' fsb2_net_adj_inc = trim(fsb2_net_adj_inc)
			snap_budg_max_net_adj_inc = trim(snap_budg_max_net_adj_inc)
			snap_benefit_monthly_fs_allot = trim(snap_benefit_monthly_fs_allot)
			If snap_benefit_monthly_fs_allot = "" Then snap_benefit_monthly_fs_allot = "0.00"
			snap_benefit_drug_felon_sanc_amt = trim(snap_benefit_drug_felon_sanc_amt)
			snap_benefit_amt_already_issued = trim(snap_benefit_amt_already_issued)
			snap_benefit_recoup_amount = trim(snap_benefit_recoup_amount)
			snap_benefit_benefit_amount = trim(snap_benefit_benefit_amount)
			snap_benefit_state_food_amt = trim(snap_benefit_state_food_amt)
			snap_benefit_fed_food_amt = trim(snap_benefit_fed_food_amt)


			Call write_value_and_transmit("X", 14, 4)		''Resource Detail
			row = 8
			Do
				EMReadScreen ref_numb, 2, row, 12

				For case_memb = 0 to UBound(snap_elig_ref_numbs)
					If ref_numb = snap_elig_ref_numbs(case_memb) Then
						EMReadScreen memb_drug_felon_test, 6, row, 64
						snap_elig_membs_drug_felon_test(case_memb) = trim(memb_drug_felon_test)
					End If
				Next

				row = row + 1
				EMReadScreen next_ref_numb, 2, row, 12
			Loop until next_ref_numb = "  "
			transmit

			Call write_value_and_transmit("X", 14, 4)		''Resource Detail
			EMReadScreen snap_benefit_recoup_from_fed_fs, 10, 5, 51
			EMReadScreen snap_benefit_recoup_from_state_fs, 10, 7, 51

			snap_benefit_recoup_from_fed_fs = trim(snap_benefit_recoup_from_fed_fs)
			snap_benefit_recoup_from_state_fs = trim(snap_benefit_recoup_from_state_fs)

			transmit

			transmit 		'FSSM
			EMReadScreen snap_approved_date, 			8, 3, 14
			EMReadScreen snap_date_last_approval, 		8, 5, 31
			EMReadScreen snap_curr_prog_status, 		10, 6, 31
			EMReadScreen snap_elig_result, 				10, 7, 31
			EMReadScreen snap_reporting_status, 		12, 8, 31
			EMReadScreen snap_info_source, 				4, 9, 31
			EMReadScreen snap_benefit, 					12, 10, 31
			EMReadScreen snap_elig_revw_date, 			8, 11, 31
			EMReadScreen snap_budget_cycle, 			5, 12, 31
			EMReadScreen snap_budg_numb_in_assist_unit, 2, 13, 31

			EMReadScreen snap_budg_total_resources, 		10, 5, 71
			EMReadScreen snap_budg_max_resources, 			10, 6, 71
			EMReadScreen snap_budg_net_adj_inc, 			10, 7, 71
			EMReadScreen snap_benefit_monthly_fs_allotment, 10, 8, 71
			EMReadScreen snap_benefit_prorated_amt, 		10, 9, 71
			EMReadScreen snap_benefit_prorated_date,		8, 9, 58
			EMReadScreen snap_benefit_amt, 					10, 13, 71

			snap_approved_date = trim(snap_approved_date)
			snap_date_last_approval = trim(snap_date_last_approval)
			snap_curr_prog_status = trim(snap_curr_prog_status)
			snap_elig_result = trim(snap_elig_result)
			snap_reporting_status = trim(snap_reporting_status)
			snap_info_source = trim(snap_info_source)
			snap_benefit = trim(snap_benefit)
			snap_elig_revw_date = trim(snap_elig_revw_date)
			snap_budget_cycle = trim(snap_budget_cycle)
			snap_budg_numb_in_assist_unit = trim(snap_budg_numb_in_assist_unit)
			snap_budg_total_resources = trim(snap_budg_total_resources)
			snap_budg_max_resources = trim(snap_budg_max_resources)
			snap_budg_net_adj_inc = trim(snap_budg_net_adj_inc)
			snap_benefit_monthly_fs_allotment = trim(snap_benefit_monthly_fs_allotment)
			snap_benefit_prorated_amt = trim(snap_benefit_prorated_amt)
			snap_benefit_prorated_date = trim(snap_benefit_prorated_date)
			snap_benefit_amt = trim(snap_benefit_amt)

			If snap_budg_net_adj_inc = "" Then snap_budg_net_adj_inc = 0
			snap_budg_net_adj_inc = snap_budg_net_adj_inc*1
			snap_bug_30_percent_net_adj_inc = .3 * snap_budg_net_adj_inc
			snap_bug_30_percent_net_adj_inc = snap_bug_30_percent_net_adj_inc + 1
			snap_bug_30_percent_net_adj_inc = FormatNumber(snap_bug_30_percent_net_adj_inc, 0, -1, 0, -1)
			snap_budg_net_adj_inc = FormatNumber(snap_budg_net_adj_inc, 2, -1, 0, -1)

			If snap_budg_numb_in_assist_unit = "" Then snap_budg_numb_in_assist_unit = 0
			snap_budg_numb_in_assist_unit = snap_budg_numb_in_assist_unit*1
			Call determine_thrifty_food_plan(elig_footer_month, elig_footer_year, snap_budg_numb_in_assist_unit, snap_budg_thrifty_food_plan)
			snap_budg_thrifty_food_plan = snap_budg_thrifty_food_plan & ""

			EMReadScreen fssm_expedited_info_exists, 16, 14, 44
			If fssm_expedited_info_exists = "EXPEDITED STATUS" Then
				Call write_value_and_transmit("X", 14, 72)		''Resource Detail
				EMReadScreen exp_status_issuance_on_or_before_15th, 1, 3, 5
				EMReadScreen exp_status_issuance_after_15th, 1, 5, 5
				EMReadScreen exp_status_issuance_app_month_fs_denial, 1, 9, 5

				EMReadScreen snap_exp_criteria_migrant_destitute, 1, 15, 5
				EMReadScreen snap_exp_criteria_resource_100_income_150, 1, 16, 5
				EMReadScreen snap_exp_criteria_resource_income_less_shelter, 1, 19, 5

				EMReadScreen snap_exp_verif_status_postponed, 1, 15, 52
				EMReadScreen snap_exp_verif_status_out_of_state, 1, 17, 52
				EMReadScreen snap_exp_verif_status_all_provided, 1, 19, 52
				transmit

				If exp_status_issuance_on_or_before_15th = "X" Then snap_exp_package_includes_month_one = True
				If exp_status_issuance_after_15th = "X" Then
					snap_exp_package_includes_month_one = True
					snap_exp_package_includes_month_two = True
				End If
				If exp_status_issuance_app_month_fs_denial = "X" Then snap_exp_package_includes_month_two = True

				If snap_exp_criteria_migrant_destitute = "X" Then snap_exp_criteria_migrant_destitute = True
				If snap_exp_criteria_migrant_destitute = " " Then snap_exp_criteria_migrant_destitute = False
				If snap_exp_criteria_resource_100_income_150 = "X" Then snap_exp_criteria_resource_100_income_150 = True
				If snap_exp_criteria_resource_100_income_150 = " " Then snap_exp_criteria_resource_100_income_150 = False
				If snap_exp_criteria_resource_income_less_shelter = "X" Then snap_exp_criteria_resource_income_less_shelter = True
				If snap_exp_criteria_resource_income_less_shelter = " " Then snap_exp_criteria_resource_income_less_shelter = False

				If snap_exp_verif_status_postponed = "X" Then snap_exp_verif_status_postponed = True
				If snap_exp_verif_status_postponed = " " Then snap_exp_verif_status_postponed = False
				If snap_exp_verif_status_out_of_state = "X" Then snap_exp_verif_status_out_of_state = True
				If snap_exp_verif_status_out_of_state = " " Then snap_exp_verif_status_out_of_state = False
				If snap_exp_verif_status_all_provided = "X" Then snap_exp_verif_status_all_provided = True
				If snap_exp_verif_status_all_provided = " " Then snap_exp_verif_status_all_provided = False
			End If

			EMReadScreen snap_elig_worker_message_one, 80, 17, 1
			EMReadScreen snap_elig_worker_message_two, 80, 18, 1

			snap_elig_worker_message_one = trim(snap_elig_worker_message_one)
			snap_elig_worker_message_two = trim(snap_elig_worker_message_two)

			If snap_budg_total_earned_inc <> "" Then snap_earned_income_budgeted = True
			If snap_budg_total_unea_inc <> "" Then snap_unearned_income_budgeted = True
			If snap_budg_shel_rent_mort <> "" or snap_budg_shel_prop_tax <> "" or snap_budg_shel_home_ins <> "" or snap_budg_shel_other <> ""Then snap_shel_costs_budgeted = True
			If snap_budg_shel_electricity <> "" or snap_budg_shel_heat_ac <> "" or snap_budg_shel_water_garbage <> "" or snap_budg_shel_phone <> ""Then snap_hest_costs_budgeted = True
			' categorical_eligibility = ""
		End If

		Call Back_to_SELF
	End sub
end class

class hc_eligibility_detail
	public elig_footer_month
	public elig_footer_year
	' public elig_version_number
	' public elig_version_date
	' public elig_version_result
	public approved_today
	public approved_version_found
	public approval_date
	public revw_month
	public hrf_month
	public revw_status
	public revw_type
	public revw_caf_date
	public revw_interview_date
	public hrf_status
	public hrf_doc_date

	public hc_elig_ref_numbs()
	public hc_elig_full_name()
	public hc_prog_elig_appd()
	public hc_prog_elig_major_program()
	public hc_prog_elig_eligibility_result()
	public hc_prog_elig_status()
	public hc_prog_elig_app_indc()
	public hc_prog_elig_magi_excempt()
	public hc_prog_elig_process_date()
	public hc_prog_elig_source_of_info()
	public hc_prog_elig_responsible_county()
	public hc_prog_elig_servicing_county()
	public hc_prog_elig_test_application_withdrawn()
	public hc_prog_elig_test_application_process_incomplete()
	public hc_prog_elig_test_no_new_prog_eligibility()
	public hc_prog_elig_test_assistance_unit()
	public hc_prog_elig_worker_msg_one()
	public hc_prog_elig_worker_msg_two()
	public hc_prog_elig_elig_type()
	public hc_prog_elig_elig_standard()
	public hc_prog_elig_method()
	public hc_prog_elig_waiver()
	public hc_prog_elig_waiver_detail()
	public hc_prog_elig_total_net_income()
	public hc_prog_elig_standard()
	public hc_prog_elig_excess_income()
	public hc_prog_elig_test_absence()
	public hc_prog_elig_test_assets()
	public hc_prog_elig_test_citizenship()
	public hc_prog_elig_test_coop()
	public hc_prog_elig_test_correctional_faci()
	public hc_prog_elig_test_death()
	public hc_prog_elig_test_elig_other_prog()
	public hc_prog_elig_test_fail_file()
	public hc_prog_elig_test_IMD()
	public hc_prog_elig_test_uncompensated_transfer()
	public hc_prog_elig_test_income()
	public hc_prog_elig_test_medicare_elig()
	public hc_prog_elig_test_MNSure_system()
	public hc_prog_elig_test_Obligation_one_mo()
	public hc_prog_elig_test_obligation_six_mo()
	public hc_prog_elig_test_other_health_ins()
	public hc_prog_elig_test_parent()
	public hc_prog_elig_test_residence()
	public hc_prog_elig_test_verif()
	public hc_prog_elig_test_withdrawn()
	public hc_prog_elig_test_coop_pben_cash()
	public hc_prog_elig_test_coop_pben_smrt()
	public hc_prog_elig_test_coop_pben()
	public hc_prog_elig_test_coop_fail_provide_info()
	public hc_prog_elig_test_coop_IEVS()
	public hc_prog_elig_test_coop_medical_support()
	public hc_prog_elig_test_coop_other_health_ins()
	public hc_prog_elig_test_coop_SSN()
	public hc_prog_elig_test_coop_third_party_liability()
	public hc_prog_elig_test_fail_file_HRF()
	public hc_prog_elig_test_fail_file_IR()
	public hc_prog_elig_test_fail_file_AR()
	public hc_prog_elig_test_fail_file_ER()
	public hc_prog_elig_test_fail_file_quarterly_TYMA()
	public hc_prog_elig_test_verif_ACCT()
	public hc_prog_elig_test_verif_BUSI()
	public hc_prog_elig_test_verif_JOBS()
	public hc_prog_elig_test_verif_IMIG_status()
	public hc_prog_elig_test_verif_LUMP()
	public hc_prog_elig_test_verif_OTHR()
	public hc_prog_elig_test_verif_PBEN()
	public hc_prog_elig_test_verif_PREG()
	public hc_prog_elig_test_verif_RBIC()
	public hc_prog_elig_test_verif_REST()
	public hc_prog_elig_test_verif_SECU()
	public hc_prog_elig_test_verif_SPON()
	public hc_prog_elig_test_verif_TRAN()
	public hc_prog_elig_test_verif_UNEA()
	public hc_prog_elig_test_verif_cit_id()
	public hc_prog_elig_test_verif_CARS()
	public hc_prog_elig_hh_size()
	public hc_prog_elig_members_whose_income_counts()
	public hc_prog_elig_members_whose_income_counts_list()
	public hc_prog_elig_PTMA()
	public hc_prog_elig_elig_standard_percent()
	public hc_prog_elig_basis()
	public hc_budget_type()
	public hc_prog_elig_budg_gross_unearned()
	public hc_prog_elig_budg_excluded_unearned()
	public hc_prog_list_all_income()
	public hc_prog_elig_budg_unearned_deduction()
	public hc_prog_elig_budg_net_unearned_income()
	public hc_prog_elig_budg_gross_earned()
	public hc_prog_elig_budg_excluded_earned()
	public hc_prog_elig_budg_work_exp_deduction()
	public hc_prog_elig_budg_earned_disregard()
	public hc_prog_elig_budg_dependent_care()
	public hc_prog_elig_budg_earned_deduction()
	public hc_prog_elig_budg_net_earned_income()
	public hc_prog_elig_budg_child_sup_deduction()
	public hc_prog_elig_budg_deemed_income()
	public hc_prog_elig_budg_total_net_income()
	public hc_prog_elig_budg_income_standard()
	public hc_prog_elig_budg_spenddown()
	public hc_prog_elig_budg_transfer_penalty()
	public hc_prog_elig_budg_total_liability()
	public hc_prog_elig_budg_deemed_earned()
	public hc_prog_elig_budg_countable_earned_income()
	public hc_prog_elig_budg_subtotal_countable_income()
	public hc_prog_elig_budg_va_aid_attendincome()
	public hc_prog_elig_budg_total_countable_income()
	public hc_prog_elig_budg_LTC_exclusions()
	public hc_prog_elig_budg_medicare_premium()
	public hc_prog_elig_budg_maint_needs_allowance()
	public hc_prog_elig_budg_guardian_rep_payee_fee()
	public hc_prog_elig_budg_spousal_allocation()
	public hc_prog_elig_budg_family_allocation()
	public hc_prog_elig_budg_health_ins_premium()
	public hc_prog_elig_budg_other_medical_expense()
	public hc_prog_elig_budg_SSI_1611_benefit()
	public hc_prog_elig_budg_other_deductions()
	public hc_prog_elig_budg_waiver_obligation()
	public hc_prog_elig_budg_person_clothing_needs()
	public hc_prog_elig_budg_LTC_spenddown()
	public hc_prog_elig_budg_medical_spenddown()
	public hc_prog_elig_budg_cola()
	public hc_prog_elig_budg_percent_of_fpg()
	public hc_prog_elig_budg_counted_income_for_prem_calc()
	public hc_prog_elig_budg_premium_percent()
	public hc_prog_elig_budg_sliding_fee_premium()
	public hc_prog_elig_budg_ui_obligation()
	public hc_prog_elig_budg_total_premium()
	public hc_prog_elig_budg_medi_part_b_reimb_std()
	public hc_prog_elig_budg_medi_part_b_reimb_yn()
	public hc_prog_elig_mobl_result()
	public hc_prog_elig_mobl_type()
	public hc_prog_elig_mobl_period()
	public hc_prog_elig_spdn_option()
	public hc_prog_elig_spdn_type()
	public hc_prog_elig_spdn_method()
	public hc_prog_elig_spdn_covered_pop()
	public hc_prog_elig_original_monthly_spdn()
	public hc_prog_elig_monthly_spdn_counted_bills()
	public hc_prog_elig_monthly_spdn_remedial_care()
	public hc_prog_elig_monthly_spdn_satisfaction_date()
	public hc_prog_elig_monthly_spdn_recipient_amount()
	public hc_prog_elig_monthly_spdn_balance()
	public hc_prog_elig_oiginal_six_mo_spdn()
	public hc_prog_elig_six_mo_spdn_counted_bills()
	public hc_prog_elig_six_mo_spnd_satisfaction_date()
	public hc_prog_elig_six_mo_spdn_recipient_amount()
	public hc_prog_elig_six_mo_spdn_unused_balance()

	public community_spenddown_exists()
	public EW_spenddown_exists()
	public LTC_spenddown_exists()

	public hc_prog_elig_ew_spdn_type_code()
	public hc_prog_elig_ew_spdn_method_code()
	public hc_prog_elig_ew_spdn_covered_pop_code()
	public hc_prog_elig_ew_spdn_type_info()
	public hc_prog_elig_ew_spdn_method_info()
	public hc_prog_elig_ew_spdn_covered_pop_info()
	public hc_prog_elig_ew_spdn_income()
	public hc_prog_elig_ew_spdn_obligation()
	public hc_prog_elig_ew_spdn_liability()
	public hc_prog_elig_ltc_spdn_type_code()
	public hc_prog_elig_ltc_spdn_method_code()
	public hc_prog_elig_ltc_spdn_covered_pop_code()
	public hc_prog_elig_ltc_spdn_type_info()
	public hc_prog_elig_ltc_spdn_method_info()
	public hc_prog_elig_ltc_spdn_covered_pop_info()
	public hc_prog_elig_ltc_spdn_amount()
	public hc_prog_elig_ltc_spdn_total_liability()
	public hc_prog_elig_ltc_spdn_charges()
	public hc_prog_elig_ltc_spdn_medical_spdn()
	public hc_prog_elig_ltc_spdn_original()
	public hc_prog_elig_ltc_spdn_counted_bills()
	public hc_prog_elig_ltc_spdn_satisfy_date()
	public hc_prog_elig_ltc_spdn_recipient_amount()
	public hc_prog_elig_ltc_spdn_balance()

	public hc_prog_elig_cert_prd_total_net_income()
	public hc_prog_elig_cert_prd_total_standard()
	public hc_prog_elig_cert_prd_total_excess_income()
	public hc_prog_elig_app_date()
	public hc_prog_elig_approved_today()
	public hc_prog_elig_curr_prog_status()
	public hc_prog_elig_elig_result()
	public hc_prog_elig_elig_begin_date()
	public hc_prog_elig_HRF_reporting()
	public hc_prog_elig_ER_date()
	public hc_prog_elig_SR_date()
	public hc_prog_elig_TYMA_begin_date()
	public hc_prog_elig_TYMA_type()
	public hc_prog_elig_budg_deemed_unearned()
	public hc_prog_elig_budg_standard_disregard()
	public hc_prog_elig_budg_excess_income()
	public hc_prog_elig_test_after_processing_month()
	public hc_prog_elig_test_basis_for_other_prog()
	public hc_prog_elig_test_medicare_part_a()
	' public

	public sub read_elig()
		approved_today = False						'TODO - HC add approved_today handling'
		approved_version_found = False

		ReDim hc_elig_ref_numbs(0)
		ReDim hc_elig_full_name(0)
		ReDim hc_prog_elig_appd(0)
		ReDim hc_prog_elig_major_program(0)
		ReDim hc_prog_elig_eligibility_result(0)
		ReDim hc_prog_elig_status(0)
		ReDim hc_prog_elig_app_indc(0)
		ReDim hc_prog_elig_magi_excempt(0)
		ReDim hc_prog_elig_process_date(0)
		ReDim hc_prog_elig_source_of_info(0)
		ReDim hc_prog_elig_responsible_county(0)
		ReDim hc_prog_elig_servicing_county(0)
		ReDim hc_prog_elig_test_application_withdrawn(0)
		ReDim hc_prog_elig_test_application_process_incomplete(0)
		ReDim hc_prog_elig_test_no_new_prog_eligibility(0)
		ReDim hc_prog_elig_test_assistance_unit(0)
		ReDim hc_prog_elig_worker_msg_one(0)
		ReDim hc_prog_elig_worker_msg_two(0)
		ReDim hc_prog_elig_elig_type(0)
		ReDim hc_prog_elig_elig_standard(0)
		ReDim hc_prog_elig_method(0)
		ReDim hc_prog_elig_waiver(0)
		ReDim hc_prog_elig_waiver_detail(0)
		ReDim hc_prog_elig_total_net_income(0)
		ReDim hc_prog_elig_standard(0)
		ReDim hc_prog_elig_excess_income(0)
		ReDim hc_prog_elig_test_absence(0)
		ReDim hc_prog_elig_test_assets(0)
		ReDim hc_prog_elig_test_citizenship(0)
		ReDim hc_prog_elig_test_coop(0)
		ReDim hc_prog_elig_test_correctional_faci(0)
		ReDim hc_prog_elig_test_death(0)
		ReDim hc_prog_elig_test_elig_other_prog(0)
		ReDim hc_prog_elig_test_fail_file(0)
		ReDim hc_prog_elig_test_IMD(0)
		ReDim hc_prog_elig_test_uncompensated_transfer(0)
		ReDim hc_prog_elig_test_income(0)
		ReDim hc_prog_elig_test_medicare_elig(0)
		ReDim hc_prog_elig_test_MNSure_system(0)
		ReDim hc_prog_elig_test_Obligation_one_mo(0)
		ReDim hc_prog_elig_test_obligation_six_mo(0)
		ReDim hc_prog_elig_test_other_health_ins(0)
		ReDim hc_prog_elig_test_parent(0)
		ReDim hc_prog_elig_test_residence(0)
		ReDim hc_prog_elig_test_verif(0)
		ReDim hc_prog_elig_test_withdrawn(0)
		ReDim hc_prog_elig_test_coop_pben_cash(0)
		ReDim hc_prog_elig_test_coop_pben_smrt(0)
		ReDim hc_prog_elig_test_coop_pben(0)
		ReDim hc_prog_elig_test_coop_fail_provide_info(0)
		ReDim hc_prog_elig_test_coop_IEVS(0)
		ReDim hc_prog_elig_test_coop_medical_support(0)
		ReDim hc_prog_elig_test_coop_other_health_ins(0)
		ReDim hc_prog_elig_test_coop_SSN(0)
		ReDim hc_prog_elig_test_coop_third_party_liability(0)
		ReDim hc_prog_elig_test_fail_file_HRF(0)
		ReDim hc_prog_elig_test_fail_file_IR(0)
		ReDim hc_prog_elig_test_fail_file_AR(0)
		ReDim hc_prog_elig_test_fail_file_ER(0)
		ReDim hc_prog_elig_test_fail_file_quarterly_TYMA(0)
		ReDim hc_prog_elig_test_verif_ACCT(0)
		ReDim hc_prog_elig_test_verif_BUSI(0)
		ReDim hc_prog_elig_test_verif_JOBS(0)
		ReDim hc_prog_elig_test_verif_IMIG_status(0)
		ReDim hc_prog_elig_test_verif_LUMP(0)
		ReDim hc_prog_elig_test_verif_OTHR(0)
		ReDim hc_prog_elig_test_verif_PBEN(0)
		ReDim hc_prog_elig_test_verif_PREG(0)
		ReDim hc_prog_elig_test_verif_RBIC(0)
		ReDim hc_prog_elig_test_verif_REST(0)
		ReDim hc_prog_elig_test_verif_SECU(0)
		ReDim hc_prog_elig_test_verif_SPON(0)
		ReDim hc_prog_elig_test_verif_TRAN(0)
		ReDim hc_prog_elig_test_verif_UNEA(0)
		ReDim hc_prog_elig_test_verif_cit_id(0)
		ReDim hc_prog_elig_test_verif_CARS(0)
		ReDim hc_prog_elig_hh_size(0)
		ReDim hc_prog_elig_members_whose_income_counts(0)
		ReDim hc_prog_elig_members_whose_income_counts_list(0)
		ReDim hc_prog_elig_PTMA(0)
		ReDim hc_prog_elig_elig_standard_percent(0)
		ReDim hc_prog_elig_basis(0)
		ReDim hc_budget_type(0)
		ReDim hc_prog_elig_budg_gross_unearned(0)
		ReDim hc_prog_elig_budg_excluded_unearned(0)
		ReDim hc_prog_list_all_income(0)
		ReDim hc_prog_elig_budg_unearned_deduction(0)
		ReDim hc_prog_elig_budg_net_unearned_income(0)
		ReDim hc_prog_elig_budg_gross_earned(0)
		ReDim hc_prog_elig_budg_excluded_earned(0)
		ReDim hc_prog_elig_budg_work_exp_deduction(0)
		ReDim hc_prog_elig_budg_earned_disregard(0)
		ReDim hc_prog_elig_budg_dependent_care(0)
		ReDim hc_prog_elig_budg_earned_deduction(0)
		ReDim hc_prog_elig_budg_net_earned_income(0)
		ReDim hc_prog_elig_budg_child_sup_deduction(0)
		ReDim hc_prog_elig_budg_deemed_income(0)
		ReDim hc_prog_elig_budg_total_net_income(0)
		ReDim hc_prog_elig_budg_income_standard(0)
		ReDim hc_prog_elig_budg_spenddown(0)
		ReDim hc_prog_elig_budg_transfer_penalty(0)
		ReDim hc_prog_elig_budg_total_liability(0)
		ReDim hc_prog_elig_budg_deemed_earned(0)
		ReDim hc_prog_elig_budg_countable_earned_income(0)
		ReDim hc_prog_elig_budg_subtotal_countable_income(0)
		ReDim hc_prog_elig_budg_va_aid_attendincome(0)
		ReDim hc_prog_elig_budg_total_countable_income(0)
		ReDim hc_prog_elig_budg_LTC_exclusions(0)
		ReDim hc_prog_elig_budg_medicare_premium(0)
		ReDim hc_prog_elig_budg_maint_needs_allowance(0)
		ReDim hc_prog_elig_budg_guardian_rep_payee_fee(0)
		ReDim hc_prog_elig_budg_spousal_allocation(0)
		ReDim hc_prog_elig_budg_family_allocation(0)
		ReDim hc_prog_elig_budg_health_ins_premium(0)
		ReDim hc_prog_elig_budg_other_medical_expense(0)
		ReDim hc_prog_elig_budg_SSI_1611_benefit(0)
		ReDim hc_prog_elig_budg_other_deductions(0)
		ReDim hc_prog_elig_budg_waiver_obligation(0)
		ReDim hc_prog_elig_budg_person_clothing_needs(0)
		ReDim hc_prog_elig_budg_LTC_spenddown(0)
		ReDim hc_prog_elig_budg_medical_spenddown(0)
		ReDim hc_prog_elig_budg_cola(0)
		ReDim hc_prog_elig_budg_percent_of_fpg(0)
		ReDim hc_prog_elig_budg_counted_income_for_prem_calc(0)
		ReDim hc_prog_elig_budg_premium_percent(0)
		ReDim hc_prog_elig_budg_sliding_fee_premium(0)
		ReDim hc_prog_elig_budg_ui_obligation(0)
		ReDim hc_prog_elig_budg_total_premium(0)
		ReDim hc_prog_elig_budg_medi_part_b_reimb_std(0)
		ReDim hc_prog_elig_budg_medi_part_b_reimb_yn(0)
		ReDim hc_prog_elig_mobl_result(0)
		ReDim hc_prog_elig_mobl_type(0)
		ReDim hc_prog_elig_mobl_period(0)
		ReDim hc_prog_elig_spdn_option(0)
		ReDim hc_prog_elig_spdn_type(0)
		ReDim hc_prog_elig_spdn_method(0)
		ReDim hc_prog_elig_spdn_covered_pop(0)
		ReDim hc_prog_elig_original_monthly_spdn(0)
		ReDim hc_prog_elig_monthly_spdn_counted_bills(0)
		ReDim hc_prog_elig_monthly_spdn_remedial_care(0)
		ReDim hc_prog_elig_monthly_spdn_satisfaction_date(0)
		ReDim hc_prog_elig_monthly_spdn_recipient_amount(0)
		ReDim hc_prog_elig_monthly_spdn_balance(0)
		ReDim hc_prog_elig_oiginal_six_mo_spdn(0)
		ReDim hc_prog_elig_six_mo_spdn_counted_bills(0)
		ReDim hc_prog_elig_six_mo_spnd_satisfaction_date(0)
		ReDim hc_prog_elig_six_mo_spdn_recipient_amount(0)
		ReDim hc_prog_elig_six_mo_spdn_unused_balance(0)

		ReDim community_spenddown_exists(0)
		ReDim EW_spenddown_exists(0)
		ReDim LTC_spenddown_exists(0)

		ReDim hc_prog_elig_ew_spdn_type_code(0)
		ReDim hc_prog_elig_ew_spdn_method_code(0)
		ReDim hc_prog_elig_ew_spdn_covered_pop_code(0)
		ReDim hc_prog_elig_ew_spdn_type_info(0)
		ReDim hc_prog_elig_ew_spdn_method_info(0)
		ReDim hc_prog_elig_ew_spdn_covered_pop_info(0)
		ReDim hc_prog_elig_ew_spdn_income(0)
		ReDim hc_prog_elig_ew_spdn_obligation(0)
		ReDim hc_prog_elig_ew_spdn_liability(0)
		ReDim hc_prog_elig_ltc_spdn_type_code(0)
		ReDim hc_prog_elig_ltc_spdn_method_code(0)
		ReDim hc_prog_elig_ltc_spdn_covered_pop_code(0)
		ReDim hc_prog_elig_ltc_spdn_type_info(0)
		ReDim hc_prog_elig_ltc_spdn_method_info(0)
		ReDim hc_prog_elig_ltc_spdn_covered_pop_info(0)
		ReDim hc_prog_elig_ltc_spdn_amount(0)
		ReDim hc_prog_elig_ltc_spdn_total_liability(0)
		ReDim hc_prog_elig_ltc_spdn_charges(0)
		ReDim hc_prog_elig_ltc_spdn_medical_spdn(0)
		ReDim hc_prog_elig_ltc_spdn_original(0)
		ReDim hc_prog_elig_ltc_spdn_counted_bills(0)
		ReDim hc_prog_elig_ltc_spdn_satisfy_date(0)
		ReDim hc_prog_elig_ltc_spdn_recipient_amount(0)
		ReDim hc_prog_elig_ltc_spdn_balance(0)

		ReDim hc_prog_elig_cert_prd_total_net_income(0)
		ReDim hc_prog_elig_cert_prd_total_standard(0)
		ReDim hc_prog_elig_cert_prd_total_excess_income(0)
		ReDim hc_prog_elig_app_date(0)
		ReDim hc_prog_elig_approved_today(0)
		ReDim hc_prog_elig_curr_prog_status(0)
		ReDim hc_prog_elig_elig_result(0)
		ReDim hc_prog_elig_elig_begin_date(0)
		ReDim hc_prog_elig_HRF_reporting(0)
		ReDim hc_prog_elig_ER_date(0)
		ReDim hc_prog_elig_SR_date(0)
		ReDim hc_prog_elig_TYMA_begin_date(0)
		ReDim hc_prog_elig_TYMA_type(0)
		ReDim hc_prog_elig_budg_deemed_unearned(0)
		ReDim hc_prog_elig_budg_standard_disregard(0)
		ReDim hc_prog_elig_budg_excess_income(0)
		ReDim hc_prog_elig_test_after_processing_month(0)
		ReDim hc_prog_elig_test_basis_for_other_prog(0)
		ReDim hc_prog_elig_test_medicare_part_a(0)

		call navigate_to_MAXIS_screen("ELIG", "HC  ")

		EMReadScreen warning_msg, 50, 24, 2
		If Instr(warning_msg, "INVALID FOR PERIOD") <> 0 Then
			EMWriteScreen CM_mo, 20, 43
			EMWriteScreen CM_yr, 20, 46
			transmit
		End If
		If Instr(warning_msg, "YOU ARE NOT AUTHORIZED FOR THIS FUNCTION") = 0 Then
			EMWriteScreen elig_footer_month, 19, 54
			EMWriteScreen elig_footer_year, 19, 57
			transmit
			' approval_date 'TODO - figure out how to read approval date
			'===================================THIS IS THE BREAK - IF WE NEED TO BE DATE CONDITIONAL, DATE LOGIC GOES HERE
			'Read footer month and create the conditional off the actual footer we enter maxis with

			hc_row = 8
			hc_prog_count = 0
			page_numb = 1
			Do
				ReDim preserve hc_elig_ref_numbs(hc_prog_count)
				ReDim preserve hc_elig_full_name(hc_prog_count)
				ReDim preserve hc_prog_elig_appd(hc_prog_count)
				ReDim preserve hc_prog_elig_major_program(hc_prog_count)
				ReDim preserve hc_prog_elig_eligibility_result(hc_prog_count)
				ReDim preserve hc_prog_elig_status(hc_prog_count)
				ReDim preserve hc_prog_elig_app_indc(hc_prog_count)
				ReDim preserve hc_prog_elig_magi_excempt(hc_prog_count)
				ReDim preserve hc_prog_elig_process_date(hc_prog_count)
				ReDim preserve hc_prog_elig_source_of_info(hc_prog_count)
				ReDim preserve hc_prog_elig_responsible_county(hc_prog_count)
				ReDim preserve hc_prog_elig_servicing_county(hc_prog_count)
				ReDim preserve hc_prog_elig_test_application_withdrawn(hc_prog_count)
				ReDim preserve hc_prog_elig_test_application_process_incomplete(hc_prog_count)
				ReDim preserve hc_prog_elig_test_no_new_prog_eligibility(hc_prog_count)
				ReDim preserve hc_prog_elig_test_assistance_unit(hc_prog_count)
				ReDim preserve hc_prog_elig_worker_msg_one(hc_prog_count)
				ReDim preserve hc_prog_elig_worker_msg_two(hc_prog_count)
				ReDim preserve hc_prog_elig_elig_type(hc_prog_count)
				ReDim preserve hc_prog_elig_elig_standard(hc_prog_count)
				ReDim preserve hc_prog_elig_method(hc_prog_count)
				ReDim preserve hc_prog_elig_waiver(hc_prog_count)
				ReDim preserve hc_prog_elig_waiver_detail(hc_prog_count)
				ReDim preserve hc_prog_elig_total_net_income(hc_prog_count)
				ReDim preserve hc_prog_elig_standard(hc_prog_count)
				ReDim preserve hc_prog_elig_excess_income(hc_prog_count)
				ReDim preserve hc_prog_elig_test_absence(hc_prog_count)
				ReDim preserve hc_prog_elig_test_assets(hc_prog_count)
				ReDim preserve hc_prog_elig_test_citizenship(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop(hc_prog_count)
				ReDim preserve hc_prog_elig_test_correctional_faci(hc_prog_count)
				ReDim preserve hc_prog_elig_test_death(hc_prog_count)
				ReDim preserve hc_prog_elig_test_elig_other_prog(hc_prog_count)
				ReDim preserve hc_prog_elig_test_fail_file(hc_prog_count)
				ReDim preserve hc_prog_elig_test_IMD(hc_prog_count)
				ReDim preserve hc_prog_elig_test_uncompensated_transfer(hc_prog_count)
				ReDim preserve hc_prog_elig_test_income(hc_prog_count)
				ReDim preserve hc_prog_elig_test_medicare_elig(hc_prog_count)
				ReDim preserve hc_prog_elig_test_MNSure_system(hc_prog_count)
				ReDim preserve hc_prog_elig_test_Obligation_one_mo(hc_prog_count)
				ReDim preserve hc_prog_elig_test_obligation_six_mo(hc_prog_count)
				ReDim preserve hc_prog_elig_test_other_health_ins(hc_prog_count)
				ReDim preserve hc_prog_elig_test_parent(hc_prog_count)
				ReDim preserve hc_prog_elig_test_residence(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif(hc_prog_count)
				ReDim preserve hc_prog_elig_test_withdrawn(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_pben_cash(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_pben_smrt(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_pben(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_fail_provide_info(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_IEVS(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_medical_support(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_other_health_ins(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_SSN(hc_prog_count)
				ReDim preserve hc_prog_elig_test_coop_third_party_liability(hc_prog_count)
				ReDim preserve hc_prog_elig_test_fail_file_HRF(hc_prog_count)
				ReDim preserve hc_prog_elig_test_fail_file_IR(hc_prog_count)
				ReDim preserve hc_prog_elig_test_fail_file_AR(hc_prog_count)
				ReDim preserve hc_prog_elig_test_fail_file_ER(hc_prog_count)
				ReDim preserve hc_prog_elig_test_fail_file_quarterly_TYMA(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_ACCT(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_BUSI(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_JOBS(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_IMIG_status(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_LUMP(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_OTHR(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_PBEN(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_PREG(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_RBIC(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_REST(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_SECU(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_SPON(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_TRAN(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_UNEA(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_cit_id(hc_prog_count)
				ReDim preserve hc_prog_elig_test_verif_CARS(hc_prog_count)
				ReDim preserve hc_prog_elig_hh_size(hc_prog_count)
				ReDim preserve hc_prog_elig_members_whose_income_counts(hc_prog_count)
				ReDim preserve hc_prog_elig_members_whose_income_counts_list(hc_prog_count)
				ReDim preserve hc_prog_elig_PTMA(hc_prog_count)
				ReDim preserve hc_prog_elig_elig_standard_percent(hc_prog_count)
				ReDim preserve hc_prog_elig_basis(hc_prog_count)
				ReDim preserve hc_budget_type(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_gross_unearned(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_excluded_unearned(hc_prog_count)
				ReDim preserve hc_prog_list_all_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_unearned_deduction(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_net_unearned_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_gross_earned(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_excluded_earned(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_work_exp_deduction(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_earned_disregard(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_dependent_care(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_earned_deduction(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_net_earned_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_child_sup_deduction(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_deemed_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_total_net_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_income_standard(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_spenddown(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_transfer_penalty(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_total_liability(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_deemed_earned(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_countable_earned_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_subtotal_countable_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_va_aid_attendincome(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_total_countable_income(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_LTC_exclusions(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_medicare_premium(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_maint_needs_allowance(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_spousal_allocation(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_family_allocation(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_health_ins_premium(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_other_medical_expense(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_other_deductions(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_waiver_obligation(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_person_clothing_needs(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_LTC_spenddown(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_medical_spenddown(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_cola(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_percent_of_fpg(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_premium_percent(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_sliding_fee_premium(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_ui_obligation(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_total_premium(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count)
				ReDim preserve hc_prog_elig_mobl_result(hc_prog_count)
				ReDim preserve hc_prog_elig_mobl_type(hc_prog_count)
				ReDim preserve hc_prog_elig_mobl_period(hc_prog_count)
				ReDim preserve hc_prog_elig_spdn_option(hc_prog_count)
				ReDim preserve hc_prog_elig_spdn_type(hc_prog_count)
				ReDim preserve hc_prog_elig_spdn_method(hc_prog_count)
				ReDim preserve hc_prog_elig_spdn_covered_pop(hc_prog_count)
				ReDim preserve hc_prog_elig_original_monthly_spdn(hc_prog_count)
				ReDim preserve hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count)
				ReDim preserve hc_prog_elig_monthly_spdn_remedial_care(hc_prog_count)
				ReDim preserve hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count)
				ReDim preserve hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count)
				ReDim preserve hc_prog_elig_monthly_spdn_balance(hc_prog_count)
				ReDim preserve hc_prog_elig_oiginal_six_mo_spdn(hc_prog_count)
				ReDim preserve hc_prog_elig_six_mo_spdn_counted_bills(hc_prog_count)
				ReDim preserve hc_prog_elig_six_mo_spnd_satisfaction_date(hc_prog_count)
				ReDim preserve hc_prog_elig_six_mo_spdn_recipient_amount(hc_prog_count)
				ReDim preserve hc_prog_elig_six_mo_spdn_unused_balance(hc_prog_count)

				ReDim preserve community_spenddown_exists(hc_prog_count)
				ReDim preserve EW_spenddown_exists(hc_prog_count)
				ReDim preserve LTC_spenddown_exists(hc_prog_count)

				ReDim preserve hc_prog_elig_ew_spdn_type_code(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_method_code(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_covered_pop_code(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_type_info(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_method_info(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_income(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_obligation(hc_prog_count)
				ReDim preserve hc_prog_elig_ew_spdn_liability(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_type_code(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_method_code(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_covered_pop_code(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_type_info(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_method_info(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_amount(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_total_liability(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_charges(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_medical_spdn(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_original(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_counted_bills(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_satisfy_date(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_recipient_amount(hc_prog_count)
				ReDim preserve hc_prog_elig_ltc_spdn_balance(hc_prog_count)

				ReDim preserve hc_prog_elig_cert_prd_total_net_income(hc_prog_count)
				ReDim preserve hc_prog_elig_cert_prd_total_standard(hc_prog_count)
				ReDim preserve hc_prog_elig_cert_prd_total_excess_income(hc_prog_count)
				ReDim preserve hc_prog_elig_app_date(hc_prog_count)
				ReDim preserve hc_prog_elig_approved_today(hc_prog_count)
				ReDim preserve hc_prog_elig_curr_prog_status(hc_prog_count)
				ReDim preserve hc_prog_elig_elig_result(hc_prog_count)
				ReDim preserve hc_prog_elig_elig_begin_date(hc_prog_count)
				ReDim preserve hc_prog_elig_HRF_reporting(hc_prog_count)
				ReDim preserve hc_prog_elig_ER_date(hc_prog_count)
				ReDim preserve hc_prog_elig_SR_date(hc_prog_count)
				ReDim preserve hc_prog_elig_TYMA_begin_date(hc_prog_count)
				ReDim preserve hc_prog_elig_TYMA_type(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_deemed_unearned(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_standard_disregard(hc_prog_count)
				ReDim preserve hc_prog_elig_budg_excess_income(hc_prog_count)
				ReDim preserve hc_prog_elig_test_after_processing_month(hc_prog_count)
				ReDim preserve hc_prog_elig_test_basis_for_other_prog(hc_prog_count)
				ReDim preserve hc_prog_elig_test_medicare_part_a(hc_prog_count)

				hc_prog_elig_approved_today(hc_prog_count) = False
				EMReadScreen hc_elig_ref_numbs(hc_prog_count), 2, hc_row, 3
				EMReadScreen hc_elig_full_name(hc_prog_count), 17, hc_row, 7

				If hc_elig_ref_numbs(hc_prog_count) = "  " Then
					hc_elig_ref_numbs(hc_prog_count) = hc_elig_ref_numbs(hc_prog_count-1)
					hc_elig_full_name(hc_prog_count) = hc_elig_full_name(hc_prog_count-1)
				End If
				EMReadScreen clt_hc_prog, 4, hc_row, 28
				If clt_hc_prog <> "NO V" AND clt_hc_prog <> "NO R" and clt_hc_prog <> "    " Then

					EMReadScreen prog_status, 3, hc_row, 68
					If prog_status <> "APP" Then                        'Finding the approved version
						EMReadScreen total_versions, 2, hc_row, 64
						If total_versions = "01" Then
							hc_prog_elig_appd(hc_prog_count) = False
						Else
							EMReadScreen current_version, 2, hc_row, 58
							If current_version = "01" Then
								hc_prog_elig_appd(hc_prog_count) = False
							Else
								prev_version = right ("00" & abs(current_version) - 1, 2)
								EMWriteScreen prev_version, hc_row, 58
								transmit
								hc_prog_elig_appd(hc_prog_count) = True
							End If

						End If
					Else
						hc_prog_elig_appd(hc_prog_count) = True
					End If
				Else
					hc_prog_elig_appd(hc_prog_count) = False
				End If

				If hc_prog_elig_appd(hc_prog_count) = True Then
					EMReadScreen hc_prog_elig_major_program(hc_prog_count), 		4, hc_row, 28
					EMReadScreen hc_prog_elig_eligibility_result(hc_prog_count), 	4, hc_row, 41
					EMReadScreen hc_prog_elig_status(hc_prog_count), 				8, hc_row, 50
					EMReadScreen hc_prog_elig_app_indc(hc_prog_count), 				6, hc_row, 68
					EMReadScreen hc_prog_elig_magi_excempt(hc_prog_count), 			6, hc_row, 74

					hc_prog_elig_major_program(hc_prog_count) = trim(hc_prog_elig_major_program(hc_prog_count))
					hc_prog_elig_eligibility_result(hc_prog_count) = trim(hc_prog_elig_eligibility_result(hc_prog_count))
					If hc_prog_elig_eligibility_result(hc_prog_count) = "ELIG" Then hc_prog_elig_eligibility_result(hc_prog_count) = "ELIGIBLE"
					If hc_prog_elig_eligibility_result(hc_prog_count) = "INEL" Then hc_prog_elig_eligibility_result(hc_prog_count) = "INELIGIBLE"
					Call write_value_and_transmit("X", hc_row, 26)

					the_row = 1
					the_col = 1
					EMSearch "Auto-Closed", the_row, the_col
					If the_row <> 0 Then PF3

					If the_row = 0 Then
						the_row = 1
						the_col = 1
						EMSearch "HC DENIAL Was Denied", the_row, the_col
						If the_row <> 0 Then PF3
					End if

					If the_row = 0 Then
						'We are now on BSUM
						'
						EMReadScreen hc_prog_elig_process_date(hc_prog_count), 8, 2, 73
						hc_prog_elig_process_date(hc_prog_count) = DateAdd("d", 0, hc_prog_elig_process_date(hc_prog_count))

						created_today = False
						If DateDiff("d", hc_prog_elig_process_date(hc_prog_count), date) = 0 Then created_today = True
						If allow_late_note = True Then
							one_week_ago = DateAdd("d", -7, date)
							If DateDiff("d", one_week_ago, hc_prog_elig_process_date(hc_prog_count)) >= 0 Then created_today = True
						End If
						If developer_mode = True Then created_today = True 												'TESTING OPTION'

						If created_today = False Then
							If hc_prog_elig_major_program(hc_prog_count) = "HC D" Then EMReadScreen hc_prog_elig_app_date(hc_prog_count), 8, 3, 73
							If hc_prog_elig_major_program(hc_prog_count) = "MA" or hc_prog_elig_major_program(hc_prog_count) = "EMA" or hc_prog_elig_major_program(hc_prog_count) = "QMB" or hc_prog_elig_major_program(hc_prog_count) = "SLMB" or hc_prog_elig_major_program(hc_prog_count) = "QI1" Then
								transmit
								EMReadScreen hc_prog_elig_app_date(hc_prog_count), 8, 4, 73
							End If
						End If

						If created_today = True Then
							If hc_prog_elig_major_program(hc_prog_count) = "HC D" Then
								hc_prog_elig_major_program(hc_prog_count) = "HC DENIAL"
								EMReadScreen hc_prog_elig_app_date(hc_prog_count), 8, 3, 73
								If trim(hc_prog_elig_app_date(hc_prog_count)) <> "" Then
									If DateDiff("d", hc_prog_elig_app_date(hc_prog_count), date) = 0 Then
										approved_today = True
										hc_prog_elig_approved_today(hc_prog_count) = True
									End If
									If allow_late_note = True Then
										one_week_ago = DateAdd("d", -7, date)
										If DateDiff("d", one_week_ago, hc_prog_elig_app_date(hc_prog_count)) >= 0 Then
											approved_today = True
											hc_prog_elig_approved_today(hc_prog_count) = True
										End If
									End If
									If developer_mode = True Then
										approved_today = True										'TESTING OPTION'
										hc_prog_elig_approved_today(hc_prog_count) = True			'TESTING OPTION'
									End If
								End If
								EMReadScreen hc_prog_elig_source_of_info(hc_prog_count), 		4, 9, 33
								EMReadScreen hc_prog_elig_responsible_county(hc_prog_count), 	2, 8, 78
								EMReadScreen hc_prog_elig_servicing_county(hc_prog_count), 		2, 9, 78

								EMReadScreen hc_prog_elig_test_application_withdrawn(hc_prog_count), 		6, 13, 22
								EMReadScreen hc_prog_elig_test_application_process_incomplete(hc_prog_count), 6, 14, 22
								EMReadScreen hc_prog_elig_test_no_new_prog_eligibility(hc_prog_count), 		6, 15, 22
								EMReadScreen hc_prog_elig_test_assistance_unit(hc_prog_count), 				6, 16, 22

								EMReadScreen hc_prog_elig_worker_msg_one(hc_prog_count), 78, 19, 3
								EMReadScreen hc_ref_numb, 2, 6, 12
								hc_prog_elig_members_whose_income_counts(hc_prog_count) = Array(hc_ref_numb)
							End If
							If hc_prog_elig_major_program(hc_prog_count) = "MA" or hc_prog_elig_major_program(hc_prog_count) = "EMA" or hc_prog_elig_major_program(hc_prog_count) = "IMD" Then

								transmit
								EMReadScreen hc_prog_elig_app_date(hc_prog_count), 8, 4, 73
								If trim(hc_prog_elig_app_date(hc_prog_count)) <> "" Then 'hc_prog_elig_app_date(hc_prog_count) = DateAdd("d", 0, hc_prog_elig_app_date(hc_prog_count))
									If DateDiff("d", hc_prog_elig_app_date(hc_prog_count), date) = 0 Then
										approved_today = True
										hc_prog_elig_approved_today(hc_prog_count) = True
									End If
									If allow_late_note = True Then
										one_week_ago = DateAdd("d", -7, date)
										If DateDiff("d", one_week_ago, hc_prog_elig_app_date(hc_prog_count)) >= 0 Then
											approved_today = True
											hc_prog_elig_approved_today(hc_prog_count) = True
										End If
									End If
									If developer_mode = True Then
										approved_today = True										'TESTING OPTION'
										hc_prog_elig_approved_today(hc_prog_count) = True			'TESTING OPTION'
									End If
								End If

								PF3
								'Now on BSUM

								If hc_prog_elig_approved_today(hc_prog_count) = True Then
									'Read to find out which version of BSUM we have for line positioning.
									EMReadScreen name_or_date, 1, 5, 19
									If name_or_date = " " Then 'This is the old version of BSUM
										hc_col = 17
										Do
											EMReadScreen budg_mo, 2, 6, hc_col + 2
											EMReadScreen budg_yr, 2, 6, hc_col + 5
											If budg_mo = elig_footer_month AND budg_yr = elig_footer_year Then
												EMReadScreen hc_prog_elig_elig_type(hc_prog_count), 		2, 12, hc_col
												EMReadScreen hc_prog_elig_elig_standard(hc_prog_count), 	1, 12, hc_col + 5
												EMReadScreen hc_prog_elig_method(hc_prog_count), 			1, 13, hc_col + 4
												EMReadScreen hc_prog_elig_waiver(hc_prog_count), 			1, 14, hc_col + 4

												EMReadScreen hc_prog_elig_total_net_income(hc_prog_count), 9, 15, hc_col
												EMReadScreen hc_prog_elig_standard(hc_prog_count), 		9, 16, hc_col
												EMReadScreen hc_prog_elig_excess_income(hc_prog_count), 	9, 17, hc_col

												If hc_prog_elig_waiver(hc_prog_count) = "F" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CADI Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "G" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CADI Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "H" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CAC Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "I" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CAC Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "J" Then hc_prog_elig_waiver_detail(hc_prog_count) = "EW Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "K" Then hc_prog_elig_waiver_detail(hc_prog_count) = "EW Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "L" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NF Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "M" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NF Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "P" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NB Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "Q" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NB Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "R" Then hc_prog_elig_waiver_detail(hc_prog_count) = "DD Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "S" Then hc_prog_elig_waiver_detail(hc_prog_count) = "DD Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "Y" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CSG Conversion"

												Call write_value_and_transmit("X", 7, hc_col)						'Opening the HC Span
												If hc_prog_elig_major_program(hc_prog_count) = "MA" or hc_prog_elig_major_program(hc_prog_count) = "EMA" Then
													EMReadScreen hc_prog_elig_test_absence(hc_prog_count), 			6, 6, 5
													EMReadScreen hc_prog_elig_test_assets(hc_prog_count), 			6, 7, 5
													EMReadScreen hc_prog_elig_test_assistance_unit(hc_prog_count), 	6, 8, 5
													EMReadScreen hc_prog_elig_test_citizenship(hc_prog_count), 		6, 9, 5
													EMReadScreen hc_prog_elig_test_coop(hc_prog_count), 				6, 10, 5
													EMReadScreen hc_prog_elig_test_correctional_faci(hc_prog_count), 	6, 11, 5
													EMReadScreen hc_prog_elig_test_death(hc_prog_count), 				6, 12, 5
													EMReadScreen hc_prog_elig_test_elig_other_prog(hc_prog_count), 	6, 13, 5
													EMReadScreen hc_prog_elig_test_fail_file(hc_prog_count), 			6, 14, 5
													EMReadScreen hc_prog_elig_test_IMD(hc_prog_count), 				6, 15, 5

													EMReadScreen hc_prog_elig_test_uncompensated_transfer(hc_prog_count), 6, 18, 5

													EMReadScreen hc_prog_elig_test_income(hc_prog_count), 			6, 6, 46
													EMReadScreen hc_prog_elig_test_medicare_elig(hc_prog_count), 		6, 7, 46
													EMReadScreen hc_prog_elig_test_MNSure_system(hc_prog_count), 		6, 8, 46
													EMReadScreen hc_prog_elig_test_Obligation_one_mo(hc_prog_count), 	6, 9, 46
													EMReadScreen hc_prog_elig_test_obligation_six_mo(hc_prog_count), 	6, 10, 46
													If hc_prog_elig_major_program(hc_prog_count) = "MA" Then
														EMReadScreen hc_prog_elig_test_other_health_ins(hc_prog_count), 6, 11, 46
														EMReadScreen hc_prog_elig_test_parent(hc_prog_count), 			6, 12, 46
														EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 		6, 13, 46
														EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 			6, 14, 46
														EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 		6, 15, 46
													ElseIf hc_prog_elig_major_program(hc_prog_count) = "EMA" Then
														EMReadScreen hc_prog_elig_test_parent(hc_prog_count), 		6, 11, 46
														EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 	6, 12, 46
														EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 		6, 13, 46
														EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 	6, 14, 46
													End If

													' Call write_value_and_transmit("X", 7, 3)				'Assets'
													' If assets_pop_up_check = "Assets" Then
													' 	'TODO read asset information'
													' 	transmit
													' Else
													' 	EMWriteScreen " ", 7, 3
													' End If

													' MARK ALL OF THE POSSIBLE POPUPS
													EMReadScreen ema_person_test_check, 3, 3, 27
													' EMWriteScreen "X", 7, 3				'Assets'			'THIS CAUSES PROBEMS ON INELIG SPANS - Since we aren't reading anything from here we are going to ignore it
													EMWriteScreen "X", 10, 3			'Cooperration'
													EMWriteScreen "X", 14, 3			'Fail to File'
													If ema_person_test_check <> "EMA" Then EMWriteScreen "X", 14, 44							'Verification'
													If ema_person_test_check = "EMA" Then EMWriteScreen "X", 13, 44			'Verification'
													EMWriteScreen "X", 18, 3			'Uncompensated Transfer
													' MsgBox "Check the Xes"
													transmit

													Do
														' MsgBox "Pause"
														EMReadScreen assets_pop_up_check, 6, 6, 35
														EMReadScreen coop_pop_up_check, 11, 8, 43
														EMReadScreen fail_to_file_pop_up_check, 12, 12, 43
														EMReadScreen verif_pop_up_check, 12, 3, 24
														EMReadScreen uncomp_xfer_pop_up_check, 13, 5, 23
														If UCase(assets_pop_up_check) = "ASSETS" Then
															'TODO read asset information'
															' MsgBox "ONE"
														ElseIf UCase(fail_to_file_pop_up_check) = "FAIL TO FILE" Then
															' MsgBox "THREE"
															EMReadScreen hc_prog_elig_test_fail_file_HRF(hc_prog_count), 				6, 14, 33
															EMReadScreen hc_prog_elig_test_fail_file_IR(hc_prog_count), 				6, 15, 33
															EMReadScreen hc_prog_elig_test_fail_file_AR(hc_prog_count), 				6, 16, 33
															EMReadScreen hc_prog_elig_test_fail_file_ER(hc_prog_count), 				6, 17, 33
															EMReadScreen hc_prog_elig_test_fail_file_quarterly_TYMA(hc_prog_count), 	6, 18, 33
														ElseIf UCase(coop_pop_up_check) = "COOPERATION" Then
															' MsgBox "TWO"
															Call write_value_and_transmit("X", 10, 26)				'Cooperration'
															EMReadScreen hc_prog_elig_test_coop_pben_cash(hc_prog_count), 			6, 10, 31
															EMReadScreen hc_prog_elig_test_coop_pben_smrt(hc_prog_count), 			6, 11, 31
															transmit
															EMReadScreen hc_prog_elig_test_coop_pben(hc_prog_count), 				6, 10, 28
															EMReadScreen hc_prog_elig_test_coop_fail_provide_info(hc_prog_count), 	6, 11, 28
															EMReadScreen hc_prog_elig_test_coop_IEVS(hc_prog_count), 				6, 12, 28
															EMReadScreen hc_prog_elig_test_coop_medical_support(hc_prog_count), 	6, 13, 28
															EMReadScreen hc_prog_elig_test_coop_other_health_ins(hc_prog_count), 	6, 14, 28
															EMReadScreen hc_prog_elig_test_coop_SSN(hc_prog_count), 				6, 15, 28
															EMReadScreen hc_prog_elig_test_coop_third_party_liability(hc_prog_count), 6, 16, 28
														ElseIf UCase(uncomp_xfer_pop_up_check) = "UNCOMPENSATED" Then
															' MsgBox "FIVE"
														ElseIf UCase(verif_pop_up_check) = "VERIFICATION" Then
															' MsgBox "FOUR"
															EMReadScreen hc_prog_elig_test_verif_ACCT(hc_prog_count), 		6, 5, 10
															EMReadScreen hc_prog_elig_test_verif_BUSI(hc_prog_count), 		6, 6, 10
															EMReadScreen hc_prog_elig_test_verif_JOBS(hc_prog_count), 		6, 7, 10
															EMReadScreen hc_prog_elig_test_verif_IMIG_status(hc_prog_count), 	6, 8, 10
															EMReadScreen hc_prog_elig_test_verif_LUMP(hc_prog_count), 		6, 9, 10
															EMReadScreen hc_prog_elig_test_verif_OTHR(hc_prog_count), 		6, 10, 10
															EMReadScreen hc_prog_elig_test_verif_PBEN(hc_prog_count), 		6, 11, 10
															EMReadScreen hc_prog_elig_test_verif_PREG(hc_prog_count), 		6, 12, 10
															EMReadScreen hc_prog_elig_test_verif_RBIC(hc_prog_count), 		6, 13, 10
															EMReadScreen hc_prog_elig_test_verif_REST(hc_prog_count), 		6, 14, 10
															EMReadScreen hc_prog_elig_test_verif_SECU(hc_prog_count), 		6, 15, 10
															EMReadScreen hc_prog_elig_test_verif_SPON(hc_prog_count), 		6, 16, 10
															EMReadScreen hc_prog_elig_test_verif_TRAN(hc_prog_count), 		6, 17, 10
															EMReadScreen hc_prog_elig_test_verif_UNEA(hc_prog_count), 		6, 18, 10
															EMReadScreen hc_prog_elig_test_verif_cit_id(hc_prog_count), 		6, 19, 10
															EMReadScreen hc_prog_elig_test_verif_CARS(hc_prog_count), 		6, 20, 10

														End If

														transmit
														EMReadScreen BSUM_check, 4, 3, 57
														' MsgBox "BSUM_check - `" & BSUM_check & "`"
													Loop Until BSUM_check = "BSUM"
													' MsgBox "OUT"
												End If

												If hc_prog_elig_major_program(hc_prog_count) = "IMD" Then
													EMReadScreen hc_prog_elig_test_absence(hc_prog_count), 			6, 7, 5
													EMReadScreen hc_prog_elig_test_assets(hc_prog_count), 			6, 8, 5
													EMReadScreen hc_prog_elig_test_assistance_unit(hc_prog_count), 	6, 9, 5
													EMReadScreen hc_prog_elig_test_citizenship(hc_prog_count), 		6, 10, 5
													EMReadScreen hc_prog_elig_test_coop(hc_prog_count), 			6, 11, 5
													EMReadScreen hc_prog_elig_test_death(hc_prog_count), 			6, 12, 5
													EMReadScreen hc_prog_elig_test_fail_file(hc_prog_count), 		6, 13, 5
													EMReadScreen hc_prog_elig_test_IMD(hc_prog_count), 				6, 14, 5
													EMReadScreen hc_prog_elig_test_income(hc_prog_count), 			6, 15, 5

													EMReadScreen hc_prog_elig_test_medicare_elig(hc_prog_count), 			6, 7, 44
													EMReadScreen hc_prog_elig_test_MNSure_system(hc_prog_count), 			6, 8, 44
													EMReadScreen hc_prog_elig_test_Obligation_one_mo(hc_prog_count),		6, 9, 44
													EMReadScreen hc_prog_elig_test_obligation_six_mo(hc_prog_count), 		6, 10, 44
													EMReadScreen hc_prog_elig_test_parent(hc_prog_count), 					6, 11, 44
													EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 				6, 12, 44
													EMReadScreen hc_prog_elig_test_uncompensated_transfer(hc_prog_count), 	6, 13, 44
													EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 					6, 14, 44
													EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 				6, 15, 44

													transmit
												End If


												Call write_value_and_transmit("X", 8, hc_col+4)			'Household Count'
												' MsgBox "IN HH COunt"
												EMReadScreen hc_prog_elig_hh_size(hc_prog_count), 2, 5, 68
												hc_prog_elig_hh_size(hc_prog_count) = trim(hc_prog_elig_hh_size(hc_prog_count))
												hc_prog_elig_hh_size(hc_prog_count) = replace(hc_prog_elig_hh_size(hc_prog_count), "_", "")

												hh_row = 12
												Do
													' MsgBox "hh_row - " & hh_row
													EMReadScreen inc_count_ind, 1, hh_row, 61
													If inc_count_ind = "Y" Then
														EMReadScreen memb_numb_income_count, 2, hh_row, 13
														hc_prog_elig_members_whose_income_counts(hc_prog_count) = hc_prog_elig_members_whose_income_counts(hc_prog_count) & " " & memb_numb_income_count
													End If
													hh_row = hh_row + 1
													EMReadScreen next_inc_count_ind, 1, hh_row, 61
													' MsgBox "next_inc_count_ind - " & next_inc_count_ind
												Loop until next_inc_count_ind = "_" or next_inc_count_ind = " "
												hc_prog_elig_members_whose_income_counts(hc_prog_count) = trim(hc_prog_elig_members_whose_income_counts(hc_prog_count))
												hc_prog_elig_members_whose_income_counts_list(hc_prog_count) = replace(hc_prog_elig_members_whose_income_counts(hc_prog_count), " ", ",")
												hc_prog_elig_members_whose_income_counts(hc_prog_count) = split(hc_prog_elig_members_whose_income_counts(hc_prog_count), " ")
												transmit
												' MsgBox "Out of HH Count and back to BSUM"
												If hc_prog_elig_method(hc_prog_count) <> "X" Then
													Call write_value_and_transmit("X", 9, hc_col+4)		'Budget'
													EMReadScreen budget_exist, 22, 24, 15
													If budget_exist = "DOES NOT HAVE A BUDGET" Then EMWriteScreen " ", 9, hc_col+4
												End If
												If budget_exist <> "DOES NOT HAVE A BUDGET" and hc_prog_elig_method(hc_prog_count) <> "X" Then

													EMReadScreen hc_prog_elig_PTMA(hc_prog_count), 1, 5, 63
													EMReadScreen hc_prog_elig_elig_standard_percent(hc_prog_count), 3, 6, 66
													EMReadScreen hc_prog_elig_basis(hc_prog_count), 20, 6, 24
													hc_prog_elig_basis(hc_prog_count) = trim(hc_prog_elig_basis(hc_prog_count))

													EMReadScreen budg_panel, 70, 3, 2
													' SBUD
													' CBUD
													' BBUD
													' LBUD
													' ABUD
													budget_found = False
													' MsgBox "budg_panel - " & budg_panel

													If InStr(budg_panel, "ABUD") <> 0 Then
														' MsgBox "ABUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "ABUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 9, 31
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 10, 31
														EMReadScreen hc_prog_elig_budg_unearned_deduction(hc_prog_count), 	10, 11, 31
														EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 12, 31

														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 14, 31
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 15, 31
														EMReadScreen hc_prog_elig_budg_work_exp_deduction(hc_prog_count), 	10, 16, 31
														EMReadScreen hc_prog_elig_budg_earned_disregard(hc_prog_count), 	10, 17, 31
														EMReadScreen hc_prog_elig_budg_dependent_care(hc_prog_count), 		10, 18, 31

														EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 9, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 10, 71

														EMReadScreen hc_prog_elig_budg_child_sup_deduction(hc_prog_count),	10, 12, 71
														EMReadScreen hc_prog_elig_budg_deemed_income(hc_prog_count), 		10, 13, 71
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 14, 71
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_spenddown(hc_prog_count), 			10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 	10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 		10, 18, 71

													End If

													If InStr(budg_panel, "BBUD") <> 0 Then
														' MsgBox "BBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "BBUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 8, 31
														EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 9, 31
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 10, 31
														EMReadScreen hc_prog_elig_budg_unearned_deduction(hc_prog_count), 	10, 11, 31
														EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 12, 31

														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 8, 71
														EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 9, 71
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 10, 71
														EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 11, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 12, 71

														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 14, 71
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_spenddown(hc_prog_count), 			10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 	10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 		10, 18, 71
													End If

													If InStr(budg_panel, "CBUD") <> 0 Then
														' MsgBox "CBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "CBUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 8, 31
														EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 9, 31
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 10, 31
														EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 11, 31

														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 8, 71
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 9, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 10, 71

														EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 13, 71
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 14, 71
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_excess_income(hc_prog_count), 		10, 16, 71
													End If

													If InStr(budg_panel, "EBUD") <> 0 Then
														budget_found = true
														hc_budget_type(hc_prog_count) = "EBUD"

														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 9, 32
														EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 10, 32
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 11, 32
														EMReadScreen hc_prog_elig_budg_cola(hc_prog_count),					10, 12, 32
														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 13, 32
														EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 14, 32
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 15, 32
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 16, 32
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 17, 32
														EMReadScreen hc_prog_elig_budg_percent_of_fpg(hc_prog_count),		5, 18, 37

														EMReadScreen hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count), 10, 9, 69
														EMReadScreen hc_prog_elig_budg_premium_percent(hc_prog_count),		8, 10, 71
														EMReadScreen hc_prog_elig_budg_sliding_fee_premium(hc_prog_count),	10, 11, 69
														EMReadScreen hc_prog_elig_budg_ui_obligation(hc_prog_count),		10, 12, 69
														EMReadScreen hc_prog_elig_budg_total_premium(hc_prog_count),		10, 13, 69

														EMReadScreen hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count),10,  16, 69
														EMReadScreen hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count), 1, 17, 68

														EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 11, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 12, 71

														EMReadScreen hc_prog_elig_budg_spenddown(hc_prog_count), 			10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 	10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 		10, 18, 71
													End If

													If InStr(budg_panel, "LBUD") <> 0 Then
														' MsgBox "LBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "LBUD"

														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 			10, 8, 32
														EMReadScreen hc_prog_elig_budg_countable_earned_income(hc_prog_count),	10, 9, 32
														EMReadScreen hc_prog_elig_budg_subtotal_countable_income(hc_prog_count),10, 10, 32
														EMReadScreen hc_prog_elig_budg_va_aid_attendincome(hc_prog_count), 		10, 11, 32
														EMReadScreen hc_prog_elig_budg_total_countable_income(hc_prog_count), 	10, 12, 32

														EMReadScreen hc_prog_elig_budg_LTC_exclusions(hc_prog_count), 			10, 14, 32
														EMReadScreen hc_prog_elig_budg_medicare_premium(hc_prog_count), 		10, 15, 32
														EMReadScreen hc_prog_elig_budg_person_clothing_needs(hc_prog_count), 	10, 16, 32
														EMReadScreen hc_prog_elig_budg_maint_needs_allowance(hc_prog_count), 	10, 17, 32
														EMReadScreen hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count), 	10, 18, 32

														EMReadScreen hc_prog_elig_budg_spousal_allocation(hc_prog_count), 		10, 8, 70
														EMReadScreen hc_prog_elig_budg_family_allocation(hc_prog_count), 		10, 9, 70
														EMReadScreen hc_prog_elig_budg_health_ins_premium(hc_prog_count), 		10, 10, 70
														EMReadScreen hc_prog_elig_budg_other_medical_expense(hc_prog_count), 	10, 11, 70
														EMReadScreen hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count), 		10, 12, 70
														EMReadScreen hc_prog_elig_budg_other_deductions(hc_prog_count), 		10, 13, 70
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 		10, 14, 70
														EMReadScreen hc_prog_elig_budg_LTC_spenddown(hc_prog_count), 			10, 15, 70
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 		10, 16, 70
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 			10, 17, 70
														EMReadScreen hc_prog_elig_budg_medical_spenddown(hc_prog_count), 		10, 18, 70
													End If

													If InStr(budg_panel, "SBUD") <> 0 Then
														' MsgBox "SBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "SBUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 			10, 9, 32
														EMReadScreen hc_prog_elig_budg_countable_earned_income(hc_prog_count),	10, 10, 32
														EMReadScreen hc_prog_elig_budg_subtotal_countable_income(hc_prog_count),10, 11, 32
														EMReadScreen hc_prog_elig_budg_va_aid_attendincome(hc_prog_count), 		10, 12, 32
														EMReadScreen hc_prog_elig_budg_total_countable_income(hc_prog_count), 	10, 13, 32

														EMReadScreen hc_prog_elig_budg_LTC_exclusions(hc_prog_count), 			10, 15, 32
														EMReadScreen hc_prog_elig_budg_medicare_premium(hc_prog_count), 		10, 16, 32
														EMReadScreen hc_prog_elig_budg_maint_needs_allowance(hc_prog_count), 	10, 17, 32
														EMReadScreen hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count), 	10, 18, 32

														EMReadScreen hc_prog_elig_budg_spousal_allocation(hc_prog_count), 		10, 9, 71
														EMReadScreen hc_prog_elig_budg_family_allocation(hc_prog_count), 		10, 10, 71
														EMReadScreen hc_prog_elig_budg_health_ins_premium(hc_prog_count), 		10, 11, 71
														EMReadScreen hc_prog_elig_budg_other_medical_expense(hc_prog_count), 	10, 12, 71
														EMReadScreen hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count), 		10, 13, 71
														EMReadScreen hc_prog_elig_budg_other_deductions(hc_prog_count), 		10, 14, 71
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_waiver_obligation(hc_prog_count),	 	10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 		10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 			10, 18, 71
													End If
													If hc_budget_type(hc_prog_count) = "EBUD" or hc_budget_type(hc_prog_count) = "LBUD" or hc_budget_type(hc_prog_count) = "SBUD" Then
														EMReadScreen hc_prog_elig_basis(hc_prog_count), 18, 6, 27
														hc_prog_elig_basis(hc_prog_count) = trim(hc_prog_elig_basis(hc_prog_count))
													End If

													hc_prog_elig_budg_gross_unearned(hc_prog_count) = trim(hc_prog_elig_budg_gross_unearned(hc_prog_count))
													hc_prog_elig_budg_countable_earned_income(hc_prog_count) = trim(hc_prog_elig_budg_countable_earned_income(hc_prog_count))
													hc_prog_elig_budg_subtotal_countable_income(hc_prog_count) = trim(hc_prog_elig_budg_subtotal_countable_income(hc_prog_count))
													hc_prog_elig_budg_va_aid_attendincome(hc_prog_count) = trim(hc_prog_elig_budg_va_aid_attendincome(hc_prog_count))
													hc_prog_elig_budg_total_countable_income(hc_prog_count) = trim(hc_prog_elig_budg_total_countable_income(hc_prog_count))
													hc_prog_elig_budg_deemed_unearned(hc_prog_count) = trim(hc_prog_elig_budg_deemed_unearned(hc_prog_count))
													hc_prog_elig_budg_excluded_unearned(hc_prog_count) = trim(hc_prog_elig_budg_excluded_unearned(hc_prog_count))
													hc_prog_elig_budg_unearned_deduction(hc_prog_count) = trim(hc_prog_elig_budg_unearned_deduction(hc_prog_count))
													hc_prog_elig_budg_net_unearned_income(hc_prog_count) = trim(hc_prog_elig_budg_net_unearned_income(hc_prog_count))

													hc_prog_elig_budg_gross_earned(hc_prog_count) = trim(hc_prog_elig_budg_gross_earned(hc_prog_count))
													hc_prog_elig_budg_deemed_earned(hc_prog_count) = trim(hc_prog_elig_budg_deemed_earned(hc_prog_count))
													hc_prog_elig_budg_excluded_earned(hc_prog_count) = trim(hc_prog_elig_budg_excluded_earned(hc_prog_count))
													hc_prog_elig_budg_work_exp_deduction(hc_prog_count) = trim(hc_prog_elig_budg_work_exp_deduction(hc_prog_count))
													hc_prog_elig_budg_earned_disregard(hc_prog_count) = trim(hc_prog_elig_budg_earned_disregard(hc_prog_count))
													hc_prog_elig_budg_dependent_care(hc_prog_count) = trim(hc_prog_elig_budg_dependent_care(hc_prog_count))

													hc_prog_elig_budg_earned_deduction(hc_prog_count) = trim(hc_prog_elig_budg_earned_deduction(hc_prog_count))
													hc_prog_elig_budg_net_earned_income(hc_prog_count) = trim(hc_prog_elig_budg_net_earned_income(hc_prog_count))

													hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = trim(hc_prog_elig_budg_child_sup_deduction(hc_prog_count))
													hc_prog_elig_budg_deemed_income(hc_prog_count) = trim(hc_prog_elig_budg_deemed_income(hc_prog_count))
													hc_prog_elig_budg_total_net_income(hc_prog_count) = trim(hc_prog_elig_budg_total_net_income(hc_prog_count))
													hc_prog_elig_budg_income_standard(hc_prog_count) = trim(hc_prog_elig_budg_income_standard(hc_prog_count))
													hc_prog_elig_budg_excess_income(hc_prog_count) = trim(hc_prog_elig_budg_excess_income(hc_prog_count))
													hc_prog_elig_budg_spenddown(hc_prog_count) = trim(hc_prog_elig_budg_spenddown(hc_prog_count))
													hc_prog_elig_budg_transfer_penalty(hc_prog_count) = trim(hc_prog_elig_budg_transfer_penalty(hc_prog_count))
													hc_prog_elig_budg_total_liability(hc_prog_count) = trim(hc_prog_elig_budg_total_liability(hc_prog_count))

													hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = trim(hc_prog_elig_budg_LTC_exclusions(hc_prog_count))
													hc_prog_elig_budg_medicare_premium(hc_prog_count) = trim(hc_prog_elig_budg_medicare_premium(hc_prog_count))
													hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = trim(hc_prog_elig_budg_person_clothing_needs(hc_prog_count))
													hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = trim(hc_prog_elig_budg_maint_needs_allowance(hc_prog_count))
													hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = trim(hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count))
													hc_prog_elig_budg_spousal_allocation(hc_prog_count) = trim(hc_prog_elig_budg_spousal_allocation(hc_prog_count))
													hc_prog_elig_budg_family_allocation(hc_prog_count) = trim(hc_prog_elig_budg_family_allocation(hc_prog_count))
													hc_prog_elig_budg_health_ins_premium(hc_prog_count) = trim(hc_prog_elig_budg_health_ins_premium(hc_prog_count))
													hc_prog_elig_budg_other_medical_expense(hc_prog_count) = trim(hc_prog_elig_budg_other_medical_expense(hc_prog_count))
													hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = trim(hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count))
													hc_prog_elig_budg_other_deductions(hc_prog_count) = trim(hc_prog_elig_budg_other_deductions(hc_prog_count))
													hc_prog_elig_budg_LTC_spenddown(hc_prog_count) = trim(hc_prog_elig_budg_LTC_spenddown(hc_prog_count))
													hc_prog_elig_budg_medical_spenddown(hc_prog_count) = trim(hc_prog_elig_budg_medical_spenddown(hc_prog_count))
													hc_prog_elig_budg_waiver_obligation(hc_prog_count) = trim(hc_prog_elig_budg_waiver_obligation(hc_prog_count))

													hc_prog_elig_budg_cola(hc_prog_count) = trim(hc_prog_elig_budg_cola(hc_prog_count))
													hc_prog_elig_budg_percent_of_fpg(hc_prog_count) = trim(hc_prog_elig_budg_percent_of_fpg(hc_prog_count))
													hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count) = trim(hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count))
													hc_prog_elig_budg_premium_percent(hc_prog_count) = trim(hc_prog_elig_budg_premium_percent(hc_prog_count))
													hc_prog_elig_budg_sliding_fee_premium(hc_prog_count) = trim(hc_prog_elig_budg_sliding_fee_premium(hc_prog_count))
													hc_prog_elig_budg_ui_obligation(hc_prog_count) = trim(hc_prog_elig_budg_ui_obligation(hc_prog_count))
													hc_prog_elig_budg_total_premium(hc_prog_count) = trim(hc_prog_elig_budg_total_premium(hc_prog_count))
													hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count) = trim(hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count))
													hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count) = trim(hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count))

													hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = replace(hc_prog_elig_budg_LTC_exclusions(hc_prog_count), "_", "")
													hc_prog_elig_budg_medicare_premium(hc_prog_count) = replace(hc_prog_elig_budg_medicare_premium(hc_prog_count), "_", "")
													hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = replace(hc_prog_elig_budg_person_clothing_needs(hc_prog_count), "_", "")
													hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = replace(hc_prog_elig_budg_maint_needs_allowance(hc_prog_count), "_", "")
													hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = replace(hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count), "_", "")
													hc_prog_elig_budg_family_allocation(hc_prog_count) = replace(hc_prog_elig_budg_family_allocation(hc_prog_count), "_", "")
													hc_prog_elig_budg_health_ins_premium(hc_prog_count) = replace(hc_prog_elig_budg_health_ins_premium(hc_prog_count), "_", "")
													hc_prog_elig_budg_other_medical_expense(hc_prog_count) = replace(hc_prog_elig_budg_other_medical_expense(hc_prog_count), "_", "")
													hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = replace(hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count), "_", "")
													hc_prog_elig_budg_other_deductions(hc_prog_count) = replace(hc_prog_elig_budg_other_deductions(hc_prog_count), "_", "")

													If hc_prog_elig_budg_cola(hc_prog_count) = "__________" Then  hc_prog_elig_budg_cola(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count) = "" Then  hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_sliding_fee_premium(hc_prog_count) = "" Then  hc_prog_elig_budg_sliding_fee_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_ui_obligation(hc_prog_count) = "" Then  hc_prog_elig_budg_ui_obligation(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_premium(hc_prog_count) = "" Then  hc_prog_elig_budg_total_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count) = "" Then  hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_gross_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_gross_unearned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_countable_earned_income(hc_prog_count) = "" Then hc_prog_elig_budg_countable_earned_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_subtotal_countable_income(hc_prog_count) = "" Then hc_prog_elig_budg_subtotal_countable_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_va_aid_attendincome(hc_prog_count) = "__________" Then hc_prog_elig_budg_va_aid_attendincome(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_countable_income(hc_prog_count) = "" Then hc_prog_elig_budg_total_countable_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_deemed_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_unearned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_excluded_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_excluded_unearned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "__________" Then hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_net_unearned_income(hc_prog_count) = "" Then hc_prog_elig_budg_net_unearned_income(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_gross_earned(hc_prog_count) = "" Then hc_prog_elig_budg_gross_earned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_deemed_earned(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_earned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_excluded_earned(hc_prog_count) = "" Then hc_prog_elig_budg_excluded_earned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_work_exp_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_work_exp_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_earned_disregard(hc_prog_count) = "" Then hc_prog_elig_budg_earned_disregard(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_dependent_care(hc_prog_count) = "" Then hc_prog_elig_budg_dependent_care(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_dependent_care(hc_prog_count) = "__________" Then hc_prog_elig_budg_dependent_care(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_earned_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_earned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_earned_deduction(hc_prog_count) = "__________" Then hc_prog_elig_budg_earned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_net_earned_income(hc_prog_count) = "" Then hc_prog_elig_budg_net_earned_income(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "__________" Then hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_deemed_income(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_net_income(hc_prog_count) = "" Then hc_prog_elig_budg_total_net_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_income_standard(hc_prog_count) = "" Then hc_prog_elig_budg_income_standard(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_excess_income(hc_prog_count) = "" Then hc_prog_elig_budg_excess_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_spenddown(hc_prog_count) = "" Then hc_prog_elig_budg_spenddown(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "" Then hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "__________" Then hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_liability(hc_prog_count) = "" Then hc_prog_elig_budg_total_liability(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = "" Then hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_medicare_premium(hc_prog_count) = "" Then hc_prog_elig_budg_medicare_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = "" Then hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = "" Then hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = "" Then hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_spousal_allocation(hc_prog_count) = "" Then hc_prog_elig_budg_spousal_allocation(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_family_allocation(hc_prog_count) = "" Then hc_prog_elig_budg_family_allocation(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_health_ins_premium(hc_prog_count) = "" Then hc_prog_elig_budg_health_ins_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_other_medical_expense(hc_prog_count) = "" Then hc_prog_elig_budg_other_medical_expense(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = "" Then hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_other_deductions(hc_prog_count) = "" Then hc_prog_elig_budg_other_deductions(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_LTC_spenddown(hc_prog_count) = "" Then hc_prog_elig_budg_LTC_spenddown(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_medical_spenddown(hc_prog_count) = "" Then hc_prog_elig_budg_medical_spenddown(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_waiver_obligation(hc_prog_count) = "" Then hc_prog_elig_budg_waiver_obligation(hc_prog_count) = "0.00"

													If budget_found = false Then MsgBox "Budget not coded:" & vbCr & budg_panel & vbCr & vbCr & elig_footer_month & "/" & elig_footer_year

													transmit
													' MsgBox "BACK TO BSUM"
												End If

												Call write_value_and_transmit("X", 18, 3)				'MOBL

												community_spenddown_exists(hc_prog_count) = False
												EW_spenddown_exists(hc_prog_count) = False
												LTC_spenddown_exists(hc_prog_count) = False
												EMReadScreen hc_prog_elig_mobl_result(hc_prog_count), 4, 6, 32
												EMReadScreen hc_prog_elig_mobl_type(hc_prog_count), 	18, 6, 39
												EMReadScreen hc_prog_elig_mobl_period(hc_prog_count), 13, 6, 61
												mobl_row = 6
												Do
													EMReadScreen mobl_ref_numb, 2, mobl_row, 6
													If mobl_ref_numb = hc_elig_ref_numbs(hc_prog_count) Then Exit Do
													mobl_row = mobl_row + 1
												Loop until mobl_ref_numb = "  "
												Call write_value_and_transmit("X", mobl_row, 3)				'MOBL
												Do
													EMReadScreen spenddown_header, 75, 3, 2
													spenddown_header = trim(spenddown_header)
													If spenddown_header = "Community Spenddown Results (SPDN)" Then

														EMReadScreen check_spdwn_type, 1, 5, 14
														If check_spdwn_type <> "_" Then
															mobl_col = 21
															Do
																EMReadScreen mobl_mo, 2, 7, mobl_col
																EMReadScreen mobl_yr, 2, 7, mobl_col+3
																EMReadScreen mobl_orig, 8, 8, mobl_col-3
																mobl_orig = trim(mobl_orig)
																If mobl_mo = elig_footer_month AND mobl_yr = elig_footer_year and mobl_orig <> "0.00"Then
																	EMReadScreen hc_prog_elig_spdn_option(hc_prog_count), 	2, 4, 59
																	EMReadScreen hc_prog_elig_spdn_type(hc_prog_count), 		1, 5, 14
																	EMReadScreen hc_prog_elig_spdn_method(hc_prog_count), 	1, 5, 45
																	EMReadScreen hc_prog_elig_spdn_covered_pop(hc_prog_count), 1, 5, 68
																	community_spenddown_exists(hc_prog_count) = True
																	hc_prog_elig_monthly_spdn_remedial_care(hc_prog_count) = False

																	EMReadScreen hc_prog_elig_original_monthly_spdn(hc_prog_count), 			10, 8, mobl_col-5
																	EMReadScreen hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count), 		10, 9, mobl_col-5
																	EMReadScreen hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count),	5, 10, mobl_col
																	EMReadScreen hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count), 	10, 11, mobl_col-5
																	EMReadScreen hc_prog_elig_monthly_spdn_balance(hc_prog_count), 				10, 12, mobl_col-5
																	hc_prog_elig_original_monthly_spdn(hc_prog_count) = trim(hc_prog_elig_original_monthly_spdn(hc_prog_count))
																	hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count) = trim(hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count))
																	hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count) = trim(hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count))
																	hc_prog_elig_monthly_spdn_balance(hc_prog_count) = trim(hc_prog_elig_monthly_spdn_balance(hc_prog_count))

																	If hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) <> "__ __" Then
																		hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) = replace(hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count), " ", "/")
																		hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) = hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) & "/" & elig_footer_year
																	Else
																		hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) = ""
																	End If
																	'REMEDIAL CARE UPDATES
																	If trim(hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count)) <> "0.00" Then
																		Call write_value_and_transmit("X", 9, 3)
																		cnt_bil_row = 7
																		Do
																			EMReadScreen bil_mo, 2, cnt_bil_row, 13
																			EMReadScreen bil_yr, 2, cnt_bil_row, 16

																			If bil_mo = elig_footer_month AND bil_yr = elig_footer_year Then
																				cnt_bil_row = cnt_bil_row + 3
																				Do
																					EMReadScreen exp_type, 12, cnt_bil_row, 7
																					If trim(exp_type) = "Rem Care" Then
																						hc_prog_elig_monthly_spdn_remedial_care(hc_prog_count) = True
																						Exit Do
																					End If
																					cnt_bil_row = cnt_bil_row + 1
																					If cnt_bil_row = 20 Then
																						PF8
																						cnt_bil_row = 7
																						EMReadScreen end_of_list, 9, 23, 26
																					End If
																					EMReadScreen exp_type, 6, cnt_bil_row, 6
																				Loop until exp_type = "Month:"
																				Exit Do
																			End If

																			cnt_bil_row = cnt_bil_row + 1
																			If cnt_bil_row = 20 Then
																				PF8
																				cnt_bil_row = 7
																				EMReadScreen end_of_list, 9, 22, 16
																			End If
																		Loop until end_of_list = "LAST PAGE" or end_of_list = "ONLY PAGE"
																		PF3
																	End If
																End If
																mobl_col = mobl_col + 11
															Loop until mobl_col = 87
															EMReadScreen hc_prog_elig_oiginal_six_mo_spdn(hc_prog_count), 			10, 15, 45
															EMReadScreen hc_prog_elig_six_mo_spdn_counted_bills(hc_prog_count), 		10, 16, 45
															EMReadScreen hc_prog_elig_six_mo_spnd_satisfaction_date(hc_prog_count), 	8, 17, 45
															EMReadScreen hc_prog_elig_six_mo_spdn_recipient_amount(hc_prog_count), 	10, 18, 45
															EMReadScreen hc_prog_elig_six_mo_spdn_unused_balance(hc_prog_count), 		10, 19, 45
														End if
													ElseIf spenddown_header = "SIS-EW Waiver Obligation Results (EWWO)" Then
														mobl_col = 21
														Do
															EMReadScreen mobl_mo, 2, 11, mobl_col
															EMReadScreen mobl_yr, 2, 11, mobl_col+3
															If mobl_mo = elig_footer_month AND mobl_yr = elig_footer_year Then
																EW_spenddown_exists(hc_prog_count) = True

																EMReadScreen hc_prog_elig_ew_spdn_type_code(hc_prog_count), 		1, 9, 18
																EMReadScreen hc_prog_elig_ew_spdn_type_info(hc_prog_count), 		11, 9, 20
																EMReadScreen hc_prog_elig_ew_spdn_method_code(hc_prog_count), 	1, 9, 40
																EMReadScreen hc_prog_elig_ew_spdn_method_info(hc_prog_count), 	13, 9, 42
																EMReadScreen hc_prog_elig_ew_spdn_covered_pop_code(hc_prog_count), 1, 9, 71
																EMReadScreen hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count), 7, 9, 73

																hc_prog_elig_ew_spdn_type_info(hc_prog_count) =  trim(hc_prog_elig_ew_spdn_type_info(hc_prog_count))
																hc_prog_elig_ew_spdn_method_info(hc_prog_count) =  trim(hc_prog_elig_ew_spdn_method_info(hc_prog_count))
																hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count) =  trim(hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count))

																EMReadScreen hc_prog_elig_ew_spdn_income(hc_prog_count), 9, 12, mobl_col-4
																EMReadScreen hc_prog_elig_ew_spdn_obligation(hc_prog_count), 9, 12, mobl_col-4
																EMReadScreen hc_prog_elig_ew_spdn_liability(hc_prog_count), 9, 12, mobl_col-4
																hc_prog_elig_ew_spdn_obligation(hc_prog_count) = trim(hc_prog_elig_ew_spdn_obligation(hc_prog_count))
																hc_prog_elig_ew_spdn_liability(hc_prog_count) = trim(hc_prog_elig_ew_spdn_liability(hc_prog_count))
															End If
															mobl_col = mobl_col + 11
														Loop until mobl_col = 87

													ElseIf spenddown_header = "Long Term Care/Medical Spenddown Results (LTCS)" Then

														mobl_col = 19
														Do
															EMReadScreen mobl_mo, 2, 7, mobl_col
															EMReadScreen mobl_yr, 2, 7, mobl_col+3
															EMReadScreen mobl_orig, 8, 8, mobl_col-1
															mobl_orig = trim(mobl_orig)
															If mobl_mo = elig_footer_month AND mobl_yr = elig_footer_year and mobl_orig <> "0.00" Then
																LTC_spenddown_exists(hc_prog_count) = True

																EMReadScreen spenddown_to_read, 1, 6, 21
																EMReadScreen second_spenddown_to_read, 1, 6, 21
																If spenddown_to_read <> "_" Then
																	EMReadScreen hc_prog_elig_ltc_spdn_type_code(hc_prog_count), 		1, 6, 21
																	EMReadScreen hc_prog_elig_ltc_spdn_type_info(hc_prog_count), 		11, 6, 23
																	EMReadScreen hc_prog_elig_ltc_spdn_method_code(hc_prog_count), 	1, 6, 43
																	EMReadScreen hc_prog_elig_ltc_spdn_method_info(hc_prog_count), 	13, 6, 45
																	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_code(hc_prog_count), 1, 6, 69
																	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count), 8, 6, 71

																	hc_prog_elig_ltc_spdn_type_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_type_info(hc_prog_count))
																	hc_prog_elig_ltc_spdn_method_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_method_info(hc_prog_count))
																	hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count))
																End If
																' If second_spenddown_to_read <> "_" Then
																' 	EMReadScreen hc_prog_elig_ltc_spdn_type_code(hc_prog_count), 		1, 14, 21
																' 	EMReadScreen hc_prog_elig_ltc_spdn_type_info(hc_prog_count), 		11, 14, 23
																' 	EMReadScreen hc_prog_elig_ltc_spdn_method_code(hc_prog_count), 	1, 14, 42
																' 	EMReadScreen hc_prog_elig_ltc_spdn_method_info(hc_prog_count), 	13, 14, 44
																' 	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_code(hc_prog_count), 1, 14, 68
																' 	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count), 8, 14, 70
																'
																' 	hc_prog_elig_ltc_spdn_type_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_type_info(hc_prog_count))
																' 	hc_prog_elig_ltc_spdn_method_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_method_info(hc_prog_count))
																' 	hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count))
																' End If

																If spenddown_to_read <> "_" Then
																	EMReadScreen hc_prog_elig_ltc_spdn_amount(hc_prog_count), 9, 8, mobl_col-2
																	EMReadScreen hc_prog_elig_ltc_spdn_total_liability(hc_prog_count), 9, 9, mobl_col-2
																	EMReadScreen hc_prog_elig_ltc_spdn_charges(hc_prog_count), 9, 10, mobl_col-2
																	EMReadScreen hc_prog_elig_ltc_spdn_medical_spdn(hc_prog_count), 9, 11, mobl_col-2
																' ElseIf second_spenddown_to_read <> "_" Then
																' 	EMReadScreen hc_prog_elig_ltc_spdn_original(hc_prog_count), 9, 15, mobl_col-2
																' 	EMReadScreen hc_prog_elig_ltc_spdn_counted_bills(hc_prog_count), 9, 16, mobl_col-2
																' 	EMReadScreen hc_prog_elig_ltc_spdn_satisfy_date(hc_prog_count), 5, 17, mobl_col-3
																' 	EMReadScreen hc_prog_elig_ltc_spdn_recipient_amount(hc_prog_count), 9, 18, mobl_col-2
																' 	EMReadScreen hc_prog_elig_ltc_spdn_balance(hc_prog_count), 9, 19, mobl_col-2
																End If
															End If
															mobl_col = mobl_col + 11
														Loop until mobl_col = 85
													Else
														' MsgBox spenddown_header
													End If
													transmit
													EMReadScreen back_to_MOBL_check, 4,	 3, 49
												Loop until back_to_MOBL_check = "MOBL"
												PF3

												Call write_value_and_transmit("X", 18, 34)				'Cert Period Amount'
												EMReadScreen cert_pd_pop_up_check, 27, 5, 13
												If cert_pd_pop_up_check = "Certification Period Amount" Then
													EMReadScreen hc_prog_elig_cert_prd_total_net_income(hc_prog_count), 	10, 7, 34
													EMReadScreen hc_prog_elig_cert_prd_total_standard(hc_prog_count), 		10, 8, 34
													EMReadScreen hc_prog_elig_cert_prd_total_excess_income(hc_prog_count), 	10, 9, 34
													transmit
												End If
												EMWriteScreen " ", 18, 34

												transmit

												EMReadScreen hc_prog_elig_curr_prog_status(hc_prog_count), 10, 8, 34
												EMReadScreen hc_prog_elig_elig_result(hc_prog_count), 	10, 9, 34
												EMReadScreen hc_prog_elig_elig_begin_date(hc_prog_count), 8, 10, 34
												EMReadScreen hc_prog_elig_HRF_reporting(hc_prog_count), 	10, 11, 34
												EMReadScreen hc_prog_elig_ER_date(hc_prog_count), 		8, 12, 34
												row_for_6 = 1
												col_for_6 = 1
												EMSearch "6 Month", row_for_6, col_for_6
												EMReadScreen hc_prog_elig_SR_date(hc_prog_count), 		8, row_for_6, 34
												If hc_prog_elig_SR_date(hc_prog_count) = "__ __ __" Then hc_prog_elig_SR_date(hc_prog_count) = ""
												EMReadScreen hc_prog_elig_TYMA_begin_date(hc_prog_count), 8, 15, 34

												EMReadScreen hc_prog_elig_responsible_county(hc_prog_count), 	2, 8, 76
												EMReadScreen hc_prog_elig_servicing_county(hc_prog_count), 	2, 9, 76
												EMReadScreen hc_prog_elig_source_of_info(hc_prog_count), 		4, 10, 76

												EMReadScreen hc_prog_elig_TYMA_type(hc_prog_count), 2, 15, 76

												EMReadScreen hc_prog_elig_worker_msg_one(hc_prog_count), 78, 18, 3
												EMReadScreen hc_prog_elig_worker_msg_two(hc_prog_count), 78, 19, 3

												transmit

												Exit Do
											End If
											hc_col = hc_col + 11
											If hc_col = 83 Then hc_prog_elig_appd(hc_prog_count) = False
										Loop until hc_col = 83
									Else 'This is the new version of BSUM
										hc_col = 17
										Do
											EMReadScreen budg_mo, 2, 5, hc_col + 2
											EMReadScreen budg_yr, 2, 5, hc_col + 5
											If budg_mo = elig_footer_month AND budg_yr = elig_footer_year Then
												EMReadScreen hc_prog_elig_elig_type(hc_prog_count), 		2, 11, hc_col
												EMReadScreen hc_prog_elig_elig_standard(hc_prog_count), 	1, 11, hc_col + 5
												EMReadScreen hc_prog_elig_method(hc_prog_count), 			1, 12, hc_col + 4
												EMReadScreen hc_prog_elig_waiver(hc_prog_count), 			1, 13, hc_col + 4

												EMReadScreen hc_prog_elig_total_net_income(hc_prog_count), 9, 15, hc_col
												EMReadScreen hc_prog_elig_standard(hc_prog_count), 		9, 16, hc_col
												EMReadScreen hc_prog_elig_excess_income(hc_prog_count), 	9, 17, hc_col

												If hc_prog_elig_waiver(hc_prog_count) = "F" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CADI Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "G" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CADI Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "H" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CAC Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "I" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CAC Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "J" Then hc_prog_elig_waiver_detail(hc_prog_count) = "EW Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "K" Then hc_prog_elig_waiver_detail(hc_prog_count) = "EW Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "L" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NF Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "M" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NF Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "P" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NB Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "Q" Then hc_prog_elig_waiver_detail(hc_prog_count) = "TBI NB Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "R" Then hc_prog_elig_waiver_detail(hc_prog_count) = "DD Conversion"
												If hc_prog_elig_waiver(hc_prog_count) = "S" Then hc_prog_elig_waiver_detail(hc_prog_count) = "DD Diversion"
												If hc_prog_elig_waiver(hc_prog_count) = "Y" Then hc_prog_elig_waiver_detail(hc_prog_count) = "CSG Conversion"

												Call write_value_and_transmit("X", 6, hc_col)						'Opening the HC Span
												If hc_prog_elig_major_program(hc_prog_count) = "MA" or hc_prog_elig_major_program(hc_prog_count) = "EMA" Then
													EMReadScreen hc_prog_elig_test_absence(hc_prog_count), 			6, 6, 5
													EMReadScreen hc_prog_elig_test_assets(hc_prog_count), 			6, 7, 5
													EMReadScreen hc_prog_elig_test_assistance_unit(hc_prog_count), 	6, 8, 5
													EMReadScreen hc_prog_elig_test_citizenship(hc_prog_count), 		6, 9, 5
													EMReadScreen hc_prog_elig_test_coop(hc_prog_count), 				6, 10, 5
													EMReadScreen hc_prog_elig_test_correctional_faci(hc_prog_count), 	6, 11, 5
													EMReadScreen hc_prog_elig_test_death(hc_prog_count), 				6, 12, 5
													EMReadScreen hc_prog_elig_test_elig_other_prog(hc_prog_count), 	6, 13, 5
													EMReadScreen hc_prog_elig_test_fail_file(hc_prog_count), 			6, 14, 5
													EMReadScreen hc_prog_elig_test_IMD(hc_prog_count), 				6, 15, 5

													EMReadScreen hc_prog_elig_test_uncompensated_transfer(hc_prog_count), 6, 18, 5

													EMReadScreen hc_prog_elig_test_income(hc_prog_count), 			6, 6, 46
													EMReadScreen hc_prog_elig_test_medicare_elig(hc_prog_count), 		6, 7, 46
													EMReadScreen hc_prog_elig_test_MNSure_system(hc_prog_count), 		6, 8, 46
													EMReadScreen hc_prog_elig_test_Obligation_one_mo(hc_prog_count), 	6, 9, 46
													EMReadScreen hc_prog_elig_test_obligation_six_mo(hc_prog_count), 	6, 10, 46
													If hc_prog_elig_major_program(hc_prog_count) = "MA" Then
														EMReadScreen hc_prog_elig_test_other_health_ins(hc_prog_count), 6, 11, 46
														EMReadScreen hc_prog_elig_test_parent(hc_prog_count), 			6, 12, 46
														EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 		6, 13, 46
														EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 			6, 14, 46
														EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 		6, 15, 46
													ElseIf hc_prog_elig_major_program(hc_prog_count) = "EMA" Then
														EMReadScreen hc_prog_elig_test_parent(hc_prog_count), 		6, 11, 46
														EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 	6, 12, 46
														EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 		6, 13, 46
														EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 	6, 14, 46
													End If

													' Call write_value_and_transmit("X", 7, 3)				'Assets'
													' If assets_pop_up_check = "Assets" Then
													' 	'TODO read asset information'
													' 	transmit
													' Else
													' 	EMWriteScreen " ", 7, 3
													' End If

													' MARK ALL OF THE POSSIBLE POPUPS
													EMReadScreen ema_person_test_check, 3, 3, 27
													' EMWriteScreen "X", 7, 3				'Assets'			'THIS CAUSES PROBEMS ON INELIG SPANS - Since we aren't reading anything from here we are going to ignore it
													EMWriteScreen "X", 10, 3			'Cooperration'
													EMWriteScreen "X", 14, 3			'Fail to File'
													If ema_person_test_check <> "EMA" Then EMWriteScreen "X", 14, 44							'Verification'
													If ema_person_test_check = "EMA" Then EMWriteScreen "X", 13, 44			'Verification'
													EMWriteScreen "X", 18, 3			'Uncompensated Transfer
													' MsgBox "Check the Xes"
													transmit

													Do
														' MsgBox "Pause"
														EMReadScreen assets_pop_up_check, 6, 6, 35
														EMReadScreen coop_pop_up_check, 11, 8, 43
														EMReadScreen fail_to_file_pop_up_check, 12, 12, 43
														EMReadScreen verif_pop_up_check, 12, 3, 24
														EMReadScreen uncomp_xfer_pop_up_check, 13, 5, 23
														If UCase(assets_pop_up_check) = "ASSETS" Then
															'TODO read asset information'
															' MsgBox "ONE"
														ElseIf UCase(fail_to_file_pop_up_check) = "FAIL TO FILE" Then
															' MsgBox "THREE"
															EMReadScreen hc_prog_elig_test_fail_file_HRF(hc_prog_count), 				6, 14, 33
															EMReadScreen hc_prog_elig_test_fail_file_IR(hc_prog_count), 				6, 15, 33
															EMReadScreen hc_prog_elig_test_fail_file_AR(hc_prog_count), 				6, 16, 33
															EMReadScreen hc_prog_elig_test_fail_file_ER(hc_prog_count), 				6, 17, 33
															EMReadScreen hc_prog_elig_test_fail_file_quarterly_TYMA(hc_prog_count), 	6, 18, 33
														ElseIf UCase(coop_pop_up_check) = "COOPERATION" Then
															' MsgBox "TWO"
															Call write_value_and_transmit("X", 10, 26)				'Cooperration'
															EMReadScreen hc_prog_elig_test_coop_pben_cash(hc_prog_count), 			6, 10, 31
															EMReadScreen hc_prog_elig_test_coop_pben_smrt(hc_prog_count), 			6, 11, 31
															transmit
															EMReadScreen hc_prog_elig_test_coop_pben(hc_prog_count), 				6, 10, 28
															EMReadScreen hc_prog_elig_test_coop_fail_provide_info(hc_prog_count), 	6, 11, 28
															EMReadScreen hc_prog_elig_test_coop_IEVS(hc_prog_count), 				6, 12, 28
															EMReadScreen hc_prog_elig_test_coop_medical_support(hc_prog_count), 	6, 13, 28
															EMReadScreen hc_prog_elig_test_coop_other_health_ins(hc_prog_count), 	6, 14, 28
															EMReadScreen hc_prog_elig_test_coop_SSN(hc_prog_count), 				6, 15, 28
															EMReadScreen hc_prog_elig_test_coop_third_party_liability(hc_prog_count), 6, 16, 28
														ElseIf UCase(uncomp_xfer_pop_up_check) = "UNCOMPENSATED" Then
															' MsgBox "FIVE"
														ElseIf UCase(verif_pop_up_check) = "VERIFICATION" Then
															' MsgBox "FOUR"
															EMReadScreen hc_prog_elig_test_verif_ACCT(hc_prog_count), 		6, 5, 10
															EMReadScreen hc_prog_elig_test_verif_BUSI(hc_prog_count), 		6, 6, 10
															EMReadScreen hc_prog_elig_test_verif_JOBS(hc_prog_count), 		6, 7, 10
															EMReadScreen hc_prog_elig_test_verif_IMIG_status(hc_prog_count), 	6, 8, 10
															EMReadScreen hc_prog_elig_test_verif_LUMP(hc_prog_count), 		6, 9, 10
															EMReadScreen hc_prog_elig_test_verif_OTHR(hc_prog_count), 		6, 10, 10
															EMReadScreen hc_prog_elig_test_verif_PBEN(hc_prog_count), 		6, 11, 10
															EMReadScreen hc_prog_elig_test_verif_PREG(hc_prog_count), 		6, 12, 10
															EMReadScreen hc_prog_elig_test_verif_RBIC(hc_prog_count), 		6, 13, 10
															EMReadScreen hc_prog_elig_test_verif_REST(hc_prog_count), 		6, 14, 10
															EMReadScreen hc_prog_elig_test_verif_SECU(hc_prog_count), 		6, 15, 10
															EMReadScreen hc_prog_elig_test_verif_SPON(hc_prog_count), 		6, 16, 10
															EMReadScreen hc_prog_elig_test_verif_TRAN(hc_prog_count), 		6, 17, 10
															EMReadScreen hc_prog_elig_test_verif_UNEA(hc_prog_count), 		6, 18, 10
															EMReadScreen hc_prog_elig_test_verif_cit_id(hc_prog_count), 		6, 19, 10
															EMReadScreen hc_prog_elig_test_verif_CARS(hc_prog_count), 		6, 20, 10

														End If

														transmit
														EMReadScreen BSUM_check, 4, 3, 57
														' MsgBox "BSUM_check - `" & BSUM_check & "`"
													Loop Until BSUM_check = "BSUM"
													' MsgBox "OUT"
												End If

												If hc_prog_elig_major_program(hc_prog_count) = "IMD" Then
													EMReadScreen hc_prog_elig_test_absence(hc_prog_count), 			6, 7, 5
													EMReadScreen hc_prog_elig_test_assets(hc_prog_count), 			6, 8, 5
													EMReadScreen hc_prog_elig_test_assistance_unit(hc_prog_count), 	6, 9, 5
													EMReadScreen hc_prog_elig_test_citizenship(hc_prog_count), 		6, 10, 5
													EMReadScreen hc_prog_elig_test_coop(hc_prog_count), 			6, 11, 5
													EMReadScreen hc_prog_elig_test_death(hc_prog_count), 			6, 12, 5
													EMReadScreen hc_prog_elig_test_fail_file(hc_prog_count), 		6, 13, 5
													EMReadScreen hc_prog_elig_test_IMD(hc_prog_count), 				6, 14, 5
													EMReadScreen hc_prog_elig_test_income(hc_prog_count), 			6, 15, 5

													EMReadScreen hc_prog_elig_test_medicare_elig(hc_prog_count), 			6, 7, 44
													EMReadScreen hc_prog_elig_test_MNSure_system(hc_prog_count), 			6, 8, 44
													EMReadScreen hc_prog_elig_test_Obligation_one_mo(hc_prog_count),		6, 9, 44
													EMReadScreen hc_prog_elig_test_obligation_six_mo(hc_prog_count), 		6, 10, 44
													EMReadScreen hc_prog_elig_test_parent(hc_prog_count), 					6, 11, 44
													EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 				6, 12, 44
													EMReadScreen hc_prog_elig_test_uncompensated_transfer(hc_prog_count), 	6, 13, 44
													EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 					6, 14, 44
													EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 				6, 15, 44

													transmit
												End If


												Call write_value_and_transmit("X", 7, hc_col+4)			'Household Count'
												' MsgBox "IN HH COunt"
												EMReadScreen hc_prog_elig_hh_size(hc_prog_count), 2, 5, 68
												hc_prog_elig_hh_size(hc_prog_count) = trim(hc_prog_elig_hh_size(hc_prog_count))
												hc_prog_elig_hh_size(hc_prog_count) = replace(hc_prog_elig_hh_size(hc_prog_count), "_", "")

												hh_row = 12
												Do
													' MsgBox "hh_row - " & hh_row
													EMReadScreen inc_count_ind, 1, hh_row, 61
													If inc_count_ind = "Y" Then
														EMReadScreen memb_numb_income_count, 2, hh_row, 13
														hc_prog_elig_members_whose_income_counts(hc_prog_count) = hc_prog_elig_members_whose_income_counts(hc_prog_count) & " " & memb_numb_income_count
													End If
													hh_row = hh_row + 1
													EMReadScreen next_inc_count_ind, 1, hh_row, 61
													' MsgBox "next_inc_count_ind - " & next_inc_count_ind
												Loop until next_inc_count_ind = "_" or next_inc_count_ind = " "
												hc_prog_elig_members_whose_income_counts(hc_prog_count) = trim(hc_prog_elig_members_whose_income_counts(hc_prog_count))
												hc_prog_elig_members_whose_income_counts_list(hc_prog_count) = replace(hc_prog_elig_members_whose_income_counts(hc_prog_count), " ", ",")
												hc_prog_elig_members_whose_income_counts(hc_prog_count) = split(hc_prog_elig_members_whose_income_counts(hc_prog_count), " ")
												transmit
												' MsgBox "Out of HH Count and back to BSUM"
												If hc_prog_elig_method(hc_prog_count) <> "X" Then
													Call write_value_and_transmit("X", 8, hc_col+4)		'Budget'
													EMReadScreen budget_exist, 22, 24, 15
													If budget_exist = "DOES NOT HAVE A BUDGET" Then EMWriteScreen " ", 8, hc_col+4
												End If
												If budget_exist <> "DOES NOT HAVE A BUDGET" and hc_prog_elig_method(hc_prog_count) <> "X" Then

													EMReadScreen hc_prog_elig_PTMA(hc_prog_count), 1, 5, 63
													EMReadScreen hc_prog_elig_elig_standard_percent(hc_prog_count), 3, 6, 66
													EMReadScreen hc_prog_elig_basis(hc_prog_count), 20, 6, 24
													hc_prog_elig_basis(hc_prog_count) = trim(hc_prog_elig_basis(hc_prog_count))

													EMReadScreen budg_panel, 70, 3, 2
													' SBUD
													' CBUD
													' BBUD
													' LBUD
													' ABUD
													budget_found = False
													' MsgBox "budg_panel - " & budg_panel

													If InStr(budg_panel, "ABUD") <> 0 Then
														' MsgBox "ABUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "ABUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 9, 31
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 10, 31
														EMReadScreen hc_prog_elig_budg_unearned_deduction(hc_prog_count), 	10, 11, 31
														EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 12, 31

														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 14, 31
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 15, 31
														EMReadScreen hc_prog_elig_budg_work_exp_deduction(hc_prog_count), 	10, 16, 31
														EMReadScreen hc_prog_elig_budg_earned_disregard(hc_prog_count), 	10, 17, 31
														EMReadScreen hc_prog_elig_budg_dependent_care(hc_prog_count), 		10, 18, 31

														EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 9, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 10, 71

														EMReadScreen hc_prog_elig_budg_child_sup_deduction(hc_prog_count),	10, 12, 71
														EMReadScreen hc_prog_elig_budg_deemed_income(hc_prog_count), 		10, 13, 71
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 14, 71
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_spenddown(hc_prog_count), 			10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 	10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 		10, 18, 71

													End If

													If InStr(budg_panel, "BBUD") <> 0 Then
														' MsgBox "BBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "BBUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 8, 31
														EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 9, 31
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 10, 31
														EMReadScreen hc_prog_elig_budg_unearned_deduction(hc_prog_count), 	10, 11, 31
														EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 12, 31

														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 8, 71
														EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 9, 71
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 10, 71
														EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 11, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 12, 71

														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 14, 71
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_spenddown(hc_prog_count), 			10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 	10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 		10, 18, 71
													End If

													If InStr(budg_panel, "CBUD") <> 0 Then
														' MsgBox "CBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "CBUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 8, 31
														EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 9, 31
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 10, 31
														EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 11, 31

														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 8, 71
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 9, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 10, 71

														EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 13, 71
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 14, 71
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_excess_income(hc_prog_count), 		10, 16, 71
													End If

													If InStr(budg_panel, "EBUD") <> 0 Then
														budget_found = true
														hc_budget_type(hc_prog_count) = "EBUD"

														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 9, 32
														EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 10, 32
														EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 	10, 11, 32
														EMReadScreen hc_prog_elig_budg_cola(hc_prog_count),					10, 12, 32
														EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 13, 32
														EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 14, 32
														EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 		10, 15, 32
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 16, 32
														EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 		10, 17, 32
														EMReadScreen hc_prog_elig_budg_percent_of_fpg(hc_prog_count),		5, 18, 37

														EMReadScreen hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count), 10, 9, 69
														EMReadScreen hc_prog_elig_budg_premium_percent(hc_prog_count),		8, 10, 71
														EMReadScreen hc_prog_elig_budg_sliding_fee_premium(hc_prog_count),	10, 11, 69
														EMReadScreen hc_prog_elig_budg_ui_obligation(hc_prog_count),		10, 12, 69
														EMReadScreen hc_prog_elig_budg_total_premium(hc_prog_count),		10, 13, 69

														EMReadScreen hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count),10,  16, 69
														EMReadScreen hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count), 1, 17, 68

														EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 11, 71
														EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 12, 71

														EMReadScreen hc_prog_elig_budg_spenddown(hc_prog_count), 			10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 	10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 		10, 18, 71
													End If

													If InStr(budg_panel, "LBUD") <> 0 Then
														' MsgBox "LBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "LBUD"

														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 			10, 8, 32
														EMReadScreen hc_prog_elig_budg_countable_earned_income(hc_prog_count),	10, 9, 32
														EMReadScreen hc_prog_elig_budg_subtotal_countable_income(hc_prog_count),10, 10, 32
														EMReadScreen hc_prog_elig_budg_va_aid_attendincome(hc_prog_count), 		10, 11, 32
														EMReadScreen hc_prog_elig_budg_total_countable_income(hc_prog_count), 	10, 12, 32

														EMReadScreen hc_prog_elig_budg_LTC_exclusions(hc_prog_count), 			10, 14, 32
														EMReadScreen hc_prog_elig_budg_medicare_premium(hc_prog_count), 		10, 15, 32
														EMReadScreen hc_prog_elig_budg_person_clothing_needs(hc_prog_count), 	10, 16, 32
														EMReadScreen hc_prog_elig_budg_maint_needs_allowance(hc_prog_count), 	10, 17, 32
														EMReadScreen hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count), 	10, 18, 32

														EMReadScreen hc_prog_elig_budg_spousal_allocation(hc_prog_count), 		10, 8, 70
														EMReadScreen hc_prog_elig_budg_family_allocation(hc_prog_count), 		10, 9, 70
														EMReadScreen hc_prog_elig_budg_health_ins_premium(hc_prog_count), 		10, 10, 70
														EMReadScreen hc_prog_elig_budg_other_medical_expense(hc_prog_count), 	10, 11, 70
														EMReadScreen hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count), 		10, 12, 70
														EMReadScreen hc_prog_elig_budg_other_deductions(hc_prog_count), 		10, 13, 70
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 		10, 14, 70
														EMReadScreen hc_prog_elig_budg_LTC_spenddown(hc_prog_count), 			10, 15, 70
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 		10, 16, 70
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 			10, 17, 70
														EMReadScreen hc_prog_elig_budg_medical_spenddown(hc_prog_count), 		10, 18, 70
													End If

													If InStr(budg_panel, "SBUD") <> 0 Then
														' MsgBox "SBUD"
														budget_found = true
														hc_budget_type(hc_prog_count) = "SBUD"
														EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 			10, 9, 32
														EMReadScreen hc_prog_elig_budg_countable_earned_income(hc_prog_count),	10, 10, 32
														EMReadScreen hc_prog_elig_budg_subtotal_countable_income(hc_prog_count),10, 11, 32
														EMReadScreen hc_prog_elig_budg_va_aid_attendincome(hc_prog_count), 		10, 12, 32
														EMReadScreen hc_prog_elig_budg_total_countable_income(hc_prog_count), 	10, 13, 32

														EMReadScreen hc_prog_elig_budg_LTC_exclusions(hc_prog_count), 			10, 15, 32
														EMReadScreen hc_prog_elig_budg_medicare_premium(hc_prog_count), 		10, 16, 32
														EMReadScreen hc_prog_elig_budg_maint_needs_allowance(hc_prog_count), 	10, 17, 32
														EMReadScreen hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count), 	10, 18, 32

														EMReadScreen hc_prog_elig_budg_spousal_allocation(hc_prog_count), 		10, 9, 71
														EMReadScreen hc_prog_elig_budg_family_allocation(hc_prog_count), 		10, 10, 71
														EMReadScreen hc_prog_elig_budg_health_ins_premium(hc_prog_count), 		10, 11, 71
														EMReadScreen hc_prog_elig_budg_other_medical_expense(hc_prog_count), 	10, 12, 71
														EMReadScreen hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count), 		10, 13, 71
														EMReadScreen hc_prog_elig_budg_other_deductions(hc_prog_count), 		10, 14, 71
														EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 		10, 15, 71
														EMReadScreen hc_prog_elig_budg_waiver_obligation(hc_prog_count),	 	10, 16, 71
														EMReadScreen hc_prog_elig_budg_transfer_penalty(hc_prog_count), 		10, 17, 71
														EMReadScreen hc_prog_elig_budg_total_liability(hc_prog_count), 			10, 18, 71
													End If
													If hc_budget_type(hc_prog_count) = "EBUD" or hc_budget_type(hc_prog_count) = "LBUD" or hc_budget_type(hc_prog_count) = "SBUD" Then
														EMReadScreen hc_prog_elig_basis(hc_prog_count), 18, 6, 27
														hc_prog_elig_basis(hc_prog_count) = trim(hc_prog_elig_basis(hc_prog_count))
													End If

													hc_prog_elig_budg_gross_unearned(hc_prog_count) = trim(hc_prog_elig_budg_gross_unearned(hc_prog_count))
													hc_prog_elig_budg_countable_earned_income(hc_prog_count) = trim(hc_prog_elig_budg_countable_earned_income(hc_prog_count))
													hc_prog_elig_budg_subtotal_countable_income(hc_prog_count) = trim(hc_prog_elig_budg_subtotal_countable_income(hc_prog_count))
													hc_prog_elig_budg_va_aid_attendincome(hc_prog_count) = trim(hc_prog_elig_budg_va_aid_attendincome(hc_prog_count))
													hc_prog_elig_budg_total_countable_income(hc_prog_count) = trim(hc_prog_elig_budg_total_countable_income(hc_prog_count))
													hc_prog_elig_budg_deemed_unearned(hc_prog_count) = trim(hc_prog_elig_budg_deemed_unearned(hc_prog_count))
													hc_prog_elig_budg_excluded_unearned(hc_prog_count) = trim(hc_prog_elig_budg_excluded_unearned(hc_prog_count))
													hc_prog_elig_budg_unearned_deduction(hc_prog_count) = trim(hc_prog_elig_budg_unearned_deduction(hc_prog_count))
													hc_prog_elig_budg_net_unearned_income(hc_prog_count) = trim(hc_prog_elig_budg_net_unearned_income(hc_prog_count))

													hc_prog_elig_budg_gross_earned(hc_prog_count) = trim(hc_prog_elig_budg_gross_earned(hc_prog_count))
													hc_prog_elig_budg_deemed_earned(hc_prog_count) = trim(hc_prog_elig_budg_deemed_earned(hc_prog_count))
													hc_prog_elig_budg_excluded_earned(hc_prog_count) = trim(hc_prog_elig_budg_excluded_earned(hc_prog_count))
													hc_prog_elig_budg_work_exp_deduction(hc_prog_count) = trim(hc_prog_elig_budg_work_exp_deduction(hc_prog_count))
													hc_prog_elig_budg_earned_disregard(hc_prog_count) = trim(hc_prog_elig_budg_earned_disregard(hc_prog_count))
													hc_prog_elig_budg_dependent_care(hc_prog_count) = trim(hc_prog_elig_budg_dependent_care(hc_prog_count))

													hc_prog_elig_budg_earned_deduction(hc_prog_count) = trim(hc_prog_elig_budg_earned_deduction(hc_prog_count))
													hc_prog_elig_budg_net_earned_income(hc_prog_count) = trim(hc_prog_elig_budg_net_earned_income(hc_prog_count))

													hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = trim(hc_prog_elig_budg_child_sup_deduction(hc_prog_count))
													hc_prog_elig_budg_deemed_income(hc_prog_count) = trim(hc_prog_elig_budg_deemed_income(hc_prog_count))
													hc_prog_elig_budg_total_net_income(hc_prog_count) = trim(hc_prog_elig_budg_total_net_income(hc_prog_count))
													hc_prog_elig_budg_income_standard(hc_prog_count) = trim(hc_prog_elig_budg_income_standard(hc_prog_count))
													hc_prog_elig_budg_excess_income(hc_prog_count) = trim(hc_prog_elig_budg_excess_income(hc_prog_count))
													hc_prog_elig_budg_spenddown(hc_prog_count) = trim(hc_prog_elig_budg_spenddown(hc_prog_count))
													hc_prog_elig_budg_transfer_penalty(hc_prog_count) = trim(hc_prog_elig_budg_transfer_penalty(hc_prog_count))
													hc_prog_elig_budg_total_liability(hc_prog_count) = trim(hc_prog_elig_budg_total_liability(hc_prog_count))

													hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = trim(hc_prog_elig_budg_LTC_exclusions(hc_prog_count))
													hc_prog_elig_budg_medicare_premium(hc_prog_count) = trim(hc_prog_elig_budg_medicare_premium(hc_prog_count))
													hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = trim(hc_prog_elig_budg_person_clothing_needs(hc_prog_count))
													hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = trim(hc_prog_elig_budg_maint_needs_allowance(hc_prog_count))
													hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = trim(hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count))
													hc_prog_elig_budg_spousal_allocation(hc_prog_count) = trim(hc_prog_elig_budg_spousal_allocation(hc_prog_count))
													hc_prog_elig_budg_family_allocation(hc_prog_count) = trim(hc_prog_elig_budg_family_allocation(hc_prog_count))
													hc_prog_elig_budg_health_ins_premium(hc_prog_count) = trim(hc_prog_elig_budg_health_ins_premium(hc_prog_count))
													hc_prog_elig_budg_other_medical_expense(hc_prog_count) = trim(hc_prog_elig_budg_other_medical_expense(hc_prog_count))
													hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = trim(hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count))
													hc_prog_elig_budg_other_deductions(hc_prog_count) = trim(hc_prog_elig_budg_other_deductions(hc_prog_count))
													hc_prog_elig_budg_LTC_spenddown(hc_prog_count) = trim(hc_prog_elig_budg_LTC_spenddown(hc_prog_count))
													hc_prog_elig_budg_medical_spenddown(hc_prog_count) = trim(hc_prog_elig_budg_medical_spenddown(hc_prog_count))
													hc_prog_elig_budg_waiver_obligation(hc_prog_count) = trim(hc_prog_elig_budg_waiver_obligation(hc_prog_count))

													hc_prog_elig_budg_cola(hc_prog_count) = trim(hc_prog_elig_budg_cola(hc_prog_count))
													hc_prog_elig_budg_percent_of_fpg(hc_prog_count) = trim(hc_prog_elig_budg_percent_of_fpg(hc_prog_count))
													hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count) = trim(hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count))
													hc_prog_elig_budg_premium_percent(hc_prog_count) = trim(hc_prog_elig_budg_premium_percent(hc_prog_count))
													hc_prog_elig_budg_sliding_fee_premium(hc_prog_count) = trim(hc_prog_elig_budg_sliding_fee_premium(hc_prog_count))
													hc_prog_elig_budg_ui_obligation(hc_prog_count) = trim(hc_prog_elig_budg_ui_obligation(hc_prog_count))
													hc_prog_elig_budg_total_premium(hc_prog_count) = trim(hc_prog_elig_budg_total_premium(hc_prog_count))
													hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count) = trim(hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count))
													hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count) = trim(hc_prog_elig_budg_medi_part_b_reimb_yn(hc_prog_count))

													hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = replace(hc_prog_elig_budg_LTC_exclusions(hc_prog_count), "_", "")
													hc_prog_elig_budg_medicare_premium(hc_prog_count) = replace(hc_prog_elig_budg_medicare_premium(hc_prog_count), "_", "")
													hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = replace(hc_prog_elig_budg_person_clothing_needs(hc_prog_count), "_", "")
													hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = replace(hc_prog_elig_budg_maint_needs_allowance(hc_prog_count), "_", "")
													hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = replace(hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count), "_", "")
													hc_prog_elig_budg_family_allocation(hc_prog_count) = replace(hc_prog_elig_budg_family_allocation(hc_prog_count), "_", "")
													hc_prog_elig_budg_health_ins_premium(hc_prog_count) = replace(hc_prog_elig_budg_health_ins_premium(hc_prog_count), "_", "")
													hc_prog_elig_budg_other_medical_expense(hc_prog_count) = replace(hc_prog_elig_budg_other_medical_expense(hc_prog_count), "_", "")
													hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = replace(hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count), "_", "")
													hc_prog_elig_budg_other_deductions(hc_prog_count) = replace(hc_prog_elig_budg_other_deductions(hc_prog_count), "_", "")

													If hc_prog_elig_budg_cola(hc_prog_count) = "__________" Then  hc_prog_elig_budg_cola(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count) = "" Then  hc_prog_elig_budg_counted_income_for_prem_calc(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_sliding_fee_premium(hc_prog_count) = "" Then  hc_prog_elig_budg_sliding_fee_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_ui_obligation(hc_prog_count) = "" Then  hc_prog_elig_budg_ui_obligation(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_premium(hc_prog_count) = "" Then  hc_prog_elig_budg_total_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count) = "" Then  hc_prog_elig_budg_medi_part_b_reimb_std(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_gross_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_gross_unearned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_countable_earned_income(hc_prog_count) = "" Then hc_prog_elig_budg_countable_earned_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_subtotal_countable_income(hc_prog_count) = "" Then hc_prog_elig_budg_subtotal_countable_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_va_aid_attendincome(hc_prog_count) = "__________" Then hc_prog_elig_budg_va_aid_attendincome(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_countable_income(hc_prog_count) = "" Then hc_prog_elig_budg_total_countable_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_deemed_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_unearned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_excluded_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_excluded_unearned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "__________" Then hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_net_unearned_income(hc_prog_count) = "" Then hc_prog_elig_budg_net_unearned_income(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_gross_earned(hc_prog_count) = "" Then hc_prog_elig_budg_gross_earned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_deemed_earned(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_earned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_excluded_earned(hc_prog_count) = "" Then hc_prog_elig_budg_excluded_earned(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_work_exp_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_work_exp_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_earned_disregard(hc_prog_count) = "" Then hc_prog_elig_budg_earned_disregard(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_dependent_care(hc_prog_count) = "" Then hc_prog_elig_budg_dependent_care(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_dependent_care(hc_prog_count) = "__________" Then hc_prog_elig_budg_dependent_care(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_earned_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_earned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_earned_deduction(hc_prog_count) = "__________" Then hc_prog_elig_budg_earned_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_net_earned_income(hc_prog_count) = "" Then hc_prog_elig_budg_net_earned_income(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "__________" Then hc_prog_elig_budg_child_sup_deduction(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_deemed_income(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_net_income(hc_prog_count) = "" Then hc_prog_elig_budg_total_net_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_income_standard(hc_prog_count) = "" Then hc_prog_elig_budg_income_standard(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_excess_income(hc_prog_count) = "" Then hc_prog_elig_budg_excess_income(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_spenddown(hc_prog_count) = "" Then hc_prog_elig_budg_spenddown(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "" Then hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "__________" Then hc_prog_elig_budg_transfer_penalty(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_total_liability(hc_prog_count) = "" Then hc_prog_elig_budg_total_liability(hc_prog_count) = "0.00"

													If hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = "" Then hc_prog_elig_budg_LTC_exclusions(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_medicare_premium(hc_prog_count) = "" Then hc_prog_elig_budg_medicare_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = "" Then hc_prog_elig_budg_person_clothing_needs(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = "" Then hc_prog_elig_budg_maint_needs_allowance(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = "" Then hc_prog_elig_budg_guardian_rep_payee_fee(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_spousal_allocation(hc_prog_count) = "" Then hc_prog_elig_budg_spousal_allocation(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_family_allocation(hc_prog_count) = "" Then hc_prog_elig_budg_family_allocation(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_health_ins_premium(hc_prog_count) = "" Then hc_prog_elig_budg_health_ins_premium(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_other_medical_expense(hc_prog_count) = "" Then hc_prog_elig_budg_other_medical_expense(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = "" Then hc_prog_elig_budg_SSI_1611_benefit(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_other_deductions(hc_prog_count) = "" Then hc_prog_elig_budg_other_deductions(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_LTC_spenddown(hc_prog_count) = "" Then hc_prog_elig_budg_LTC_spenddown(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_medical_spenddown(hc_prog_count) = "" Then hc_prog_elig_budg_medical_spenddown(hc_prog_count) = "0.00"
													If hc_prog_elig_budg_waiver_obligation(hc_prog_count) = "" Then hc_prog_elig_budg_waiver_obligation(hc_prog_count) = "0.00"

													If budget_found = false Then MsgBox "Budget not coded:" & vbCr & budg_panel & vbCr & vbCr & elig_footer_month & "/" & elig_footer_year

													transmit
													' MsgBox "BACK TO BSUM"
												End If

												Call write_value_and_transmit("X", 18, 3)				'MOBL

												community_spenddown_exists(hc_prog_count) = False
												EW_spenddown_exists(hc_prog_count) = False
												LTC_spenddown_exists(hc_prog_count) = False
												EMReadScreen hc_prog_elig_mobl_result(hc_prog_count), 4, 6, 32
												EMReadScreen hc_prog_elig_mobl_type(hc_prog_count), 	18, 6, 39
												EMReadScreen hc_prog_elig_mobl_period(hc_prog_count), 13, 6, 61
												mobl_row = 6
												Do
													EMReadScreen mobl_ref_numb, 2, mobl_row, 6
													If mobl_ref_numb = hc_elig_ref_numbs(hc_prog_count) Then Exit Do
													mobl_row = mobl_row + 1
												Loop until mobl_ref_numb = "  "
												Call write_value_and_transmit("X", mobl_row, 3)				'MOBL
												Do
													EMReadScreen spenddown_header, 75, 3, 2
													spenddown_header = trim(spenddown_header)
													If spenddown_header = "Community Spenddown Results (SPDN)" Then

														EMReadScreen check_spdwn_type, 1, 5, 14
														If check_spdwn_type <> "_" Then
															mobl_col = 21
															Do
																EMReadScreen mobl_mo, 2, 7, mobl_col
																EMReadScreen mobl_yr, 2, 7, mobl_col+3
																EMReadScreen mobl_orig, 8, 8, mobl_col-3
																mobl_orig = trim(mobl_orig)
																If mobl_mo = elig_footer_month AND mobl_yr = elig_footer_year and mobl_orig <> "0.00"Then
																	EMReadScreen hc_prog_elig_spdn_option(hc_prog_count), 	2, 4, 59
																	EMReadScreen hc_prog_elig_spdn_type(hc_prog_count), 		1, 5, 14
																	EMReadScreen hc_prog_elig_spdn_method(hc_prog_count), 	1, 5, 45
																	EMReadScreen hc_prog_elig_spdn_covered_pop(hc_prog_count), 1, 5, 68
																	community_spenddown_exists(hc_prog_count) = True
																	hc_prog_elig_monthly_spdn_remedial_care(hc_prog_count) = False

																	EMReadScreen hc_prog_elig_original_monthly_spdn(hc_prog_count), 			10, 8, mobl_col-5
																	EMReadScreen hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count), 		10, 9, mobl_col-5
																	EMReadScreen hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count),	5, 10, mobl_col
																	EMReadScreen hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count), 	10, 11, mobl_col-5
																	EMReadScreen hc_prog_elig_monthly_spdn_balance(hc_prog_count), 				10, 12, mobl_col-5
																	hc_prog_elig_original_monthly_spdn(hc_prog_count) = trim(hc_prog_elig_original_monthly_spdn(hc_prog_count))
																	hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count) = trim(hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count))
																	hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count) = trim(hc_prog_elig_monthly_spdn_recipient_amount(hc_prog_count))
																	hc_prog_elig_monthly_spdn_balance(hc_prog_count) = trim(hc_prog_elig_monthly_spdn_balance(hc_prog_count))

																	If hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) <> "__ __" Then
																		hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) = replace(hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count), " ", "/")
																		hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) = hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) & "/" & elig_footer_year
																	Else
																		hc_prog_elig_monthly_spdn_satisfaction_date(hc_prog_count) = ""
																	End If
																	'REMEDIAL CARE UPDATES
																	If trim(hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count)) <> "0.00" Then
																		Call write_value_and_transmit("X", 9, 3)
																		cnt_bil_row = 7
																		Do
																			EMReadScreen bil_mo, 2, cnt_bil_row, 13
																			EMReadScreen bil_yr, 2, cnt_bil_row, 16

																			If bil_mo = elig_footer_month AND bil_yr = elig_footer_year Then
																				cnt_bil_row = cnt_bil_row + 3
																				Do
																					EMReadScreen exp_type, 12, cnt_bil_row, 7
																					If trim(exp_type) = "Rem Care" Then
																						hc_prog_elig_monthly_spdn_remedial_care(hc_prog_count) = True
																						Exit Do
																					End If
																					cnt_bil_row = cnt_bil_row + 1
																					If cnt_bil_row = 20 Then
																						PF8
																						cnt_bil_row = 7
																						EMReadScreen end_of_list, 9, 23, 26
																					End If
																					EMReadScreen exp_type, 6, cnt_bil_row, 6
																				Loop until exp_type = "Month:"
																				Exit Do
																			End If

																			cnt_bil_row = cnt_bil_row + 1
																			If cnt_bil_row = 20 Then
																				PF8
																				cnt_bil_row = 7
																				EMReadScreen end_of_list, 9, 22, 16
																			End If
																		Loop until end_of_list = "LAST PAGE" or end_of_list = "ONLY PAGE"
																		PF3
																	End If
																End If
																mobl_col = mobl_col + 11
															Loop until mobl_col = 87
															EMReadScreen hc_prog_elig_oiginal_six_mo_spdn(hc_prog_count), 			10, 15, 45
															EMReadScreen hc_prog_elig_six_mo_spdn_counted_bills(hc_prog_count), 		10, 16, 45
															EMReadScreen hc_prog_elig_six_mo_spnd_satisfaction_date(hc_prog_count), 	8, 17, 45
															EMReadScreen hc_prog_elig_six_mo_spdn_recipient_amount(hc_prog_count), 	10, 18, 45
															EMReadScreen hc_prog_elig_six_mo_spdn_unused_balance(hc_prog_count), 		10, 19, 45
														End if
													ElseIf spenddown_header = "SIS-EW Waiver Obligation Results (EWWO)" Then
														mobl_col = 21
														Do
															EMReadScreen mobl_mo, 2, 11, mobl_col
															EMReadScreen mobl_yr, 2, 11, mobl_col+3
															If mobl_mo = elig_footer_month AND mobl_yr = elig_footer_year Then
																EW_spenddown_exists(hc_prog_count) = True

																EMReadScreen hc_prog_elig_ew_spdn_type_code(hc_prog_count), 		1, 9, 18
																EMReadScreen hc_prog_elig_ew_spdn_type_info(hc_prog_count), 		11, 9, 20
																EMReadScreen hc_prog_elig_ew_spdn_method_code(hc_prog_count), 	1, 9, 40
																EMReadScreen hc_prog_elig_ew_spdn_method_info(hc_prog_count), 	13, 9, 42
																EMReadScreen hc_prog_elig_ew_spdn_covered_pop_code(hc_prog_count), 1, 9, 71
																EMReadScreen hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count), 7, 9, 73

																hc_prog_elig_ew_spdn_type_info(hc_prog_count) =  trim(hc_prog_elig_ew_spdn_type_info(hc_prog_count))
																hc_prog_elig_ew_spdn_method_info(hc_prog_count) =  trim(hc_prog_elig_ew_spdn_method_info(hc_prog_count))
																hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count) =  trim(hc_prog_elig_ew_spdn_covered_pop_info(hc_prog_count))

																EMReadScreen hc_prog_elig_ew_spdn_income(hc_prog_count), 9, 12, mobl_col-4
																EMReadScreen hc_prog_elig_ew_spdn_obligation(hc_prog_count), 9, 12, mobl_col-4
																EMReadScreen hc_prog_elig_ew_spdn_liability(hc_prog_count), 9, 12, mobl_col-4
																hc_prog_elig_ew_spdn_obligation(hc_prog_count) = trim(hc_prog_elig_ew_spdn_obligation(hc_prog_count))
																hc_prog_elig_ew_spdn_liability(hc_prog_count) = trim(hc_prog_elig_ew_spdn_liability(hc_prog_count))
															End If
															mobl_col = mobl_col + 11
														Loop until mobl_col = 87

													ElseIf spenddown_header = "Long Term Care/Medical Spenddown Results (LTCS)" Then

														mobl_col = 19
														Do
															EMReadScreen mobl_mo, 2, 7, mobl_col
															EMReadScreen mobl_yr, 2, 7, mobl_col+3
															EMReadScreen mobl_orig, 8, 8, mobl_col-1
															mobl_orig = trim(mobl_orig)
															If mobl_mo = elig_footer_month AND mobl_yr = elig_footer_year and mobl_orig <> "0.00" Then
																LTC_spenddown_exists(hc_prog_count) = True

																EMReadScreen spenddown_to_read, 1, 6, 21
																EMReadScreen second_spenddown_to_read, 1, 6, 21
																If spenddown_to_read <> "_" Then
																	EMReadScreen hc_prog_elig_ltc_spdn_type_code(hc_prog_count), 		1, 6, 21
																	EMReadScreen hc_prog_elig_ltc_spdn_type_info(hc_prog_count), 		11, 6, 23
																	EMReadScreen hc_prog_elig_ltc_spdn_method_code(hc_prog_count), 	1, 6, 43
																	EMReadScreen hc_prog_elig_ltc_spdn_method_info(hc_prog_count), 	13, 6, 45
																	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_code(hc_prog_count), 1, 6, 69
																	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count), 8, 6, 71

																	hc_prog_elig_ltc_spdn_type_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_type_info(hc_prog_count))
																	hc_prog_elig_ltc_spdn_method_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_method_info(hc_prog_count))
																	hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count))
																End If
																' If second_spenddown_to_read <> "_" Then
																' 	EMReadScreen hc_prog_elig_ltc_spdn_type_code(hc_prog_count), 		1, 14, 21
																' 	EMReadScreen hc_prog_elig_ltc_spdn_type_info(hc_prog_count), 		11, 14, 23
																' 	EMReadScreen hc_prog_elig_ltc_spdn_method_code(hc_prog_count), 	1, 14, 42
																' 	EMReadScreen hc_prog_elig_ltc_spdn_method_info(hc_prog_count), 	13, 14, 44
																' 	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_code(hc_prog_count), 1, 14, 68
																' 	EMReadScreen hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count), 8, 14, 70
																'
																' 	hc_prog_elig_ltc_spdn_type_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_type_info(hc_prog_count))
																' 	hc_prog_elig_ltc_spdn_method_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_method_info(hc_prog_count))
																' 	hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count) =  trim(hc_prog_elig_ltc_spdn_covered_pop_info(hc_prog_count))
																' End If

																If spenddown_to_read <> "_" Then
																	EMReadScreen hc_prog_elig_ltc_spdn_amount(hc_prog_count), 9, 8, mobl_col-2
																	EMReadScreen hc_prog_elig_ltc_spdn_total_liability(hc_prog_count), 9, 9, mobl_col-2
																	EMReadScreen hc_prog_elig_ltc_spdn_charges(hc_prog_count), 9, 10, mobl_col-2
																	EMReadScreen hc_prog_elig_ltc_spdn_medical_spdn(hc_prog_count), 9, 11, mobl_col-2
																' ElseIf second_spenddown_to_read <> "_" Then
																' 	EMReadScreen hc_prog_elig_ltc_spdn_original(hc_prog_count), 9, 15, mobl_col-2
																' 	EMReadScreen hc_prog_elig_ltc_spdn_counted_bills(hc_prog_count), 9, 16, mobl_col-2
																' 	EMReadScreen hc_prog_elig_ltc_spdn_satisfy_date(hc_prog_count), 5, 17, mobl_col-3
																' 	EMReadScreen hc_prog_elig_ltc_spdn_recipient_amount(hc_prog_count), 9, 18, mobl_col-2
																' 	EMReadScreen hc_prog_elig_ltc_spdn_balance(hc_prog_count), 9, 19, mobl_col-2
																End If
															End If
															mobl_col = mobl_col + 11
														Loop until mobl_col = 85
													Else
														' MsgBox spenddown_header
													End If
													transmit
													EMReadScreen back_to_MOBL_check, 4,	 3, 49
												Loop until back_to_MOBL_check = "MOBL"
												PF3

												Call write_value_and_transmit("X", 18, 34)				'Cert Period Amount'
												EMReadScreen cert_pd_pop_up_check, 27, 5, 13
												If cert_pd_pop_up_check = "Certification Period Amount" Then
													EMReadScreen hc_prog_elig_cert_prd_total_net_income(hc_prog_count), 	10, 7, 34
													EMReadScreen hc_prog_elig_cert_prd_total_standard(hc_prog_count), 		10, 8, 34
													EMReadScreen hc_prog_elig_cert_prd_total_excess_income(hc_prog_count), 	10, 9, 34
													transmit
												End If
												EMWriteScreen " ", 18, 34

												transmit

												EMReadScreen hc_prog_elig_curr_prog_status(hc_prog_count), 10, 8, 34
												EMReadScreen hc_prog_elig_elig_result(hc_prog_count), 	10, 9, 34
												EMReadScreen hc_prog_elig_elig_begin_date(hc_prog_count), 8, 10, 34
												EMReadScreen hc_prog_elig_HRF_reporting(hc_prog_count), 	10, 11, 34
												EMReadScreen hc_prog_elig_ER_date(hc_prog_count), 		8, 12, 34
												row_for_6 = 1
												col_for_6 = 1
												EMSearch "6 Month", row_for_6, col_for_6
												EMReadScreen hc_prog_elig_SR_date(hc_prog_count), 		8, row_for_6, 34
												If hc_prog_elig_SR_date(hc_prog_count) = "__ __ __" Then hc_prog_elig_SR_date(hc_prog_count) = ""
												EMReadScreen hc_prog_elig_TYMA_begin_date(hc_prog_count), 8, 15, 34

												EMReadScreen hc_prog_elig_responsible_county(hc_prog_count), 	2, 8, 76
												EMReadScreen hc_prog_elig_servicing_county(hc_prog_count), 	2, 9, 76
												EMReadScreen hc_prog_elig_source_of_info(hc_prog_count), 		4, 10, 76

												EMReadScreen hc_prog_elig_TYMA_type(hc_prog_count), 2, 15, 76

												EMReadScreen hc_prog_elig_worker_msg_one(hc_prog_count), 78, 18, 3
												EMReadScreen hc_prog_elig_worker_msg_two(hc_prog_count), 78, 19, 3

												transmit

												Exit Do
											End If
											hc_col = hc_col + 11
											If hc_col = 83 Then hc_prog_elig_appd(hc_prog_count) = False
										Loop until hc_col = 83
									End If	'End of If/Else for two versions of BSUM
								End If
							End If

							If hc_prog_elig_major_program(hc_prog_count) = "QMB" or hc_prog_elig_major_program(hc_prog_count) = "SLMB" or hc_prog_elig_major_program(hc_prog_count) = "QI1" Then
								hc_budget_type(hc_prog_count) = "MBUD"
								EMReadScreen hc_elig_full_name(hc_prog_count), 40, 5, 15
								hc_elig_full_name(hc_prog_count) = trim(hc_elig_full_name(hc_prog_count))
								EMReadScreen hc_prog_elig_elig_type(hc_prog_count), 		2, 6, 56
								EMReadScreen hc_prog_elig_elig_standard(hc_prog_count), 	1, 6, 64
								EMReadScreen hc_prog_elig_elig_standard_percent(hc_prog_count), 3, 6, 66
								EMReadScreen hc_prog_elig_basis(hc_prog_count), 			15, 6, 27

								EMReadScreen hc_prog_elig_budg_gross_unearned(hc_prog_count), 		10, 9, 31
								EMReadScreen hc_prog_elig_budg_deemed_unearned(hc_prog_count), 		10, 10, 31
								EMReadScreen hc_prog_elig_budg_excluded_unearned(hc_prog_count), 		10, 11, 31
								EMReadScreen hc_prog_elig_budg_unearned_deduction(hc_prog_count), 	10, 12, 31
								EMReadScreen hc_prog_elig_budg_standard_disregard(hc_prog_count), 	10, 13, 31
								EMReadScreen hc_prog_elig_budg_net_unearned_income(hc_prog_count), 	10, 14, 31

								EMReadScreen hc_prog_elig_budg_gross_earned(hc_prog_count), 		10, 9, 71
								EMReadScreen hc_prog_elig_budg_deemed_earned(hc_prog_count), 		10, 10, 71
								EMReadScreen hc_prog_elig_budg_excluded_earned(hc_prog_count), 	10, 11, 71
								EMReadScreen hc_prog_elig_budg_earned_deduction(hc_prog_count), 	10, 12, 71
								EMReadScreen hc_prog_elig_budg_net_earned_income(hc_prog_count), 	10, 13, 71

								EMReadScreen hc_prog_elig_budg_total_net_income(hc_prog_count), 	10, 15, 71
								EMReadScreen hc_prog_elig_budg_income_standard(hc_prog_count), 	10, 16, 71
								EMReadScreen hc_prog_elig_budg_excess_income(hc_prog_count), 		10, 17, 71

								income_string = ""
								Call write_value_and_transmit("X", 9, 3)	'Unearned Income
								EMReadScreen in_menu_check, 15, 2, 33
								If in_menu_check = "Unearned Income" Then
									EMReadScreen income_name, 40, 4, 20
									income_name = trim(income_name)
									menu_row = 8
									Do
										EMReadScreen income_type, 25, menu_row, 12
										EMReadScreen income_amt, 10, menu_row, 43

										income_type = trim(income_type)
										income_amt = replace(income_amt, "_", "")
										If income_amt <> "" Then
											income_string = income_string & income_name & " from " & income_type & ": $ " & income_amt & "~"
										End If
										menu_row = menu_row + 1
									Loop until income_amt = ""
									transmit
								End If

								Call write_value_and_transmit("X", 10, 3)	'Unearned Income - Deemed
								EMReadScreen in_menu_check, 15, 2, 33
								If in_menu_check = "Unearned Income" Then
									EMReadScreen income_name, 40, 4, 20
									income_name = trim(income_name)
									menu_row = 8
									Do
										EMReadScreen income_type, 25, menu_row, 12
										EMReadScreen income_amt, 10, menu_row, 43

										income_type = trim(income_type)
										income_amt = replace(income_amt, "_", "")
										If income_amt <> "" Then
											income_string = income_string & income_name & " from " & income_type & ": $ " & income_amt & "~"
										End If
										menu_row = menu_row + 1
									Loop until income_amt = ""
									transmit
								End If


								Call write_value_and_transmit("X", 9, 43)	'Earned Income
								EMReadScreen in_menu_check, 13, 2, 38
								If in_menu_check = "Earned Income" Then
									EMReadScreen income_name, 40, 4, 19
									income_name = trim(income_name)
									menu_row = 8
									Do
										EMReadScreen income_type, 25, menu_row, 11
										EMReadScreen income_amt, 10, menu_row, 43

										income_type = trim(income_type)
										income_amt = replace(income_amt, "_", "")
										If income_amt <> "" Then
											income_string = income_string & income_name & " from " & income_type & ": $ " & income_amt & "~"
										End If
										menu_row = menu_row + 1
									Loop until income_amt = ""
									transmit
								End If


								Call write_value_and_transmit("X", 10, 43)	'Earned Income - Deemed
								EMReadScreen in_menu_check, 13, 2, 38
								If in_menu_check = "Earned Income" Then
									EMReadScreen income_name, 40, 4, 19
									income_name = trim(income_name)
									menu_row = 8
									Do
										EMReadScreen income_type, 25, menu_row, 11
										EMReadScreen income_amt, 10, menu_row, 43

										income_type = trim(income_type)
										income_amt = replace(income_amt, "_", "")
										If income_amt <> "" Then
											income_string = income_string & income_name & " from " & income_type & ": $ " & income_amt & "~"
										End If
										menu_row = menu_row + 1
									Loop until income_amt = ""
									transmit
								End If
								hc_prog_list_all_income(hc_prog_count) = income_string
								If right(hc_prog_list_all_income(hc_prog_count), 1) = "~" and len(hc_prog_list_all_income(hc_prog_count)) <> 1 Then hc_prog_list_all_income(hc_prog_count) = left(hc_prog_list_all_income(hc_prog_count), len(hc_prog_list_all_income(hc_prog_count))-1)
								If len(hc_prog_list_all_income(hc_prog_count)) = 1 Then hc_prog_list_all_income(hc_prog_count) = ""

								hc_prog_elig_budg_gross_unearned(hc_prog_count) = trim(hc_prog_elig_budg_gross_unearned(hc_prog_count))
								hc_prog_elig_budg_deemed_unearned(hc_prog_count) = trim(hc_prog_elig_budg_deemed_unearned(hc_prog_count))
								hc_prog_elig_budg_excluded_unearned(hc_prog_count) = trim(hc_prog_elig_budg_excluded_unearned(hc_prog_count))
								hc_prog_elig_budg_unearned_deduction(hc_prog_count) = trim(hc_prog_elig_budg_unearned_deduction(hc_prog_count))
								hc_prog_elig_budg_standard_disregard(hc_prog_count) = trim(hc_prog_elig_budg_standard_disregard(hc_prog_count))
								hc_prog_elig_budg_net_unearned_income(hc_prog_count) = trim(hc_prog_elig_budg_net_unearned_income(hc_prog_count))

								hc_prog_elig_budg_gross_earned(hc_prog_count) = trim(hc_prog_elig_budg_gross_earned(hc_prog_count))
								hc_prog_elig_budg_deemed_earned(hc_prog_count) = trim(hc_prog_elig_budg_deemed_earned(hc_prog_count))
								hc_prog_elig_budg_excluded_earned(hc_prog_count) = trim(hc_prog_elig_budg_excluded_earned(hc_prog_count))
								hc_prog_elig_budg_earned_deduction(hc_prog_count) = trim(hc_prog_elig_budg_earned_deduction(hc_prog_count))
								hc_prog_elig_budg_net_earned_income(hc_prog_count) = trim(hc_prog_elig_budg_net_earned_income(hc_prog_count))

								hc_prog_elig_budg_total_net_income(hc_prog_count) = trim(hc_prog_elig_budg_total_net_income(hc_prog_count))
								hc_prog_elig_budg_income_standard(hc_prog_count) = trim(hc_prog_elig_budg_income_standard(hc_prog_count))
								hc_prog_elig_budg_excess_income(hc_prog_count) = trim(hc_prog_elig_budg_excess_income(hc_prog_count))

								If hc_prog_elig_budg_gross_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_gross_unearned(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_deemed_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_unearned(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_excluded_unearned(hc_prog_count) = "" Then hc_prog_elig_budg_excluded_unearned(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_unearned_deduction(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_standard_disregard(hc_prog_count) = "" Then hc_prog_elig_budg_standard_disregard(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_net_unearned_income(hc_prog_count) = "" Then hc_prog_elig_budg_net_unearned_income(hc_prog_count) = "0.00"

								If hc_prog_elig_budg_gross_earned(hc_prog_count) = "" Then hc_prog_elig_budg_gross_earned(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_deemed_earned(hc_prog_count) = "" Then hc_prog_elig_budg_deemed_earned(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_excluded_earned(hc_prog_count) = "" Then hc_prog_elig_budg_excluded_earned(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_earned_deduction(hc_prog_count) = "" Then hc_prog_elig_budg_earned_deduction(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_net_earned_income(hc_prog_count) = "" Then hc_prog_elig_budg_net_earned_income(hc_prog_count) = "0.00"

								If hc_prog_elig_budg_total_net_income(hc_prog_count) = "" Then hc_prog_elig_budg_total_net_income(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_income_standard(hc_prog_count) = "" Then hc_prog_elig_budg_income_standard(hc_prog_count) = "0.00"
								If hc_prog_elig_budg_excess_income(hc_prog_count) = "" Then hc_prog_elig_budg_excess_income(hc_prog_count) = "0.00"

								Call write_value_and_transmit("X", 5, 66)			'Household Count'
								EMReadScreen hc_prog_elig_hh_size(hc_prog_count), 2, 5, 68
								hc_prog_elig_hh_size(hc_prog_count) = trim(hc_prog_elig_hh_size(hc_prog_count))
								hc_prog_elig_hh_size(hc_prog_count) = replace(hc_prog_elig_hh_size(hc_prog_count), "_", "")
								hh_row = 12
								Do
									EMReadScreen inc_count_ind, 1, hh_row, 61
									If inc_count_ind = "Y" Then
										EMReadScreen memb_numb_income_count, 2, hh_row, 13
										hc_prog_elig_members_whose_income_counts(hc_prog_count) = hc_prog_elig_members_whose_income_counts(hc_prog_count) & " " & memb_numb_income_count
									End If
									hh_row = hh_row + 1
									EMReadScreen next_inc_count_ind, 1, hh_row, 61
								Loop until next_inc_count_ind = " "
								hc_prog_elig_members_whose_income_counts(hc_prog_count) = trim(hc_prog_elig_members_whose_income_counts(hc_prog_count))
								hc_prog_elig_members_whose_income_counts_list(hc_prog_count) = replace(hc_prog_elig_members_whose_income_counts(hc_prog_count), " ", ",")
								hc_prog_elig_members_whose_income_counts(hc_prog_count) = split(hc_prog_elig_members_whose_income_counts(hc_prog_count), " ")
								transmit

								transmit

								EMReadScreen hc_prog_elig_test_absence(hc_prog_count), 				6, 6, 5
								EMReadScreen hc_prog_elig_test_after_processing_month(hc_prog_count),	6, 7, 5
								EMReadScreen hc_prog_elig_test_assets(hc_prog_count), 				6, 8, 5
								EMReadScreen hc_prog_elig_test_assistance_unit(hc_prog_count), 		6, 9, 5
								EMReadScreen hc_prog_elig_test_basis_for_other_prog(hc_prog_count), 6, 10, 5
								EMReadScreen hc_prog_elig_test_citizenship(hc_prog_count), 			6, 11, 5
								EMReadScreen hc_prog_elig_test_coop(hc_prog_count), 				6, 12, 5
								EMReadScreen hc_prog_elig_test_correctional_faci(hc_prog_count), 	6, 13, 5

								EMReadScreen hc_prog_elig_test_death(hc_prog_count), 				6, 6, 45
								EMReadScreen hc_prog_elig_test_fail_file(hc_prog_count), 			6, 7, 45
								EMReadScreen hc_prog_elig_test_income(hc_prog_count), 				6, 8, 45
								EMReadScreen hc_prog_elig_test_medicare_part_a(hc_prog_count),		6, 9, 45
								EMReadScreen hc_prog_elig_test_residence(hc_prog_count), 			6, 10, 45
								EMReadScreen hc_prog_elig_test_verif(hc_prog_count), 				6, 11, 45
								EMReadScreen hc_prog_elig_test_withdrawn(hc_prog_count), 			6, 12, 45

								EMReadScreen hc_prog_elig_test_uncompensated_transfer(hc_prog_count), 6, 17, 5

								transmit

								EMReadScreen hc_prog_elig_app_date(hc_prog_count), 8, 4, 73
								If trim(hc_prog_elig_app_date(hc_prog_count)) <> "" Then
									If DateDiff("d", hc_prog_elig_app_date(hc_prog_count), date) = 0 Then
										approved_today = True
										hc_prog_elig_approved_today(hc_prog_count) = True
									End If
									If allow_late_note = True Then
										one_week_ago = DateAdd("d", -7, date)
										If DateDiff("d", one_week_ago, hc_prog_elig_app_date(hc_prog_count)) >= 0 Then
											approved_today = True
											hc_prog_elig_approved_today(hc_prog_count) = True
										End If
									End If
									If developer_mode = True Then
										approved_today = True										'TESTING OPTION'
										hc_prog_elig_approved_today(hc_prog_count) = True			'TESTING OPTION'
									End If
								End If

								EMReadScreen hc_prog_elig_curr_prog_status(hc_prog_count), 10, 8, 34
								EMReadScreen hc_prog_elig_elig_result(hc_prog_count), 	10, 9, 34
								EMReadScreen hc_prog_elig_elig_begin_date(hc_prog_count), 8, 10, 34
								EMReadScreen hc_prog_elig_ER_date(hc_prog_count), 		8, 11, 34
								row_for_6 = 1
								col_for_6 = 1
								EMSearch "6 Month", row_for_6, col_for_6
								EMReadScreen hc_prog_elig_SR_date(hc_prog_count), 		8, row_for_6, 34
								If hc_prog_elig_SR_date(hc_prog_count) = "__ __ __" Then hc_prog_elig_SR_date(hc_prog_count) = ""
								EMReadScreen hc_prog_elig_source_of_info(hc_prog_count), 	4, 14, 34

								EMReadScreen hc_prog_elig_responsible_county(hc_prog_count), 	2, 8, 78
								EMReadScreen hc_prog_elig_servicing_county(hc_prog_count), 	2, 9, 78

								EMReadScreen hc_prog_elig_worker_msg_one(hc_prog_count), 78, 18, 3
								EMReadScreen hc_prog_elig_worker_msg_two(hc_prog_count), 78, 19, 3

								transmit
							End If
							If trim(hc_prog_elig_elig_type(hc_prog_count)) = "" Then
								If hc_prog_elig_elig_type(hc_prog_count) = "" Then hc_prog_elig_basis(hc_prog_count) = ""

								If hc_prog_elig_elig_type(hc_prog_count) = "1A" Then hc_prog_elig_basis(hc_prog_count) = "MFIP Eligble End 06/30/02"
								If hc_prog_elig_elig_type(hc_prog_count) = "13" Then hc_prog_elig_basis(hc_prog_count) = "Transitional MA"
								If hc_prog_elig_elig_type(hc_prog_count) = "14" Then hc_prog_elig_basis(hc_prog_count) = "Transitional Year MA"
								If hc_prog_elig_elig_type(hc_prog_count) = "11" Then hc_prog_elig_basis(hc_prog_count) = "Auto Newborn"
								If hc_prog_elig_elig_type(hc_prog_count) = "09" Then hc_prog_elig_basis(hc_prog_count) = "IV-E Adoption Assistance"
								If hc_prog_elig_elig_type(hc_prog_count) = "PX" Then hc_prog_elig_basis(hc_prog_count) = "Pregnant Woman"
								If hc_prog_elig_elig_type(hc_prog_count) = "PC" Then hc_prog_elig_basis(hc_prog_count) = "Pregnant Women - CHIP"
								If hc_prog_elig_elig_type(hc_prog_count) = "CB" Then hc_prog_elig_basis(hc_prog_count) = "Child 0-2, Not Auto Newborn"
								If hc_prog_elig_elig_type(hc_prog_count) = "CK" Then hc_prog_elig_basis(hc_prog_count) = " Child 2-18"
								If hc_prog_elig_elig_type(hc_prog_count) = "CX" Then hc_prog_elig_basis(hc_prog_count) = "Child 19-20"
								If hc_prog_elig_elig_type(hc_prog_count) = "CM" Then hc_prog_elig_basis(hc_prog_count) = "21, In An IMD"
								If hc_prog_elig_elig_type(hc_prog_count) = "AA" Then hc_prog_elig_basis(hc_prog_count) = "AFDC-Related"
								If hc_prog_elig_elig_type(hc_prog_count) = "AX" Then hc_prog_elig_basis(hc_prog_count) = "Adult Without Child"
								If hc_prog_elig_elig_type(hc_prog_count) = "BT" Then hc_prog_elig_basis(hc_prog_count) = "Blind TEFRA"
								If hc_prog_elig_elig_type(hc_prog_count) = "DT" Then hc_prog_elig_basis(hc_prog_count) = "Disabled TEFRA"
								If hc_prog_elig_elig_type(hc_prog_count) = "15" Then hc_prog_elig_basis(hc_prog_count) = "1619A"
								If hc_prog_elig_elig_type(hc_prog_count) = "16" Then hc_prog_elig_basis(hc_prog_count) = "1619B"
								If hc_prog_elig_elig_type(hc_prog_count) = "DC" Then hc_prog_elig_basis(hc_prog_count) = "Disabled Child 18-20"
								If hc_prog_elig_elig_type(hc_prog_count) = "EX" Then hc_prog_elig_basis(hc_prog_count) = "Elderly"
								If hc_prog_elig_elig_type(hc_prog_count) = "BX" Then hc_prog_elig_basis(hc_prog_count) = "Blind"
								If hc_prog_elig_elig_type(hc_prog_count) = "DX" Then hc_prog_elig_basis(hc_prog_count) = "Disabled"
								If hc_prog_elig_elig_type(hc_prog_count) = "DP" Then hc_prog_elig_basis(hc_prog_count) = "EPD, With A Premium"
								If hc_prog_elig_elig_type(hc_prog_count) = "BC" Then hc_prog_elig_basis(hc_prog_count) = "MA - BCC Eff 07/01/02"
								If hc_prog_elig_elig_type(hc_prog_count) = "02" Then hc_prog_elig_basis(hc_prog_count) = "RCA Eligible"
								If hc_prog_elig_elig_type(hc_prog_count) = "06" Then hc_prog_elig_basis(hc_prog_count) = "GA Eligible"
								If hc_prog_elig_elig_type(hc_prog_count) = "GS" Then hc_prog_elig_basis(hc_prog_count) = "Adult Without Child"
								If hc_prog_elig_elig_type(hc_prog_count) = "RM" Then hc_prog_elig_basis(hc_prog_count) = "Refugee Med, No MA Basis"
								If hc_prog_elig_elig_type(hc_prog_count) = "10" Then hc_prog_elig_basis(hc_prog_count) = "MN Adoption Asssistance"
								If hc_prog_elig_elig_type(hc_prog_count) = "25" Then hc_prog_elig_basis(hc_prog_count) = "IV-E Foster Care"

							End If
						' Else
						' 	hc_prog_elig_appd(hc_prog_count) = False
						End If
					End If

					If hc_elig_full_name(hc_prog_count) <> "" Then
						hc_elig_full_name(hc_prog_count) = trim(hc_elig_full_name(hc_prog_count))
						If Instr(hc_elig_full_name(hc_prog_count), ",") <> 0 Then
							temp_name_array = ""
							temp_name_array = split(hc_elig_full_name(hc_prog_count), ",")
							hc_elig_full_name(hc_prog_count) = trim(temp_name_array(1) & " " & trim(temp_name_array(0)))
						End If
						temp_name_array = ""
						temp_name_array = split(hc_elig_full_name(hc_prog_count))
						hc_elig_full_name(hc_prog_count) = ""
						for i = 0 to UBound(temp_name_array)
							If temp_name_array(i) <> "" Then
								hc_elig_full_name(hc_prog_count) = hc_elig_full_name(hc_prog_count) & " " & UCase(left(temp_name_array(i), 1)) & LCase(right(temp_name_array(i), len(temp_name_array(i))-1))
							End If
						next
						hc_elig_full_name(hc_prog_count) = trim(hc_elig_full_name(hc_prog_count))
					End If

				End If

				Do
					EMReadScreen hhmm_check, 4, 3, 51
					If hhmm_check <> "HHMM" Then PF3
				Loop Until hhmm_check = "HHMM"
				hc_prog_count = hc_prog_count + 1
				If page_numb > 1 Then PF8
				If page_numb > 2 Then PF8
				If page_numb > 3 Then PF8

				hc_row = hc_row + 1
				If hc_row = 18 Then
					PF8
					page_numb = page_numb + 1
					hc_row = 8
					EMReadScreen last_page_check, 9, 24, 14
					If last_page_check = "LAST PAGE" Then exit do
				End If
				EMReadScreen next_ref_numb, 2, hc_row, 3
				EMReadScreen next_maj_prog, 4, hc_row, 28
			Loop until next_ref_numb = "  " and next_maj_prog = "    "
		Else
			approved_today = False
		End If
		Call back_to_SELF
	end sub
end class

'We need to load the information to read STAT from a class that is defined in its own script file
class_script_URL = script_repository & "misc/class-stat-detail.vbs"
If script_repository = "" Then
	run_locally = True
	class_script_URL = "C:\MAXIS-scripts\misc\class-stat-detail.vbs"
End If
IF on_the_desert_island = TRUE Then
	class_script_URL = "\\hcgg.fr.co.hennepin.mn.us\lobroot\hsph\team\Eligibility Support\Scripts\Script Files\desert-island\class-stat-detail.vbs"
	Set run_another_script_fso = CreateObject("Scripting.FileSystemObject")
	Set fso_command = run_another_script_fso.OpenTextFile(class_script_URL)
	text_from_the_other_script = fso_command.ReadAll
	fso_command.Close
	Execute text_from_the_other_script
Else
	Call run_from_GitHub(class_script_URL)
End If

curr_month_plus_one = CM_plus_1_mo & "/" & CM_plus_1_yr

'Constants
const ref_numb_const				= 0

const access_denied					= 1
const full_name_const				= 2
const last_name_const				= 3
const first_name_const				= 4
const mid_initial					= 5
const other_names					= 6
const age							= 7
const date_of_birth					= 8
const ssn							= 9
const ssn_verif						= 10
const birthdate_verif				= 11

const snap_elig_indicator			= 12
const mfip_elig_indicator			= 13

const last_const = 50

'Arrays
Dim HH_MEMB_ARRAY()
ReDim HH_MEMB_ARRAY(last_const, 0)

Dim DWP_ELIG_APPROVALS()
ReDim DWP_ELIG_APPROVALS(0)

Dim MFIP_ELIG_APPROVALS()
ReDim MFIP_ELIG_APPROVALS(0)

Dim MSA_ELIG_APPROVALS()
ReDim MSA_ELIG_APPROVALS(0)

Dim GA_ELIG_APPROVALS()
ReDim GA_ELIG_APPROVALS(0)

Dim CASH_DENIAL_APPROVALS()
ReDim CASH_DENIAL_APPROVALS(0)

Dim GRH_ELIG_APPROVALS()
ReDim GRH_ELIG_APPROVALS(0)

Dim IVE_ELIG_APPROVALS()
ReDim IVE_ELIG_APPROVALS(0)

' Dim EMER_ELIG_APPROVALS()
' ReDim EMER_ELIG_APPROVALS(0)

Dim SNAP_ELIG_APPROVALS()
ReDim SNAP_ELIG_APPROVALS(0)

Dim HC_ELIG_APPROVALS()
ReDim HC_ELIG_APPROVALS(0)

Dim STAT_INFORMATION()
ReDim STAT_INFORMATION(0)

spaces_18 = space(18)
spaces_23 = space(23)
spaces_30 = space(30)
spaces_36 = space(36)
spaces_45 = space(45)
spaces_55 = space(55)
spaces_58 = space(58)
spaces_78 = space(78)

Dim process_being_completed, income_change_checkbox, assets_change_checkbox, expense_change_checkbox, housing_change_checkbox
Dim address_change_checkbox, hh_comp_change_checkbox, relationship_change_checkbox, participation_change_checkbox
Dim time_limit_change_checkbox, policy_change_checkbox, correction_change_checkbox, appeal_change_checkbox
Dim snap_prorate_reason, dwp_prorate_reason, mfip_prorate_reason, ga_prorate_reason, msa_prorate_reason, grh_prorate_reason
Dim objTextStream

'===========================================================================================================================
EMConnect ""
Call check_for_MAXIS(True)
Call find_user_name(script_run_worker)

Call hest_standards(heat_AC_amt, electric_amt, phone_amt, date)		'Currently only used in EMER for a reference.'
end_msg_info = ""

Call MAXIS_case_number_finder(MAXIS_case_number)
ineligible_approval_exists = False
last_option_day = CM_plus_1_mo & "/1/" & CM_plus_1_yr				'setting cm+1 as the last date that can be used as the initial month
last_option_day = DateAdd("d", 0, last_option_day)

Do
	Do
		err_msg = ""

		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 366, 135, "Eligibility Summary Case Number Dialog"
		  EditBox 100, 10, 60, 15, MAXIS_case_number
		  EditBox 125, 30, 15, 15, first_footer_month
		  EditBox 145, 30, 15, 15, first_footer_year
		  EditBox 10, 65, 150, 15, worker_signature
		  ButtonGroup ButtonPressed
		    OkButton 250, 110, 50, 15
		    CancelButton 305, 110, 50, 15
		    PushButton 250, 75, 105, 15, "Script Instructions", intructions_btn
		  Text 50, 15, 50, 10, "Case Number"
		  Text 10, 35, 110, 10, "Initial Month of Today's Approval"
		  Text 130, 45, 35, 10, "MM    YY"
		  Text 10, 55, 80, 10, "Sign your case note(s):"
		  Text 10, 90, 160, 10, "This script does not use open 'Notes' field."
		  Text 10, 105, 235, 20, "If there were other actions/updates to the case, a separete NOTE should be entered (or another script run) to detail the specifics of that action."
		  Text 175, 5, 160, 20, "NOTES - Eligibility Summary will detail information about all APP actions for this case taken today."
		  Text 180, 25, 185, 10, "- Script will handle for approvals, denials, and closures."
		  Text 180, 35, 155, 10, "- Script will handle for any program in MAXIS."
		  Text 180, 45, 180, 10, "- To be handled by the script ELIG resulsts must be:"
		  Text 195, 55, 115, 10, "CREATED Today - BGTX Today"
		  Text 195, 65, 65, 10, "APPROVED Today"
		EndDialog

		dialog Dialog1

		cancel_without_confirmation

		Call validate_MAXIS_case_number(err_msg, "*")
		Call validate_footer_month_entry(first_footer_month, first_footer_year, err_msg, "*")

		If err_msg = "" Then			'making sure that the footer month fields are accurate before trying to do date things
			start_day = first_footer_month & "/1/" & first_footer_year			'making sure the entered footer month is not later than CM+1
			start_day = DateAdd("d", 0, start_day)
			If DateDiff("d", start_day, last_option_day) < 0 Then err_msg = err_msg & vbNewLine & "* You cannot start the initial month of approval after current month plus one - " & CM_plus_1_mo & "/" & CM_plus_1_yr & ". Update the Initial Month of Today's Approval."
		End If

		If trim(worker_signature) = "" Then err_msg = err_msg & vbNewLine & "* Enter your name to sign your case note."

		If ButtonPressed = intructions_btn Then
			err_msg = "LOOP"
			run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://hennepin.sharepoint.com/:w:/r/teams/hs-economic-supports-hub/BlueZone_Script_Instructions/NOTES/NOTES%20-%20ELIGIBILITY%20SUMMARY.docx"
		Else
			If err_msg <> "" Then MsgBox "*** Please Resolve to Continue ***" & vbNewLine & err_msg
		End If

	Loop until err_msg = ""
	Call check_for_password(are_we_passworded_out)
Loop until are_we_passworded_out = False
Call check_for_MAXIS(False)

'PRIV Handling
Call navigate_to_MAXIS_screen_review_PRIV("CASE", "CURR", is_this_priv)
If is_this_PRIV = True then script_end_procedure("This case is privileged and you do not have access to it. The script will now end.")

'Out of County Handling
'There are a few reasons to allow a script to run on an out of county case - so review if this is needed.
EMReadScreen pw_county_code, 2, 21, 16
If pw_county_code <> "27" Then script_end_procedure("This case is not in Hennepin County and cannot be updated. The script will now end.")

'CHECKING FOR 'U' code on REVW and MONT. Prompts user to correct month by month.
Call date_array_generator(first_footer_month, first_footer_year, footer_month_array) 'Uses the custom function to create an array of dates from the initial_month and initial_year variables, ends at CM + 1.
MAXIS_footer_month = first_footer_month
MAXIS_footer_year = first_footer_year

For each_month = 0 to Ubound(footer_month_array)
	MAXIS_footer_month = datepart("m", footer_month_array(each_month)) 'Need to assign footer month / year each time through
	If len(MAXIS_footer_month) = 1 THEN MAXIS_footer_month = "0" & MAXIS_footer_month
	MAXIS_footer_year = right(datepart("YYYY", footer_month_array(each_month)), 2)

	Call navigate_to_MAXIS_screen("STAT", "SUMM")
	EMReadScreen invalid_month, 18, 24, 18
	' MsgBox "Pause HEre" & vbCr & invalid_month
	If invalid_month <> "INVALID FOR PERIOD" Then

		Call MAXIS_background_check				'we are adding a background check to make sure the case is through background before attempting to read ELIG.
		Call navigate_to_MAXIS_screen("STAT", "REVW")
		EMReadScreen stat_revw_cash_code, 1, 7, 40
		EMReadScreen stat_revw_snap_code, 1, 7, 60
		EMReadScreen stat_revw_hc_code, 1, 7, 73
		stat_revw_cash_code = replace(stat_revw_cash_code, "_", "")
		stat_revw_snap_code = replace(stat_revw_snap_code, "_", "")
		stat_revw_hc_code = replace(stat_revw_hc_code, "_", "")
		If stat_revw_cash_code = "U" Then revw_u_code_string = revw_u_code_string & ", Cash/GRH"
		If stat_revw_snap_code = "U" Then revw_u_code_string = revw_u_code_string & ", SNAP"
		If stat_revw_hc_code = "U" Then revw_u_code_string = revw_u_code_string & ", HC"
		If left(revw_u_code_string, 1) = "," Then revw_u_code_string = right(revw_u_code_string, len(revw_u_code_string)-2)

		Call MAXIS_background_check				'we are adding a background check to make sure the case is through background before attempting to read ELIG.
		Call navigate_to_MAXIS_screen("STAT", "MONT")
		EMReadScreen stat_mont_cash_status, 1, 11, 43
		EMReadScreen stat_mont_snap_status, 1, 11, 53
		EMReadScreen stat_mont_hc_status, 1, 11, 63
		stat_mont_cash_status = replace(stat_mont_cash_status, "_", "")
		stat_mont_snap_status = replace(stat_mont_snap_status, "_", "")
		stat_mont_hc_status = replace(stat_mont_hc_status, "_", "")
		mont_u_code_string = ""
		If stat_mont_cash_status = "U" Then mont_u_code_string = mont_u_code_string & ", Cash/GRH"
		If stat_mont_snap_status = "U" Then mont_u_code_string = mont_u_code_string & ", SNAP"
		If stat_mont_hc_status = "U" Then mont_u_code_string = mont_u_code_string & ", HC"
		If left(mont_u_code_string, 1) = "," Then mont_u_code_string = right(mont_u_code_string, len(mont_u_code_string)-2)

		If (stat_mont_cash_status = "U" OR stat_mont_snap_status = "U" OR stat_mont_hc_status = "U" OR stat_revw_cash_code = "U" OR stat_revw_snap_code = "U" OR stat_revw_hc_code = "U") Then
		Do
			Do
				err_msg = ""
				Dialog1 = ""
				BeginDialog Dialog1, 0, 0, 281, 90, "REVW and MONT- U Code Verification"
					Text 5, 5, 220, 25, "The program(s) below have a 'U' status for " & MAXIS_footer_month & "/" & MAXIS_footer_year & ". Approve program(s) or change status to 'i' then press OK to continue. "
					If mont_u_code_string <> "" Then Text 30, 30, 160, 10, "MONT Panel: " & mont_u_code_string
					If revw_u_code_string <> "" Then Text 30, 40, 160, 10, "REVW Panel: " & revw_u_code_string
					ButtonGroup ButtonPressed
						PushButton 230, 20, 45, 15, "REVW", stat_revw_btn
						PushButton 230, 35, 45, 15, "MONT", stat_mont_btn
						PushButton 5, 70, 50, 15, "TE02.04.04", te_02_04_04_btn
						OkButton 170, 70, 50, 15
						CancelButton 225, 70, 50, 15
					Text 235, 10, 35, 10, "-----Nav-----"
				EndDialog

				Do
					dialog Dialog1
					cancel_confirmation
					If ButtonPressed = te_02_04_04_btn Then run "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe https://hennepin.sharepoint.com/:b:/r/sites/hs-es-poli-temp/Documents%203/TE%2002.04.04%20AUTOCLOSE%20%20%20MAXIS%20PROCESSES%20FOR%20HRF%20REVW.pdf?csf=1&web=1&e=1sbOFR"
					If ButtonPressed = stat_revw_btn Then Call navigate_to_MAXIS_screen("STAT", "REVW")
					If ButtonPressed = stat_mont_btn Then Call navigate_to_MAXIS_screen("STAT", "MONT")
				Loop Until ButtonPressed = -1

				Call MAXIS_background_check				'we are adding a background check to make sure the case is through background before attempting to read ELIG.
				Call navigate_to_MAXIS_screen("STAT", "MONT")
				EMReadScreen stat_mont_cash_status, 1, 11, 43
				EMReadScreen stat_mont_snap_status, 1, 11, 53
				EMReadScreen stat_mont_hc_status, 1, 11, 63
				mont_u_code_string = ""
				If stat_mont_cash_status = "U" Then mont_u_code_string = mont_u_code_string & ", Cash/GRH"
				If stat_mont_snap_status = "U" Then mont_u_code_string = mont_u_code_string & ", SNAP"
				If stat_mont_hc_status = "U" Then mont_u_code_string = mont_u_code_string & ", HC"
				If left(mont_u_code_string, 1) = "," Then mont_u_code_string = right(mont_u_code_string, len(mont_u_code_string)-2)

				Call MAXIS_background_check				'we are adding a background check to make sure the case is through background before attempting to read ELIG.
				Call navigate_to_MAXIS_screen("STAT", "REVW")
				EMReadScreen stat_revw_cash_code, 1, 7, 40
				EMReadScreen stat_revw_snap_code, 1, 7, 60
				EMReadScreen stat_revw_hc_code, 1, 7, 73
				If stat_revw_cash_code = "U" Then revw_u_code_string = revw_u_code_string & ", Cash/GRH"
				revw_u_code_string = ""
				If stat_revw_snap_code = "U" Then revw_u_code_string = revw_u_code_string & ", SNAP"
				If stat_revw_hc_code = "U" Then revw_u_code_string = revw_u_code_string & ", HC"
				If left(revw_u_code_string, 1) = "," Then revw_u_code_string = right(revw_u_code_string, len(revw_u_code_string)-2)

				If stat_mont_cash_status = "U" then err_msg = err_msg & vbNewLine & "* MONT: Cash/GRH- Must complete approval or change status to 'i'."
				If stat_mont_snap_status = "U" then err_msg = err_msg & vbNewLine & "* MONT: SNAP- Must complete approval or change status to 'i'."
				If stat_mont_hc_status = "U" then err_msg = err_msg & vbNewLine & "* MONT: HC- Must complete approval or change status to 'i'."
				If stat_revw_cash_code = "U" then err_msg = err_msg & vbNewLine & "* REVW: Cash/GRH- Must complete approval or change status to 'i'."
				If stat_revw_snap_code = "U" then err_msg = err_msg & vbNewLine & "* REVW: SNAP- Must complete approval or change status to 'i'."
				If stat_revw_hc_code = "U" then err_msg = err_msg & vbNewLine & "* REVW: HC- Must complete approval or change status to 'i'."
				If err_msg <> "" Then MsgBox "Please resolve the following to continue:" & vbNewLine & err_msg
			Loop until err_msg = ""
			Call check_for_password(are_we_passworded_out)
		Loop until are_we_passworded_out = FALSE
		End If
	End If
Next
Call back_to_SELF

Call determine_program_and_case_status_from_CASE_CURR(case_active, case_pending, case_rein, family_cash_case, mfip_case, dwp_case, adult_cash_case, ga_case, msa_case, grh_case, snap_case, ma_case, msp_case, emer_case, unknown_cash_pending, unknown_hc_pending, ga_status, msa_status, mfip_status, dwp_status, grh_status, snap_status, ma_status, msp_status, msp_type, emer_status, emer_type, case_status, list_active_programs, list_pending_programs)
row = 1
col = 1
EMSearch "HC: ", row, col
If row <> 0 Then
	EMReadScreen HC_appl_date, 8, row, col + 24
	HC_appl_date = DateAdd("d", 0, HC_appl_date)
	Call convert_date_into_MAXIS_footer_month(HC_appl_date, hc_app_mo, hc_app_yr)
End If

Call back_to_SELF
EMReadScreen MX_region, 10, 22, 48
MX_region = trim(MX_region)
If MX_region = "INQUIRY DB" Then
	continue_in_inquiry = MsgBox("You have started this script run in INQUIRY." & vbNewLine & vbNewLine & "The script cannot complete a CASE:NOTE when run in inquiry. The functionality is limited when run in inquiry. " & vbNewLine & vbNewLine & "Would you like to continue in INQUIRY?", vbQuestion + vbYesNo, "Continue in INQUIRY")
	If continue_in_inquiry = vbNo Then Call script_end_procedure("~PT Eligibility Summary Script cancelled as it was run in inquiry.")
End If

developer_mode = False
allow_late_note = False
If (user_ID_for_validation = "CALO001" or user_ID_for_validation = "ILFE001" or user_ID_for_validation = "MEGE001" or user_ID_for_validation = "MARI001" or user_ID_for_validation = "DACO003") AND MX_region <> "TRAINING" Then developer_mode = True
' If (user_ID_for_validation = "CALO001" or user_ID_for_validation = "ILFE001" or user_ID_for_validation = "MEGE001" or user_ID_for_validation = "MARI001" or user_ID_for_validation = "DACO003") Then developer_mode = True
' developer_mode = False

Call MAXIS_background_check				'we are adding a background check to make sure the case is through background before attempting to read ELIG.
' If MAXIS_case_number = "493723" Then allow_late_note = True
Call date_array_generator(first_footer_month, first_footer_year, MONTHS_ARRAY)

ex_parte_approval = False
ex_parte_members = " "
complete_ex_parte_as_closed = False
stop_ex_parte_checkbox = unchecked
sql_review_date = CM_plus_1_mo & "/1/" & CM_plus_1_yr			'This sets a date as the review date to compare it to information in the data list and make sure it's a date
sql_review_date = DateAdd("d", 0, sql_review_date)
MSP_approvals_only = True
MSP_memo_success = False

first_DWP_approval = ""
first_MFIP_approval = ""
first_MSA_approval = ""
first_GA_approval = ""
first_DENY_approval = ""
first_GRH_approval = ""
first_SNAP_approval = ""
first_HC_approval = ""

enter_CNOTE_for_DWP = False
enter_CNOTE_for_MFIP = False
enter_CNOTE_for_MSA = False
enter_CNOTE_for_GA = False
enter_CNOTE_for_DENY = False
enter_CNOTE_for_GRH = False
enter_CNOTE_for_EMER = False
enter_CNOTE_for_SNAP = False
enter_CNOTE_for_HC = False

dwp_elig_months_count = 0
mfip_elig_months_count = 0
msa_elig_months_count = 0
ga_elig_months_count = 0
cash_deny_months_count = 0
grh_elig_months_count = 0
' ive_elig_months_count = 0
emer_elig_months_count = 0
snap_elig_months_count = 0
hc_elig_months_count = 0
month_count = 0

CM_plus_1 = CM_plus_1_mo & "/" & CM_plus_1_yr
First_footer = first_footer_month & "/" & first_footer_year
If First_footer <> CM_plus_1 Then
	MAXIS_footer_month = CM_mo
	MAXIS_footer_year = CM_yr
	Call navigate_to_MAXIS_screen("STAT", "PROG")
	EMReadScreen prog_emer_appl_date, 8, 8, 33
	If prog_emer_appl_date = "__ __ __" Then prog_emer_appl_date = ""
	prog_emer_appl_date = replace(prog_emer_appl_date, " ", "/")
	Call Navigate_to_MAXIS_screen("ELIG", "SUMM")
	EMReadScreen numb_EMER_versions, 1, 16, 40
	numb_EMER_versions = trim(numb_EMER_versions)
	' TEMPORARY WORKAROUND
	' Special workaround handling for Tim Erickson and Sarah Haigh since they do not have access in MAXIS for anything but HC processing.
	' We are working on getting access updated for them to have view/inquiry access in the MONY area of MAXIS so that the script can view it as a part of the information gathering.
	If user_ID_for_validation = "TIER002" or user_ID_for_validation = "SASA003" Then numb_EMER_versions = ""
End If

const month_const 	= 0
const er_revw_completed_const	= 1
const sr_revw_completed_const	= 2
const hrf_completed_const		= 3
const er_programs_const 		= 4
const sr_programs_const 		= 5
const hrf_programs_const 		= 6
const revw_form_date_const		= 7
const revw_intvw_date_const		= 8
const hrf_form_date_const		= 9

const mfip_revw_completed_const = 10
const mfip_next_revw_const 		= 11
const mfip_hrf_completed_const 	= 12
const mfip_elig_const 			= 13
const mfip_budg_cycle_const 	= 14

const ga_revw_completed_const 	= 15
const ga_next_revw_const 		= 16
const ga_hrf_completed_const 	= 17
const ga_elig_const 			= 18
const ga_budg_cycle_const 		= 19

const snap_revw_completed_const = 20
const snap_next_revw_const 		= 21
const snap_hrf_completed_const 	= 22
const snap_elig_const 			= 23
const snap_budg_cycle_const 	= 24

const msa_revw_completed_const 	= 25
const msa_next_revw_const 		= 26
const msa_elig_const 			= 27
const msa_budg_cycle_const 		= 28

const grh_revw_completed_const 	= 29
const grh_next_revw_const 		= 30
const grh_hrf_completed_const 	= 31
const grh_elig_const 			= 32
const grh_budg_cycle_const 		= 33

const hc_revw_completed_const 	= 34
const hc_next_revw_const 		= 35
const hc_elig_const 			= 36
const hc_budg_cycle_const 		= 37

const cash_revw_completed_const = 38

const final_const				= 40

Dim REPORTING_COMPLETE_ARRAY()
ReDim REPORTING_COMPLETE_ARRAY(final_const, 0)

If numb_EMER_versions <> "" Then
	Set EMER_ELIG_APPROVAL = new emer_eligibility_detail
	EMER_ELIG_APPROVAL.elig_footer_month = CM_mo
	EMER_ELIG_APPROVAL.elig_footer_year = CM_yr

	EMER_ELIG_APPROVAL.initial_search_month = first_footer_month
	EMER_ELIG_APPROVAL.initial_search_year = first_footer_year
	EMER_ELIG_APPROVAL.emer_appl_date = prog_emer_appl_date

	EMER_ELIG_APPROVAL.read_elig

	EMER_ELIG_APPROVAL.bus_ticket_approval = False
	If EMER_ELIG_APPROVAL.approved_today = True then
		enter_CNOTE_for_EMER = True
		If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "INELIGIBLE" Then ineligible_approval_exists = True
		If EMER_ELIG_APPROVAL.mony_check_found = False and EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "ELIGIBLE" Then
			If EMER_ELIG_APPROVAL.emer_elig_summ_need_other = EMER_ELIG_APPROVAL.emer_elig_summ_need_total Then
				ask_if_bus_ticket = MsgBox("It appears that Emergency was approved and no MONY/CHCK was issued." &vbCr & vbCr &"The only amount that was approved was in the 'Other' need. This could be an approval for a Bus Ticket only, which does not require a MONY/CHCK to be completed." & vbCr & vbCr & "Is this EMER approval for a Bus Ticket?", vbQuestion + vbYesNo, "EMER Bus Ticket Approval")
				If ask_if_bus_ticket = vbYes Then EMER_ELIG_APPROVAL.bus_ticket_approval = True
			End If
			If EMER_ELIG_APPROVAL.bus_ticket_approval = False Then
				enter_CNOTE_for_EMER = False
				end_msg_info = end_msg_info & vbCr & EMER_ELIG_APPROVAL.emer_program & " Approval has not been reviewed as the approval appears incomplete." & vbCr & vbCr & "*** NO MONY/CHCKs ISSUED for " & EMER_ELIG_APPROVAL.emer_program & ". ***" & vbCr & "Complete all MONY/CHCKs for the emergency first and then run the script." & vbCr & vbCr & "This script gathers details about the emergency approvals from MONY Transactions and this helps to ensure that the MONY/CHCKs are created timely." & vbCr
			End If
		End if
	ElseIf EMER_ELIG_APPROVAL.approved_version_found = True Then
		If DateDiff("d", date, EMER_ELIG_APPROVAL.approval_date) = 0 Then
			approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " EMER approved today." & vbCr
			approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & EMER_ELIG_APPROVAL.elig_version_date & vbCr & vbCr
			If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
			If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
			If first_prog_not_created_today = "" Then first_prog_not_created_today = "EMER"
		End If
	End If
End If

const footer_mo_const 				= 0
const MX_foot_mo_const 				= 1
const MX_foot_yr_const 				= 2
const MFIP_app_const 				= 3
const MFIP_special_diet_const		= 4
const MF_elig_index					= 5
const MFIP_special_diet_confirm		= 6
const DWP_app_const 				= 7
const GA_app_const 					= 8
const MSA_app_const 				= 9
const DENY_app_const 				= 10
const GRH_app_const					= 11
const SNAP_app_const 				= 12
const ELIG_app_const 				= 13
const HC_app_const 					= 14
const MFIP_to_SNAP_const 			= 15
const SNAP_to_MFIP_const 			= 16
const Homeless_SHELTER_deducation 	= 17
const final_month_const 			= 20

Dim SPECIAL_PROCESSES_BY_MONTH()
ReDim SPECIAL_PROCESSES_BY_MONTH(final_month_const, 0)

approvals_not_created_today = ""
first_month_not_created_today = ""
first_year_not_created_today = ""
first_prog_not_created_today = ""
special_diet_check_exists = False
sig_change_months = " "

For each footer_month in MONTHS_ARRAY
	ReDim Preserve REPORTING_COMPLETE_ARRAY(final_const, month_count)
	REPORTING_COMPLETE_ARRAY(month_const, month_count) = footer_month
	REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = False
	REPORTING_COMPLETE_ARRAY(sr_revw_completed_const, month_count) = False
	REPORTING_COMPLETE_ARRAY(hrf_completed_const, month_count) = False

	Call convert_date_into_MAXIS_footer_month(footer_month, MAXIS_footer_month, MAXIS_footer_year)
	approval_found_for_this_month = False

	ReDim Preserve SPECIAL_PROCESSES_BY_MONTH(final_month_const, month_count)
	SPECIAL_PROCESSES_BY_MONTH(footer_mo_const, month_count) 		= MAXIS_footer_month & "/" & MAXIS_footer_year
	SPECIAL_PROCESSES_BY_MONTH(MX_foot_mo_const, month_count) 		= MAXIS_footer_month
	SPECIAL_PROCESSES_BY_MONTH(MX_foot_yr_const, month_count) 		= MAXIS_footer_year
	SPECIAL_PROCESSES_BY_MONTH(MFIP_to_SNAP_const, month_count) 	= false
	SPECIAL_PROCESSES_BY_MONTH(SNAP_to_MFIP_const, month_count) 	= false
	SPECIAL_PROCESSES_BY_MONTH(Homeless_SHELTER_deducation, month_count) = false
	SPECIAL_PROCESSES_BY_MONTH(MFIP_app_const, month_count) 		= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_const, month_count)= False
	SPECIAL_PROCESSES_BY_MONTH(DWP_app_const, month_count) 			= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(GA_app_const, month_count) 			= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(MSA_app_const, month_count) 			= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(DENY_app_const, month_count) 		= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(GRH_app_const, month_count) 			= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(SNAP_app_const, month_count) 		= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(ELIG_app_const, month_count) 		= "NONE"
	SPECIAL_PROCESSES_BY_MONTH(HC_app_const, month_count) 			= "NONE"

	Call Navigate_to_MAXIS_screen("ELIG", "SUMM")

	EMReadScreen numb_DWP_versions, 		1, 7, 40
	EMReadScreen numb_MFIP_versions, 		1, 8, 40
	EMReadScreen numb_MSA_versions, 		1, 11, 40
	EMReadScreen numb_GA_versions, 			1, 12, 40
	EMReadScreen numb_CASH_denial_versions, 1, 13, 40
	EMReadScreen numb_GRH_versions, 		1, 14, 40
	' EMReadScreen numb_IVE_versions, 		1, 15, 40
	' EMReadScreen numb_EMER_versions, 		1, 16, 40		- WE WILL NOT LOOK AT THIS EVERY MONTH
	EMReadScreen numb_SNAP_versions, 		1, 17, 40

	' TEMPORARY WORKAROUND
	' Special workaround handling for Tim Erickson and Sarah Haigh since they do not have access in MAXIS for anything but HC processing.
	' We are working on getting access updated for them to have view/inquiry access in the MONY area of MAXIS so that the script can view it as a part of the information gathering.
	If user_ID_for_validation = "TIER002" or user_ID_for_validation = "SASA003" Then
		numb_DWP_versions = " "
		numb_MFIP_versions = " "
		numb_MSA_versions = " "
		numb_GA_versions = " "
		numb_CASH_denial_versions = " "
		numb_GRH_versions = " "
		numb_SNAP_versions = " "
	End If

	Call back_to_SELF

	If numb_DWP_versions <> " " Then
		ReDim Preserve DWP_ELIG_APPROVALS(dwp_elig_months_count)
		Set DWP_ELIG_APPROVALS(dwp_elig_months_count) = new dwp_eligibility_detail

		DWP_ELIG_APPROVALS(dwp_elig_months_count).elig_footer_month = MAXIS_footer_month
		DWP_ELIG_APPROVALS(dwp_elig_months_count).elig_footer_year = MAXIS_footer_year

		Call DWP_ELIG_APPROVALS(dwp_elig_months_count).read_elig

		If DWP_ELIG_APPROVALS(dwp_elig_months_count).approved_today = True Then
			If first_DWP_approval = "" Then first_DWP_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			IF DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_case_eligibility_result = "INELIGIBLE" Then ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(DWP_app_const, month_count) = DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_case_eligibility_result
		ElseIf DWP_ELIG_APPROVALS(dwp_elig_months_count).approved_version_found = True Then
			If DateDiff("d", date, DWP_ELIG_APPROVALS(dwp_elig_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " DWP approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & DWP_ELIG_APPROVALS(dwp_elig_months_count).elig_version_date & vbCr & vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "DWP "
			End If
		End If
	End If

	If numb_MFIP_versions <> " " Then
		ReDim Preserve MFIP_ELIG_APPROVALS(mfip_elig_months_count)
		Set MFIP_ELIG_APPROVALS(mfip_elig_months_count) = new mfip_eligibility_detail

		MFIP_ELIG_APPROVALS(mfip_elig_months_count).elig_footer_month = MAXIS_footer_month
		MFIP_ELIG_APPROVALS(mfip_elig_months_count).elig_footer_year = MAXIS_footer_year

		Call MFIP_ELIG_APPROVALS(mfip_elig_months_count).read_elig

		If MFIP_ELIG_APPROVALS(mfip_elig_months_count).approved_today = True Then
			If first_MFIP_approval = "" Then first_MFIP_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_eligibility_result = "INELIGIBLE" Then ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(MFIP_app_const, month_count) = MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_eligibility_result
			If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_sig_change = True Then sig_change_months = sig_change_months & MAXIS_footer_month & "/" & MAXIS_footer_year & " "
		ElseIf MFIP_ELIG_APPROVALS(mfip_elig_months_count).approved_version_found = True Then
			If DateDiff("d", date, MFIP_ELIG_APPROVALS(mfip_elig_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " MFIP approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & MFIP_ELIG_APPROVALS(mfip_elig_months_count).elig_version_date & vbCr & vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "MFIP"
			End If
		End If

		If MFIP_ELIG_APPROVALS(mfip_elig_months_count).MFSD_approved_today = True Then
			SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_const, month_count) = True
			SPECIAL_PROCESSES_BY_MONTH(MF_elig_index, month_count) = mfip_elig_months_count
			special_diet_check_exists = True

		End If
	End If

	If numb_MSA_versions <> " " Then
		ReDim Preserve MSA_ELIG_APPROVALS(msa_elig_months_count)
		Set MSA_ELIG_APPROVALS(msa_elig_months_count) = new msa_eligibility_detail

		MSA_ELIG_APPROVALS(msa_elig_months_count).elig_footer_month = MAXIS_footer_month
		MSA_ELIG_APPROVALS(msa_elig_months_count).elig_footer_year = MAXIS_footer_year

		Call MSA_ELIG_APPROVALS(msa_elig_months_count).read_elig

		If MSA_ELIG_APPROVALS(msa_elig_months_count).approved_today = True Then
			If first_MSA_approval = "" Then first_MSA_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			If MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_eligibility_result = "INELIGIBLE" Then ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(MSA_app_const, month_count) = MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_eligibility_result
		ElseIf MSA_ELIG_APPROVALS(msa_elig_months_count).approved_version_found = True Then
			If DateDiff("d", date, MSA_ELIG_APPROVALS(msa_elig_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " MSA approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & MSA_ELIG_APPROVALS(msa_elig_months_count).elig_version_date & vbCr & vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "MSA "
			End If
		End If
	End If

	If numb_GA_versions <> " " Then
		ReDim Preserve GA_ELIG_APPROVALS(ga_elig_months_count)
		Set GA_ELIG_APPROVALS(ga_elig_months_count) = new ga_eligibility_detail

		GA_ELIG_APPROVALS(ga_elig_months_count).elig_footer_month = MAXIS_footer_month
		GA_ELIG_APPROVALS(ga_elig_months_count).elig_footer_year = MAXIS_footer_year

		Call GA_ELIG_APPROVALS(ga_elig_months_count).read_elig

		If GA_ELIG_APPROVALS(ga_elig_months_count).approved_today = True Then
			If first_GA_approval = "" Then first_GA_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_eligibility_result = "INELIGIBLE" Then ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(GA_app_const, month_count) = GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_eligibility_result
		ElseIf GA_ELIG_APPROVALS(ga_elig_months_count).approved_version_found = True Then
			If DateDiff("d", date, GA_ELIG_APPROVALS(ga_elig_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " GA approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & GA_ELIG_APPROVALS(ga_elig_months_count).elig_version_date & vbCr & vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "GA  "
			End If
		End If
	End If

	If numb_CASH_denial_versions <> " " Then
		ReDim Preserve CASH_DENIAL_APPROVALS(cash_deny_months_count)
		Set CASH_DENIAL_APPROVALS(cash_deny_months_count) = new deny_eligibility_detail

		CASH_DENIAL_APPROVALS(cash_deny_months_count).elig_footer_month = MAXIS_footer_month
		CASH_DENIAL_APPROVALS(cash_deny_months_count).elig_footer_year = MAXIS_footer_year

		Call CASH_DENIAL_APPROVALS(cash_deny_months_count).read_elig

		If CASH_DENIAL_APPROVALS(cash_deny_months_count).approved_today = True Then
			If first_DENY_approval = "" Then first_DENY_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(DENY_app_const, month_count) = "INELIGIBLE"
			If numb_GA_versions <> " " Then
				If GA_ELIG_APPROVALS(ga_elig_months_count).approved_today = True Then
					If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_eligibility_result = "INELIGIBLE" Then
						If first_GA_approval = MAXIS_footer_month & "/" & MAXIS_footer_year Then first_GA_approval = ""
					ElseIf GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_eligibility_result = "ELIGIBLE" Then
						If first_DENY_approval = MAXIS_footer_month & "/" & MAXIS_footer_year then first_DENY_approval = ""
					End If
				End If
			End If
			If numb_MSA_versions <> " " Then
				If MSA_ELIG_APPROVALS(msa_elig_months_count).approved_today = True Then
					If MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_eligibility_result = "INELIGIBLE" Then
						If first_MSA_approval = MAXIS_footer_month & "/" & MAXIS_footer_year Then first_MSA_approval = ""
					ElseIf MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
						If first_DENY_approval = MAXIS_footer_month & "/" & MAXIS_footer_year then first_DENY_approval = ""
					End If
				End If
			End If
			If numb_MFIP_versions <> " " Then
				If MFIP_ELIG_APPROVALS(mfip_elig_months_count).approved_today = True Then
					If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_eligibility_result = "INELIGIBLE" Then
						If first_MFIP_approval = MAXIS_footer_month & "/" & MAXIS_footer_year Then first_MFIP_approval = ""
					ElseIf MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_eligibility_result = "ELIGIBLE" Then
						If first_DENY_approval = MAXIS_footer_month & "/" & MAXIS_footer_year then first_DENY_approval = ""
					End If
				End If
			End If
			If numb_DWP_versions <> " " Then
				If DWP_ELIG_APPROVALS(dwp_elig_months_count).approved_today = True Then
					If DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_case_eligibility_result = "INELIGIBLE" Then
						If first_DWP_approval = MAXIS_footer_month & "/" & MAXIS_footer_year Then first_DWP_approval = ""
					ElseIf DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_case_eligibility_result = "ELIGIBLE" Then
						If first_DENY_approval = MAXIS_footer_month & "/" & MAXIS_footer_year then first_DENY_approval = ""
					End If
				End If
			End If

		ElseIf CASH_DENIAL_APPROVALS(cash_deny_months_count).approved_version_found = True Then
			If DateDiff("d", date, CASH_DENIAL_APPROVALS(cash_deny_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " CASH DENY approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & CASH_DENIAL_APPROVALS(cash_deny_months_count).elig_version_date & vbCr & vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "DENY"
			End If
		End If
	End If

	If numb_GRH_versions <> " " Then
		ReDim Preserve GRH_ELIG_APPROVALS(grh_elig_months_count)
		Set GRH_ELIG_APPROVALS(grh_elig_months_count) = new grh_eligibility_detail

		GRH_ELIG_APPROVALS(grh_elig_months_count).elig_footer_month = MAXIS_footer_month
		GRH_ELIG_APPROVALS(grh_elig_months_count).elig_footer_year = MAXIS_footer_year

		Call GRH_ELIG_APPROVALS(grh_elig_months_count).read_elig

		If GRH_ELIG_APPROVALS(grh_elig_months_count).approved_today = True Then
			If first_GRH_approval = "" Then first_GRH_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_eligibility_result = "INELIGIBLE" Then ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(GRH_app_const, month_count) = GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_eligibility_result
		ElseIf GRH_ELIG_APPROVALS(grh_elig_months_count).approved_version_found = True Then
			If DateDiff("d", date, GRH_ELIG_APPROVALS(grh_elig_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " GRH approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & GRH_ELIG_APPROVALS(grh_elig_months_count).elig_version_date & vbCr & vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "GRH "
			End If
		End If
	End If

	If numb_SNAP_versions <> " " Then
		ReDim Preserve SNAP_ELIG_APPROVALS(snap_elig_months_count)
		Set SNAP_ELIG_APPROVALS(snap_elig_months_count) = new snap_eligibility_detail

		SNAP_ELIG_APPROVALS(snap_elig_months_count).elig_footer_month = MAXIS_footer_month
		SNAP_ELIG_APPROVALS(snap_elig_months_count).elig_footer_year = MAXIS_footer_year

		Call SNAP_ELIG_APPROVALS(snap_elig_months_count).read_elig

		If SNAP_ELIG_APPROVALS(snap_elig_months_count).approved_today = True Then
			If first_SNAP_approval = "" Then first_SNAP_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
			approval_found_for_this_month = True
			If SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_result = "INELIGIBLE" Then ineligible_approval_exists = True
			SPECIAL_PROCESSES_BY_MONTH(SNAP_app_const, month_count) = SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_result
		ElseIf SNAP_ELIG_APPROVALS(snap_elig_months_count).approved_version_found = True Then
			If DateDiff("d", date, SNAP_ELIG_APPROVALS(snap_elig_months_count).approval_date) = 0 Then
				approvals_not_created_today = approvals_not_created_today & MAXIS_footer_month & "/" & MAXIS_footer_year & " SNAP approved today." & vbCr
				approvals_not_created_today = approvals_not_created_today & " - ELIG Results CREATED on " & SNAP_ELIG_APPROVALS(snap_elig_months_count).elig_version_date & vbCr ''& vbCr
				If first_month_not_created_today = "" Then first_month_not_created_today = MAXIS_footer_month
				If first_year_not_created_today = "" Then first_year_not_created_today = MAXIS_footer_year
				If first_prog_not_created_today = "" Then first_prog_not_created_today = "FS  "
			End If
		End If
	End If

	'here we can compare approvals to identify some specific situations that require certain handling.
	If SPECIAL_PROCESSES_BY_MONTH(SNAP_app_const, month_count) = "INELIGIBLE" and SPECIAL_PROCESSES_BY_MONTH(MFIP_app_const, month_count) = "ELIGIBLE" Then
		For each_memb = 0 to UBound(SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_membs_mfip_elig)
			If SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_membs_mfip_elig(each_memb) = "FAILED" Then SPECIAL_PROCESSES_BY_MONTH(SNAP_to_MFIP_const, month_count) = True
		Next
	End if

	'TODO - add back in for HC functionality'
	reDim preserve HC_ELIG_APPROVALS(hc_elig_months_count)

	Set HC_ELIG_APPROVALS(hc_elig_months_count) = new hc_eligibility_detail

	HC_ELIG_APPROVALS(hc_elig_months_count).elig_footer_month = MAXIS_footer_month
	HC_ELIG_APPROVALS(hc_elig_months_count).elig_footer_year = MAXIS_footer_year

	Call HC_ELIG_APPROVALS(hc_elig_months_count).read_elig

	If HC_ELIG_APPROVALS(hc_elig_months_count).approved_today = True Then
		SPECIAL_PROCESSES_BY_MONTH(HC_app_const, month_count) = "APPROVED"

   		If first_HC_approval = "" Then first_HC_approval = MAXIS_footer_month & "/" & MAXIS_footer_year
		If first_HC_approval = CM_plus_1_mo & "/" & CM_plus_1_yr Then
			number_of_rows = 0
			On Error Resume Next
			SQL_Case_Number = right("00000000" & MAXIS_case_number, 8)

			objSQL=	"SELECT Count (*) FROM ES.ES_ExParte_CaseList WHERE [CaseNumber] = '" & SQL_Case_Number & "' and [HCEligReviewDate] = '" & sql_review_date & "' and [SelectExParte] = '1'"

			'Creating objects for Access
			Set objConnection = CreateObject("ADODB.Connection")
			Set objRecordSet = CreateObject("ADODB.Recordset")

			'This is the file path for the statistics Access database.
			' stats_database_path = "hssqlpw139;Initial Catalog= BlueZone_Statistics; Integrated Security=SSPI;Auto Translate=False;"
			objConnection.Open "Provider = SQLOLEDB.1;Data Source= " & "" &  "hssqlpw139;Initial Catalog= BlueZone_Statistics; Integrated Security=SSPI;Auto Translate=False;" & ""
			objRecordSet.Open objSQL, objConnection
			number_of_rows = objRecordSet(0).value
			number_of_rows = number_of_rows*1

			objRecordSet.Close
			objConnection.Close
			Set objRecordSet=nothing
			Set objConnection=nothing

			On Error Goto 0
			If number_of_rows = 1 Then
				for hc_elig = 0 to UBound(HC_ELIG_APPROVALS(hc_elig_months_count).hc_elig_ref_numbs)
					If  HC_ELIG_APPROVALS(hc_elig_months_count).hc_prog_elig_eligibility_result(hc_elig) = "ELIGIBLE" Then
						ex_parte_approval = True
						if InStr(ex_parte_members, HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)) = 0 Then ex_parte_members = ex_parte_members & HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) & " "
					End If
					If  HC_ELIG_APPROVALS(hc_elig_months_count).hc_prog_elig_eligibility_result(hc_elig) = "INELIGIBLE" Then complete_ex_parte_as_closed = True
				next
			End If
		End If
   		approval_found_for_this_month = True
		for hc_elig = 0 to UBound(HC_ELIG_APPROVALS(hc_elig_months_count).hc_elig_ref_numbs)
			If HC_ELIG_APPROVALS(hc_elig_months_count).hc_prog_elig_eligibility_result(hc_elig) = "INELIGIBLE" Then ineligible_approval_exists = True
		next

		'This is to determine if the Notice was missed for Ex Part
		If ex_parte_approval = True Then
			ex_parte_members = trim(ex_parte_members)
			Call navigate_to_MAXIS_screen("SPEC", "WCOM")
			EMWriteScreen CM_plus_1_mo, 3, 46
			EMWriteScreen CM_plus_1_yr, 3, 51
			transmit

			wcom_waiting = "-"
			wcom_printed = "-"
			wcom_exception = "-"
			wcom_row = 7
			Do
				EMReadScreen wcom_prog, 2, wcom_row, 26
				EMReadScreen wcom_status, 9, wcom_row, 71
				EMReadScreen wcom_ref_numb, 2, wcom_row, 62
				wcom_status = trim(wcom_status)

				If wcom_prog = "HC" Then
					If wcom_status = "Waiting" Then wcom_waiting = wcom_waiting & " " & wcom_ref_numb
					If wcom_status = "Printed" Then wcom_printed = wcom_printed & " " & wcom_ref_numb
					If wcom_status = "XP Except" Then wcom_exception = wcom_exception & " " & wcom_ref_numb
				End IF
				wcom_row = wcom_row + 1
			Loop until wcom_prog = "  " and wcom_status = ""

			wcom_waiting = wcom_waiting & "-"
			wcom_printed = wcom_printed & "-"
			wcom_exception = wcom_exception & "-"

			'Currently we are alerting workers that the notice was missed and NOT automating the notice just yet.
			If wcom_exception <> "--" Then
				notice_exception_message = "*  *  *  *  *  *  * NOTICE EXEPTION *  *  *  *  *  *  *"
				notice_exception_message = notice_exception_message & vbCr & "There is an Ex Parte Notice Exeption for this case."
				notice_exception_message = notice_exception_message & vbCr & vbCr & "This means the notice did not generate correctly for some reason."
				notice_exception_message = notice_exception_message & vbCr & "A notice is needed for the following members: " & replace(ex_parte_members, " ", ", ")
				notice_exception_message = notice_exception_message & vbCr & vbCr & "*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *"
				notice_exception_message = notice_exception_message & vbCr & vbCr & "THE SCRIPT WILL ATTEMPT TO SEND A MEMO FOR THIS CASE."
				notice_exception_message = notice_exception_message & vbCr & vbCr & "If a SPEC/MEMO is not created, please report to the BlueZone Script Team for functionality review."
				notice_exception_message = notice_exception_message & vbCr & vbCr & "*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *"
				notice_exception_message = notice_exception_message & vbCr & vbCr & "Procedure on sending manual notices can be found in ONE Source."
				notice_exception_message = notice_exception_message & vbCr & "Look under 'Renewals' for "
				notice_exception_message = notice_exception_message & vbCr & "  -  MAXIS Ex Parte Renewal Notice Exceptions"

				MsgBox notice_exception_message
			End If
		End If
   	End If

	ReDim preserve STAT_INFORMATION(month_count)


	Set STAT_INFORMATION(month_count) = new stat_detail

	STAT_INFORMATION(month_count).footer_month = MAXIS_footer_month
	STAT_INFORMATION(month_count).footer_year = MAXIS_footer_year
	STAT_INFORMATION(month_count).LIMIT_MEMBS = False

	Call navigate_to_MAXIS_screen("STAT", "SUMM")
	EMReadScreen invalid_month, 18, 24, 18
	' MsgBox "Pause HEre - 2" & vbCr & invalid_month
	If invalid_month <> "INVALID FOR PERIOD" Then
		STAT_INFORMATION(month_count).no_stat_data = False
		Call STAT_INFORMATION(month_count).gather_stat_info
	Else
		STAT_INFORMATION(month_count).no_stat_data = True
	End IF

	'NOW WE ADD THE STAT INFORMATION to each Program
	If numb_DWP_versions <> " " Then
		If DWP_ELIG_APPROVALS(dwp_elig_months_count).approved_today = True and DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_autoclosed_for_time_limit = False Then	'TODO  for DWP '
			For each_elig_memb = 0 to UBound(DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_elig_ref_numbs)
				For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
					If DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_elig_ref_numbs(each_elig_memb) = STAT_INFORMATION(month_count).stat_memb_ref_numb(each_stat_memb) Then
						If DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_memb_is_deemer(each_elig_memb) = True Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_two_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_three_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_four_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_five_job_deemed_for_mfip(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_busi_one_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_busi_two_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_busi_three_deemed_for_mfip(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_unea_one_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_two_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_three_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_four_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_five_deemed_for_mfip(each_stat_memb) = True



							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_mfip(each_stat_memb) = False
						' End If
						ElseIf DWP_ELIG_APPROVALS(dwp_elig_months_count).dwp_memb_is_counted(each_elig_memb) = False Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_mfip(each_stat_memb) = False
						End If
					End If

					If STAT_INFORMATION(month_count).stat_jobs_one_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_one_prosp_monthly_gross_wage(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_one_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_one_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_two_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_two_prosp_monthly_gross_wage(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_two_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_two_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_three_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_three_prosp_monthly_gross_wage(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_three_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_three_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_four_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_four_prosp_monthly_gross_wage(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_four_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_four_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_five_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_five_prosp_monthly_gross_wage(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_five_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_five_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If


					If STAT_INFORMATION(month_count).stat_busi_one_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_busi_one_cash_prosp_net_inc(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_busi_one_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_busi_one_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_busi_two_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_busi_two_cash_prosp_net_inc(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_busi_two_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_busi_two_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_busi_three_exists(each_stat_memb) = True Then
						the_gross_amount = STAT_INFORMATION(month_count).stat_busi_three_cash_prosp_net_inc(each_stat_memb)
						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_busi_three_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_busi_three_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If

					If STAT_INFORMATION(month_count).stat_unea_one_exists(each_stat_memb) = True Then
						STAT_INFORMATION(month_count).stat_unea_one_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_one_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_two_exists(each_stat_memb) = True Then
						STAT_INFORMATION(month_count).stat_unea_two_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_two_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_three_exists(each_stat_memb) = True Then
						STAT_INFORMATION(month_count).stat_unea_three_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_three_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_four_exists(each_stat_memb) = True Then
						STAT_INFORMATION(month_count).stat_unea_four_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_four_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_five_exists(each_stat_memb) = True Then
						STAT_INFORMATION(month_count).stat_unea_five_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_five_prosp_monthly_gross_income(each_stat_memb)
					End If
				Next
			Next
		End If
		dwp_elig_months_count = dwp_elig_months_count + 1
	End If

	If numb_MFIP_versions <> " " Then
		If MFIP_ELIG_APPROVALS(mfip_elig_months_count).approved_today = True Then
			MFIP_ELIG_APPROVALS(mfip_elig_months_count).revw_month = False
			MFIP_ELIG_APPROVALS(mfip_elig_months_count).hrf_month = False

			REPORTING_COMPLETE_ARRAY(mfip_next_revw_const, month_count) = MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_review_date
			REPORTING_COMPLETE_ARRAY(mfip_elig_const, month_count) = MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_eligibility_result
			REPORTING_COMPLETE_ARRAY(mfip_budg_cycle_const, month_count) = MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle

			If STAT_INFORMATION(month_count).stat_revw_cash_code = "A" Then
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).revw_month = True
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).revw_status = STAT_INFORMATION(month_count).stat_revw_cash_code
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).revw_caf_date = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).revw_interview_date = STAT_INFORMATION(month_count).stat_revw_interview_date

				REPORTING_COMPLETE_ARRAY(cash_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) & "/MFIP"
				REPORTING_COMPLETE_ARRAY(revw_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_interview_date
			End If
			If STAT_INFORMATION(month_count).stat_mont_cash_status = "A" Then
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).hrf_month = True
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).hrf_status = STAT_INFORMATION(month_count).stat_mont_cash_status
				MFIP_ELIG_APPROVALS(mfip_elig_months_count).hrf_doc_date = STAT_INFORMATION(month_count).stat_mont_form_recvd_date

				REPORTING_COMPLETE_ARRAY(mfip_hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) & "/MFIP"
				REPORTING_COMPLETE_ARRAY(hrf_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_mont_form_recvd_date
			End If

			For each_elig_memb = 0 to UBound(MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_elig_ref_numbs)
				For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
					If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_elig_ref_numbs(each_elig_memb) = STAT_INFORMATION(month_count).stat_memb_ref_numb(each_stat_memb) Then

						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_elig_membs_deemed(each_elig_memb) = "Deemed" Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_two_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_three_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_four_job_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_five_job_deemed_for_mfip(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_busi_one_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_busi_two_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_busi_three_deemed_for_mfip(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_unea_one_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_two_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_three_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_four_deemed_for_mfip(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_five_deemed_for_mfip(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_mfip(each_stat_memb) = False
						ElseIf MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_elig_membs_counted(each_elig_memb) <> "COUNTED" Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_mfip(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_mfip(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_mfip(each_stat_memb) = False
						End If
					End if
					If STAT_INFORMATION(month_count).stat_jobs_one_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_one_retro_monthly_gross_wage(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_one_prosp_monthly_gross_wage(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_one_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_one_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_two_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_two_retro_monthly_gross_wage(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_two_prosp_monthly_gross_wage(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_two_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_two_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_three_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_three_retro_monthly_gross_wage(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_three_prosp_monthly_gross_wage(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_three_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_three_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_four_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_four_retro_monthly_gross_wage(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_four_prosp_monthly_gross_wage(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_four_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_four_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_jobs_five_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_five_retro_monthly_gross_wage(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_jobs_five_prosp_monthly_gross_wage(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_jobs_five_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_jobs_five_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If


					If STAT_INFORMATION(month_count).stat_busi_one_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_busi_one_cash_retro_net_inc(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_busi_one_cash_prosp_net_inc(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_busi_one_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_busi_one_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_busi_two_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_busi_two_cash_retro_net_inc(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_busi_two_cash_prosp_net_inc(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_busi_two_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_busi_two_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If
					If STAT_INFORMATION(month_count).stat_busi_three_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then the_gross_amount = STAT_INFORMATION(month_count).stat_busi_three_cash_retro_net_inc(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then the_gross_amount = STAT_INFORMATION(month_count).stat_busi_three_cash_prosp_net_inc(each_stat_memb)

						the_counted_amount = ""
						Call determine_mfip_counted_amount(the_gross_amount, the_counted_amount)
						STAT_INFORMATION(month_count).stat_busi_three_mfip_gross_amt(each_stat_memb) = the_gross_amount
						STAT_INFORMATION(month_count).stat_busi_three_mfip_counted_amt(each_stat_memb) = the_counted_amount
					End If

					If STAT_INFORMATION(month_count).stat_unea_one_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_one_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_one_retro_monthly_gross_income(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_one_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_one_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_two_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_two_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_two_retro_monthly_gross_income(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_two_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_two_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_three_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_three_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_three_retro_monthly_gross_income(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_three_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_three_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_four_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_four_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_four_retro_monthly_gross_income(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_four_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_four_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_five_exists(each_stat_memb) = True Then
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_five_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_five_retro_monthly_gross_income(each_stat_memb)
						If MFIP_ELIG_APPROVALS(mfip_elig_months_count).mfip_case_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_five_mfip_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_five_prosp_monthly_gross_income(each_stat_memb)
					End If
				Next
			Next
		End If
		If MFIP_ELIG_APPROVALS(mfip_elig_months_count).MFSD_approved_today = True Then
			diets_running_total = 0
			For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
				If STAT_INFORMATION(month_count).stat_mfip_diet_exists(each_stat_memb) = True Then
					diets_running_total = diets_running_total + STAT_INFORMATION(month_count).stat_diet_mf_amount_one(each_stat_memb)
					diets_running_total = diets_running_total + STAT_INFORMATION(month_count).stat_diet_mf_amount_two(each_stat_memb)
				End If
			Next

			difference_in_diet_amount = MFIP_ELIG_APPROVALS(mfip_elig_months_count).MFSD_check_transaction_amount - diets_running_total
			If difference_in_diet_amount < 0 Then MFIP_ELIG_APPROVALS(mfip_elig_months_count).MFSD_overlap_exists = True
			If difference_in_diet_amount > 0 Then MFIP_ELIG_APPROVALS(mfip_elig_months_count).MFSD_diet_info_missing = True

			SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_const, month_count) = True
			SPECIAL_PROCESSES_BY_MONTH(MF_elig_index, month_count) = mfip_elig_months_count
			special_diet_check_exists = True

		End If
		mfip_elig_months_count = mfip_elig_months_count + 1
	End If

	If numb_MSA_versions <> " " Then
		If MSA_ELIG_APPROVALS(msa_elig_months_count).approved_today = True Then
			MSA_ELIG_APPROVALS(msa_elig_months_count).revw_month = False

			REPORTING_COMPLETE_ARRAY(msa_next_revw_const, month_count) = MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_recertification_date
			REPORTING_COMPLETE_ARRAY(msa_elig_const, month_count) = MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_eligibility_result
			REPORTING_COMPLETE_ARRAY(msa_budg_cycle_const, month_count) = MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_summ_budget_cycle
			If STAT_INFORMATION(month_count).stat_revw_cash_code = "A" Then
				MSA_ELIG_APPROVALS(msa_elig_months_count).revw_month = True
				MSA_ELIG_APPROVALS(msa_elig_months_count).revw_status = STAT_INFORMATION(month_count).stat_revw_cash_code
				MSA_ELIG_APPROVALS(msa_elig_months_count).revw_caf_date = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				MSA_ELIG_APPROVALS(msa_elig_months_count).revw_interview_date = STAT_INFORMATION(month_count).stat_revw_interview_date

				REPORTING_COMPLETE_ARRAY(cash_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) & "/MSA"
				REPORTING_COMPLETE_ARRAY(revw_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_interview_date
			End If

			For each_elig_memb = 0 to UBound(MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_ref_numbs)
				For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
					If MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_ref_numbs(each_elig_memb) = STAT_INFORMATION(month_count).stat_memb_ref_numb(each_stat_memb) Then

						If MSA_ELIG_APPROVALS(msa_elig_months_count).msa_elig_membs_counted(each_elig_memb) <> "COUNTED" Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_msa(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_msa(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_msa(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_msa(each_stat_memb) = False

						End If
						If STAT_INFORMATION(month_count).stat_unea_one_type_code(each_stat_memb) = "44" Then STAT_INFORMATION(month_count).stat_unea_one_counted_for_msa(each_stat_memb) = False
						If STAT_INFORMATION(month_count).stat_unea_two_type_code(each_stat_memb) = "44" Then STAT_INFORMATION(month_count).stat_unea_two_counted_for_msa(each_stat_memb) = False
						If STAT_INFORMATION(month_count).stat_unea_three_type_code(each_stat_memb) = "44" Then STAT_INFORMATION(month_count).stat_unea_three_counted_for_msa(each_stat_memb) = False
						If STAT_INFORMATION(month_count).stat_unea_four_type_code(each_stat_memb) = "44" Then STAT_INFORMATION(month_count).stat_unea_four_counted_for_msa(each_stat_memb) = False
						If STAT_INFORMATION(month_count).stat_unea_five_type_code(each_stat_memb) = "44" Then STAT_INFORMATION(month_count).stat_unea_five_counted_for_msa(each_stat_memb) = False
					End If
				Next
			Next
		End If
		msa_elig_months_count = msa_elig_months_count + 1
	End If

	If numb_GA_versions <> " " Then
		If GA_ELIG_APPROVALS(ga_elig_months_count).approved_today = True Then

			GA_ELIG_APPROVALS(ga_elig_months_count).revw_month = False
			GA_ELIG_APPROVALS(ga_elig_months_count).hrf_month = False

			REPORTING_COMPLETE_ARRAY(ga_next_revw_const, month_count) = GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_eligiblity_review_date
			REPORTING_COMPLETE_ARRAY(ga_elig_const, month_count) = GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_eligibility_result
			REPORTING_COMPLETE_ARRAY(ga_budg_cycle_const, month_count) = GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle

			If STAT_INFORMATION(month_count).stat_revw_cash_code = "A" Then
				GA_ELIG_APPROVALS(ga_elig_months_count).revw_month = True
				GA_ELIG_APPROVALS(ga_elig_months_count).revw_status = STAT_INFORMATION(month_count).stat_revw_cash_code
				GA_ELIG_APPROVALS(ga_elig_months_count).revw_caf_date = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				GA_ELIG_APPROVALS(ga_elig_months_count).revw_interview_date = STAT_INFORMATION(month_count).stat_revw_interview_date

				REPORTING_COMPLETE_ARRAY(cash_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) & "/GA"
				REPORTING_COMPLETE_ARRAY(revw_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_interview_date
			End If
			If STAT_INFORMATION(month_count).stat_mont_cash_status = "A" Then
				GA_ELIG_APPROVALS(ga_elig_months_count).hrf_month = True
				GA_ELIG_APPROVALS(ga_elig_months_count).hrf_status = STAT_INFORMATION(month_count).stat_mont_cash_status
				GA_ELIG_APPROVALS(ga_elig_months_count).hrf_doc_date = STAT_INFORMATION(month_count).stat_mont_form_recvd_date

				REPORTING_COMPLETE_ARRAY(ga_hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) & "/GA"
				REPORTING_COMPLETE_ARRAY(hrf_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_mont_form_recvd_date
			End If

			For each_elig_memb = 0 to UBound(GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_ref_numbs)
				For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
					If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_ref_numbs(each_elig_memb) = STAT_INFORMATION(month_count).stat_memb_ref_numb(each_stat_memb) Then

						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_membs_counted(each_elig_memb) <> "COUNTED" Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_ga(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_ga(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_ga(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_ga(each_stat_memb) = False

						End If

						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_membs_counted(each_elig_memb) = "Deemed" Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_two_job_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_three_job_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_four_job_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_jobs_five_job_deemed_for_ga(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_busi_one_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_busi_two_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_busi_three_deemed_for_ga(each_stat_memb) = True

							STAT_INFORMATION(month_count).stat_unea_one_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_two_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_three_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_four_deemed_for_ga(each_stat_memb) = True
							STAT_INFORMATION(month_count).stat_unea_five_deemed_for_ga(each_stat_memb) = True
						End If
					End if
					If STAT_INFORMATION(month_count).stat_jobs_one_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_jobs_one_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_one_retro_monthly_gross_wage(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_jobs_one_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_one_prosp_monthly_gross_wage(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_jobs_two_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_jobs_two_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_two_retro_monthly_gross_wage(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_jobs_two_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_two_prosp_monthly_gross_wage(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_jobs_three_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_jobs_three_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_three_retro_monthly_gross_wage(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_jobs_three_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_three_prosp_monthly_gross_wage(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_jobs_four_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_jobs_four_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_four_retro_monthly_gross_wage(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_jobs_four_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_four_prosp_monthly_gross_wage(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_jobs_five_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_jobs_five_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_five_retro_monthly_gross_wage(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_jobs_five_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_jobs_five_prosp_monthly_gross_wage(each_stat_memb)
					End If


					If STAT_INFORMATION(month_count).stat_busi_one_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_busi_one_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_busi_one_cash_retro_net_inc(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_busi_one_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_busi_one_cash_prosp_net_inc(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_busi_two_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_busi_two_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_busi_two_cash_retro_net_inc(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_busi_two_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_busi_two_cash_prosp_net_inc(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_busi_three_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_busi_three_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_busi_three_cash_retro_net_inc(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_busi_three_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_busi_three_cash_prosp_net_inc(each_stat_memb)
					End If

					If STAT_INFORMATION(month_count).stat_unea_one_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_one_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_one_retro_monthly_gross_income(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_one_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_one_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_two_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_two_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_two_retro_monthly_gross_income(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_two_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_two_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_three_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_three_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_three_retro_monthly_gross_income(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_three_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_three_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_four_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_four_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_four_retro_monthly_gross_income(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_four_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_four_prosp_monthly_gross_income(each_stat_memb)
					End If
					If STAT_INFORMATION(month_count).stat_unea_five_exists(each_stat_memb) = True Then
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "RETRO" Then STAT_INFORMATION(month_count).stat_unea_five_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_five_retro_monthly_gross_income(each_stat_memb)
						If GA_ELIG_APPROVALS(ga_elig_months_count).ga_elig_summ_budget_cycle = "PROSP" Then STAT_INFORMATION(month_count).stat_unea_five_ga_gross_amt(each_stat_memb) = STAT_INFORMATION(month_count).stat_unea_five_prosp_monthly_gross_income(each_stat_memb)
					End If
				Next
			Next
		End If
		ga_elig_months_count = ga_elig_months_count + 1
	End If

	If numb_CASH_denial_versions <> " " Then
		If CASH_DENIAL_APPROVALS(cash_deny_months_count).approved_today = True Then
			CASH_DENIAL_APPROVALS(cash_deny_months_count).cash_family_or_adult = "Adult"
			If STAT_INFORMATION(month_count).children_on_case = True Then CASH_DENIAL_APPROVALS(cash_deny_months_count).cash_family_or_adult = "Family"
		End If
		cash_deny_months_count = cash_deny_months_count + 1
	End If

	If numb_GRH_versions <> " " Then
		If GRH_ELIG_APPROVALS(grh_elig_months_count).approved_today = True Then
			GRH_ELIG_APPROVALS(grh_elig_months_count).revw_month = False
			GRH_ELIG_APPROVALS(grh_elig_months_count).hrf_month = False

			REPORTING_COMPLETE_ARRAY(grh_next_revw_const, month_count) = GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_elig_review_date
			REPORTING_COMPLETE_ARRAY(grh_elig_const, month_count) = GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_eligibility_result

			If GRH_ELIG_APPROVALS(grh_elig_months_count).appears_supportive_housing_disregard_case = True and GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_supp_hsg_disregard = "" Then call supportive_housing_disregard_error(True)
			If GRH_ELIG_APPROVALS(grh_elig_months_count).appears_supportive_housing_disregard_case = False and GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_supp_hsg_disregard <> "" Then call supportive_housing_disregard_error(False)

			For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
				If GRH_ELIG_APPROVALS(grh_elig_months_count).grh_elig_memb_ref_numb <> STAT_INFORMATION(month_count).stat_memb_ref_numb(each_stat_memb) Then
					STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_grh(each_stat_memb) = False

					STAT_INFORMATION(month_count).stat_busi_one_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_busi_two_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_busi_three_counted_for_grh(each_stat_memb) = False

					STAT_INFORMATION(month_count).stat_unea_one_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_unea_two_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_unea_three_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_unea_four_counted_for_grh(each_stat_memb) = False
					STAT_INFORMATION(month_count).stat_unea_five_counted_for_grh(each_stat_memb) = False
				End If
			Next

			If STAT_INFORMATION(month_count).stat_revw_cash_code = "A" Then
				GRH_ELIG_APPROVALS(grh_elig_months_count).revw_month = True
				GRH_ELIG_APPROVALS(grh_elig_months_count).revw_status = STAT_INFORMATION(month_count).stat_revw_cash_code
				GRH_ELIG_APPROVALS(grh_elig_months_count).revw_caf_date = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				GRH_ELIG_APPROVALS(grh_elig_months_count).revw_interview_date = STAT_INFORMATION(month_count).stat_revw_interview_date

				REPORTING_COMPLETE_ARRAY(cash_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(revw_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_interview_date

				If IsDate(STAT_INFORMATION(month_count).stat_last_cash_revw_date) = True Then last_revw_month = DatePart("m", STAT_INFORMATION(month_count).stat_last_cash_revw_date)
				If IsDate(STAT_INFORMATION(month_count).stat_next_cash_revw_date) = True Then next_revw_month = DatePart("m", STAT_INFORMATION(month_count).stat_next_cash_revw_date)

				If next_revw_month = last_revw_month OR STAT_INFORMATION(month_count).stat_next_cash_revw_process = "SR" Then
					GRH_ELIG_APPROVALS(grh_elig_months_count).revw_type = "ER"
					REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = True
					REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) & "/GRH"
				ElseIf STAT_INFORMATION(month_count).stat_next_cash_revw_process = "ER" Then
					GRH_ELIG_APPROVALS(grh_elig_months_count).revw_type = "SR"
					REPORTING_COMPLETE_ARRAY(sr_revw_completed_const, month_count) = True
					REPORTING_COMPLETE_ARRAY(sr_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(sr_programs_const, month_count) & "/GRH"
				End If
			End If
			If STAT_INFORMATION(month_count).stat_mont_cash_status = "A" Then
				GRH_ELIG_APPROVALS(grh_elig_months_count).hrf_month = True
				GRH_ELIG_APPROVALS(grh_elig_months_count).hrf_status = STAT_INFORMATION(month_count).stat_mont_cash_status
				GRH_ELIG_APPROVALS(grh_elig_months_count).hrf_doc_date = STAT_INFORMATION(month_count).stat_mont_form_recvd_date

				REPORTING_COMPLETE_ARRAY(grh_hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) & "/GRH"
				REPORTING_COMPLETE_ARRAY(hrf_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_mont_form_recvd_date
			End If
		End If
		grh_elig_months_count = grh_elig_months_count + 1
	End If

	If numb_SNAP_versions <> " " Then
		If SNAP_ELIG_APPROVALS(snap_elig_months_count).approved_today = True Then
			SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_month = False
			SNAP_ELIG_APPROVALS(snap_elig_months_count).hrf_month = False

			REPORTING_COMPLETE_ARRAY(snap_next_revw_const, month_count) = SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_revw_date
			REPORTING_COMPLETE_ARRAY(snap_elig_const, month_count) = SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_result
			REPORTING_COMPLETE_ARRAY(snap_budg_cycle_const, month_count) = SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_budget_cycle

			If STAT_INFORMATION(month_count).stat_addr_homeless_yn = "Y" Then
				For each_elig_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
					If STAT_INFORMATION(month_count).stat_shel_exists(each_elig_memb) = True Then
						If STAT_INFORMATION(month_count).stat_shel_prosp_rent_amount(each_elig_memb) <> 0 Then
							If STAT_INFORMATION(month_count).stat_shel_prosp_rent_verif_code(each_elig_memb) <> "NO" and STAT_INFORMATION(month_count).stat_shel_prosp_rent_verif_code(each_elig_memb) <> "?_" Then SPECIAL_PROCESSES_BY_MONTH(Homeless_SHELTER_deducation, month_count) = True
						End If
						If STAT_INFORMATION(month_count).stat_shel_prosp_lot_rent_amount(each_elig_memb) <> 0 Then
							If STAT_INFORMATION(month_count).stat_shel_retro_lot_rent_verif_code(each_elig_memb) <> "NO" and STAT_INFORMATION(month_count).stat_shel_retro_lot_rent_verif_code(each_elig_memb) <> "?_" Then SPECIAL_PROCESSES_BY_MONTH(Homeless_SHELTER_deducation, month_count) = True
						End If
						If STAT_INFORMATION(month_count).stat_shel_prosp_room_amount(each_elig_memb) <> 0 Then
							If STAT_INFORMATION(month_count).stat_shel_prosp_room_verif_code(each_elig_memb) <> "NO" and STAT_INFORMATION(month_count).stat_shel_prosp_room_verif_code(each_elig_memb) <> "?_" Then SPECIAL_PROCESSES_BY_MONTH(Homeless_SHELTER_deducation, month_count) = True
						End If
					End If
				Next
			End If

			If STAT_INFORMATION(month_count).stat_revw_snap_code = "A" Then
				SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_month = True
				SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_status = STAT_INFORMATION(month_count).stat_revw_snap_code
				REPORTING_COMPLETE_ARRAY(snap_revw_completed_const, month_count) = True

				If IsDate(STAT_INFORMATION(month_count).stat_last_snap_revw_date) = True Then last_revw_month = DatePart("m", STAT_INFORMATION(month_count).stat_last_snap_revw_date)
				If IsDate(STAT_INFORMATION(month_count).stat_next_snap_revw_date) = True Then next_revw_month = DatePart("m", STAT_INFORMATION(month_count).stat_next_snap_revw_date)

				If next_revw_month = last_revw_month OR STAT_INFORMATION(month_count).stat_next_snap_revw_process = "SR" Then
					SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_type = "ER"
					REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = True
					REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) & "/SNAP"
				ElseIf STAT_INFORMATION(month_count).stat_next_snap_revw_process = "ER" Then
					SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_type = "SR"
					REPORTING_COMPLETE_ARRAY(sr_revw_completed_const, month_count) = True
					REPORTING_COMPLETE_ARRAY(sr_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(sr_programs_const, month_count) & "/SNAP"
				End If
				SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_caf_date = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				SNAP_ELIG_APPROVALS(snap_elig_months_count).revw_interview_date = STAT_INFORMATION(month_count).stat_revw_interview_date
				REPORTING_COMPLETE_ARRAY(revw_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
				REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_interview_date
			End If
			If STAT_INFORMATION(month_count).stat_mont_snap_status = "A" Then
				SNAP_ELIG_APPROVALS(snap_elig_months_count).hrf_month = True
				SNAP_ELIG_APPROVALS(snap_elig_months_count).hrf_status = STAT_INFORMATION(month_count).stat_mont_snap_status
				SNAP_ELIG_APPROVALS(snap_elig_months_count).hrf_doc_date = STAT_INFORMATION(month_count).stat_mont_form_recvd_date
				REPORTING_COMPLETE_ARRAY(snap_hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(hrf_programs_const, month_count) & "/SNAP"
				REPORTING_COMPLETE_ARRAY(hrf_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_mont_form_recvd_date
			End If

			SNAP_ELIG_APPROVALS(snap_elig_months_count).adults_recv_snap = 0
			SNAP_ELIG_APPROVALS(snap_elig_months_count).children_recv_snap = 0
			For each_elig_memb = 0 to UBound(SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_ref_numbs)
				For each_stat_memb = 0 to UBound(STAT_INFORMATION(month_count).stat_memb_ref_numb)
					If SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_ref_numbs(each_elig_memb) = STAT_INFORMATION(month_count).stat_memb_ref_numb(each_stat_memb) Then
						If SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_membs_counted(each_elig_memb) <> "COUNTED" Then
							STAT_INFORMATION(month_count).stat_jobs_one_job_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_two_job_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_three_job_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_four_job_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_jobs_five_job_counted_for_snap(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_busi_one_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_two_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_busi_three_counted_for_snap(each_stat_memb) = False

							STAT_INFORMATION(month_count).stat_unea_one_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_two_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_three_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_four_counted_for_snap(each_stat_memb) = False
							STAT_INFORMATION(month_count).stat_unea_five_counted_for_snap(each_stat_memb) = False
						End If
						If SNAP_ELIG_APPROVALS(snap_elig_months_count).snap_elig_membs_code(each_elig_memb) = "A" Then
							If STAT_INFORMATION(month_count).stat_memb_age(each_stat_memb) > 21 Then
								SNAP_ELIG_APPROVALS(snap_elig_months_count).adults_recv_snap = SNAP_ELIG_APPROVALS(snap_elig_months_count).adults_recv_snap + 1
							Else
								SNAP_ELIG_APPROVALS(snap_elig_months_count).children_recv_snap = SNAP_ELIG_APPROVALS(snap_elig_months_count).children_recv_snap + 1
							End If
						End If
					End If
				Next
			Next
			snap_elig_months_count = snap_elig_months_count + 1
		End If
	End If

	'TODO turn back on for HC functionality'
	If HC_ELIG_APPROVALS(hc_elig_months_count).approved_today = True Then
		HC_ELIG_APPROVALS(hc_elig_months_count).revw_month = False
		HC_ELIG_APPROVALS(hc_elig_months_count).hrf_month = False

		If STAT_INFORMATION(month_count).stat_revw_hc_code = "A" Then
			HC_ELIG_APPROVALS(hc_elig_months_count).revw_month = True
			HC_ELIG_APPROVALS(hc_elig_months_count).revw_status = STAT_INFORMATION(month_count).stat_revw_hc_code
			HC_ELIG_APPROVALS(hc_elig_months_count).revw_caf_date = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
			HC_ELIG_APPROVALS(hc_elig_months_count).revw_interview_date = STAT_INFORMATION(month_count).stat_revw_interview_date

			REPORTING_COMPLETE_ARRAY(hc_revw_completed_const, month_count) = True
			REPORTING_COMPLETE_ARRAY(revw_form_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_form_recvd_date
			REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, month_count) = STAT_INFORMATION(month_count).stat_revw_interview_date

			If IsDate(STAT_INFORMATION(month_count).stat_last_hc_revw_date) = True Then last_revw_month = DatePart("m", STAT_INFORMATION(month_count).stat_last_hc_revw_date)
			If IsDate(STAT_INFORMATION(month_count).stat_next_hc_revw_date) = True Then next_revw_month = DatePart("m", STAT_INFORMATION(month_count).stat_next_hc_revw_date)

			If next_revw_month = last_revw_month OR STAT_INFORMATION(month_count).stat_next_hc_revw_process = "SR" Then
				HC_ELIG_APPROVALS(hc_elig_months_count).revw_type = "ER"
				REPORTING_COMPLETE_ARRAY(er_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(er_programs_const, month_count) & "/HC"
			ElseIf STAT_INFORMATION(month_count).stat_next_hc_revw_process = "ER" Then
				HC_ELIG_APPROVALS(hc_elig_months_count).revw_type = "SR"
				REPORTING_COMPLETE_ARRAY(sr_revw_completed_const, month_count) = True
				REPORTING_COMPLETE_ARRAY(sr_programs_const, month_count) = REPORTING_COMPLETE_ARRAY(sr_programs_const, month_count) & "/HC"
			End If
		End If
	End If
	hc_elig_months_count = hc_elig_months_count + 1

	month_count = month_count + 1					'This is way down here because I want to be able to reference the information in the current month for this class.

	Call back_to_SELF
Next

EMWriteScreen MAXIS_case_number, 18, 43

If approvals_not_created_today <> "" Then
	'making sure that the footer month fields are accurate before trying to do date things
	check_day = first_month_not_created_today & "/1/" & first_year_not_created_today			'making sure the entered footer month is not later than CM+1
	check_day = DateAdd("d", 0, check_day)
	If DateDiff("d", check_day, last_option_day) >= 0 Then
		Call Navigate_to_MAXIS_screen("ELIG", "SUMM")
		Call write_value_and_transmit(first_month_not_created_today, 19, 56)
		Call write_value_and_transmit(first_year_not_created_today, 19, 59)
		Call Navigate_to_MAXIS_screen("ELIG", first_prog_not_created_today)
	End If

	cannot_note_msg = "It appears there were approvals completed today on ELIG Results that were created on a different day:" & vbCr & vbCr
	cannot_note_msg = cannot_note_msg & approvals_not_created_today & vbCr
	cannot_note_msg = cannot_note_msg & "The date the results were created can be seen in the 'Process Date' field in ELIG." & vbCr
	cannot_note_msg = cannot_note_msg & "This is the date the results came through background." & vbCr & vbCr
	cannot_note_msg = cannot_note_msg & "ELIG Results should be generated, approved, and CASE/NOTEd on the same day." & vbCr & vbCr
	cannot_note_msg = cannot_note_msg & "The script will continue but these results will not be included."

	'TESTING LOGIC'
	MsgBox cannot_note_msg
End If

verifs_in_case_note = ""
If ineligible_approval_exists = True Then
	Call Navigate_to_MAXIS_screen("CASE", "NOTE")               'Now we navigate to CASE:NOTES
	too_old_date = DateAdd("d", -75, date)              'We don't need to read notes from before the CAF date

	note_row = 5
	in_note_row = 4
	Do
		EMReadScreen note_date, 8, note_row, 6                  'reading the note date
		EMReadScreen note_title, 55, note_row, 25               'reading the note header
		note_title = trim(note_title)
		If InStr(note_title, "Application Check") <> 0 Then
			Call write_value_and_transmit("X", note_row, 3)

			Do
				EMReadScreen note_header, 24, in_note_row, 3

				If note_header = "* Pending Verifications:" Then
					Do
						EMReadScreen case_note_line, 78, in_note_row, 3
						enter_new_line = False
						verifs_in_case_note = verifs_in_case_note & trim(replace(case_note_line, "* Pending Verifications:", ""))
						If enter_new_line = True Then verifs_in_case_note = verifs_in_case_note & "; "

						in_note_row = in_note_row + 1
						If in_note_row >= 18 Then
							PF8
							in_note_row = 4
							EMReadScreen end_of_notes, 9, 24, 14
							If end_of_notes = "LAST PAGE" Then Exit Do
						End if
						EMReadScreen next_header, 2, in_note_row, 3
					Loop until next_header = "* " or next_header = "--"
				End If

				If verifs_in_case_note <> "" Then Exit Do
				in_note_row = in_note_row + 1
				If in_note_row >= 18 Then
					PF8
					in_note_row = 4
					EMReadScreen end_of_notes, 9, 24, 14
					If end_of_notes = "LAST PAGE" Then Exit Do
				End if
				EMReadScreen next_case_note_line, 78, in_note_row, 3
			Loop until trim(next_case_note_line) = ""

			PF3
		End If

		If InStr(note_title, ">>>Verifications Requested<<<") <> 0 or InStr(note_title, ">>>POSTPONED VERIFICATIONS REQUESTED") <> 0 or InStr(note_title, "***Verifications Still Needed***") <> 0 Then
			Call write_value_and_transmit("X", note_row, 3)

			Do

				EMReadScreen case_note_line, 78, in_note_row, 3

				If left(case_note_line, 6) = "* ADDR" 				then case_note_line = trim(replace(case_note_line, "* ADDR: ", "")) & ", "
				If left(case_note_line, 6) = "* FACI" 				then case_note_line = trim(replace(case_note_line, "* FACI: ", "")) & ";, "
				If left(case_note_line, 16) = "* SCHL/STIN/STEC" 	then case_note_line = trim(replace(case_note_line, "* SCHL/STIN/STEC: ", "")) & ", "
				If left(case_note_line, 6) = "* DISA" 				then case_note_line = trim(replace(case_note_line, "* DISA: ", "")) & ", "
				If left(case_note_line, 6) = "* JOBS" 				then case_note_line = trim(replace(case_note_line, "* JOBS: ", "")) & ", "
				If left(case_note_line, 6) = "* BUSI" 				then case_note_line = trim(replace(case_note_line, "* BUSI: ", "")) & ", "
				If left(case_note_line, 11) = "* BUSI/RBIC" 		then case_note_line = trim(replace(case_note_line, "* BUSI/RBIC: ", "")) & ", "
				If left(case_note_line, 6) = "* UNEA"				then case_note_line = trim(replace(case_note_line, "* UNEA: ", "")) & ", "
				If left(case_note_line, 16) = "* UNEA (MEMB 01)" 	then case_note_line = trim(replace(case_note_line, "* UNEA (MEMB 01): ", "")) & ", "
				If left(case_note_line, 20) = "* UNEA (other membs)"then case_note_line = trim(replace(case_note_line, "* UNEA (other membs): ", "")) & ", "
				If left(case_note_line, 6) = "* ACCT" 				then case_note_line = trim(replace(case_note_line, "* ACCT: ", "")) & ", "
				If left(case_note_line, 16) = "* ACCT (MEMB 01)" 	then case_note_line = trim(replace(case_note_line, "* ACCT (MEMB 01): ", "")) & ", "
				If left(case_note_line, 20) = "* ACCT (other membs)"then case_note_line = trim(replace(case_note_line, "* ACCT (other membs): ", "")) & ", "
				If left(case_note_line, 16) = "* SECU (MEMB 01)" 	then case_note_line = trim(replace(case_note_line, "* SECU (MEMB 01): ", "")) & ", "
				If left(case_note_line, 20) = "* SECU (other membs)"then case_note_line = trim(replace(case_note_line, "* SECU (other membs): ", "")) & ", "
				If left(case_note_line, 6) = "* CARS" 				then case_note_line = trim(replace(case_note_line, "* CARS: ", "")) & ", "
				If left(case_note_line, 6) = "* REST" 				then case_note_line = trim(replace(case_note_line, "* REST: ", "")) & ", "
				If left(case_note_line, 13) = "* Burial/OTHR" 		then case_note_line = trim(replace(case_note_line, "* Burial/OTHR: ", "")) & ", "
				If left(case_note_line, 14) = "* Other assets" 		then case_note_line = trim(replace(case_note_line, "* Other assets: ", "")) & ", "
				If left(case_note_line, 14) = "* Other Assets" 		then case_note_line = trim(replace(case_note_line, "* Other Assets: ", "")) & ", "
				If left(case_note_line, 6) = "* SHEL" 				then case_note_line = trim(replace(case_note_line, "* SHEL: ", "")) & ", "
				If left(case_note_line, 9) = "* Subsidy" 			then case_note_line = trim(replace(case_note_line, "* Subsidy: ", "")) & ", "
				If left(case_note_line, 6) = "* INSA" 				then case_note_line = trim(replace(case_note_line, "* INSA: ", "")) & ", "
				If left(case_note_line, 16) = "* Veteran's info" 	then case_note_line = trim(replace(case_note_line, "* Veteran's info: ", "")) & ", "
				If left(case_note_line, 18) = "* Medical expenses" 	then case_note_line = trim(replace(case_note_line, "* Medical expenses: ", "")) & ", "
				If left(case_note_line, 14) = "* Other proofs" 		then case_note_line = trim(replace(case_note_line, "* Other proofs: ", "")) & ", "
				If left(case_note_line, 14) = "* Other Proofs" 		then case_note_line = trim(replace(case_note_line, "* Other Proofs: ", "")) & ", "

				verifs_in_case_note = verifs_in_case_note & case_note_line

				in_note_row = in_note_row + 1
				If in_note_row >= 18 Then
					PF8
					in_note_row = 4
					EMReadScreen end_of_notes, 9, 24, 14
					If end_of_notes = "LAST PAGE" Then Exit Do
				End if
				EMReadScreen next_case_note_line, 78, in_note_row, 3
			Loop until trim(next_case_note_line) = ""

			PF3
		End If

		If InStr(note_title, "VERIFICATIONS REQUESTED") <> 0 Then

			Call write_value_and_transmit("X", note_row, 3)

			Do
				EMReadScreen note_header, 36, in_note_row, 3

				If note_header = "List of all verifications requested:" Then
					in_note_row = in_note_row + 1
					Do
						EMReadScreen case_note_line, 78, in_note_row, 3
						enter_new_line = False
						verifs_in_case_note = verifs_in_case_note & trim(case_note_line)
						If enter_new_line = True Then verifs_in_case_note = verifs_in_case_note & "; "

						in_note_row = in_note_row + 1
						If in_note_row >= 18 Then
							PF8
							in_note_row = 4
							EMReadScreen end_of_notes, 9, 24, 14
							If end_of_notes = "LAST PAGE" Then Exit Do
						End if
						EMReadScreen next_header, 3, in_note_row, 3
					Loop until next_header = "---"
				End If

				If verifs_in_case_note <> "" Then Exit Do
				in_note_row = in_note_row + 1
				If in_note_row >= 18 Then
					PF8
					in_note_row = 4
					EMReadScreen end_of_notes, 9, 24, 14
					If end_of_notes = "LAST PAGE" Then Exit Do
				End if
				EMReadScreen next_case_note_line, 78, in_note_row, 3
			Loop until trim(next_case_note_line) = ""

			PF3
		End If

		If verifs_in_case_note <> "" Then
			verifs_in_case_note = trim(verifs_in_case_note)
			Do
				verifs_in_case_note = replace(verifs_in_case_note, "  ", " ")
			Loop until InStr(verifs_in_case_note, "  ") = 0
			Exit Do
		End if

		if note_date = "        " then Exit Do                                      'if we are at the end of the list of notes - we can't read any more

        note_row = note_row + 1
        if note_row = 19 then
            note_row = 5
            PF8
            EMReadScreen check_for_last_page, 9, 24, 14
            If check_for_last_page = "LAST PAGE" Then Exit Do
        End If
        EMReadScreen next_note_date, 8, note_row, 6
        if next_note_date = "        " then Exit Do
    Loop until DateDiff("d", too_old_date, next_note_date) <= 0

End If

pnd2_display_limit_hit = False
deny_app_one = False
deny_app_two = False
denials_found_on_pnd2 = False
advise_not_to_use_lcase = False
Call navigate_to_MAXIS_screen("REPT", "PND2")
EMReadScreen pnd2_disp_limit, 13, 6, 35             'functionality to bypass the display limit warning if it appears.
If pnd2_disp_limit = "Display Limit" Then
	TRANSMIT
	pnd2_display_limit_hit = True
End If

row = 1
col = 1
EMSearch MAXIS_case_number, row, col
If row <> 24 and row <> 0 Then
	EMReadScreen pnd2_appl_date, 8, row, 38
	EMReadScreen pnd2_days_pending, 5, row, 48
	EMReadScreen pnd2_cash_status, 1, row, 54
	EMReadScreen pnd2_cash_prog_one, 2, row, 56
	EMReadScreen pnd2_cash_prog_two, 2, row, 59
	EMReadScreen pnd2_snap_status, 1, row, 62
	' EMReadScreen pnd2_hc_status, 1, row,  65
	EMReadScreen pnd2_emer_status, 1, row, 68
	EMReadScreen pnd2_grh_status, 1, row, 72
	' EMReadScreen pnd2_ive_status, 1, row, 76
	pnd2_days_pending = trim(pnd2_days_pending)

	If pnd2_cash_status = "i" Then EMWriteScreen "I", row, 54
	If pnd2_cash_status = "r" Then EMWriteScreen "R", row, 54
	If pnd2_snap_status = "i" Then EMWriteScreen "I", row, 62
	If pnd2_snap_status = "r" Then EMWriteScreen "R", row, 62
	If pnd2_emer_status = "i" Then EMWriteScreen "I", row, 68
	If pnd2_emer_status = "r" Then EMWriteScreen "R", row, 68
	If pnd2_grh_status = "i" Then EMWriteScreen "I", row, 72
	If pnd2_grh_status = "r" Then EMWriteScreen "R", row, 72

	If pnd2_cash_status = "i" or pnd2_cash_status = "r" or pnd2_snap_status = "i" or pnd2_snap_status = "r" or pnd2_emer_status = "i" or pnd2_emer_status = "r" or pnd2_grh_status = "i" or pnd2_grh_status = "r" Then advise_not_to_use_lcase = True

	pnd2_cash_status = UCase(pnd2_cash_status)
	pnd2_snap_status = UCase(pnd2_snap_status)
	pnd2_emer_status = UCase(pnd2_emer_status)
	pnd2_grh_status = UCase(pnd2_grh_status)


	If pnd2_cash_status = "I" Then deny_app_one = True
	If pnd2_cash_status = "R" Then deny_app_one = True
	If pnd2_snap_status = "I" Then deny_app_one = True
	If pnd2_snap_status = "R" Then deny_app_one = True
	If pnd2_emer_status = "I" Then deny_app_one = True
	If pnd2_emer_status = "R" Then deny_app_one = True
	If pnd2_grh_status = "I" Then deny_app_one = True
	If pnd2_grh_status = "R" Then deny_app_one = True

	If pnd2_cash_prog_one = "  " Then pnd2_cash_prog_one = ""
	If pnd2_cash_prog_one = "CA" Then pnd2_cash_prog_one = "Cash"
	If pnd2_cash_prog_one = "MF" Then pnd2_cash_prog_one = "MFIP"
	If pnd2_cash_prog_one = "DW" Then pnd2_cash_prog_one = "DWP"
	If pnd2_cash_prog_one = "MS" Then pnd2_cash_prog_one = "MSA"
	If pnd2_cash_prog_one = "RC" Then pnd2_cash_prog_one = "RCA"
	If pnd2_cash_prog_two = "  " Then pnd2_cash_prog_two = ""
	If pnd2_cash_prog_two = "CA" Then pnd2_cash_prog_two = "Cash"
	If pnd2_cash_prog_two = "MF" Then pnd2_cash_prog_two = "MFIP"
	If pnd2_cash_prog_two = "DW" Then pnd2_cash_prog_two = "DWP"
	If pnd2_cash_prog_two = "MS" Then pnd2_cash_prog_two = "MSA"
	If pnd2_cash_prog_two = "RC" Then pnd2_cash_prog_two = "RCA"

	pnd2_appl_date = replace(pnd2_appl_date, " ", "/")

	row = row + 1
	EMReadScreen additional_application_check, 14, row, 17                 'looking to see if this case has a secondary application date entered
	IF additional_application_check = "ADDITIONAL APP" THEN                         'If it does this string will be at that location and we need to do some handling around the application date to use.
		EMReadScreen pnd2_2nd_appl_date, 8, row, 38
		EMReadScreen pnd2_2nd_days_pending, 5, row, 48
		EMReadScreen pnd2_2nd_cash_status, 1, row, 54
		EMReadScreen pnd2_2nd_cash_prog_one, 2, row, 56
		EMReadScreen pnd2_2nd_cash_prog_two, 2, row, 59
		EMReadScreen pnd2_2nd_snap_status, 1, row, 62
		' EMReadScreen pnd2_hc_status, 1, row,  65
		EMReadScreen pnd2_2nd_emer_status, 1, row, 68
		EMReadScreen pnd2_2nd_grh_status, 1, row, 72
		' EMReadScreen pnd2_ive_status, 1, row, 76
		pnd2_days_pending = trim(pnd2_days_pending)

		If pnd2_2nd_cash_status = "i" Then EMWriteScreen "I", row, 54
		If pnd2_2nd_cash_status = "r" Then EMWriteScreen "R", row, 54
		If pnd2_2nd_snap_status = "i" Then EMWriteScreen "I", row, 62
		If pnd2_2nd_snap_status = "r" Then EMWriteScreen "R", row, 62
		If pnd2_2nd_emer_status = "i" Then EMWriteScreen "I", row, 68
		If pnd2_2nd_emer_status = "r" Then EMWriteScreen "R", row, 68
		If pnd2_2nd_grh_status = "i" Then EMWriteScreen "I", row, 72
		If pnd2_2nd_grh_status = "r" Then EMWriteScreen "R", row, 72

		If pnd2_2nd_cash_status = "i" or pnd2_2nd_cash_status = "r" or pnd2_2nd_snap_status = "i" or pnd2_2nd_snap_status = "r" or pnd2_2nd_emer_status = "i" or pnd2_2nd_emer_status = "r" or pnd2_2nd_grh_status = "i" or pnd2_2nd_grh_status = "r" Then advise_not_to_use_lcase = True

		pnd2_2nd_cash_status = UCase(pnd2_2nd_cash_status)
		pnd2_2nd_snap_status = UCase(pnd2_2nd_snap_status)
		pnd2_2nd_emer_status = UCase(pnd2_2nd_emer_status)
		pnd2_2nd_grh_status = UCase(pnd2_2nd_grh_status)

		' If pnd2_2nd_grh_status = "_" Then pnd2_2nd_grh_status = ""
		' If pnd2_2nd_grh_status = "_" Then pnd2_2nd_grh_status = ""

		If pnd2_2nd_cash_status = "I" Then deny_app_two = True
		If pnd2_2nd_cash_status = "R" Then deny_app_two = True
		If pnd2_2nd_snap_status = "I" Then deny_app_two = True
		If pnd2_2nd_snap_status = "R" Then deny_app_two = True
		If pnd2_2nd_emer_status = "I" Then deny_app_two = True
		If pnd2_2nd_emer_status = "R" Then deny_app_two = True
		If pnd2_2nd_grh_status = "I" Then deny_app_two = True
		If pnd2_2nd_grh_status = "R" Then deny_app_two = True

		If pnd2_2nd_cash_prog_one = "  " Then pnd2_2nd_cash_prog_one = ""
		If pnd2_2nd_cash_prog_one = "CA" Then pnd2_2nd_cash_prog_one = "Cash"
		If pnd2_2nd_cash_prog_one = "MF" Then pnd2_2nd_cash_prog_one = "MFIP"
		If pnd2_2nd_cash_prog_one = "DW" Then pnd2_2nd_cash_prog_one = "DWP"
		If pnd2_2nd_cash_prog_one = "MS" Then pnd2_2nd_cash_prog_one = "MSA"
		If pnd2_2nd_cash_prog_one = "RC" Then pnd2_2nd_cash_prog_one = "RCA"
		If pnd2_2nd_cash_prog_two = "  " Then pnd2_2nd_cash_prog_two = ""
		If pnd2_2nd_cash_prog_two = "CA" Then pnd2_2nd_cash_prog_two = "Cash"
		If pnd2_2nd_cash_prog_two = "MF" Then pnd2_2nd_cash_prog_two = "MFIP"
		If pnd2_2nd_cash_prog_two = "DW" Then pnd2_2nd_cash_prog_two = "DWP"
		If pnd2_2nd_cash_prog_two = "MS" Then pnd2_2nd_cash_prog_two = "MSA"
		If pnd2_2nd_cash_prog_two = "RC" Then pnd2_2nd_cash_prog_two = "RCA"

		pnd2_2nd_appl_date = replace(pnd2_2nd_appl_date, " ", "/")
	End If

	If deny_app_one = True or deny_app_two = True Then denials_found_on_pnd2 = True
	If advise_not_to_use_lcase = True Then MsgBox "The script has reviewed REPT/PND2 and found that denial coding has been entered as lowercase letters. " & vbCr & vbCr & " - Either an 'i' or 'r' was entered for the case to deny." & vbCr & vbCr & "Please be aware that entering command information in MAXIS is most reliable if entered as an Upper Case letter." & vbCr & "The script has repaired the entry to make them capitalized." & vbCr & vbCr & "This information is just for awareness, the script will continue and there is no additional action needed."
End If

Call back_to_SELF
EMWriteScreen MAXIS_case_number, 18, 43

CASE_NOTE_entered = False
'In order to determine the array - need to be able to see if the budget changes from one to the next
'EMER doesn't have an array - there is only one month

If first_DWP_approval <> "" Then enter_CNOTE_for_DWP = True
If first_MFIP_approval <> "" Then enter_CNOTE_for_MFIP = True
If first_MSA_approval <> "" Then enter_CNOTE_for_MSA = True
If first_GA_approval <> "" Then enter_CNOTE_for_GA = True
If first_DENY_approval <> "" Then enter_CNOTE_for_DENY = True
If first_GRH_approval <> "" Then enter_CNOTE_for_GRH = True
If first_SNAP_approval <> "" Then enter_CNOTE_for_SNAP = True
If first_HC_approval <> "" Then enter_CNOTE_for_HC = True

' TEMPORARY WORKAROUND
' Special workaround handling for Tim Erickson and Sarah Haigh since they do not have access in MAXIS for anything but HC processing.
' We are working on getting access updated for them to have view/inquiry access in the MONY area of MAXIS so that the script can view it as a part of the information gathering.
If user_ID_for_validation = "TIER002" or user_ID_for_validation = "SASA003" Then
	enter_CNOTE_for_DWP = False
	enter_CNOTE_for_MFIP = False
	enter_CNOTE_for_MSA = False
	enter_CNOTE_for_GA = False
	enter_CNOTE_for_DENY = False
	enter_CNOTE_for_GRH = False
	enter_CNOTE_for_SNAP = False
End If

deductions_detail_btn 	= 1010
hh_comp_detail			= 1020
shel_exp_detail_btn		= 1030
unique_approval_explain_btn	= 1040
nav_stat_elig_btn		= 1050
reload_btn				= 1060
verif_tips_and_tricks_btn = 2000

app_confirmed_btn		= 100
next_approval_btn		= 110
app_incorrect_btn		= 120
explain_why_we_are_processing_btn = 130

const months_in_approval			= 0
const limit_benefit_months			= 1
const verif_request_date			= 4
const verif_request_details			= 5
const pact_inelig_reasons			= 6
const package_is_expedited_const 	= 7
const include_budget_in_note_const	= 8
const confirm_budget_selection		= 9
const first_mo_const				= 10
const last_mo_const					= 11
const wcom_needed					= 12
const dialog_displayed				= 13
const budget_error_exists			= 14
const btn_one 						= 15
const approval_incorrect			= 16
const pact_wcom_needed				= 17
const pact_wcom_sent				= 18
const snap_over_130_wcom_needed		= 19
const snap_over_130_wcom_sent		= 20
const snap_130_percent_fpg_amt		= 21
const grh_supp_hsg_disrgd_wcom_needed	= 22
const grh_supp_hsg_disrgd_wcom_sent		= 23
const denial_due_to_verif			= 24
const btn_ei						= 25
const btn_uei						= 26
const btn_deem						= 27
const allocation_notes				= 28
const elig_details_notes			= 29
const inelig_details_notes			= 30
const wcom_details_one				= 31
const wcom_details_two				= 32
const wcom_details_three			= 33
const ref_numb_for_hc_app			= 34
const major_prog_for_hc_app			= 35
const process_for_note 				= 36
const changes_for_note				= 37
const designated_provider_info		= 38
const l_budg						= 39
const proration_reason				= 40
const fiat_reason					= 41
const mfip_inelig_assess_SNAP		= 42
const mfip_inelig_SNAP_note			= 43
const approval_confirmed			= 44
date_of_3050 = ""

Dim DWP_UNIQUE_APPROVALS()
ReDim DWP_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim MFIP_UNIQUE_APPROVALS()
ReDim MFIP_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim MSA_UNIQUE_APPROVALS()
ReDim MSA_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim GA_UNIQUE_APPROVALS()
ReDim GA_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim DENY_UNIQUE_APPROVALS()
ReDim DENY_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim GRH_UNIQUE_APPROVALS()
ReDim GRH_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim SNAP_UNIQUE_APPROVALS()
ReDim SNAP_UNIQUE_APPROVALS(approval_confirmed, 0)

Dim HC_UNIQUE_APPROVALS()
ReDim HC_UNIQUE_APPROVALS(approval_confirmed, 0)

approval_note_found_for_DWP = False
approval_note_found_for_MFIP = False
approval_note_found_for_MFSD = False
approval_note_found_for_MSA = False
approval_note_found_for_GA = False
approval_note_found_for_DENY = False
approval_note_found_for_GRH = False
approval_note_found_for_SNAP = False
approval_note_found_for_HC = False
approval_note_found_for_EMER = False
approval_note_found = False

Call Navigate_to_MAXIS_screen("CASE", "NOTE")               'Now we navigate to CASE:NOTES

note_row = 5
Do
	EMReadScreen note_date, 8, note_row, 6                  'reading the note date

	EMReadScreen note_title, 55, note_row, 25               'reading the note header
	note_title = trim(note_title)
	if note_date = "        " then Exit Do                                      'if we are at the end of the list of notes - we can't read any more
	note_date = DateAdd("d", 0, note_date)
	If left(note_title, 11) = "APPROVAL - " and DateDiff("d", date, note_date) = 0 Then
		' approval_note_found = True
		If InStr(note_title, " - DWP") <> 0 Then approval_note_found_for_DWP = True
		If InStr(note_title, " - MFIP") <> 0 Then approval_note_found_for_MFIP = True
		If InStr(note_title, "MFIP Special") <> 0 Then approval_note_found_for_MFSD = True
		If InStr(note_title, "MSA") <> 0 Then approval_note_found_for_MSA = True
		If InStr(note_title, " GA") <> 0 Then approval_note_found_for_GA = True
		If InStr(note_title, "CASH") <> 0 Then approval_note_found_for_DENY = True
		If InStr(note_title, "HS/GRH") <> 0 Then approval_note_found_for_GRH = True
		If InStr(note_title, "SNAP") <> 0 Then approval_note_found_for_SNAP = True
		If InStr(note_title, " HC ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " MA ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " EMA ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " IMD ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " QMB ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " SLMB ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " QI1 ") <> 0 Then approval_note_found_for_HC = True
		If InStr(note_title, " EA ") <> 0 Then approval_note_found_for_EMER = True
		If InStr(note_title, " EGA ") <> 0 Then approval_note_found_for_EMER = True
		If InStr(note_title, "EMER") <> 0 Then approval_note_found_for_EMER = True
	End If
	If mid(note_title, 7, 25) = "Ex Parte Renewal Complete" Then
		ex_parte_approval = False
		complete_ex_parte_as_closed = False
	End If

	If left(note_title, 23) = "*-*-* EMER ISSUED *-*-*" and DateDiff("d", date, note_date) = 0 Then approval_note_found_for_EMER = True

	If approval_note_found_for_DWP = True Then approval_note_found = True
	If approval_note_found_for_MFIP = True Then approval_note_found = True
	If approval_note_found_for_MFSD = True Then approval_note_found = True
	If approval_note_found_for_MSA = True Then approval_note_found = True
	If approval_note_found_for_GA = True Then approval_note_found = True
	If approval_note_found_for_DENY = True Then approval_note_found = True
	If approval_note_found_for_GRH = True Then approval_note_found = True
	If approval_note_found_for_SNAP = True Then approval_note_found = True
	If approval_note_found_for_HC = True Then approval_note_found = True
	If approval_note_found_for_EMER = True Then approval_note_found = True

	note_row = note_row + 1
	if note_row = 19 then
		note_row = 5
		PF8
		EMReadScreen check_for_last_page, 9, 24, 14
		If check_for_last_page = "LAST PAGE" Then Exit Do
	End If
	EMReadScreen next_note_date, 8, note_row, 6
	if next_note_date = "        " then Exit Do
Loop until DateDiff("d", date, next_note_date) < 0

If approval_note_found = True Then
	dlg_len = 45
	If approval_note_found_for_DWP = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_MFIP = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_MFSD = True Then dlg_len = dlg_len +20
	If approval_note_found_for_MSA = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_GA = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_DENY = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_GRH = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_SNAP = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_HC = True Then dlg_len = dlg_len + 20
	If approval_note_found_for_EMER = True Then dlg_len = dlg_len + 20

	Dialog1 = ""
	BeginDialog Dialog1, 0, 0, 555, dlg_len, "APPROVAL CASE/NOTE found for Today"
	  Text 10, 10, 385, 10, "APPROVAL CASE/NOTEs from today have been found. Determine if a new CASE/NOTE is needed for the program(s)."
	  y_pos = 25
	  If approval_note_found_for_DWP = True Then
		  Text 15, y_pos+5, 330, 10, "DWP Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_DWP
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_MFIP = True Then
		  Text 15, y_pos+5, 330, 10, "MFIP Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_MFIP
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_MFSD = True Then
		  Text 15, y_pos+5, 350, 10, "MF Special Diet Check CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_MFSD
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_MSA = True Then
		  Text 15, y_pos+5, 330, 10, "MSA Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_MSA
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_GA = True Then
		  Text 15, y_pos+5, 330, 10, "GA Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_GA
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_DENY = True Then
		  Text 15, y_pos+5, 330, 10, "Cash DENY Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_DENY
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_GRH = True Then
		  Text 15, y_pos+5, 330, 10, "HS/GRH Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_GRH
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_SNAP = True Then
		  Text 15, y_pos+5, 330, 10, "SNAP Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_SNAP
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_HC = True Then
		  Text 15, y_pos+5, 330, 10, "HC Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_HC
		  y_pos = y_pos + 20
	  End If
	  If approval_note_found_for_EMER = True Then
		  Text 15, y_pos+5, 330, 10, "EMER Approval CASE/NOTE Found.   Do you need to enter a new CASE/NOTE of APPROVAL?"
		  DropListBox 350, y_pos, 200, 45, "Select One..."+chr(9)+"Yes - Enter a new NOTE of approval. Eligibilty reapproved."+chr(9)+"No - Do not CASE/NOTE - No change to Eligibility."+chr(9)+"No - Approval completed by another worker.", add_new_note_for_EMER
		  y_pos = y_pos + 20
	  End If
	  ButtonGroup ButtonPressed
		OkButton 445, y_pos, 50, 15
		CancelButton 500, y_pos, 50, 15
	EndDialog

	Do
		Do

			dialog Dialog1
			cancel_confirmation

			err_msg = ""

			If approval_note_found_for_DWP = True and add_new_note_for_DWP = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for DWP Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_MFIP = True and add_new_note_for_MFIP = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for MFIP Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_MFSD = True and add_new_note_for_MFSD = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for MFIP Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_MSA = True and add_new_note_for_MSA = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for MSA Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_GA = True and add_new_note_for_GA = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for GA Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_DENY = True and add_new_note_for_DENY = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for Cash DENY Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_GRH = True and add_new_note_for_GRH = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for GRH Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_SNAP = True and add_new_note_for_SNAP = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for SNAP Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_HC = True and add_new_note_for_HC = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for HC Eligibility should be Reviewed and Entered into MAXIS."
			If approval_note_found_for_EMER = True and add_new_note_for_EMER = "Select One..." Then err_msg = err_msg & vbCr & "* Indicate if a new CASE/NOTE for Emergency Eligibility should be Reviewed and Entered into MAXIS."

			If err_msg <> "" Then MsgBox "*** NOTICE ***" & vbCr & "Please resolve to continue:" & vbCr & err_msg
		Loop until err_msg = ""
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False

	If add_new_note_for_DWP = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_DWP = "No - Approval completed by another worker." Then
		enter_CNOTE_for_DWP = False
		end_msg_info = end_msg_info & "DWP had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_DWP = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for DWP, it was requested to enter a new note about eligibility for DWP." & vbCr

	If add_new_note_for_MFIP = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_MFIP = "No - Approval completed by another worker." Then
		enter_CNOTE_for_MFIP = False
		end_msg_info = end_msg_info & "MFIP had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_MFIP = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for MFIP, it was requested to enter a new note about eligibility for MFIP." & vbCr

	If add_new_note_for_MFSD = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_MFSD = "No - Approval completed by another worker." Then
		end_msg_info = end_msg_info & "MFIP Special Diet had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
		special_diet_check_exists = False
	End If
	If add_new_note_for_MFSD = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for MFIP Special Diet, it was requested to enter a new note about eligibility for MFIP." & vbCr

	If add_new_note_for_MSA = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_MSA = "No - Approval completed by another worker." Then
		enter_CNOTE_for_MSA = False
		end_msg_info = end_msg_info & "MSA had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_MSA = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for MSA, it was requested to enter a new note about eligibility for MSA." & vbCr

	If add_new_note_for_GA = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_GA = "No - Approval completed by another worker." Then
		enter_CNOTE_for_GA = False
		end_msg_info = end_msg_info & "GA had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_GA = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for GA, it was requested to enter a new note about eligibility for GA." & vbCr

	If add_new_note_for_DENY = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_DENY = "No - Approval completed by another worker." Then
		enter_CNOTE_for_DENY = False
		end_msg_info = end_msg_info & "Cash DENY had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_DENY = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for Cash DENY, it was requested to enter a new note about eligibility for Cash DENY." & vbCr

	If add_new_note_for_GRH = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_GRH = "No - Approval completed by another worker." Then
		enter_CNOTE_for_GRH = False
		end_msg_info = end_msg_info & "GRH had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_GRH = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for GRH, it was requested to enter a new note about eligibility for GRH." & vbCr

	If add_new_note_for_SNAP = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_SNAP = "No - Approval completed by another worker." Then
		enter_CNOTE_for_SNAP = False
		end_msg_info = end_msg_info & "SNAP had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_SNAP = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for SNAP, it was requested to enter a new note about eligibility for SNAP." & vbCr

	If add_new_note_for_HC = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_HC = "No - Approval completed by another worker." Then
		enter_CNOTE_for_HC = False
		end_msg_info = end_msg_info & "HC had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_HC = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for HC, it was requested to enter a new note about eligibility for HC." & vbCr

	If add_new_note_for_EMER = "No - Do not CASE/NOTE - No change to Eligibility." or add_new_note_for_EMER = "No - Approval completed by another worker." Then
		enter_CNOTE_for_EMER = False
		end_msg_info = end_msg_info & "EMER had a CASE/NOTE entered prior to this script run. No additional NOTE was requested." & vbCr
	End If
	If add_new_note_for_EMER = "Yes - Enter a new NOTE of approval. Eligibilty reapproved." Then end_msg_info = end_msg_info & "Though there is a CASE/NOTE for EMER, it was requested to enter a new note about eligibility for EMER." & vbCr
End If

Call back_to_SELF

If enter_CNOTE_for_DWP = True Then
	last_elig_result = ""
	last_caregiver_count = ""
	last_child_count = ""
	last_total_dwp_need = ""
	last_earned_income = ""
	last_unearned_income = ""
	last_deemed_income = ""
	last_cses_exclusion = ""
	last_dwp_countable_income = ""
	last_unmet_need = ""
	last_shelter_costs = ""
	last_personal_needs = ""
	last_amount_already_issued = ""
	last_grant_shelter_benefit = ""
	last_grant_personal_needs = ""
	last_net_grant_amount = ""
	last_duplicate_assistance_test = ""
	last_eligible_child_test = ""
	last_coop_test = ""
	last_verif_test = ""
	last_info_source = ""


	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	unique_app_count = 0
	For approval = 0 to UBound(DWP_ELIG_APPROVALS)
		If DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year = first_DWP_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If unique_app_count = 0 Then
				ReDim preserve DWP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

				DWP_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year
				DWP_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year
				DWP_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
				DWP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
				DWP_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
				DWP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True

				last_elig_result = DWP_ELIG_APPROVALS(approval).dwp_case_eligibility_result
				last_caregiver_count = DWP_ELIG_APPROVALS(approval).dwp_case_asst_unit_caregivers
				last_child_count = DWP_ELIG_APPROVALS(approval).dwp_case_asst_unit_children
				last_total_dwp_need = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_total_DWP_need
				last_earned_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_earned_income
				last_unearned_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_unearned_income
				last_deemed_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_deemed_income
				last_cses_exclusion = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_child_support_exclusion
				last_dwp_countable_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_DWP_countable_income
				last_unmet_need = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_unmet_need
				last_shelter_costs = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_total_shelter_costs
				last_personal_needs = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_personal_needs
				last_amount_already_issued = DWP_ELIG_APPROVALS(approval).dwp_elig_amount_already_issued
				last_grant_shelter_benefit = DWP_ELIG_APPROVALS(approval).dwp_elig_shelter_benefit_grant
				last_grant_personal_needs = DWP_ELIG_APPROVALS(approval).dwp_elig_personal_needs_grant
				last_net_grant_amount = DWP_ELIG_APPROVALS(approval).dwp_case_summary_net_grant_amount
				last_duplicate_assistance_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_dupl_assistance
				last_eligible_child_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_eligible_child
				last_coop_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_fail_coop
				last_verif_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_verif
				last_info_source = DWP_ELIG_APPROVALS(approval).dwp_case_source_of_info

				unique_app_count = unique_app_count + 1
			Else
				match_last_benefit_amounts = True

				If last_elig_result <> DWP_ELIG_APPROVALS(approval).dwp_case_eligibility_result Then match_last_benefit_amounts = False
				If last_caregiver_count <> DWP_ELIG_APPROVALS(approval).dwp_case_asst_unit_caregivers Then match_last_benefit_amounts = False
				If last_child_count <> DWP_ELIG_APPROVALS(approval).dwp_case_asst_unit_children Then match_last_benefit_amounts = False
				If last_total_dwp_need <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_total_DWP_need Then match_last_benefit_amounts = False
				If last_earned_income <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_earned_income Then match_last_benefit_amounts = False
				If last_unearned_income <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_unearned_income Then match_last_benefit_amounts = False
				If last_deemed_income <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_deemed_income Then match_last_benefit_amounts = False
				If last_cses_exclusion <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_child_support_exclusion Then match_last_benefit_amounts = False
				If last_dwp_countable_income <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_DWP_countable_income Then match_last_benefit_amounts = False
				If last_unmet_need <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_unmet_need Then match_last_benefit_amounts = False
				If last_shelter_costs <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_total_shelter_costs Then match_last_benefit_amounts = False
				If last_personal_needs <> DWP_ELIG_APPROVALS(approval).dwp_elig_budg_personal_needs Then match_last_benefit_amounts = False
				If last_amount_already_issued <> DWP_ELIG_APPROVALS(approval).dwp_elig_amount_already_issued Then match_last_benefit_amounts = False
				If last_grant_shelter_benefit <> DWP_ELIG_APPROVALS(approval).dwp_elig_shelter_benefit_grant Then match_last_benefit_amounts = False
				If last_grant_personal_needs <> DWP_ELIG_APPROVALS(approval).dwp_elig_personal_needs_grant Then match_last_benefit_amounts = False
				If last_net_grant_amount <> DWP_ELIG_APPROVALS(approval).dwp_case_summary_net_grant_amount Then match_last_benefit_amounts = False
				If last_duplicate_assistance_test <> DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_dupl_assistance Then match_last_benefit_amounts = False
				If last_eligible_child_test <> DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_eligible_child Then match_last_benefit_amounts = False
				If last_coop_test <> DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_fail_coop Then match_last_benefit_amounts = False
				If last_verif_test <> DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_verif Then match_last_benefit_amounts = False
				If last_info_source <> DWP_ELIG_APPROVALS(approval).dwp_case_source_of_info Then match_last_benefit_amounts = False

				If match_last_benefit_amounts = True Then
					DWP_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = DWP_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year
					DWP_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year
				End If
				If match_last_benefit_amounts = False Then
					ReDim preserve DWP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					DWP_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year
					DWP_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year
					DWP_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
					DWP_UNIQUE_APPROVALS(btn_ei, unique_app_count) = 1560 + unique_app_count
					DWP_UNIQUE_APPROVALS(btn_uei, unique_app_count) = 1570 + unique_app_count
					DWP_UNIQUE_APPROVALS(btn_deem, unique_app_count) = 1580 + unique_app_count
					DWP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					DWP_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					DWP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True

					last_elig_result = DWP_ELIG_APPROVALS(approval).dwp_case_eligibility_result
					last_caregiver_count = DWP_ELIG_APPROVALS(approval).dwp_case_asst_unit_caregivers
					last_child_count = DWP_ELIG_APPROVALS(approval).dwp_case_asst_unit_children
					last_total_dwp_need = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_total_DWP_need
					last_earned_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_earned_income
					last_unearned_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_unearned_income
					last_deemed_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_deemed_income
					last_cses_exclusion = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_child_support_exclusion
					last_dwp_countable_income = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_DWP_countable_income
					last_unmet_need = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_unmet_need
					last_shelter_costs = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_total_shelter_costs
					last_personal_needs = DWP_ELIG_APPROVALS(approval).dwp_elig_budg_personal_needs
					last_amount_already_issued = DWP_ELIG_APPROVALS(approval).dwp_elig_amount_already_issued
					last_grant_shelter_benefit = DWP_ELIG_APPROVALS(approval).dwp_elig_shelter_benefit_grant
					last_grant_personal_needs = DWP_ELIG_APPROVALS(approval).dwp_elig_personal_needs_grant
					last_net_grant_amount = DWP_ELIG_APPROVALS(approval).dwp_case_summary_net_grant_amount
					last_duplicate_assistance_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_dupl_assistance
					last_eligible_child_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_eligible_child
					last_coop_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_fail_coop
					last_verif_test = DWP_ELIG_APPROVALS(approval).dwp_elig_case_test_verif
					last_info_source = DWP_ELIG_APPROVALS(approval).dwp_case_source_of_info

					unique_app_count = unique_app_count + 1
				End If
			End If
		End If
	Next

	If UBound(DWP_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(DWP_UNIQUE_APPROVALS, 2)+1 & " DWP Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & DWP_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for MFIP."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(DWP_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(DWP_UNIQUE_APPROVALS, 2)
			If DWP_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, DWP_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & DWP_UNIQUE_APPROVALS(last_mo_const, approval)
			If DWP_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, DWP_UNIQUE_APPROVALS(first_mo_const, approval)
			y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
			OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_dwp_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(DWP_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do

			first_month = left(DWP_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(DWP_ELIG_APPROVALS)
				If DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			DWP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
			If DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "ELIGIBLE" Then DWP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_initial_income = "FAILED" Then DWP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True


			show_pact = False
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_one_prog = "DW" and STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "3" Then show_pact = True
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_two_prog = "DW" and STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "3" Then show_pact = True
			DWP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = False
			If show_pact = True Then DWP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True
			DWP_UNIQUE_APPROVALS(pact_wcom_sent, approval_selected) = False

			DWP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = False
			If DWP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True Then DWP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = True

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			Next
			ei_len = ei_count * 20
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len

			call define_dwp_elig_dialog

			dialog Dialog1
			cancel_confirmation

			err_msg = ""
			move_from_dialog = False

			If DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_verif = "FAILED" and DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If Isdate(DWP_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible DWP approval."
				Else
					If DateDiff("d", DWP_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
						err_msg = err_msg & vbNewLine & "* The verification request date: " &  DWP_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
						DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
					End If
				End If
			End If
			If DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If DWP_ELIG_APPROVALS(elig_ind).dwp_case_source_of_info = "FIAT" Then
					If DWP_UNIQUE_APPROVALS(fiat_reason, approval_selected) = "" Then
						err_msg = err_msg & vbNewLine & "* Since the approval for DWP in " & DWP_UNIQUE_APPROVALS(first_mo_const, approval_selected) & "-" & DWP_UNIQUE_APPROVALS(last_mo_const, approval_selected)  & " was FIATed, an explanation of why the FIAT was completed is needed."
					End If
				End If
			End If

			If show_pact = True and DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit <> "FAILED" and DWP_ELIG_APPROVALS(elig_ind).dwp_autoclosed_for_time_limit = False Then
				If trim(DWP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" Then
					err_msg = err_msg & vbNewLine & "* Since PACT was used to approve this DWP benefit as ineligible, list the reasons for ineligibility."
				ElseIf len(DWP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 30 Then
					err_msg = err_msg & vbNewLine & "* DWP ineligibility due to PACT requires sufficient explaination, expand upon the information entered in the Reason for Ineligibility field."
				End If
				If trim(DWP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" or len(DWP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 15 Then err_msg = err_msg & vbNewLine & " *** This information will be entered in a WCOM and should be writen without appreviations and in full detail."
			End If

			If err_msg <> "" and ButtonPressed < 1000 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "DWP ")
				EMWriteScreen ft_mo, 20, 56
				EMWriteScreen ft_yr, 20, 59
				Call find_last_approved_ELIG_version(20, 79, vrs_numb, vrs_dt, vrs_rslt, approval_found)
				' transmit
			End If

			If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
			If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("DWP", DWP_UNIQUE_APPROVALS(process_for_note, approval_selected), DWP_UNIQUE_APPROVALS(changes_for_note, approval_selected))
			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/DWP has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if DWP should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If err_msg = "" Then

				all_dwp_approvals_confirmed = True
				dwp_approval_is_incorrect = False

				If DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
					DWP_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					DWP_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf DWP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					DWP_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					DWP_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(DWP_UNIQUE_APPROVALS, 2)
					If ButtonPressed = DWP_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If DWP_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_dwp_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(DWP_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If DWP_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then dwp_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(DWP_UNIQUE_APPROVALS, 2) Then
						If all_dwp_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(DWP_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_dwp_approvals_confirmed = True Then move_from_dialog = True
			If dwp_approval_is_incorrect = True and  ButtonPressed = app_confirmed_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_dwp_approvals_confirmed = False and move_from_dialog = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If

		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call check_for_MAXIS(True)
	Call back_to_SELF

	If dwp_approval_is_incorrect = True Then
		enter_CNOTE_for_DWP = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for DWP Approvals from " & first_DWP_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if
End If

'Determining MFIP unique approvals
If enter_CNOTE_for_MFIP = True Then 											'This means at least one approval from today was found
	last_caregiver_count = ""													'we will use these variables to compare each month of approval to see if there are changes and determine if a new package should be started.'
	last_child_count = ""
	last_earned_income = ""
	last_unearned_income = ""
	last_deemed_income = ""
	last_cses_exclusion = ""
	last_unmet_need_subtotal = ""
	last_sanction_percent = ""
	last_sanction_amount = ""
	last_housing_grant = ""
	last_amount_already_issued = ""
	last_food_portion_deduct = ""
	last_info_source = ""
	last_sig_change = ""

	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	unique_app_count = 0
	For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
		If MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year = first_MFIP_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If unique_app_count = 0 Then
				ReDim preserve MFIP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

				MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year
				MFIP_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year
				MFIP_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
				MFIP_UNIQUE_APPROVALS(btn_ei, unique_app_count) = 1560 + unique_app_count
				MFIP_UNIQUE_APPROVALS(btn_uei, unique_app_count) = 1570 + unique_app_count
				MFIP_UNIQUE_APPROVALS(btn_deem, unique_app_count) = 1580 + unique_app_count
				MFIP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
				MFIP_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
				MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
				MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, unique_app_count) = False

				last_caregiver_count = MFIP_ELIG_APPROVALS(approval).mfip_case_asst_unit_caregivers
				last_child_count = MFIP_ELIG_APPROVALS(approval).mfip_case_asst_unit_children
				last_budget_cycle = MFIP_ELIG_APPROVALS(approval).mfip_case_budget_cycle
				last_earned_income = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_monthly_earned_income
				last_unearned_income = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unearned_income
				last_deemed_income = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_deemed_income
				last_cses_exclusion = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_cses_exclusion
				last_unmet_need_subtotal = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unmet_neet_subtotal
				last_sanction_percent = MFIP_ELIG_APPROVALS(approval).mfip_case_sanction_percent
				last_sanction_amount = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_deduction_sanction_vendor
				last_housing_grant = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_entitlement_housing_grant
				last_amount_already_issued = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_amt_already_issued
				last_food_portion_deduct = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_food_portion_deduction
				last_info_source = MFIP_ELIG_APPROVALS(approval).mfip_case_source_of_info
				last_sig_change = MFIP_ELIG_APPROVALS(approval).mfip_sig_change

				unique_app_count = unique_app_count + 1
			Else
				match_last_benefit_amounts = True

				If last_caregiver_count <> MFIP_ELIG_APPROVALS(approval).mfip_case_asst_unit_caregivers Then match_last_benefit_amounts = False
				If last_child_count <> MFIP_ELIG_APPROVALS(approval).mfip_case_asst_unit_children Then match_last_benefit_amounts = False
				If last_budget_cycle <> MFIP_ELIG_APPROVALS(approval).mfip_case_budget_cycle Then match_last_benefit_amounts = False
				If last_earned_income <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_monthly_earned_income Then match_last_benefit_amounts = False
				If last_unearned_income <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unearned_income Then match_last_benefit_amounts = False
				If last_deemed_income <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_deemed_income Then match_last_benefit_amounts = False
				If last_cses_exclusion <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_cses_exclusion Then match_last_benefit_amounts = False
				If last_unmet_need_subtotal <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unmet_neet_subtotal Then match_last_benefit_amounts = False
				If last_sanction_percent <> MFIP_ELIG_APPROVALS(approval).mfip_case_sanction_percent Then match_last_benefit_amounts = False
				If last_sanction_amount <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_deduction_sanction_vendor Then match_last_benefit_amounts = False
				If last_housing_grant <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_entitlement_housing_grant Then match_last_benefit_amounts = False
				If last_amount_already_issued <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_amt_already_issued Then match_last_benefit_amounts = False
				If last_food_portion_deduct <> MFIP_ELIG_APPROVALS(approval).mfip_case_budg_food_portion_deduction Then match_last_benefit_amounts = False
				If last_info_source <> MFIP_ELIG_APPROVALS(approval).mfip_case_source_of_info Then match_last_benefit_amounts = False
				If last_sig_change <> MFIP_ELIG_APPROVALS(approval).mfip_sig_change Then match_last_benefit_amounts = False

				If match_last_benefit_amounts = True Then
					MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year
					MFIP_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year
				End If
				If match_last_benefit_amounts = False Then
					ReDim preserve MFIP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year
					MFIP_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year
					MFIP_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
					MFIP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					MFIP_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
					MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, unique_app_count) = False

					last_caregiver_count = MFIP_ELIG_APPROVALS(approval).mfip_case_asst_unit_caregivers
					last_child_count = MFIP_ELIG_APPROVALS(approval).mfip_case_asst_unit_children
					last_budget_cycle = MFIP_ELIG_APPROVALS(approval).mfip_case_budget_cycle
					last_earned_income = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_monthly_earned_income
					last_unearned_income = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unearned_income
					last_deemed_income = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_deemed_income
					last_cses_exclusion = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_cses_exclusion
					last_unmet_need_subtotal = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_unmet_neet_subtotal
					last_sanction_percent = MFIP_ELIG_APPROVALS(approval).mfip_case_sanction_percent
					last_sanction_amount = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_deduction_sanction_vendor
					last_housing_grant = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_entitlement_housing_grant
					last_amount_already_issued = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_amt_already_issued
					last_food_portion_deduct = MFIP_ELIG_APPROVALS(approval).mfip_case_budg_food_portion_deduction
					last_info_source = MFIP_ELIG_APPROVALS(approval).mfip_case_source_of_info
					last_sig_change = MFIP_ELIG_APPROVALS(approval).mfip_sig_change

					unique_app_count = unique_app_count + 1
				End If
			End If
		End If
	Next

	If UBound(MFIP_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(MFIP_UNIQUE_APPROVALS, 2)+1 & " MFIP Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & MFIP_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for MFIP."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(MFIP_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(MFIP_UNIQUE_APPROVALS, 2)
			If MFIP_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, MFIP_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & MFIP_UNIQUE_APPROVALS(last_mo_const, approval)
			If MFIP_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, MFIP_UNIQUE_APPROVALS(first_mo_const, approval)
			y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
			OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_mfip_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(MFIP_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do

			first_month = left(MFIP_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
				If MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "INELIGIBLE" Then
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_appl_withdraw = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_asset = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_death_applicant = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_dupl_assist = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_elig_child = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_coop = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_file = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_initial_income = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_minor_liv_arrange = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_monthly_income = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_post_60_disq = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_residence = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_sanction_limit = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_strike = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_TANF_time_limit = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_transfer_asset = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_verif = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_275_new_spouse_income = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_fs_case_test_fail_coop_snap_qc = "FAILED" Then MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False

				'If MFIP is Ineligible we should review SNAP and document that it was reviewed.
				'If MFIP is INELIG for death of applicant, cooperation, revw or month, state residency, strike, verification or QC Cooperation - SNAP is also Ineligible and we don't need to add a note
				MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = True
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_death_applicant = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_coop = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_file = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_residence = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_strike = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_verif = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_fs_case_test_fail_coop_snap_qc = "FAILED" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = False
			End If

			'Checking to see if SNAP has been processed for the same month. If so the MFIP entry about SNAP will be defaulted to reference another CASE/NOTE
			If MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = True Then
				If enter_CNOTE_for_SNAP = True Then
					start_capturing_approvals = False
					unique_app_count = 0
					For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
						If SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year = first_SNAP_approval Then start_capturing_approvals = True
						If start_capturing_approvals = True Then
							If InStr(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app_count), SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year) <> 0 Then
								If MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected) = "" Then MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected) = "SNAP approval detailed in another CASE/NOTE."
							End If
						End If
					Next
				End If
			End If

			show_pact = False
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_one_prog = "MF" and STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "3" Then show_pact = True
			If STAT_INFORMATION(month_ind).stat_pact_exists = True and STAT_INFORMATION(month_ind).stat_pact_cash_two_prog = "MF" and STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "3" Then show_pact = True
			MFIP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = False
			If show_pact = True Then MFIP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True
			MFIP_UNIQUE_APPROVALS(pact_wcom_sent, approval_selected) = False

			MFIP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = False
			If MFIP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True Then MFIP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = True

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_mfip(each_memb) = True Then ei_count = ei_count + 1

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_mfip(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			Next
			ei_len = ei_count * 20
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len

			call define_mfip_elig_dialog

			dialog Dialog1
			cancel_confirmation

			err_msg = ""
			move_from_dialog = False

			MFIP_UNIQUE_APPROVALS(fiat_reason, approval_selected) = trim(MFIP_UNIQUE_APPROVALS(fiat_reason, approval_selected))
			MFIP_UNIQUE_APPROVALS(proration_reason, approval_selected) = trim(MFIP_UNIQUE_APPROVALS(proration_reason, approval_selected))
			If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_verif = "FAILED" and MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If Isdate(MFIP_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", MFIP_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
						If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_test_fail_file <> "FAILED" Then
							'TODO add functionality to allow less than 10 days for a FAIL to FILE - MFIP_ELIG_APPROVALS(approval).mfip_case_test_fail_file ="FAILED"
							err_msg = err_msg & vbNewLine & "* The verification request date: " &  MFIP_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
							MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
						End If
					End If
				End If
			End If

			If MFIP_UNIQUE_APPROVALS(mfip_inelig_assess_SNAP, approval_selected) = True Then
				MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected) = trim(MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected))
				If MFIP_UNIQUE_APPROVALS(mfip_inelig_SNAP_note, approval_selected) = "" Then err_msg = err_msg & vbNewLine & "* Information about SNAP assessment must be entered for an Ineligible MFIP approval."
			End If

			If show_pact = True Then
				If trim(MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" Then
					err_msg = err_msg & vbNewLine & "* Since PACT was used to approve this MFIP benefit as ineligible, list the reasons for ineligibility."
				ElseIf len(MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 30 Then
					err_msg = err_msg & vbNewLine & "* MFIP ineligibility due to PACT requires sufficient explaination, expand upon the information entered in the Reason for Ineligibility field."
				End If
				If trim(MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" or len(MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 15 Then err_msg = err_msg & vbNewLine & " *** This information will be entered in a WCOM and should be writen without appreviations and in full detail."

			End If
			If MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_source_of_info = "FIAT" Then
					If MFIP_UNIQUE_APPROVALS(fiat_reason, approval_selected) = "" Then
						err_msg = err_msg & vbNewLine & "* Since the approval for MFIP in " & MFIP_UNIQUE_APPROVALS(first_mo_const, approval_selected) & "-" & MFIP_UNIQUE_APPROVALS(last_mo_const, approval_selected)  & " was FIATed, an explanation of why the FIAT was completed is needed."
					End If
				End If
			End If

			If MFIP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True and MFIP_ELIG_APPROVALS(elig_ind).mfip_counted_memb_allocation_exists = True or MFIP_ELIG_APPROVALS(elig_ind).mfip_deemer_allocation_exists = True Then
				If trim(MFIP_UNIQUE_APPROVALS(allocation_notes, approval_selected)) = "" Then err_msg = err_msg & vbNewLine & "* Add allocation details about this budget. Since this budget includes an allocation of funds in Earned or Unearned income, details about how this allocations was calculated are required for CASE/NOTE."
			End If

			If err_msg <> "" and ButtonPressed < 1000 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "MFIP")
				EMWriteScreen ft_mo, 20, 55
				EMWriteScreen ft_yr, 20, 58
				Call find_last_approved_ELIG_version(20, 79, vrs_numb, vrs_dt, vrs_rslt, approval_found)
			End If

			If ButtonPressed = MFIP_UNIQUE_APPROVALS(btn_ei, approval_selected) Then
				ei_grp_bx = 55
				For case_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_earned_income(case_memb) <> "" Then ei_grp_bx = ei_grp_bx + 15
				Next

				Dialog1 = ""
				BeginDialog Dialog1, 0, 0, 555, 385, "MFIP Earned Income"
				  ButtonGroup ButtonPressed
				    PushButton 200, 355, 180, 15, "Return to Approval Dialog", reload_btn
					GroupBox 10, 10, 535, ei_grp_bx, "Case Earned Income"
					Text 20, 28, 50, 10, "Member"
					Text 140, 28, 45, 10, "BUSI Inc"
					Text 190, 28, 50, 10, "JOBS Inc"
					Text 255, 20, 50, 20, "Total Earned Inc"
					Text 315, 28, 50, 10, "(-) Disregards"
					Text 380, 28, 50, 10, "(-) Allocation"
					Text 435, 20, 50, 20, "(-) Child Suuport"
					Text 500, 20, 40, 20, "Counted Earned Inc"

					y_pos = 45
					For case_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
						If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_earned_income(case_memb) <> "" Then
							Text 20, y_pos, 115, 10, "M " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(case_memb) & " - " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_full_name(case_memb)
							If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_earned_income(case_memb) <> "0.00" Then
								Text 140, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_self_emp_income(case_memb)
								Text 190, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_wages_income(case_memb)
								Text 255, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_earned_income(case_memb)
								Text 315, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_earned_total_dsrgrd(case_memb)
								Text 380, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_deduction(case_memb)
								Text 435, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_child_support_deduction(case_memb)
								Text 500, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_counted_earned_income(case_memb)
							Else
								Text 140, y_pos, 360, 10, "Member is Counted for MFIP, but no Earned Income entered for this Member."
							End If
							y_pos = y_pos + 15
						End If
					Next
					y_pos = y_pos + 5
					Text 340, y_pos, 155, 10, "Total Counted Deemed Income for the Budget"
					Text 500, y_pos, 35, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_monthly_earned_income
				EndDialog

				dialog Dialog1
			End If

			If ButtonPressed = MFIP_UNIQUE_APPROVALS(btn_uei, approval_selected) Then
				uei_grp_bx = 55
				For case_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_unearned_income(case_memb) <> "" Then uei_grp_bx = uei_grp_bx + 15
				Next

				Dialog1 = ""
				BeginDialog Dialog1, 0, 0, 555, 385, "MFIP Unearned Income"
				  ButtonGroup ButtonPressed
				    PushButton 200, 355, 180, 15, "Return to Approval Dialog", reload_btn
					GroupBox 10, 10, 535, uei_grp_bx, "Case Unearned Income"
					Text 20, 30, 50, 10, "Member"
					Text 155, 30, 70, 10, "Unearned Income"
				    Text 250, 30, 75, 10, "(-) Allocation Balance"
				    Text 355, 30, 85, 10, "(-) Child Support Balance"
				    Text 460, 30, 80, 10, "Counted Unearned Inc"

					y_pos = 45
					For case_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
						If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_unearned_income(case_memb) <> "" Then
							Text 20, y_pos, 130, 10, "M " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(case_memb) & " - " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_full_name(case_memb)
							If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_unearned_income(case_memb) <> "0.00" Then
							    Text 155, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_total_unearned_income(case_memb)
							    Text 250, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_allocation_balance(case_memb)
							    Text 355, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_child_support_balance(case_memb)
							    Text 460, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_counted_unearned_income(case_memb)
							Else
								Text 140, y_pos, 360, 10, "Member is Counted for MFIP, but no Unearned Income entered for this Member."
							End If
							y_pos = y_pos + 15
						End If
					Next
					y_pos = y_pos + 5
					Text 300, y_pos, 155, 10, "Total Counted Deemed Income for the Budget"
				    Text 460, y_pos, 35, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_unearned_income
				EndDialog

				dialog Dialog1
			End If

			If ButtonPressed = MFIP_UNIQUE_APPROVALS(btn_deem, approval_selected) Then
				dm_grp_bx = 55
				For case_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
					If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_counted_earned_inc(case_memb) <> "" Then dm_grp_bx = dm_grp_bx + 15
				Next

				Dialog1 = ""
				BeginDialog Dialog1, 0, 0, 555, 385, "MFIP Deemed Income"
				  ButtonGroup ButtonPressed
				    PushButton 200, 355, 180, 15, "Return to Approval Dialog", reload_btn
					GroupBox 10, 10, 535, dm_grp_bx, "Case Deemed Income"
					Text 20, 28, 50, 10, "Member"
					Text 140, 20, 45, 20, "Counted Earned Inc"
					Text 190, 28, 50, 10, "(-) Disregards"
					Text 255, 28, 50, 10, "Unearned Inc"
					Text 315, 20, 50, 20, "(-) Deemer's Unmet Need"
					Text 380, 28, 50, 10, "(-) Allocation"
					Text 435, 20, 50, 20, "(-) Suuport Payments"
					Text 500, 20, 40, 20, "Counted Deemed Inc"

					y_pos = 45
					For case_memb = 0 to UBound(MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs)
						If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_counted_earned_inc(case_memb) <> "" Then
							Text 20, y_pos, 115, 10, "M " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_ref_numbs(case_memb) & " - " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_full_name(case_memb)
							If MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_counted_earned_inc(case_memb) <> "0.00" OR MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_unearned_inc(case_memb) <> "0.00" Then
								Text 140, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_counted_earned_inc(case_memb)
								Text 190, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_total_dsrgrd(case_memb)
								Text 255, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_unearned_inc(case_memb)
								Text 315, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_unmet_need(case_memb)
								Text 380, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_allocation(case_memb)
								Text 435, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_cs_alimny(case_memb)
								Text 500, y_pos, 40, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_elig_membs_deemer_counted_income(case_memb)
							Else
								Text 140, y_pos, 360, 10, "Member Ineligible for MFIP and is a DEEMER, but no Income entered for this Member."
							End If
							y_pos = y_pos + 15
						End If
					Next
					y_pos = y_pos + 5
					Text 340, y_pos, 155, 10, "Total Counted Deemed Income for the Budget"
					Text 500, y_pos, 35, 10, "$ " & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_budg_deemed_income
				EndDialog

				dialog Dialog1
			End If

			If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
			If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("MFIP", MFIP_UNIQUE_APPROVALS(process_for_note, approval_selected), MFIP_UNIQUE_APPROVALS(changes_for_note, approval_selected))
			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/MFIP has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if MFIP should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If err_msg = "" Then
				all_mfip_approvals_confirmed = True
				mfip_approval_is_incorrect = False

				If MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
					MFIP_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					MFIP_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf MFIP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					MFIP_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					MFIP_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(MFIP_UNIQUE_APPROVALS, 2)
					If ButtonPressed = MFIP_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If MFIP_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_mfip_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(MFIP_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If MFIP_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then mfip_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(MFIP_UNIQUE_APPROVALS, 2) Then
						If all_mfip_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(MFIP_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_mfip_approvals_confirmed = True Then move_from_dialog = True
			If mfip_approval_is_incorrect = True and  ButtonPressed = app_confirmed_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_mfip_approvals_confirmed = False and move_from_dialog = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If

		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call check_for_MAXIS(True)
	Call back_to_SELF

	If mfip_approval_is_incorrect = True Then
		enter_CNOTE_for_MFIP = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for MFIP Approvals from " & first_MFIP_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if
End If

If special_diet_check_exists = True Then
	For info_month = 0 to UBound(SPECIAL_PROCESSES_BY_MONTH, 2)
		If SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_const, info_month) = True Then
			elig_select = SPECIAL_PROCESSES_BY_MONTH(MF_elig_index, info_month)
			for stat_month = 0 to UBound(STAT_INFORMATION)
				If SPECIAL_PROCESSES_BY_MONTH(MX_foot_mo_const, info_month)  = STAT_INFORMATION(stat_month).footer_month and SPECIAL_PROCESSES_BY_MONTH(MX_foot_yr_const, info_month) = STAT_INFORMATION(stat_month).footer_year Then month_select = stat_month
			next
			hold_missing_diet_note = MFIP_ELIG_APPROVALS(elig_select).MFSD_missing_diet_note

			Dialog1 = ""
			call define_mf_special_diet_dialog

			Do
				Do
					dialog Dialog1
					cancel_confirmation

					err_msg = ""
					MFIP_ELIG_APPROVALS(elig_select).MFSD_missing_diet_note = trim(hold_missing_diet_note)
					If SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month) = "Indicate if the Check is Accurate" Then err_msg = err_msg & vbCr & "Indicate if the check details "
					If err_msg <> "" Then MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				Loop until err_msg = ""
				Call check_for_password(are_we_passworded_out)
			Loop until are_we_passworded_out = False
			Call check_for_MAXIS(True)
			Call back_to_SELF

			If SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month) = "Yes - check is Accurate" Then SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month) = True
			If SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month) = "No - do not CASE/NOTE this information" Then SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month) = False
		End If
	Next
End If

If enter_CNOTE_for_MSA = True Then
	last_elig_result = ""
	last_file_test = ""
	last_gross_income_test = ""
	last_net_income_test = ""
	last_ssi_fbr = ""
	last_standard_disregard = ""
	last_need_standard = ""
	last_net_income = ""
	last_budget_type = ""
	last_msa_grant = ""
	last_basic_assistance_standard = ""
	last_special_needs = ""
	last_info_source = ""

	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	unique_app_count = 0
	For approval = 0 to UBound(MSA_ELIG_APPROVALS)
		If MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year = first_MSA_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If unique_app_count = 0 Then
				ReDim preserve MSA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

				MSA_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year
				MSA_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year
				MSA_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
				MSA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
				MSA_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
				MSA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True

				last_elig_result = MSA_ELIG_APPROVALS(approval).msa_elig_summ_eligibility_result
				last_file_test = MSA_ELIG_APPROVALS(approval).msa_elig_case_test_fail_file
				last_gross_income_test = MSA_ELIG_APPROVALS(approval).msa_elig_case_test_prosp_gross_income
				last_net_income_test = MSA_ELIG_APPROVALS(approval).msa_elig_case_test_prosp_net_income
				last_ssi_fbr = MSA_ELIG_APPROVALS(approval).msa_elig_budg_ssi_standard_fbr
				last_standard_disregard = MSA_ELIG_APPROVALS(approval).msa_elig_budg_standard_disregard
				last_need_standard = MSA_ELIG_APPROVALS(approval).msa_elig_budg_need_standard
				last_net_income = MSA_ELIG_APPROVALS(approval).msa_elig_budg_net_income
				last_budget_type = MSA_ELIG_APPROVALS(approval).msa_elig_case_budg_type
				last_msa_grant = MSA_ELIG_APPROVALS(approval).msa_elig_budg_msa_grant
				last_basic_assistance_standard = MSA_ELIG_APPROVALS(approval).msa_elig_budg_basic_needs_assistance_standard
				last_special_needs = MSA_ELIG_APPROVALS(approval).msa_elig_budg_special_needs
				last_info_source = MSA_ELIG_APPROVALS(approval).msa_elig_summ_source_of_info

				unique_app_count = unique_app_count + 1
			Else
				match_last_benefit_amounts = True

				If last_elig_result <> MSA_ELIG_APPROVALS(approval).msa_elig_summ_eligibility_result Then match_last_benefit_amounts = False
				If last_file_test <> MSA_ELIG_APPROVALS(approval).msa_elig_case_test_fail_file Then match_last_benefit_amounts = False
				If last_gross_income_test <> MSA_ELIG_APPROVALS(approval).msa_elig_case_test_prosp_gross_income Then match_last_benefit_amounts = False
				If last_net_income_test <> MSA_ELIG_APPROVALS(approval).msa_elig_case_test_prosp_net_income Then match_last_benefit_amounts = False
				If last_ssi_fbr <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_ssi_standard_fbr Then match_last_benefit_amounts = False
				If last_standard_disregard <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_standard_disregard Then match_last_benefit_amounts = False
				If last_need_standard <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_need_standard Then match_last_benefit_amounts = False
				If last_net_income <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_net_income Then match_last_benefit_amounts = False
				If last_budget_type <> MSA_ELIG_APPROVALS(approval).msa_elig_case_budg_type Then match_last_benefit_amounts = False
				If last_msa_grant <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_msa_grant Then match_last_benefit_amounts = False
				If last_basic_assistance_standard <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_basic_needs_assistance_standard Then match_last_benefit_amounts = False
				If last_special_needs <> MSA_ELIG_APPROVALS(approval).msa_elig_budg_special_needs Then match_last_benefit_amounts = False
				If last_info_source <> MSA_ELIG_APPROVALS(approval).msa_elig_summ_source_of_info Then match_last_benefit_amounts = False

				If match_last_benefit_amounts = True Then
					MSA_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = MSA_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year
					MSA_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year
				End If
				If match_last_benefit_amounts = False Then
					ReDim preserve MSA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					MSA_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year
					MSA_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year
					MSA_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
					MSA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					MSA_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					MSA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True

					last_elig_result = MSA_ELIG_APPROVALS(approval).msa_elig_summ_eligibility_result
					last_file_test = MSA_ELIG_APPROVALS(approval).msa_elig_case_test_fail_file
					last_gross_income_test = MSA_ELIG_APPROVALS(approval).msa_elig_case_test_prosp_gross_income
					last_net_income_test = MSA_ELIG_APPROVALS(approval).msa_elig_case_test_prosp_net_income
					last_ssi_fbr = MSA_ELIG_APPROVALS(approval).msa_elig_budg_ssi_standard_fbr
					last_standard_disregard = MSA_ELIG_APPROVALS(approval).msa_elig_budg_standard_disregard
					last_need_standard = MSA_ELIG_APPROVALS(approval).msa_elig_budg_need_standard
					last_net_income = MSA_ELIG_APPROVALS(approval).msa_elig_budg_net_income
					last_budget_type = MSA_ELIG_APPROVALS(approval).msa_elig_case_budg_type
					last_msa_grant = MSA_ELIG_APPROVALS(approval).msa_elig_budg_msa_grant
					last_basic_assistance_standard = MSA_ELIG_APPROVALS(approval).msa_elig_budg_basic_needs_assistance_standard
					last_special_needs = MSA_ELIG_APPROVALS(approval).msa_elig_budg_special_needs
					last_info_source = MSA_ELIG_APPROVALS(approval).msa_elig_summ_source_of_info

					unique_app_count = unique_app_count + 1
				End If
			End If
		End If
	Next

	If UBound(MSA_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(MSA_UNIQUE_APPROVALS, 2)+1 & " MSA Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & MSA_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for MSA."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(MSA_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(MSA_UNIQUE_APPROVALS, 2)
		  	If MSA_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, MSA_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & MSA_UNIQUE_APPROVALS(last_mo_const, approval)
		  	If MSA_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, MSA_UNIQUE_APPROVALS(first_mo_const, approval)
		  	y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
		    OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_msa_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(MSA_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do
			first_month = left(MSA_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(MSA_ELIG_APPROVALS)
				' MsgBox "APPROVALS MO - " & MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year & vbCr & "approval - " & approval & vbCr & "first_month - " & first_month
				If MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "INELIGIBLE" Then
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_applicant_eligible = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_application_withdrawn = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_eligible_member = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_fail_file = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_gross_income = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_prosp_net_income = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_residence = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_assets = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_retro_net_income = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_verif = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_shared_hh_yn = "FAILED" Then MSA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
			End If

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_msa(each_memb) = True Then ei_count = ei_count + 1

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_msa(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_msa(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_msa(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_msa(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_msa(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			Next
			ei_len = ei_count * 20
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len

			call define_msa_elig_dialog

			dialog Dialog1
			cancel_confirmation
			move_from_dialog = False

			err_msg = ""

			MSA_UNIQUE_APPROVALS(fiat_reason, approval_selected) = trim(MSA_UNIQUE_APPROVALS(fiat_reason, approval_selected))
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_verif = "FAILED" and MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If Isdate(MSA_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", MSA_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
						If MSA_ELIG_APPROVALS(elig_ind).msa_elig_case_test_fail_file <> "FAILED" Then
							err_msg = err_msg & vbNewLine & "* The verification request date: " &  MSA_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
							MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
						End If
					End If
				End If
			End If
			If MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_source_of_info = "FIAT" Then
					If MSA_UNIQUE_APPROVALS(fiat_reason, approval_selected) = "" Then
						err_msg = err_msg & vbNewLine & "* Since the approval for MSA in " & MSA_UNIQUE_APPROVALS(first_mo_const, approval_selected) & "-" & MSA_UNIQUE_APPROVALS(last_mo_const, approval_selected)  & " was FIATed, an explanation of why the FIAT was completed is needed."
					End If
				End If
			End If

			If err_msg <> "" and ButtonPressed < 1000 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "MSA")
				EMWriteScreen ft_mo, 20, 56
				EMWriteScreen ft_yr, 20, 59
				Call find_last_approved_ELIG_version(20, 79, vrs_numb, vrs_dt, vrs_rslt, approval_found)
				' transmit
			End If

			If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
			If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("MSA", MSA_UNIQUE_APPROVALS(process_for_note, approval_selected), MSA_UNIQUE_APPROVALS(changes_for_note, approval_selected))
			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/MSA has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if MSA should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If err_msg = "" Then

				all_msa_approvals_confirmed = True
				msa_approval_is_incorrect = False

				If MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
					MSA_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					MSA_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf MSA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					MSA_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					MSA_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(MSA_UNIQUE_APPROVALS, 2)
					If ButtonPressed = MSA_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If MSA_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_msa_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(MSA_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If MSA_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then msa_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(MSA_UNIQUE_APPROVALS, 2) Then
						If all_msa_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(MSA_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_msa_approvals_confirmed = True Then move_from_dialog = True
			If msa_approval_is_incorrect = True and ButtonPressed = app_confirmed_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_msa_approvals_confirmed = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If

		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call back_to_SELF
	Call check_for_MAXIS(True)

	If msa_approval_is_incorrect = True Then
		enter_CNOTE_for_MSA = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for MSA Approvals from " & first_MSA_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if
End If

If enter_CNOTE_for_GA = True Then
	last_elig_result = ""
	last_indv_unit_type = ""
	last_faci_unit_type = ""
	last_gross_income = ""
	last_total_deductions = ""
	last_unearned_income = ""
	last_school_income = ""
	last_deemed_income = ""
	last_countable_income = ""

	last_elig_standard = ""
	last_elig_payment = ""
	last_personal_needs_standard = ""
	last_personal_needs_payment = ""
	last_total_assets = ""
	last_reporting = ""
	last_elig_action = ""
	last_elig_reason = ""
	last_budget_cycle = ""

	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	unique_app_count = 0
	For approval = 0 to UBound(GA_ELIG_APPROVALS)
		If GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year = first_GA_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If unique_app_count = 0 Then
				ReDim preserve GA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

				GA_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
				GA_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
				GA_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
				GA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
				GA_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
				GA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
				If GA_ELIG_APPROVALS(approval).ga_elig_case_test_verif <> "FAILED" AND GA_ELIG_APPROVALS(approval).ga_elig_summ_reason_info = "No Proof Given" Then
					GA_UNIQUE_APPROVALS(verif_request_details, approval_selected) = verifs_in_case_note
				End If

				last_elig_result = GA_ELIG_APPROVALS(approval).ga_elig_summ_eligibility_result
				last_indv_unit_type = GA_ELIG_APPROVALS(approval).ga_elig_file_unit_type_info
				last_faci_unit_type = GA_ELIG_APPROVALS(approval).ga_elig_faci_file_unit_type_info
				last_gross_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_gross_income
				last_total_deductions = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_deductions
				last_unearned_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_unearned_income
				last_school_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_counted_school_income
				last_deemed_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_deemed_income
				last_countable_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_countable_income
				last_elig_standard = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_standard
				last_elig_payment = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_subtotal
				last_personal_needs_standard = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_standard
				last_personal_needs_payment = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_subtotal
				last_total_assets = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_assets
				last_reporting = GA_ELIG_APPROVALS(approval).ga_elig_summ_hrf_reporting
				last_elig_action = GA_ELIG_APPROVALS(approval).ga_elig_summ_action_info
				last_elig_reason = GA_ELIG_APPROVALS(approval).ga_elig_summ_reason_info
				last_budget_cycle = GA_ELIG_APPROVALS(approval).ga_elig_summ_budget_cycle

				unique_app_count = unique_app_count + 1
			Else
				match_last_benefit_amounts = True

				If last_elig_result <> GA_ELIG_APPROVALS(approval).ga_elig_summ_eligibility_result Then match_last_benefit_amounts = False
				If last_indv_unit_type <> GA_ELIG_APPROVALS(approval).ga_elig_file_unit_type_info Then match_last_benefit_amounts = False
				If last_faci_unit_type <> GA_ELIG_APPROVALS(approval).ga_elig_faci_file_unit_type_info Then match_last_benefit_amounts = False
				If last_gross_income <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_gross_income Then match_last_benefit_amounts = False
				If last_total_deductions <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_deductions Then match_last_benefit_amounts = False
				If last_unearned_income <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_unearned_income Then match_last_benefit_amounts = False
				If last_school_income <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_counted_school_income Then match_last_benefit_amounts = False
				If last_deemed_income <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_deemed_income Then match_last_benefit_amounts = False
				If last_countable_income <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_countable_income Then match_last_benefit_amounts = False
				If last_elig_standard <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_standard Then match_last_benefit_amounts = False
				If last_elig_payment <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_subtotal Then match_last_benefit_amounts = False
				If last_personal_needs_standard <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_standard Then match_last_benefit_amounts = False
				If last_personal_needs_payment <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_subtotal Then match_last_benefit_amounts = False
				If last_total_assets <> GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_assets Then match_last_benefit_amounts = False
				If last_reporting <> GA_ELIG_APPROVALS(approval).ga_elig_summ_hrf_reporting Then match_last_benefit_amounts = False
				If last_elig_action <> GA_ELIG_APPROVALS(approval).ga_elig_summ_action_info Then match_last_benefit_amounts = False
				If last_elig_reason <> GA_ELIG_APPROVALS(approval).ga_elig_summ_reason_info Then match_last_benefit_amounts = False
				If last_budget_cycle <> GA_ELIG_APPROVALS(approval).ga_elig_summ_budget_cycle Then match_last_benefit_amounts = False

				If match_last_benefit_amounts = True Then
					GA_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = GA_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
					GA_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
				End If
				If match_last_benefit_amounts = False Then
					ReDim preserve GA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					GA_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
					GA_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year
					GA_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
					GA_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					GA_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					GA_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
					If GA_ELIG_APPROVALS(approval).ga_elig_case_test_verif <> "FAILED" AND GA_ELIG_APPROVALS(approval).ga_elig_summ_reason_info = "No Proof Given" Then
						GA_UNIQUE_APPROVALS(verif_request_details, approval_selected) = verifs_in_case_note
					End If

					last_elig_result = GA_ELIG_APPROVALS(approval).ga_elig_summ_eligibility_result
					last_indv_unit_type = GA_ELIG_APPROVALS(approval).ga_elig_file_unit_type_info
					last_faci_unit_type = GA_ELIG_APPROVALS(approval).ga_elig_faci_file_unit_type_info
					last_gross_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_gross_income
					last_total_deductions = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_deductions
					last_unearned_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_unearned_income
					last_school_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_counted_school_income
					last_deemed_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_deemed_income
					last_countable_income = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_countable_income
					last_elig_standard = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_standard
					last_elig_payment = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_payment_subtotal
					last_personal_needs_standard = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_standard
					last_personal_needs_payment = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_pers_needs_payment_subtotal
					last_total_assets = GA_ELIG_APPROVALS(approval).ga_elig_case_budg_total_assets
					last_reporting = GA_ELIG_APPROVALS(approval).ga_elig_summ_hrf_reporting
					last_elig_action = GA_ELIG_APPROVALS(approval).ga_elig_summ_action_info
					last_elig_reason = GA_ELIG_APPROVALS(approval).ga_elig_summ_reason_info
					last_budget_cycle = GA_ELIG_APPROVALS(approval).ga_elig_summ_budget_cycle

					unique_app_count = unique_app_count + 1
				End If
			End If
		End If
	Next

	If UBound(GA_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(GA_UNIQUE_APPROVALS, 2)+1 & " GA Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & GA_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for GA."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(GA_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(GA_UNIQUE_APPROVALS, 2)
		  	If GA_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, GA_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & GA_UNIQUE_APPROVALS(last_mo_const, approval)
		  	If GA_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, GA_UNIQUE_APPROVALS(first_mo_const, approval)
		  	y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
		    OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_ga_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(GA_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do
			first_month = left(GA_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(GA_ELIG_APPROVALS)
				' MsgBox "APPROVALS MO - " & GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year & vbCr & "approval - " & approval & vbCr & "first_month - " & first_month
				If GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result = "INELIGIBLE" Then
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_appl_withdrawn = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_dupl_assistance = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_coop = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_file = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_eligible_member = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_prosp_net_income = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_retro_net_income = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_residence = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_assets = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_eligible_other_prgm = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_verif = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_lump_sum_payment = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
			End If

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			Next
			ei_len = ei_count * 20
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len

			call define_ga_elig_dialog

			dialog Dialog1
			cancel_confirmation

			err_msg = ""
			move_from_dialog = False

			GA_UNIQUE_APPROVALS(proration_reason, approval_selected) = trim(GA_UNIQUE_APPROVALS(proration_reason, approval_selected))
			If (GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_verif = "FAILED" OR GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info = "No Proof Given") and GA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If Isdate(GA_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", GA_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND GA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
						If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_fail_file <> "FAILED" Then
							err_msg = err_msg & vbNewLine & "* The verification request date: " &  GA_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
							GA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
						End If
					End If
				End If
				If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_verif <> "FAILED" AND GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_reason_info = "No Proof Given" Then
					If trim(GA_UNIQUE_APPROVALS(verif_request_details, approval_selected)) = "" Then err_msg = err_msg & vbNewLine & "* The GA Action Reason is 'No Proof Given' but the ELIG Results do not clarify the verifications that are missing. Detail the missing verifications that have caused the ineligibility results in the field for 'Verifications NOT Received and Needed' to explain the ineligibility clearly for CASE/NOTE."
				End If
			End If

			If err_msg <> "" and ButtonPressed < 1000 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "GA")
				EMWriteScreen ft_mo, 20, 54
				EMWriteScreen ft_yr, 20, 57
				Call find_last_approved_ELIG_version(20, 78, vrs_numb, vrs_dt, vrs_rslt, approval_found)
				' transmit
			End If

			If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
			If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("GA", GA_UNIQUE_APPROVALS(process_for_note, approval_selected), GA_UNIQUE_APPROVALS(changes_for_note, approval_selected))
			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/GA has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if GA should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If err_msg = "" Then

				all_ga_approvals_confirmed = True
				ga_approval_is_incorrect = False

				If GA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
					GA_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					GA_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf GA_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					GA_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					GA_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(GA_UNIQUE_APPROVALS, 2)
					If ButtonPressed = GA_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If GA_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_ga_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(GA_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If GA_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then ga_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(GA_UNIQUE_APPROVALS, 2) Then
						If all_ga_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(GA_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_ga_approvals_confirmed = True Then move_from_dialog = True
			If ga_approval_is_incorrect = True and  ButtonPressed = app_confirmed_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_ga_approvals_confirmed = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If

		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call back_to_SELF
	Call check_for_MAXIS(True)

	If ga_approval_is_incorrect = True Then
		enter_CNOTE_for_GA = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for GA Approvals from " & first_GA_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if
End If

If enter_CNOTE_for_DENY = True Then

	last_dwp_reason_code_result = ""
	last_mfip_reason_code_result = ""
	last_msa_reason_code_result = ""
	last_ga_reason_code_result = ""

	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	unique_app_count = 0
	For approval = 0 to UBound(CASH_DENIAL_APPROVALS)
		If CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year = first_DENY_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If unique_app_count = 0 Then
				ReDim preserve DENY_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

				DENY_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year
				DENY_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year
				DENY_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
				DENY_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
				DENY_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
				DENY_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
				DENY_UNIQUE_APPROVALS(wcom_needed, unique_app_count) = True
				DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = False
				If CASH_DENIAL_APPROVALS(approval).deny_cash_dwp_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
				If CASH_DENIAL_APPROVALS(approval).deny_cash_mfip_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
				If CASH_DENIAL_APPROVALS(approval).deny_cash_msa_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
				If CASH_DENIAL_APPROVALS(approval).deny_cash_ga_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
				If DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True Then DENY_UNIQUE_APPROVALS(verif_request_details, unique_app_count) = verifs_in_case_note
				'QUESTION - Currently commented out. I believe that verifs are only listed on the Notice (WCOM) if the main reason for denial is Verirication
				' If CASH_DENIAL_APPROVALS(approval).deny_dwp_elig_case_test_verif = "FAILED" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
				' If CASH_DENIAL_APPROVALS(approval).deny_mfip_case_test_verif = "FAILED" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
				' If CASH_DENIAL_APPROVALS(approval).deny_msa_elig_case_test_verif = "FAILED" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True

				last_dwp_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_dwp_reason_code
				last_mfip_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_mfip_reason_code
				last_msa_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_msa_reason_code
				last_ga_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_ga_reason_code

				unique_app_count = unique_app_count + 1
			Else
				match_last_benefit_amounts = True

				If last_dwp_reason_code_result <> CASH_DENIAL_APPROVALS(approval).deny_cash_dwp_reason_code Then match_last_benefit_amounts = False
				If last_mfip_reason_code_result <> CASH_DENIAL_APPROVALS(approval).deny_cash_mfip_reason_code Then match_last_benefit_amounts = False
				If last_msa_reason_code_result <> CASH_DENIAL_APPROVALS(approval).deny_cash_msa_reason_code Then match_last_benefit_amounts = False
				If last_ga_reason_code_result <> CASH_DENIAL_APPROVALS(approval).deny_cash_ga_reason_code Then match_last_benefit_amounts = False

				If match_last_benefit_amounts = True Then
					DENY_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = DENY_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year
					DENY_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year
				End If
				If match_last_benefit_amounts = False Then
					ReDim preserve DENY_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					DENY_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year
					DENY_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year
					DENY_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
					DENY_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					DENY_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					DENY_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
					DENY_UNIQUE_APPROVALS(wcom_needed, unique_app_count) = True
					DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = False
					If CASH_DENIAL_APPROVALS(approval).deny_cash_dwp_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
					If CASH_DENIAL_APPROVALS(approval).deny_cash_mfip_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
					If CASH_DENIAL_APPROVALS(approval).deny_cash_msa_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
					If CASH_DENIAL_APPROVALS(approval).deny_cash_ga_reason_info = "Verification" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
					If DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True Then DENY_UNIQUE_APPROVALS(verif_request_details, unique_app_count) = verifs_in_case_note

					'QUESTION - Currently commented out. I believe that verifs are only listed on the Notice (WCOM) if the main reason for denial is Verirication
					' If CASH_DENIAL_APPROVALS(approval).deny_dwp_elig_case_test_verif = "FAILED" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
					' If CASH_DENIAL_APPROVALS(approval).deny_mfip_case_test_verif = "FAILED" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True
					' If CASH_DENIAL_APPROVALS(approval).deny_msa_elig_case_test_verif = "FAILED" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, unique_app_count) = True

					last_dwp_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_dwp_reason_code
					last_mfip_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_mfip_reason_code
					last_msa_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_msa_reason_code
					last_ga_reason_code_result = CASH_DENIAL_APPROVALS(approval).deny_cash_ga_reason_code

					unique_app_count = unique_app_count + 1
				End If
			End If
		End If
	Next

	If UBound(DENY_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(DENY_UNIQUE_APPROVALS, 2)+1 & " DENY Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & DENY_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for DENY."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(DENY_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(DENY_UNIQUE_APPROVALS, 2)
		  	If DENY_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, DENY_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & DENY_UNIQUE_APPROVALS(last_mo_const, approval)
		  	If DENY_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, DENY_UNIQUE_APPROVALS(first_mo_const, approval)
		  	y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
		    OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_deny_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(DENY_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do
			first_month = left(DENY_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(CASH_DENIAL_APPROVALS)
				' MsgBox "APPROVALS MO - " & CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year & vbCr & "approval - " & approval & vbCr & "first_month - " & first_month
				If CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  'QUESTION - Currently commented out. I believe that verifs are only listed on the Notice (WCOM) if the main reason for denial is Verirication
			  ' If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_two_job_ended(each_memb) = False Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_three_job_ended(each_memb) = False Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_four_job_ended(each_memb) = False Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_jobs_five_job_ended(each_memb) = False Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  '
			  ' If STAT_INFORMATION(month_ind).stat_busi_one_snap_income_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_busi_one_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_busi_two_snap_income_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_busi_two_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_busi_three_snap_income_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_busi_three_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  '
			  ' If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_one_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_two_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_three_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_four_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True
			  ' If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" and STAT_INFORMATION(month_ind).stat_unea_five_inc_end_date(each_memb) = "" Then DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True


			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True Then ei_count = ei_count + 1

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			Next
			ei_len = ei_count * 20
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len
			TEMP_VAR_cash_family_or_adult = CASH_DENIAL_APPROVALS(elig_ind).cash_family_or_adult
			TEMP_VAR_deny_dwp_elig_explanation = CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_explanation
			TEMP_VAR_deny_mfip_elig_explanation = CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_elig_explanation
			TEMP_VAR_deny_ga_elig_explanation = CASH_DENIAL_APPROVALS(elig_ind).deny_ga_elig_explanation
			TEMP_VAR_deny_msa_elig_explanation = CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_explanation

			If CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_case_test_verif = "FAILED" Then
				If TEMP_VAR_deny_dwp_elig_explanation = "" Then TEMP_VAR_deny_dwp_elig_explanation = STAT_INFORMATION(month_ind).panels_not_verif_string
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_case_test_verif = "FAILED" Then
				If TEMP_VAR_deny_mfip_elig_explanation = "" Then TEMP_VAR_deny_mfip_elig_explanation = STAT_INFORMATION(month_ind).panels_not_verif_string
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_info = "Verification" Then
				If TEMP_VAR_deny_ga_elig_explanation = "" Then TEMP_VAR_deny_ga_elig_explanation = STAT_INFORMATION(month_ind).panels_not_verif_string
			End If
			If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_case_test_verif = "FAILED" Then
				If TEMP_VAR_deny_msa_elig_explanation = "" Then TEMP_VAR_deny_msa_elig_explanation = STAT_INFORMATION(month_ind).panels_not_verif_string
			End If

			call define_deny_elig_dialog

			dialog Dialog1
			cancel_confirmation

			CASH_DENIAL_APPROVALS(elig_ind).cash_family_or_adult = TEMP_VAR_cash_family_or_adult
			CASH_DENIAL_APPROVALS(elig_ind).deny_dwp_elig_explanation = trim(TEMP_VAR_deny_dwp_elig_explanation)
			CASH_DENIAL_APPROVALS(elig_ind).deny_mfip_elig_explanation = trim(TEMP_VAR_deny_mfip_elig_explanation)
			CASH_DENIAL_APPROVALS(elig_ind).deny_ga_elig_explanation = trim(TEMP_VAR_deny_ga_elig_explanation)
			CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_explanation = trim(TEMP_VAR_deny_msa_elig_explanation)

			err_msg = ""
			move_from_dialog = False
			If DENY_UNIQUE_APPROVALS(denial_due_to_verif, approval_selected) = True Then
				If Isdate(DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
						err_msg = err_msg & vbNewLine & "* The verification request date: " &  DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
						DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
					End If
				End If
			ElseIf trim(DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected)) <> "" Then

				If Isdate(DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Information has been entered into the Verification Request Date, but it does not appear to be a date. Either remove the information or make sure it is a date."
				Else
					If DateDiff("d", DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
						err_msg = err_msg & vbNewLine & "* The verification request date: " &  DENY_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
						DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
					End If
				End If
			End if
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_details_exists = True Then
				If CASH_DENIAL_APPROVALS(elig_ind).deny_ga_elig_explanation = "" Then err_msg = err_msg & vbCr & "* The GA Denial Reason required additional detail. Add information about the GA Denial."
				CASH_DENIAL_APPROVALS(elig_ind).cash_family_or_adult = "Adult"
			End if
			If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_info = "Verification" Then
				If CASH_DENIAL_APPROVALS(elig_ind).deny_msa_elig_explanation = "" Then err_msg = err_msg & vbCr & "* The MSA Denial Reason required additional detail. Add information about the MSA Denial."
				CASH_DENIAL_APPROVALS(elig_ind).cash_family_or_adult = "Adult"
			End if

			If err_msg <> "" and ButtonPressed < 1100 and ButtonPressed <> reload_btn Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "DENY")
				EMWriteScreen ft_mo, 19, 54
				EMWriteScreen ft_yr, 19, 57
				Call find_last_approved_ELIG_version(19, 78, vrs_numb, vrs_dt, vrs_rslt, approval_found)
			End If


			If err_msg = "" Then
				all_deny_approvals_confirmed = True
				deny_approval_is_incorrect = False

				If DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
					DENY_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					DENY_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf DENY_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					DENY_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					DENY_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(DENY_UNIQUE_APPROVALS, 2)
					If ButtonPressed = DENY_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If DENY_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_deny_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(DENY_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If DENY_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then deny_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(DENY_UNIQUE_APPROVALS, 2) Then
						If all_deny_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(DENY_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_deny_approvals_confirmed = True Then move_from_dialog = True
			If deny_approval_is_incorrect = True and  ButtonPressed = app_confirmed_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_deny_approvals_confirmed = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If

		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call check_for_MAXIS(True)

	If deny_approval_is_incorrect = True Then
		enter_CNOTE_for_DENY = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for Cash DENY Approvals from " & first_DENY_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if

	If enter_CNOTE_for_DENY = True Then
		For unique_app = 0 to UBound(DENY_UNIQUE_APPROVALS, 2)
			elig_ind = ""
			one_month_is_elig = False
			For approval = 0 to UBound(CASH_DENIAL_APPROVALS)
				If CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year = DENY_UNIQUE_APPROVALS(first_mo_const, unique_app) Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next
			If STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "1" or STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "1" Then
				If deny_wcom_info_one = "" Then deny_wcom_info_one = "The application for cash has been withdrawn, which means you requested to not be assessed for cash assistance."
			End If

			Do
				Do
					err_msg = ""

					Dialog1 = ""
					BeginDialog Dialog1, 0, 0, 496, 180, "WCOM information for DENY"
					  EditBox 10, 80, 480, 15, deny_wcom_info_one
					  EditBox 10, 110, 480, 15, deny_wcom_info_two
					  EditBox 10, 140, 480, 15, deny_wcom_info_three
					  ButtonGroup ButtonPressed
					    OkButton 415, 160, 75, 15
					  If DENY_UNIQUE_APPROVALS(last_mo_const, unique_app) <> "" Then Text 10, 10, 460, 10, "WCOM is needed for all CASH DENIALS to explain the reason for denial. Detail information for " & DENY_UNIQUE_APPROVALS(first_mo_const, unique_app) & " - " & DENY_UNIQUE_APPROVALS(last_mo_const, unique_app) & " ELIG/DENY Approval"
					  If DENY_UNIQUE_APPROVALS(last_mo_const, unique_app) = "" Then Text 10, 10, 460, 10, "WCOM is needed for all CASH DENIALS to explain the reason for denial. Detail information for " & DENY_UNIQUE_APPROVALS(first_mo_const, unique_app) & " ELIG/DENY Approval"
					  If STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "1" or STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "1" Then
						Text 15, 25, 200, 10, "Cash request has been withdrawn. Script will add detial"
						Text 20, 40, 230, 10, "All cash programs have been denied because you have withdrawn the request."
						Text 20, 50, 230, 10, "You can reapply at any time if your situation changes or want to be reassessed."
					  Else
						If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_reason_code = "01" and CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_reason_code = "01" Then
							Text 15, 25, 130, 10, "Case is Adult. Script will add detail:"
							Text 20, 40, 230, 10, "MFIP/DWP are Family Cash Programs."
							Text 20, 50, 230, 10, "They require an eligible child/pregnant person to be eligible."
						End If
						If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_code = "01" and CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_code = "01" Then
							Text 15, 25, 130, 10, "Case is Family. Script will add detail:"
							Text 20, 40, 230, 10, "GA/MSA are Adult Cash programs."
							Text 20, 50, 230, 10, "Available only for households without children."
						End If
					  End If
					  Text 10, 70, 185, 10, "Detail the information about the denial for the WCOM:"
					  Text 10, 100, 185, 10, "Second Reason for denial for the WCOM:"
					  Text 10, 130, 185, 10, "Third Reason for denial for the WCOM:"
					  Text 10, 165, 370, 10, "(All information should be phrased in complete sentances as it will be added to the WCOM sent to the Resident.)"
					EndDialog

					dialog Dialog1
					cancel_confirmation

					duplicate_info_deleted = False
					deny_wcom_info_one = trim(deny_wcom_info_one)
					deny_wcom_info_two = trim(deny_wcom_info_two)
					deny_wcom_info_three = trim(deny_wcom_info_three)
					If deny_wcom_info_three = deny_wcom_info_two Then
						If deny_wcom_info_three <> "" Then duplicate_info_deleted = True
						deny_wcom_info_three = ""
					End If
					If deny_wcom_info_one = deny_wcom_info_two Then
						If deny_wcom_info_two <> "" Then duplicate_info_deleted = True
						deny_wcom_info_two = ""
					End If
					If deny_wcom_info_one = deny_wcom_info_three Then
						If deny_wcom_info_three <> "" Then duplicate_info_deleted = True
						deny_wcom_info_three = ""
					End If
					If duplicate_info_deleted = True then err_msg = err_msg & vbCr & "* The information entered in each line should not be duplicated as it creates a repeditive notice and CASE/NOTE."

					If trim(deny_wcom_info_one) = "" and trim(deny_wcom_info_two) = "" and trim(deny_wcom_info_three) = "" Then
						err_msg = err_msg & vbCr & "* WCOMs are required for all Cash DENY Approvals. Enter information into the dialog to explain cleearly to the resident why the Cash Request has been denied."
					ElseIf len(deny_wcom_info_one) < 30 and len(deny_wcom_info_two) < 30 and len(deny_wcom_info_three) < 30 and (len(deny_wcom_info_one)+len(deny_wcom_info_two)+len(deny_wcom_info_three)) < 30 Then
						err_msg = err_msg & vbCr & "* WCOM information should be entered in full sentances and the amount of information entered does not appear to be long enough for sufficient explanation." & vbCr & vbCr & "Add more information to the dialog to explain the reason(s) for denials."
					End If

					If err_msg <> "" Then MsgBox "ENTER INFORMATION FOR WCOM" & vbCr & vbCr & "Reason for denial is needed for the WCOM." & vbCr & err_msg & vbCr & vbCr & "Enter full explanation to continue"
				Loop until err_msg =""
				Call check_for_password(are_we_passworded_out)
			Loop until are_we_passworded_out = False

			DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app) = trim(deny_wcom_info_one)
			DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app) = trim(deny_wcom_info_two)
			DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app) = trim(deny_wcom_info_three)
		Next
	End If
	Call check_for_MAXIS(True)
	Call back_to_SELF
End if

If enter_CNOTE_for_GRH = True Then
	last_elig_result = ""
	last_elig_type = ""
	last_total_deductions = ""
	last_supp_hsg_disregard = ""
	last_counted_income = ""
	last_personal_needs = ""
	last_vendor_number_one = ""
	last_grh_amount_one = ""
	last_payment_one = ""
	last_pre_post_pay_one = ""
	last_client_obligation_one = ""
	last_vendor_number_two = ""
	last_grh_amount_two = ""
	last_payment_two = ""
	last_pre_post_pay_two = ""
	last_client_obligation_two = ""
	last_reporting_status = ""
	last_info_source = ""

	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	unique_app_count = 0
	For approval = 0 to UBound(GRH_ELIG_APPROVALS)
		If GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year = first_GRH_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If GRH_ELIG_APPROVALS(approval).approved_today = True Then
				If unique_app_count = 0 Then
					ReDim preserve GRH_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					GRH_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year
					GRH_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year
					GRH_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
					GRH_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					GRH_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					GRH_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True

					last_elig_result = GRH_ELIG_APPROVALS(approval).grh_elig_eligibility_result
					last_elig_type = GRH_ELIG_APPROVALS(approval).grh_elig_memb_elig_type_info
					last_total_deductions = GRH_ELIG_APPROVALS(approval).grh_elig_budg_total_deductions
					last_supp_hsg_disregard = GRH_ELIG_APPROVALS(approval).grh_elig_supp_hsg_disregard
					last_counted_income = GRH_ELIG_APPROVALS(approval).grh_elig_budg_counted_income
					last_personal_needs = GRH_ELIG_APPROVALS(approval).grh_elig_budg_personal_needs
					last_vendor_number_one = GRH_ELIG_APPROVALS(approval).grh_elig_budg_vendor_number_one
					last_grh_amount_one = GRH_ELIG_APPROVALS(approval).grh_elig_payment_grh_state_amount_one
					last_payment_one = GRH_ELIG_APPROVALS(approval).grh_elig_payment_total_one
					last_pre_post_pay_one = GRH_ELIG_APPROVALS(approval).grh_elig_pre_or_post_pay_one_info
					last_client_obligation_one = GRH_ELIG_APPROVALS(approval).grh_elig_client_obligation_one
					last_vendor_number_two = GRH_ELIG_APPROVALS(approval).grh_elig_budg_vendor_number_two
					last_grh_amount_two = GRH_ELIG_APPROVALS(approval).grh_elig_payment_grh_state_amount_two
					last_payment_two = GRH_ELIG_APPROVALS(approval).grh_elig_payment_total_two
					last_pre_post_pay_two = GRH_ELIG_APPROVALS(approval).grh_elig_pre_or_post_pay_two_info
					last_client_obligation_two = GRH_ELIG_APPROVALS(approval).grh_elig_client_obligation_two
					last_reporting_status = GRH_ELIG_APPROVALS(approval).grh_elig_reporting_status
					last_info_source = GRH_ELIG_APPROVALS(approval).grh_elig_source_of_info

					unique_app_count = unique_app_count + 1
				Else
					match_last_benefit_amounts = True

					If last_elig_result <> GRH_ELIG_APPROVALS(approval).grh_elig_eligibility_result Then match_last_benefit_amounts = False
					If last_elig_type <> GRH_ELIG_APPROVALS(approval).grh_elig_memb_elig_type_info Then match_last_benefit_amounts = False
					If last_total_deductions <> GRH_ELIG_APPROVALS(approval).grh_elig_budg_total_deductions Then match_last_benefit_amounts = False
					If last_supp_hsg_disregard <> GRH_ELIG_APPROVALS(approval).grh_elig_supp_hsg_disregard Then match_last_benefit_amounts = False
					If last_counted_income <> GRH_ELIG_APPROVALS(approval).grh_elig_budg_counted_income Then match_last_benefit_amounts = False
					If last_personal_needs <> GRH_ELIG_APPROVALS(approval).grh_elig_budg_personal_needs Then match_last_benefit_amounts = False
					If last_vendor_number_one <> GRH_ELIG_APPROVALS(approval).grh_elig_budg_vendor_number_one Then match_last_benefit_amounts = False
					If last_grh_amount_one <> GRH_ELIG_APPROVALS(approval).grh_elig_payment_grh_state_amount_one Then match_last_benefit_amounts = False
					If last_payment_one <> GRH_ELIG_APPROVALS(approval).grh_elig_payment_total_one Then match_last_benefit_amounts = False
					If last_pre_post_pay_one <> GRH_ELIG_APPROVALS(approval).grh_elig_pre_or_post_pay_one_info Then match_last_benefit_amounts = False
					If last_client_obligation_one <> GRH_ELIG_APPROVALS(approval).grh_elig_client_obligation_one Then match_last_benefit_amounts = False
					If last_vendor_number_two <> GRH_ELIG_APPROVALS(approval).grh_elig_budg_vendor_number_two Then match_last_benefit_amounts = False
					If last_grh_amount_two <> GRH_ELIG_APPROVALS(approval).grh_elig_payment_grh_state_amount_two Then match_last_benefit_amounts = False
					If last_payment_two <> GRH_ELIG_APPROVALS(approval).grh_elig_payment_total_two Then match_last_benefit_amounts = False
					If last_pre_post_pay_two <> GRH_ELIG_APPROVALS(approval).grh_elig_pre_or_post_pay_two_info Then match_last_benefit_amounts = False
					If last_client_obligation_two <> GRH_ELIG_APPROVALS(approval).grh_elig_client_obligation_two Then match_last_benefit_amounts = False
					If last_reporting_status <> GRH_ELIG_APPROVALS(approval).grh_elig_reporting_status Then match_last_benefit_amounts = False
					If last_info_source <> GRH_ELIG_APPROVALS(approval).grh_elig_source_of_info Then match_last_benefit_amounts = False

					If match_last_benefit_amounts = True Then
						GRH_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = GRH_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year
						GRH_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year
					End If
					If match_last_benefit_amounts = False Then
						ReDim preserve GRH_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

						GRH_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year
						GRH_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year
						GRH_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
						GRH_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
						GRH_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
						GRH_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True

						last_elig_result = GRH_ELIG_APPROVALS(approval).grh_elig_eligibility_result
						last_elig_type = GRH_ELIG_APPROVALS(approval).grh_elig_memb_elig_type_info
						last_total_deductions = GRH_ELIG_APPROVALS(approval).grh_elig_budg_total_deductions
					last_supp_hsg_disregard = GRH_ELIG_APPROVALS(approval).grh_elig_supp_hsg_disregard
						last_counted_income = GRH_ELIG_APPROVALS(approval).grh_elig_budg_counted_income
						last_personal_needs = GRH_ELIG_APPROVALS(approval).grh_elig_budg_personal_needs
						last_vendor_number_one = GRH_ELIG_APPROVALS(approval).grh_elig_budg_vendor_number_one
						last_grh_amount_one = GRH_ELIG_APPROVALS(approval).grh_elig_payment_grh_state_amount_one
						last_payment_one = GRH_ELIG_APPROVALS(approval).grh_elig_payment_total_one
						last_pre_post_pay_one = GRH_ELIG_APPROVALS(approval).grh_elig_pre_or_post_pay_one_info
						last_client_obligation_one = GRH_ELIG_APPROVALS(approval).grh_elig_client_obligation_one
						last_vendor_number_two = GRH_ELIG_APPROVALS(approval).grh_elig_budg_vendor_number_two
						last_grh_amount_two = GRH_ELIG_APPROVALS(approval).grh_elig_payment_grh_state_amount_two
						last_payment_two = GRH_ELIG_APPROVALS(approval).grh_elig_payment_total_two
						last_pre_post_pay_two = GRH_ELIG_APPROVALS(approval).grh_elig_pre_or_post_pay_two_info
						last_client_obligation_two = GRH_ELIG_APPROVALS(approval).grh_elig_client_obligation_two
						last_reporting_status = GRH_ELIG_APPROVALS(approval).grh_elig_reporting_status
						last_info_source = GRH_ELIG_APPROVALS(approval).grh_elig_source_of_info

						unique_app_count = unique_app_count + 1
					End If
				End If
			End If
		End If
	Next

	If UBound(GRH_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(GRH_UNIQUE_APPROVALS, 2)+1 & " HS/GRH Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & GRH_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for HS/GRH."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(GRH_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(GRH_UNIQUE_APPROVALS, 2)
		  	If GRH_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, GRH_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & GRH_UNIQUE_APPROVALS(last_mo_const, approval)
		  	If GRH_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, GRH_UNIQUE_APPROVALS(first_mo_const, approval)
		  	y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
		    OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_ga_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(GRH_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do
			first_month = left(GRH_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(GRH_ELIG_APPROVALS)
				If GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "INELIGIBLE" Then
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_application_withdrawn = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_pben_coop = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_elig_thru_other_program = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_placement = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_state_residence = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_prosp_net_income = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If GA_ELIG_APPROVALS(elig_ind).ga_elig_case_test_retro_net_income = "FAILED" Then GA_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_assets = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_death_of_applicant = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_elig_type = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				' If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_income = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_setting = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif = "FAILED" Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
			End If
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_budg_exists = False Then GRH_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False

			GRH_UNIQUE_APPROVALS(wcom_needed, approval_selected) = False
			GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_needed, approval_selected) = False

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard <> "" Then
				GRH_UNIQUE_APPROVALS(wcom_needed, approval_selected) = True
				GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_needed, approval_selected) = True

				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_source_of_info = "FIAT" Then GRH_UNIQUE_APPROVALS(fiat_reason, approval_selected) = "Required to add GRH Supportive Housing Disregard to the budget as this process is not yet automated in the system."
			End If
			GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_sent, approval_selected) = False

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True Then
			      If STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
			  	  If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True Then
			      If STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
				  If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True Then
			      If STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
				  If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True Then
			      If STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
				  If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True Then
			      If STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
				  If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_ga(each_memb) = True Then ei_count = ei_count + 2
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_ga(each_memb) = True Then ei_count = ei_count + 2
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_ga(each_memb) = True Then ei_count = ei_count + 2

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_ga(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			Next
			ei_len = ei_count * 10
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len
			If ei_count = 0 AND unea_count = 0 Then income_box_len = 40

			Call define_grh_elig_dialog

			dialog Dialog1
			cancel_confirmation

			err_msg = ""
			move_from_dialog = False

			GRH_UNIQUE_APPROVALS(fiat_reason, approval_selected) = trim(GRH_UNIQUE_APPROVALS(fiat_reason, approval_selected))
			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif = "FAILED" and GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If Isdate(GRH_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", GRH_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
						If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_fail_file <> "FAILED" Then
							err_msg = err_msg & vbNewLine & "* The verification request date: " &  GRH_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
							GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
						End If
					End If
				End If
			End If

			If GRH_ELIG_APPROVALS(elig_ind).grh_elig_case_test_verif_PACT = "FAILED" Then
				If trim(GRH_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" Then
					err_msg = err_msg & vbNewLine & "* Since PACT was used to approve this GRH benefit as ineligible, list the reasons for ineligibility."
				ElseIf len(GRH_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 30 Then
					err_msg = err_msg & vbNewLine & "* GRH ineligibility due to PACT requires sufficient explaination, expand upon the information entered in the Reason for Ineligibility field."
				End If
				If trim(GRH_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" or len(GRH_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 30 Then err_msg = err_msg & vbNewLine & " *** This information will be entered in a WCOM and should be writen without appreviations and in full detail."
				GRH_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True
			End If
			If GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If GRH_ELIG_APPROVALS(elig_ind).grh_elig_source_of_info = "FIAT" Then
					If GRH_UNIQUE_APPROVALS(fiat_reason, approval_selected) = "" Then
						err_msg = err_msg & vbNewLine & "* Since the approval for GRH in " & GRH_UNIQUE_APPROVALS(first_mo_const, approval_selected) & "-" & GRH_UNIQUE_APPROVALS(last_mo_const, approval_selected)  & " was FIATed, an explanation of why the FIAT was completed is needed."
					End If
				End If
			End If

			If err_msg <> "" and ButtonPressed < 1000 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "    ")
				EMWriteScreen ft_mo, 20, 55
				EMWriteScreen ft_yr, 20, 58
				Call write_value_and_transmit("GRH", 20, 71)
				Call find_last_approved_ELIG_version(20, 79, vrs_numb, vrs_dt, vrs_rslt, approval_found)
			End If

			If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
			If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("GRH", GRH_UNIQUE_APPROVALS(process_for_note, approval_selected), GRH_UNIQUE_APPROVALS(changes_for_note, approval_selected))
			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/GRH has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if GRH/HS should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If err_msg = "" Then

				all_grh_approvals_confirmed = True
				grh_approval_is_incorrect = False

				If GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
					GRH_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					GRH_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf GRH_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					GRH_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					GRH_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(GRH_UNIQUE_APPROVALS, 2)
					If ButtonPressed = GRH_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If GRH_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_grh_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(GRH_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If GRH_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then grh_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(GRH_UNIQUE_APPROVALS, 2) Then
						If all_grh_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(GRH_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_grh_approvals_confirmed = True Then move_from_dialog = True
			If grh_approval_is_incorrect = True and  ButtonPressed = app_confirmed_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_grh_approvals_confirmed = False and move_from_dialog = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If

		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call check_for_MAXIS(True)
	Call back_to_SELF

	If grh_approval_is_incorrect = True Then
		enter_CNOTE_for_GRH = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for GRH Approvals from " & first_GRH_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if
End If

If enter_CNOTE_for_HC = True Then		'HC DIALOG
	list_of_ref_numbers_approved = ""
	start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
	For approval = 0 to UBound(HC_ELIG_APPROVALS)
		If HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year = first_HC_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			For member = 0 to UBOUND(HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs)
				If HC_ELIG_APPROVALS(approval).hc_prog_elig_appd(member) = True and HC_ELIG_APPROVALS(approval).hc_prog_elig_approved_today(member) = True Then
					memb_prog_couple = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) & "::" & HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)
					If InStr(list_of_ref_numbers_approved, memb_prog_couple) = 0 Then list_of_ref_numbers_approved = list_of_ref_numbers_approved & "~" & memb_prog_couple
				End If
			Next
		End If
	Next
	If left(list_of_ref_numbers_approved, 1) = "~" Then list_of_ref_numbers_approved = right(list_of_ref_numbers_approved, len(list_of_ref_numbers_approved)-1)
	apprvd_ref_numbs_array = split(list_of_ref_numbers_approved, "~")
	unique_app_count = 0
	If trim(list_of_ref_numbers_approved) = "" Then enter_CNOTE_for_HC = False
End If

If enter_CNOTE_for_HC = True Then		'HC DIALOG
	cancel_out_of_hc = False

	for each every_hc_member in apprvd_ref_numbs_array
		memb_and_prog_array = split(every_hc_member, "::")

		last_elig_result = ""
		last_major_program = ""
		last_ref_number = ""
		last_elig_type = ""
		last_elig_standard = ""
		last_budget_method = ""
		last_counted_income = ""
		last_income_standard = ""
		last_spenddown_type = ""
		last_spenddown_amount = ""
		last_counted_bills_amt = ""
		last_spenddown_balance_amt = ""
		last_ew_spenddown_obligation = ""
		last_ew_spenddown_liability = ""
		last_premium = ""

		start_capturing_approvals = False											'There may be months in which we have an array instance but we haven't hit the first month of approval for this program - this keeps 'empty' array instances from being noted
		For approval = 0 to UBound(HC_ELIG_APPROVALS)
			If HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year = first_HC_approval Then start_capturing_approvals = True

			If start_capturing_approvals = True Then
				For member = 0 to UBOUND(HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs)
					If HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) = "MA" Then MSP_approvals_only = False
					If HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) = "EMA" Then MSP_approvals_only = False
					If HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) = "IMD" Then MSP_approvals_only = False

					'REMEDIAL CARE UPDATES
					If budget_without_remedial_care = "" Then
						For stat_year = 0 to UBound(STAT_INFORMATION)
							If STAT_INFORMATION(stat_year).no_stat_data = False Then
								If STAT_INFORMATION(stat_year).footer_month = HC_ELIG_APPROVALS(approval).elig_footer_month and STAT_INFORMATION(stat_year).footer_year = HC_ELIG_APPROVALS(approval).elig_footer_year Then
									For stat_memb = 0 to UBound(STAT_INFORMATION(stat_year).stat_memb_ref_numb)
										If HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) = STAT_INFORMATION(stat_year).stat_memb_ref_numb(stat_memb) Then
											warn_about_remedial_care = False
											If HC_ELIG_APPROVALS(approval).community_spenddown_exists(member) = True or (HC_ELIG_APPROVALS(approval).EW_spenddown_exists(member) = True and HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_obligation(member) <> "0.00") or HC_ELIG_APPROVALS(approval).LTC_spenddown_exists(member) = True Then warn_about_remedial_care = True
											If HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_remedial_care(hc_prog_count) = True  Then warn_about_remedial_care = False
											If STAT_INFORMATION(stat_year).stat_bils_remedial_care_entered = True Then warn_about_remedial_care = False
											If STAT_INFORMATION(stat_year).stat_faci_type_code(stat_memb) <> "55" and STAT_INFORMATION(stat_year).stat_faci_type_code(stat_memb) <> "56" Then warn_about_remedial_care = False

											If warn_about_remedial_care = True Then
												QCR_HC_Remedial_Care_Review_Needed = True				'Triggers the QCR review of HC Remedial Care Cases.
												' MsgBox "HC Should Cancel or maybe allow for permission"
												Dialog1 = ""
												BeginDialog Dialog1, 0, 0, 291, 175, "Review HC Budget for MEMB in Facility with a Spenddown"
													DropListBox 15, 120, 265, 45, "Select One..."+chr(9)+"No, stop the script so ELIG can be updated and ReApproved."+chr(9)+"No, continue with the script but do NOT CASE/NOTE the HC Approval"+chr(9)+"Yes, this case does not require Remedial Care Amount be in Bills.", budget_without_remedial_care
													ButtonGroup ButtonPressed
														OkButton 230, 150, 50, 15
													Text 115, 5, 155, 10, HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year & " - MEMB " & HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) & ": MA - " & HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_type(member) & ", Method: " & HC_ELIG_APPROVALS(approval).hc_prog_elig_method(member)
													If HC_ELIG_APPROVALS(approval).community_spenddown_exists(member) = True Then
														Text 10, 25, 145, 10, "Health Care MA Spenddown: $ " & HC_ELIG_APPROVALS(approval).hc_prog_elig_original_monthly_spdn(hc_prog_count)
														Text 55, 35, 145, 10, "Counted Bills: $ " & HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_counted_bills(hc_prog_count)
													ElseIf HC_ELIG_APPROVALS(approval).EW_spenddown_exists(member) = True Then
														Text 30, 25, 145, 10, "LTC/Waiver Oblication: $ " & HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_obligation(hc_prog_count)
														Text 55, 35, 145, 10, "Other Med Exp: $ " & HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_other_medical_expense(hc_prog_count)
													End If
													Text 60, 50, 145, 10, "  GRH Status: " & grh_status
													Text 75, 65, 145, 10, " Facility: " & STAT_INFORMATION(stat_year).stat_faci_name(stat_memb)
													Text 55, 75, 145, 10, " Facility Type : " & STAT_INFORMATION(stat_year).stat_faci_type_code(stat_memb) & " - " & STAT_INFORMATION(stat_year).stat_faci_type_info(stat_memb)
													Text 110, 90, 150, 10, "NO REMEDIAL CARE BILLS ARE COUNTED."
													Text 15, 110, 105, 10, "Is this correct for this budget?"
												EndDialog

												Do
													dialog Dialog1

												Loop until budget_without_remedial_care <> "Select One..." and budget_without_remedial_care <> ""

												If budget_without_remedial_care = "No, stop the script so ELIG can be updated and ReApproved." Then
													If QCR_HC_Remedial_Care_Review_Needed = True Then
														If MX_region <> "TRAINING" Then
															'RECORD QCR Cookie here
															txt_file_name = "HC_Remedial_Care_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
															qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

															'CREATING THE TESTING REPORT
															With (CreateObject("Scripting.FileSystemObject"))
																'Creating an object for the stream of text which we'll use frequently
																Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

																objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
																objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
																objTextStream.WriteLine "RunDateTime^&*^&*" & now
																objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
																objTextStream.WriteLine "ELIGProgram^&*^&*HC"
																objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & left(HC_UNIQUE_APPROVALS(months_in_approval, 0), 5)
																objTextStream.WriteLine "HCBudgNoRemedialCareInput^&*^&*MEMB " & budget_without_remedial_care
																objTextStream.WriteLine "POLICY^&*^&*EPM 2.4.2.5.1"

																objTextStream.Close
															End With
														End If

														email_subject = "TEST - HC Case in FACI Type (55 or 56): " & MAXIS_case_number
														email_body = "A case was processed that appears to have Health Care and an OPEN FACI of Type 55 or 56."
														email_body = email_body & vbCr & "budget_without_remedial_care: " & budget_without_remedial_care
														email_body = email_body & vbCr & vbCr &"Worker: " & script_run_worker & " - " & windows_user_ID
														email_body = email_body & vbCr & "Case Number: " & MAXIS_case_number
														email_body = email_body & vbCr & vbCr & "Email generated from the NOTES - Eligibility Summary Script, run at " & now

														email_recip = "ben.teskey@hennepin.us"
														email_recip_CC = ""
														Call create_outlook_email("", email_recip, email_recip_CC, email_recip_bcc, email_subject, 1, False, "", "", False, "", email_body, False, "", True)
													End If
													script_end_procedure_with_error_report("Eligibility Summary has ended because you have indicated the HC Budget needs to be Repaired to include a Remedial Care amount.")
												End If
												If budget_without_remedial_care = "No, continue with the script but do NOT CASE/NOTE the HC Approval" Then
													enter_CNOTE_for_HC = False
													end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for HC Approvals because the budget needs to be reviewed and reappoved, based on user input. Particular issue is Remedial Care for a Member that is in a GRH Facility." & vbCr
													cancel_out_of_hc = True
												End if
											End If
										End If
										If cancel_out_of_hc = True Then Exit For
									Next
								End If
								If cancel_out_of_hc = True Then Exit For
							End If
						Next
					End If
					If cancel_out_of_hc = True Then Exit For

					If HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) = memb_and_prog_array(0) and HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) = memb_and_prog_array(1) Then
						If HC_ELIG_APPROVALS(approval).hc_prog_elig_appd(member) = True and HC_ELIG_APPROVALS(approval).hc_prog_elig_approved_today(member) = True Then
							If unique_app_count = 0 Then
								ReDim preserve HC_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)
								'WHAT ABOUT SAME REF NUMBER DIFFERENT HC PROGRAMS
								HC_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year
								HC_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year
								HC_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
								HC_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
								HC_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
								HC_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = False
								HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app_count) = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)
								HC_UNIQUE_APPROVALS(major_prog_for_hc_app, unique_app_count) = HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)

								last_member_ref_number = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)
								last_month_and_year = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year

								last_elig_result = HC_ELIG_APPROVALS(approval).hc_prog_elig_eligibility_result(member)
								last_major_program = HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)
								last_ref_number = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)
								last_elig_type = HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_type(member)
								last_elig_standard = HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_standard(member)
								last_budget_method = HC_ELIG_APPROVALS(approval).hc_prog_elig_method(member)
								last_counted_income = HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_total_net_income(member)
								last_income_standard = HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_income_standard(member)
								last_spenddown_type = HC_ELIG_APPROVALS(approval).hc_prog_elig_spdn_type(member)
								last_spenddown_amount = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_recipient_amount(member)
								last_counted_bills_amt = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_counted_bills(member)
								last_spenddown_balance_amt = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_balance(member)
								last_ew_spenddown_obligation = HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_obligation(member)
								last_ew_spenddown_liability = HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_liability(member)

								last_premium = HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_total_premium(member)

								unique_app_count = unique_app_count + 1
							Else
								match_last_benefit_amounts = True

								If HC_ELIG_APPROVALS(approval).hc_prog_elig_eligibility_result(member) <> last_elig_result Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) <> last_major_program Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) <> last_ref_number Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_type(member) <> last_elig_type Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_standard(member) <> last_elig_standard Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_method(member) <> last_budget_method Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_total_net_income(member) <> last_counted_income Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_income_standard(member) <> last_income_standard Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_spdn_type(member) <> last_spenddown_type Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_recipient_amount(member) <> last_spenddown_amount Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_total_premium(member) <> last_premium Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_counted_bills(member) <> last_counted_bills_amt Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_balance(member) <> last_spenddown_balance_amt Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_obligation(member) <> last_ew_spenddown_obligation Then match_last_benefit_amounts = False
								If HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_liability(member) <> last_ew_spenddown_liability Then match_last_benefit_amounts = False

								If HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) <> last_member_ref_number Then match_last_benefit_amounts = False

								If match_last_benefit_amounts = True and InStr(HC_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1), HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year) = 0 Then
									HC_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = HC_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year
									HC_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year
								End If
								If match_last_benefit_amounts = False Then
									ReDim preserve HC_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

									HC_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year
									HC_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year
									HC_UNIQUE_APPROVALS(btn_one, unique_app_count) = 550 + unique_app_count
									HC_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
									HC_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
									HC_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = False
									HC_UNIQUE_APPROVALS(l_budg, unique_app_count) = False
									HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app_count) = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)
									HC_UNIQUE_APPROVALS(major_prog_for_hc_app, unique_app_count) = HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)

									last_member_ref_number = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)
									last_month_and_year = HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year

									last_elig_result = HC_ELIG_APPROVALS(approval).hc_prog_elig_eligibility_result(member)
									last_major_program = HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)
									last_ref_number = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)
									last_elig_type = HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_type(member)
									last_elig_standard = HC_ELIG_APPROVALS(approval).hc_prog_elig_elig_standard(member)
									last_budget_method = HC_ELIG_APPROVALS(approval).hc_prog_elig_method(member)
									last_counted_income = HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_total_net_income(member)
									last_income_standard = HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_income_standard(member)
									last_spenddown_type = HC_ELIG_APPROVALS(approval).hc_prog_elig_spdn_type(member)
									last_spenddown_amount = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_recipient_amount(member)
									last_counted_bills_amt = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_counted_bills(member)
									last_spenddown_balance_amt = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_balance(member)
									last_ew_spenddown_obligation = HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_obligation(member)
									last_ew_spenddown_liability = HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_liability(member)
									last_premium = HC_ELIG_APPROVALS(approval).hc_prog_elig_budg_total_premium(member)

									unique_app_count = unique_app_count + 1
								End If
							End If
						End If
					End If
				Next
			End If
			If cancel_out_of_hc = True Then Exit For
		Next
		If cancel_out_of_hc = True Then Exit For
	next

	If cancel_out_of_hc = False Then
		all_hc_approvals_confirmed = False
		approval_selected = 0
		STATS_manualtime = STATS_manualtime + (UBound(HC_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package
		Do
			Do
				first_month = left(HC_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
				elig_ind = ""
				memb_ind = ""
				month_ind = ""
				' MsgBox "elig_ind - " & elig_ind & vbCr & "1"
				For approval = 0 to UBound(HC_ELIG_APPROVALS)
					For member = 0 to UBound(HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs)

						If HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year = first_month and HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, approval_selected) = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) and HC_UNIQUE_APPROVALS(major_prog_for_hc_app, approval_selected) = HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) Then
							elig_ind = approval
							memb_ind = member
						End If
					Next
				Next

				For each_month = 0 to UBound(STAT_INFORMATION)
					If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
				Next

				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_income(memb_ind) = "FAILED" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_Obligation_one_mo(memb_ind) = "FAILED" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_obligation_six_mo(memb_ind) = "FAILED" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				' If scnd_elig_ind <> "" Then
				' 	If HC_ELIG_APPROVALS(scnd_elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				' 	If HC_ELIG_APPROVALS(scnd_elig_ind).hc_prog_elig_test_income(memb_ind) = "FAILED" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				' 	If HC_ELIG_APPROVALS(scnd_elig_ind).hc_prog_elig_test_Obligation_one_mo(memb_ind) = "FAILED" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				' 	If HC_ELIG_APPROVALS(scnd_elig_ind).hc_prog_elig_test_obligation_six_mo(memb_ind) = "FAILED" Then HC_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = True
				' End If

				If STAT_INFORMATION(month_ind).no_stat_data = False Then

					ei_count = 0
					unea_count = 0
					For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
						If STAT_INFORMATION(month_ind).stat_hcmi_spdwn_option(each_memb) = "DP" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_spdn_option(memb_ind) = "DP" Then
							If STAT_INFORMATION(month_ind).stat_faci_currently_in_facility(each_memb) = True Then HC_UNIQUE_APPROVALS(designated_provider_info, approval_selected) = STAT_INFORMATION(month_ind).stat_faci_name(each_memb)
						End If

						If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True Then
							If STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
							If STAT_INFORMATION(month_ind).stat_jobs_one_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True Then
							If STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
							If STAT_INFORMATION(month_ind).stat_jobs_two_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True Then
							If STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
							If STAT_INFORMATION(month_ind).stat_jobs_three_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True Then
							If STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
							If STAT_INFORMATION(month_ind).stat_jobs_four_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True Then
							If STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_ga(each_memb) = True Then ei_count = ei_count + 1
							If STAT_INFORMATION(month_ind).stat_jobs_five_verif_code(each_memb) = "N" Then ei_count = ei_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_ga(each_memb) = True Then ei_count = ei_count + 2
						If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_ga(each_memb) = True Then ei_count = ei_count + 2
						If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_ga(each_memb) = True Then ei_count = ei_count + 2

						If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_ga(each_memb) = True Then
							unea_count = unea_count + 1
							If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_ga(each_memb) = True Then
							unea_count = unea_count + 1
							If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_ga(each_memb) = True Then
							unea_count = unea_count + 1
							If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_ga(each_memb) = True Then
							unea_count = unea_count + 1
							If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
						End If
						If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_ga(each_memb) = True Then
							unea_count = unea_count + 1
							If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
						End If
					Next
					ei_len = ei_count * 10
					unea_len = unea_count * 10
					income_box_len = 30 + unea_len
					If ei_len > unea_len Then income_box_len = 30 + ei_len
					If ei_count = 0 AND unea_count = 0 Then income_box_len = 40
				End If

				Call define_hc_elig_dialog

				dialog Dialog1
				cancel_confirmation

				err_msg = ""
				move_from_dialog = False

				If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_test_verif(memb_ind) = "FAILED" and HC_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
					If Isdate(HC_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
						err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible Health Care approval."
					Else
						If DateDiff("d", HC_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND HC_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
							err_msg = err_msg & vbNewLine & "* The verification request date: " &  HC_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
							HC_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
						End If
					End If
				End If

				If err_msg <> "" and ButtonPressed < 1100 Then
					MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
					If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
				End If

				If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
				If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("HC", HC_UNIQUE_APPROVALS(process_for_note, approval_selected), HC_UNIQUE_APPROVALS(changes_for_note, approval_selected))
				missing_3050_date = False

				If err_msg = "" Then

					all_hc_approvals_confirmed = True
					hc_approval_is_incorrect = False
					date_of_3050 = trim(date_of_3050)

					If HC_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - approval is Accurate" Then
						HC_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
						HC_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
					ElseIf HC_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
						HC_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
						HC_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
					End If

					not_confirmed_pckg_list = ""
					first_unconfirmed_month = ""
					for each_app = 0 to UBound(HC_UNIQUE_APPROVALS, 2)
						If ButtonPressed = HC_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
						If HC_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
							all_hc_approvals_confirmed = False
							not_confirmed_pckg_list = not_confirmed_pckg_list & replace(HC_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
							If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
						End If
						If HC_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then hc_approval_is_incorrect = True
						If HC_UNIQUE_APPROVALS(approval_confirmed, each_app) = True and HC_UNIQUE_APPROVALS(l_budg, each_app) = True Then
							If date_of_3050 = "" Then
								missing_3050_date = True
							ElseIf IsDate(date_of_3050) = False Then
								missing_3050_date = True
							End If
						End If
					Next

					If ButtonPressed = -1 Then ButtonPressed = next_approval_btn

					If ButtonPressed = next_approval_btn Then
						approval_selected = approval_selected + 1
						If approval_selected > UBound(HC_UNIQUE_APPROVALS, 2) Then
							approval_selected = UBound(HC_UNIQUE_APPROVALS, 2)
							If all_hc_approvals_confirmed = True Then
								ButtonPressed = app_confirmed_btn
							End If
						End If
					End If
				End If


				If ButtonPressed = app_confirmed_btn and all_hc_approvals_confirmed = True Then move_from_dialog = True
				If hc_approval_is_incorrect = True and  ButtonPressed = app_confirmed_btn Then move_from_dialog = True
				If ButtonPressed = app_confirmed_btn and all_hc_approvals_confirmed = False and move_from_dialog = False Then
					MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
					approval_selected = first_unconfirmed_month
				End If
				If missing_3050_date = True and move_from_dialog = True Then
					MsgBox "*** Need Facility Communication Form Sent Date ***" & vbCr & vbCr & "This case is a Method L budget and approval information needs to be sent to the facility on the case with a L Budget." & vbCr & vbCr & "Send it now and enter the date of the 'Facility Communication Form Sent Date' field."
					move_from_dialog = False
				End If
			Loop until move_from_dialog = True
			Call check_for_password(are_we_passworded_out)
		Loop until are_we_passworded_out = False
		Call check_for_MAXIS(True)
		Call back_to_SELF

		If stop_ex_parte_checkbox = checked Then ex_parte_approval = False

		If hc_approval_is_incorrect = True Then
			enter_CNOTE_for_HC = False
			end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for HC Approvals from " & first_HC_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
		End if
	End If
End If

If cancel_out_of_hc = False Then
	If ex_parte_approval = True and wcom_exception <> "--" Then
		Dim memo_array()
		ReDim memo_array(0)
		memo_count = 0
		memo_ref_numb_string = " "
		month_ind = UBound(STAT_INFORMATION)

		For approval = 0 to UBound(HC_ELIG_APPROVALS)
			For member = 0 to UBOUND(HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs)
				If HC_ELIG_APPROVALS(approval).hc_prog_elig_eligibility_result(member) = "ELIGIBLE" and InStr(wcom_exception, HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)) <> 0 Then
					If InStr(memo_ref_numb_string, HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member)) = 0 Then
						memo_ref_numb_string = memo_ref_numb_string & HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) & " "
						ReDim preserve memo_array(memo_count)
						income_string = ""
						spenddown_type = ""
						spenddown_amount = ""

						For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)

							If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True Then
								income_info = STAT_INFORMATION(month_ind).stat_unea_one_type_info(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_unea_one_prosp_monthly_gross_income(each_memb) & "."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True Then
								income_info = STAT_INFORMATION(month_ind).stat_unea_two_type_info(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_unea_two_prosp_monthly_gross_income(each_memb) & "."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True Then
								income_info = STAT_INFORMATION(month_ind).stat_unea_three_type_info(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_unea_three_prosp_monthly_gross_income(each_memb) & "."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True Then
								income_info = STAT_INFORMATION(month_ind).stat_unea_four_type_info(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_unea_four_prosp_monthly_gross_income(each_memb) & "."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True Then
								income_info = STAT_INFORMATION(month_ind).stat_unea_five_type_info(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_unea_five_prosp_monthly_gross_income(each_memb) & "."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If


							If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then
								income_info = STAT_INFORMATION(month_ind).stat_jobs_one_employer_name(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_one_prosp_monthly_gross_wage(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_two_job_ended(each_memb) = False Then
								income_info = STAT_INFORMATION(month_ind).stat_jobs_two_employer_name(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_two_prosp_monthly_gross_wage(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_three_job_ended(each_memb) = False Then
								income_info = STAT_INFORMATION(month_ind).stat_jobs_three_employer_name(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_three_prosp_monthly_gross_wage(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_four_job_ended(each_memb) = False Then
								income_info = STAT_INFORMATION(month_ind).stat_jobs_four_employer_name(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_four_prosp_monthly_gross_wage(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_five_job_ended(each_memb) = False Then
								income_info = STAT_INFORMATION(month_ind).stat_jobs_five_employer_name(each_memb) & " - $ " & STAT_INFORMATION(month_ind).stat_jobs_five_prosp_monthly_gross_wage(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If

							If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True and STAT_INFORMATION(month_ind).stat_jobs_one_job_ended(each_memb) = False Then
								income_info = "Self-employment (" & STAT_INFORMATION(month_ind).stat_busi_one_type_info(each_memb) & ") - $ " & STAT_INFORMATION(month_ind).stat_busi_one_hc_b_prosp_net_inc(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True Then
								income_info = "Self-employment (" & STAT_INFORMATION(month_ind).stat_busi_two_type_info(each_memb) & ") - $ " & STAT_INFORMATION(month_ind).stat_busi_two_hc_b_prosp_net_inc(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
							If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True Then
								income_info = "Self-employment (" & STAT_INFORMATION(month_ind).stat_busi_three_type_info(each_memb) & ") - $ " & STAT_INFORMATION(month_ind).stat_busi_three_hc_b_prosp_net_inc(each_memb) & " monthly."
								If Instr(income_string, income_info) = 0 Then
									income_string = income_string & "~" & income_info
								End If
							End If
						Next

						If HC_ELIG_APPROVALS(approval).community_spenddown_exists(member) = True Then
							spenddown_type = "Spenddown"
							spenddown_amount = HC_ELIG_APPROVALS(approval).hc_prog_elig_monthly_spdn_recipient_amount(member)
						End If
						If HC_ELIG_APPROVALS(approval).EW_spenddown_exists(member) = True Then
							spenddown_type = "Waiver Obligation"
							spenddown_amount = HC_ELIG_APPROVALS(approval).hc_prog_elig_ew_spdn_obligation(member)
						End If
						If HC_ELIG_APPROVALS(approval).LTC_spenddown_exists(member) = True Then
							spenddown_type = "LTC Obligation"
							spenddown_amount = HC_ELIG_APPROVALS(approval).hc_prog_elig_ltc_spdn_amount(member)
						End If

						If left(income_string, 1) = "~" Then income_string = right(income_string, len(income_string)-1)

						memo_array(memo_count) = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) & "~&~&~" & HC_ELIG_APPROVALS(approval).hc_elig_full_name(member) & "~&~&~" & income_string & "~&~&~" & HC_ELIG_APPROVALS(approval).hc_prog_elig_hh_size(member) & "~&~&~" & spenddown_type & "~&~&~" & spenddown_amount & "~&~&~" & HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)

						'HC_ELIG_APPROVALS(approval).hc_elig_full_name(member)
						memo_count = memo_count + 1
					Else
						for each memo_to_send in memo_array
							If left(memo_to_send, 2) = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) Then
								memo_array(memo_count-1) = memo_array(memo_count-1) & "~" & HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member)
							End If
						next
					End If
				End If
			Next
		Next

		for each memo_to_send in memo_array
			this_memo_array = ""
			this_memo_array = split(memo_to_send, "~&~&~")

			memo_memb_ref = this_memo_array(0)
			memo_memb_name = this_memo_array(1)
			memo_income = this_memo_array(2)
			memo_hh_size = this_memo_array(3)
			spenddown_type = this_memo_array(4)
			spenddown_amount = this_memo_array(5)
			memo_hc_progs = this_memo_array(6)


			MSP_memo_success = True		'TODO - add a way to make sure the memo was created
			If memo_income <> "" Then
				temp_array = ""
				If InStr(memo_income, "~") <> 0 Then
					temp_array = split(memo_income, "~")
				Else
					temp_array = Array(memo_income)
				End If
			End If
			progs_temp_array = ""
			If InStr(memo_hc_progs, "~") <> 0 Then
				progs_temp_array = split(memo_hc_progs, "~")
			Else
				progs_temp_array = Array(memo_hc_progs)
			End If
			STATS_manualtime = STATS_manualtime + 120			'2 minutes to create a SPEC/MEMO and copy information into it if the notice failed from the E Parte approval

			'OneSource Policy: https://www.dhs.state.mn.us/main/idcplg?IdcService=GET_DYNAMIC_CONVERSION&RevisionSelectionMethod=LatestReleased&dDocName=ONESOURCE-16013
			Call start_a_new_spec_memo(memo_opened, True, forms_to_arep, forms_to_swkr, send_to_other, other_name, other_street, other_city, other_state, other_zip, True)  ' start the memo writing process

			Call write_variable_in_SPEC_MEMO(memo_memb_name & "'s health care coverage has been automatically renewed effective " & CM_plus_1_mo & "/01/" & CM_plus_1_yr & " for the following:")

			Call write_variable_in_SPEC_MEMO("")
			For i = 0 to Ubound(progs_temp_array)
				Call write_variable_in_SPEC_MEMO("  - " & progs_temp_array(i))
			Next

			Call write_variable_in_SPEC_MEMO("")
			If memo_income <> "" Then
				Call write_variable_in_SPEC_MEMO("You have been renewed because your income was able to be verified from electronic sources.")
				Call write_variable_in_SPEC_MEMO("")
				Call write_variable_in_SPEC_MEMO("---Counted Income (All Amounts are Per Month)---")
				For i = 0 to Ubound(temp_array)'MSP INCOME ARRAY
					Call write_variable_in_SPEC_MEMO("  * " & temp_array(i) & ".")
				Next
			Else
				Call write_variable_in_SPEC_MEMO("You have been renewed because you do not have income that is counted for determining health care benefits.")
			End If
				Call write_variable_in_SPEC_MEMO("")
			Call write_variable_in_SPEC_MEMO("Household size: " & memo_hh_size)

			'Input the spenddown information
			If spenddown_type <> "" Then
				Call write_variable_in_SPEC_MEMO("Your " & spenddown_type & " is $ " & spenddown_amount & " monthly, which you are responsible to pay before the state will pay. This portion of your medical bills will not be paid by the state. You will receive an Explanation of Medical Benefits to tell you what bills to pay.")
				testing_run = True
			End If

			Call write_variable_in_SPEC_MEMO("")
			Call write_variable_in_SPEC_MEMO("(42 CFR 435.916, MN Statutes 256B.056 & 256B.057)")
			Call write_variable_in_SPEC_MEMO("")
			Call write_variable_in_SPEC_MEMO("If any information on this notice is wrong, please contact the county at the phone number listed on the notice.")
			Call write_variable_in_SPEC_MEMO("Visit www.mn.gov/dhs/abdautorenew for more information about your automatic renewal.")
			PF4 'Exits the MEMO
		next
	End If
End If

If enter_CNOTE_for_EMER = True Then
	confirm_emer_budget_selection = ""
	emer_past_due_rent_checkbox = ""
	emer_new_housing_checkbox = ""
	emer_moving_exp_checkbox = ""
	emer_utility_checkbox = ""
	emer_bus_checkbox = ""
	emer_foreclosure_checkbox = ""
	emer_property_tax_checkbox = ""
	emer_home_repair_checkbox = ""
	emer_fire_replace_checkbox = ""
	emer_storage_checkbox = ""

	emer_ongoing_mothly_income = ""
	emer_ongoing_shelter_expense = ""
	emer_ongoing_utility_expense = ""
	emer_past_30_days_income = ""
	Dim emer_excel_account_number()
	emer_available_assets = ""
	emer_emer_resolve_notes = ""

	emer_test_coop_work_detail = ""
	emer_test_copayment_detail = ""
	emer_test_elig_other_prog_detail = ""
	emer_test_equitable_interest_detail = ""
	emer_test_date_residency_starte = ""
	emer_verif_request_date = ""
	emer_test_verif_detail = ""
	TEMP_bus_ticket_info = EMER_ELIG_APPROVAL.bus_ticket_detail
	If EMER_ELIG_APPROVAL.bus_ticket_approval = True Then emer_bus_checkbox = checked
	If EMER_ELIG_APPROVAL.emer_elig_case_test_verif = "FAILED" Then emer_test_verif_detail = verifs_in_case_note

	check_numb_ubound = UBound(EMER_ELIG_APPROVAL.emer_check_program)
	ReDim emer_excel_account_number(check_numb_ubound)

	'Identifies if the approval amount in ELIG/EMER is different from the total of MONY/CHCKs issued.
	'We are prioritizing the amount in MONY/CHCK as that is the amount that will actually issue on the behalf of the resident.
	If EMER_ELIG_APPROVAL.emer_elig_summ_eligibility_result = "ELIGIBLE" and EMER_ELIG_APPROVAL.bus_ticket_approval = False Then
		total_payment = 0
		For each_chck = 0 to UBound(EMER_ELIG_APPROVAL.emer_check_program)
			If IsNumeric(EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck)) = True then
				chk_amt = EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck)*1
				total_payment = total_payment + chk_amt
			End If
		Next
		elig_pymt = EMER_ELIG_APPROVAL.emer_elig_summ_payment *1
		If elig_pymt <> total_payment Then
			'This functionality checks to see if the payment amount listed in EMER matches the total from the checks - if it does not, an email is sent.
			'Currently commented out as process analysis is on pause.
			' email_subject = "EMER Case with where EMER and CHCK do not match - Case: " & MAXIS_case_number
			' email_body = "The ELIG/EMER amount in the approval does not match the checks issued for Emergency."
			' email_body = email_body & vbCr & vbCr &"Worker: " & script_run_worker & " - " & windows_user_ID
			' email_body = email_body & vbCr & "Case Number: " & MAXIS_case_number
			' email_body = email_body & vbCr & "EMER Amount: " & EMER_ELIG_APPROVAL.emer_elig_summ_payment
			' For each_chck = 0 to UBound(EMER_ELIG_APPROVAL.emer_check_program)
			' 	If IsNumeric(EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck)) = True then
			' 		email_body = email_body & vbCr & "Check: $ " & EMER_ELIG_APPROVAL.emer_check_transaction_amount(each_chck) & " issued on " & EMER_ELIG_APPROVAL.emer_check_issue_date(each_chck)
			' 	End If
			' Next
			' email_body = email_body & vbCr & "EMER Eligible"
			' email_body = email_body & vbCr & ""
			' email_body = email_body & vbCr & "Email generated from the NOTES - Eligibility Summary Script, run at " & now

			' email_recip = "hsph.ews.bluezonescripts@hennepin.us"
			' email_recip_CC = ""
			' Call create_outlook_email("", email_recip, email_recip_CC, email_recip_bcc, email_subject, 1, False, "", "", False, "", email_body, False, "", True)

			EMER_ELIG_APPROVAL.emer_elig_summ_payment = total_payment

		End If
	End If
	If EMER_ELIG_APPROVAL.bus_ticket_approval = True Then
		EMER_ELIG_APPROVAL.emer_elig_summ_payment = EMER_ELIG_APPROVAL.emer_elig_summ_need_other
	End If
	STATS_manualtime = STATS_manualtime + 180		'3 minutes manuall time to review each budget package

	Do
		Do
			call define_emer_elig_dialog

			dialog Dialog1
			cancel_confirmation

			err_msg = ""

			If EMER_ELIG_APPROVAL.emer_elig_case_test_verif = "FAILED" and confirm_emer_budget_selection <> "No - do not CASE/NOTE this information" then
				If Isdate(emer_verif_request_date) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", emer_verif_request_date, date) < 10 AND confirm_emer_budget_selection = "Yes - budget is Accurate" Then
						err_msg = err_msg & vbNewLine & "* The verification request date: " &  emer_verif_request_date & " is less than 10 days ago and we should not be taking action yet."
						confirm_emer_budget_selection = "No - do not CASE/NOTE this information"
					End If
				End If
			End If

			If err_msg <> "" and ButtonPressed < 1100 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg

			End If

			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/EMER has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if EA/EGA should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(EMER_ELIG_APPROVAL.elig_footer_month, 2)
				ft_yr = right(EMER_ELIG_APPROVAL.elig_footer_year, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "EMER")
				EMWriteScreen ft_mo, 20, 55
				EMWriteScreen ft_yr, 20, 58
				Call find_last_approved_ELIG_version(20, 79, vrs_numb, vrs_dt, vrs_rslt, approval_found)
				err_msg = "LOOP"
			End If

			If confirm_emer_budget_selection = "Indicate if the Budget is Accurate"and ButtonPressed < 1100 Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review the approval details and indicate if they are correct before the scrript can continue."
			End If

		Loop until confirm_emer_budget_selection <> "Indicate if the Budget is Accurate" and err_msg = ""
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call check_for_MAXIS(True)
	Call back_to_SELF

	EMER_ELIG_APPROVAL.bus_ticket_detail = TEMP_bus_ticket_info

	emergecny_to_resolve_details = False
	affordability_details = False
	income_limit_details = False

	If emer_past_due_rent_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_new_housing_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_moving_exp_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_utility_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_bus_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_foreclosure_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_property_tax_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_home_repair_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_fire_replace_checkbox = checked Then emergecny_to_resolve_details = True
	If emer_storage_checkbox = checked Then emergecny_to_resolve_details = True
	If trim(emer_available_assets) <> "" Then emergecny_to_resolve_details = True
	If trim(emer_emer_resolve_notes) <> "" Then emergecny_to_resolve_details = True

	If trim(emer_ongoing_mothly_income) <> "" Then affordability_details = True
	If trim(emer_ongoing_shelter_expense) <> "" Then affordability_details = True
	If trim(emer_ongoing_utility_expense) <> "" Then affordability_details = True

	If trim(emer_past_30_days_income) <> "" Then income_limit_details = True

	If confirm_emer_budget_selection = "No - do not CASE/NOTE this information" Then
		enter_CNOTE_for_EMER = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for EMER Approvals as the approval appears incorrect and needs to be updated and ReApproved." & vbCr
	End if
End If

'Determining SNAP unique approvals
If enter_CNOTE_for_SNAP = True Then												'This means at least one approval from today was found
	last_earned_income = ""														'we will use these variables to compare each month of approval to see if there are changes and determine if a new package should be started.'
	last_unearned_income = ""
	last_shelter_expense = ""
	last_hest_expense = ""
	last_snap_entitlement = ""
	last_expedited_status = ""
	last_info_source = ""
	expedited_package_approved = False
	start_capturing_approvals = False
	unique_app_count = 0
	For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
		If SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year = first_SNAP_approval Then start_capturing_approvals = True
		If start_capturing_approvals = True Then
			If unique_app_count = 0 Then
				ReDim preserve SNAP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

				SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year
				SNAP_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year
				SNAP_UNIQUE_APPROVALS(btn_one, unique_app_count) = 500 + unique_app_count
				SNAP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
				SNAP_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
				SNAP_UNIQUE_APPROVALS(package_is_expedited_const, unique_app_count) = SNAP_ELIG_APPROVALS(approval).snap_expedited
				SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
				last_earned_income = SNAP_ELIG_APPROVALS(approval).snap_budg_total_earned_inc
				last_unearned_income = SNAP_ELIG_APPROVALS(approval).snap_budg_total_unea_inc
				last_shelter_expense = SNAP_ELIG_APPROVALS(approval).snap_budg_shel_rent_mort + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_prop_tax + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_home_ins + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_other
				last_hest_expense = SNAP_ELIG_APPROVALS(approval).snap_budg_shel_electricity + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_heat_ac + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_phone
				last_eligibility = SNAP_ELIG_APPROVALS(approval).snap_elig_result
				last_snap_entitlement = SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot
				last_expedited_status = SNAP_ELIG_APPROVALS(approval).snap_expedited
				last_info_source = SNAP_ELIG_APPROVALS(approval).snap_info_source

				If SNAP_ELIG_APPROVALS(approval).snap_expedited = True Then expedited_package_approved = True

				unique_app_count = unique_app_count + 1
			Else
				match_last_benefit_amounts = True

				If last_earned_income <> SNAP_ELIG_APPROVALS(approval).snap_budg_total_earned_inc Then match_last_benefit_amounts = False
				If last_unearned_income <> SNAP_ELIG_APPROVALS(approval).snap_budg_total_unea_inc Then match_last_benefit_amounts = False
				If last_shelter_expense <> SNAP_ELIG_APPROVALS(approval).snap_budg_shel_rent_mort + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_prop_tax + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_home_ins + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_other Then match_last_benefit_amounts = False
				If last_hest_expense <> SNAP_ELIG_APPROVALS(approval).snap_budg_shel_electricity + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_heat_ac + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_phone Then match_last_benefit_amounts = False
				If last_eligibility <> SNAP_ELIG_APPROVALS(approval).snap_elig_result Then match_last_benefit_amounts = False
				If last_snap_entitlement <> SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot Then match_last_benefit_amounts = False
				If last_expedited_status <> SNAP_ELIG_APPROVALS(approval).snap_expedited Then match_last_benefit_amounts = False
				If last_info_source <> SNAP_ELIG_APPROVALS(approval).snap_info_source Then match_last_benefit_amounts = False

				If match_last_benefit_amounts = True Then
					SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) = SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app_count-1) & "~" & SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year
					SNAP_UNIQUE_APPROVALS(last_mo_const, unique_app_count-1) = SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year
				End If

				If match_last_benefit_amounts = False Then
					ReDim preserve SNAP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count)

					SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app_count) = SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year
					SNAP_UNIQUE_APPROVALS(first_mo_const, unique_app_count) = SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year
					SNAP_UNIQUE_APPROVALS(btn_one, unique_app_count) = 500 + unique_app_count
					SNAP_UNIQUE_APPROVALS(approval_confirmed, unique_app_count) = False
					SNAP_UNIQUE_APPROVALS(approval_incorrect, unique_app_count) = False
					SNAP_UNIQUE_APPROVALS(package_is_expedited_const, unique_app_count) = SNAP_ELIG_APPROVALS(approval).snap_expedited
					SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, unique_app_count) = True
					last_earned_income = SNAP_ELIG_APPROVALS(approval).snap_budg_total_earned_inc
					last_unearned_income = SNAP_ELIG_APPROVALS(approval).snap_budg_total_unea_inc
					last_shelter_expense = SNAP_ELIG_APPROVALS(approval).snap_budg_shel_rent_mort + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_prop_tax + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_home_ins + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_other
					last_hest_expense = SNAP_ELIG_APPROVALS(approval).snap_budg_shel_electricity + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_heat_ac + SNAP_ELIG_APPROVALS(approval).snap_budg_shel_phone
					last_eligibility = SNAP_ELIG_APPROVALS(approval).snap_elig_result
					last_snap_entitlement = SNAP_ELIG_APPROVALS(approval).snap_benefit_monthly_fs_allot
					last_expedited_status = SNAP_ELIG_APPROVALS(approval).snap_expedited
					last_info_source = SNAP_ELIG_APPROVALS(approval).snap_info_source

					If SNAP_ELIG_APPROVALS(approval).snap_expedited = True Then expedited_package_approved = True

					unique_app_count = unique_app_count + 1
				End If
			End If
		End If
	Next

	If UBound(SNAP_UNIQUE_APPROVALS, 2) <> 0 Then
		Dialog1 = ""
		BeginDialog Dialog1, 0, 0, 241, 215, UBound(SNAP_UNIQUE_APPROVALS, 2)+1 & " SNAP Approval Packages to be Reviewed"
		  GroupBox 5, 10, 145, 40, "REVIEW ALL APPROVAL PACKAGES"
		  Text 15, 25, 130, 20, "Each approval package will need to be revieswed and confirmed seperately."
		  Text 10, 55, 95, 10, "For the case: " & MAXIS_case_number
		  Text 10, 70, 150, 10, "The script found approvals for " & SNAP_UNIQUE_APPROVALS(first_mo_const, 0) & " - " & CM_plus_1_mo & "/" & CM_plus_1_yr
		  Text 10, 85, 150, 20, "The script has found Eligibility Results that were created and approved today for SNAP."
		  Text 10, 110, 145, 35, "The details of eligiblity are not the same for every month in the approvals. The script has grouped the months into approval packages based on the eligibilty details. "

		  Text 5, 150, 230, 45, "The next dialog will display the details of the approval, you can switch between the approval packages in the buttons on the right. The layout may look similar but review the information, it will be different between each package. Confirm the approvals in the Drop List Selection at the bottom of the dialog."
		  Text 160, 10, 80, 10, UBound(SNAP_UNIQUE_APPROVALS, 2)+1 & " Approval Packages"
		  y_pos = 25
		  For approval = 0 to UBound(SNAP_UNIQUE_APPROVALS, 2)
		  	If SNAP_UNIQUE_APPROVALS(last_mo_const, approval) <> "" Then Text 185, y_pos, 50, 10, SNAP_UNIQUE_APPROVALS(first_mo_const, approval) & " - " & SNAP_UNIQUE_APPROVALS(last_mo_const, approval)
		  	If SNAP_UNIQUE_APPROVALS(last_mo_const, approval) = "" Then Text 185, y_pos, 50, 10, SNAP_UNIQUE_APPROVALS(first_mo_const, approval)
		  	y_pos = y_pos +10
		  Next
		  ButtonGroup ButtonPressed
		    OkButton 135, 195, 100, 15
		EndDialog

		dialog Dialog1
	End If

	all_snap_approvals_confirmed = False
	approval_selected = 0
	STATS_manualtime = STATS_manualtime + (UBound(SNAP_UNIQUE_APPROVALS, 2)+1)*180		'3 minutes manuall time to review each budget package

	Do
		Do
			first_month = left(SNAP_UNIQUE_APPROVALS(months_in_approval, approval_selected), 5)
			elig_ind = ""
			month_ind = ""
			For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
				If SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
			Next
			For each_month = 0 to UBound(STAT_INFORMATION)
				If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
			Next

			If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "INELIGIBLE" Then
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_appl_withdrawn_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_applct_elig_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_comdty_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_disq_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_dupl_assist_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_eligible_person_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_coop_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_file_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False

				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_recert_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_residence_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_resource_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_strike_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_xfer_resource_inc_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_voltry_quit_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_work_reg_test = "FAILED" Then SNAP_UNIQUE_APPROVALS(include_budget_in_note_const, approval_selected) = False
			End If

			Call determine_130_percent_of_FPG(left(first_month, 2), right(first_month, 2), SNAP_ELIG_APPROVALS(elig_ind).snap_budg_numb_in_assist_unit, SNAP_UNIQUE_APPROVALS(snap_130_percent_fpg_amt, approval_selected))
			SNAP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = False
			SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_needed, approval_selected) = False
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_PACT = "FAILED" then SNAP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True

			If IsNumeric(SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_gross_inc) = True and IsNumeric(SNAP_UNIQUE_APPROVALS(snap_130_percent_fpg_amt, approval_selected)) = True Then
				grs_inc = SNAP_ELIG_APPROVALS(elig_ind).snap_budg_total_gross_inc*1
				max_130_inc = SNAP_UNIQUE_APPROVALS(snap_130_percent_fpg_amt, approval_selected)*1
				If grs_inc > max_130_inc AND SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_needed, approval_selected) = True
			End If
			SNAP_UNIQUE_APPROVALS(pact_wcom_sent, approval_selected) = False
			SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_sent, approval_selected) = False

			SNAP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = False
			If SNAP_UNIQUE_APPROVALS(pact_wcom_needed, approval_selected) = True Then SNAP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = True
			If SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_needed, approval_selected) = True Then SNAP_UNIQUE_APPROVALS(wcom_needed, approval_selected) = True

			ei_count = 0
			unea_count = 0
			For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
			  If STAT_INFORMATION(month_ind).stat_jobs_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_one_job_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_two_job_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_three_job_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_four_job_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_jobs_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_jobs_five_job_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_one_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_two_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1
			  If STAT_INFORMATION(month_ind).stat_busi_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_busi_three_counted_for_snap(each_memb) = True Then ei_count = ei_count + 1

			  If STAT_INFORMATION(month_ind).stat_unea_one_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_one_counted_for_snap(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_one_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_two_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_two_counted_for_snap(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_two_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_three_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_three_counted_for_snap(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_three_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_four_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_four_counted_for_snap(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_four_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If STAT_INFORMATION(month_ind).stat_unea_five_exists(each_memb) = True AND STAT_INFORMATION(month_ind).stat_unea_five_counted_for_snap(each_memb) = True Then
				  unea_count = unea_count + 1
				  If STAT_INFORMATION(month_ind).stat_unea_five_verif_code(each_memb) = "N" Then unea_count = unea_count + 1
			  End If
			  If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_pa_grant_inc <> "" Then unea_count = unea_count + 1
			Next
			ei_len = ei_count * 20
			unea_len = unea_count * 10
			income_box_len = 30 + unea_len
			If ei_len > unea_len Then income_box_len = 30 + ei_len

			call define_snap_elig_dialog

			dialog Dialog1
			cancel_confirmation

			err_msg = ""
			move_from_dialog = False

			SNAP_UNIQUE_APPROVALS(fiat_reason, approval_selected) = trim(SNAP_UNIQUE_APPROVALS(fiat_reason, approval_selected))
			SNAP_UNIQUE_APPROVALS(proration_reason, approval_selected) = trim(SNAP_UNIQUE_APPROVALS(proration_reason, approval_selected))
			If right(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected), 1) = "." Then SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected) = left(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected), len(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected))- 1)
			If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test = "FAILED" and SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If Isdate(SNAP_UNIQUE_APPROVALS(verif_request_date, approval_selected)) = False Then
					err_msg = err_msg & vbNewLine & "* Enter the date the verification request form sent from ECF to detail information about missing verifications for an Ineligible SNAP approval."
				Else
					If DateDiff("d", SNAP_UNIQUE_APPROVALS(verif_request_date, approval_selected), date) < 10 AND SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
						If expedited_package_approved = False and SNAP_ELIG_APPROVALS(elig_ind).snap_case_fail_file_test <> "FAILED" Then
							err_msg = err_msg & vbNewLine & "* The verification request date: " &  SNAP_UNIQUE_APPROVALS(verif_request_date, approval_selected) & " is less than 10 days ago and we should not be taking action yet."
							SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information"
						End If
					End If
				End If
				If SNAP_ELIG_APPROVALS(elig_ind).snap_case_verif_test_PACT = "FAILED" then
					If trim(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" Then
						err_msg = err_msg & vbNewLine & "* Since PACT was used to approve this SNAP benefit as ineligible, list the reasons for ineligibility."
					ElseIf len(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 30 Then
						err_msg = err_msg & vbNewLine & "* SNAP ineligibility due to PACT requires sufficient explaination, expand upon the information entered in the Reason for Ineligibility field."
					End If
					If trim(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) = "" or len(SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, approval_selected)) < 15 Then err_msg = err_msg & vbNewLine & " *** This information will be entered in a WCOM and should be writen without appreviations and in full detail."
				End if
			End if
			If SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) <> "No - do not CASE/NOTE this information" then
				If SNAP_ELIG_APPROVALS(elig_ind).snap_info_source = "FIAT" Then
					If SNAP_UNIQUE_APPROVALS(fiat_reason, approval_selected) = "" Then
						err_msg = err_msg & vbNewLine & "* Since the approval for SNAP in " & SNAP_UNIQUE_APPROVALS(first_mo_const, approval_selected) & "-" & SNAP_UNIQUE_APPROVALS(last_mo_const, approval_selected)  & " was FIATed, an explanation of why the FIAT was completed is needed."
					End If
				End If
			End If

			If err_msg <> "" and ButtonPressed < 1100 Then
				MsgBox "*** INFORMATION IN SCRIPT DIALOG INCOMPLETE ***" & vbNewLine & "Please resolve to continue:" & vbNewLine & err_msg
				If ButtonPressed = app_confirmed_btn Then ButtonPressed = -1
			End If

			If ButtonPressed = nav_stat_elig_btn Then
				ft_mo = left(first_month, 2)
				ft_yr = right(first_month, 2)
				Call back_to_SELF
				call navigate_to_MAXIS_screen("ELIG", "FS  ")
				EMWriteScreen ft_mo, 19, 54
				EMWriteScreen ft_yr, 19, 57
				Call find_last_approved_ELIG_version(19, 78, vrs_numb, vrs_dt, vrs_rslt, approval_found)
			End If

			If ButtonPressed = deductions_detail_btn then Call display_snap_deductions_dialog
			If ButtonPressed = shel_exp_detail_btn then Call display_snap_shelter_expenses
			If ButtonPressed = unique_approval_explain_btn then Call display_approval_packages_dialog
			If ButtonPressed = explain_why_we_are_processing_btn Then Call detail_action_that_led_to_approval("SNAP", SNAP_UNIQUE_APPROVALS(process_for_note, approval_selected), SNAP_UNIQUE_APPROVALS(changes_for_note, approval_selected))
			If ButtonPressed = verif_tips_and_tricks_btn Then
				verifs_tips_and_tricks = MsgBox("Information about Verifications request are mandaotry." & vbCr & vbCr & "This is because ELIG/FS has Verifications FAILED." & vbCr & vbCr & "It does not matter if there were other reasons for the ineligibile results, if verifications are failed it needs to be addressed." & vbCr & vbCr & "If verifications have not been requested or 10 days have not passed, the eligibility results should not be failed for Verification. You can review the SPEC/MEMO to see that verifications are included in the ineligibility details." & vbCr & vbCr & "Include verifications detail or if SNAP should not be ineligibile for verifications, reapprove the case with correct information.", vbExclamation, "Verifications Requested Information")
			End If

			If err_msg = "" Then

				all_snap_approvals_confirmed = True
				snap_approval_is_incorrect = False

				If SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "Yes - budget is Accurate" Then
					SNAP_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = True
					SNAP_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = False
				ElseIf SNAP_UNIQUE_APPROVALS(confirm_budget_selection, approval_selected) = "No - do not CASE/NOTE this information" Then
					SNAP_UNIQUE_APPROVALS(approval_confirmed, approval_selected) = False
					SNAP_UNIQUE_APPROVALS(approval_incorrect, approval_selected) = True
				End If

				not_confirmed_pckg_list = ""
				first_unconfirmed_month = ""
				for each_app = 0 to UBound(SNAP_UNIQUE_APPROVALS, 2)
					If ButtonPressed = SNAP_UNIQUE_APPROVALS(btn_one, each_app) Then approval_selected = each_app
					If SNAP_UNIQUE_APPROVALS(approval_confirmed, each_app) = False Then
						all_snap_approvals_confirmed = False
						not_confirmed_pckg_list = not_confirmed_pckg_list & replace(SNAP_UNIQUE_APPROVALS(months_in_approval, each_app), "~", " - ") & vbCr
						If first_unconfirmed_month = "" Then first_unconfirmed_month = each_app
					End If
					If SNAP_UNIQUE_APPROVALS(approval_incorrect, each_app) = True Then snap_approval_is_incorrect = True
				Next

				If ButtonPressed = -1 Then
					If approval_selected = UBound(SNAP_UNIQUE_APPROVALS, 2) Then
						ButtonPressed = app_confirmed_btn
					ElseIf snap_approval_is_incorrect = True Then
						ButtonPressed = app_incorrect_btn
					Else
						ButtonPressed = next_approval_btn
					End If
				End If

				If ButtonPressed = next_approval_btn Then
					approval_selected = approval_selected + 1
					If approval_selected > UBound(SNAP_UNIQUE_APPROVALS, 2) Then
						If all_snap_approvals_confirmed = True Then
							ButtonPressed = app_confirmed_btn
						Else
							approval_selected = UBound(SNAP_UNIQUE_APPROVALS, 2)
						End If
					End If
				End If
			End If
			If ButtonPressed = app_confirmed_btn and all_snap_approvals_confirmed = True Then move_from_dialog = True
			If snap_approval_is_incorrect = True and  ButtonPressed = app_incorrect_btn Then move_from_dialog = True
			If ButtonPressed = app_confirmed_btn and all_snap_approvals_confirmed = False Then
				MsgBox "*** All Approval Packages need to be Confirmed ****" & vbCr & vbCr & "Please review all the approval packages and indicate if they are correct before the scrript can continue." & vbCr & vbCr & "Review the following approval package(s)" & vbCr & not_confirmed_pckg_list
				approval_selected = first_unconfirmed_month
			End If
		Loop until move_from_dialog = True
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call check_for_MAXIS(True)
	Call back_to_SELF

	If snap_approval_is_incorrect = True Then
		enter_CNOTE_for_SNAP = False
		end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for SNAP Approvals from " & first_SNAP_approval & " onward." & vbCr & " - If the approval is incorrect, update an ReApprove with correct eligibility. Run the script again after the new approval is completed." & vbCr
	End if
End If

'NOW WE START ENTERING CASE/NOTE
If enter_CNOTE_for_DWP = True Then
	For unique_app = 0 to UBound(DWP_UNIQUE_APPROVALS, 2)
		first_month = left(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		one_month_is_elig = False
		For approval = 0 to UBound(DWP_ELIG_APPROVALS)
			If DWP_ELIG_APPROVALS(approval).elig_footer_month & "/" & DWP_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		month_ind = ""
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- DWP"
		header_end = ""
		If len(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app)) = 5 Then one_month_is_elig = True

		If DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				header_end = " - Ongoing"
			ElseIf len(DWP_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			elig_info = "ELIGIBLE"
		ElseIf DWP_ELIG_APPROVALS(elig_ind).dwp_autoclosed_for_time_limit = True or DWP_ELIG_APPROVALS(elig_ind).dwp_elig_case_test_four_month_limit = "FAILED" Then
			DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "INELIGIBLE"
			elig_info = "TIME LIMIT REACHED - Closed"
		ElseIf DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "SUSPENDED" Then
			elig_info = "SUSPENDED"
		ElseIf DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"
			If dwp_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			If dwp_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			If dwp_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
		End If
		due_date = ""
		If IsDate(DWP_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, DWP_UNIQUE_APPROVALS(verif_request_date, unique_app))
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		'TODO - add DWP WCOMS?

		Call dwp_elig_case_note

		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE" & vbCr & DWP_ELIG_APPROVALS(elig_ind).dwp_case_eligibility_result		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3
	Next
End If

If enter_CNOTE_for_MFIP = True Then
	For unique_app = 0 to UBound(MFIP_UNIQUE_APPROVALS, 2)
		first_month = left(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		one_month_is_elig = False
		For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
			If MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		month_ind = ""
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- MFIP"
		header_end = ""
		If MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				header_end = " - Ongoing"
			ElseIf len(MFIP_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			elig_info = "ELIGIBLE"
			one_month_is_elig = True
		ElseIf MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "SUSPENDED" Then
			elig_info = "SUSPENDED"
		ElseIf MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"
			If mfip_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			If mfip_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			If mfip_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
		End If
		due_date = ""
		If IsDate(MFIP_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, MFIP_UNIQUE_APPROVALS(verif_request_date, unique_app))

		'This is the WCOM part
		If MFIP_UNIQUE_APPROVALS(wcom_needed, unique_app) = True Then
			ft_mo = left(first_month, 2)
			ft_yr = right(first_month, 2)

			Call navigate_to_MAXIS_screen("SPEC", "WCOM")
			EMWriteScreen ft_mo, 03, 46
			EMWriteScreen ft_yr, 03, 51
			transmit

			wcom_row = 7
			Do
				EMReadScreen notc_date, 8, wcom_row, 16
				EMReadScreen notc_type, 2, wcom_row, 26
				EMReadScreen notc_description, 30, wcom_row, 30
				EMReadScreen notc_print_status, 8, wcom_row, 71

				If notc_date <> "        " Then
					notc_date = DateAdd("d", 0, notc_date)
					notc_description = trim(notc_description)
					notc_print_status = trim(notc_print_status)
					If DateDiff("d", date, notc_date) = 0 AND notc_type = "MF" AND notc_description = "ELIG Approval Notice" AND notc_print_status = "Waiting" Then
						Call write_value_and_transmit("X", wcom_row, 13)

						PF9
						EMReadScreen wcom_line, 60, 3, 17
						If trim(wcom_line) = "" Then

							If MFIP_UNIQUE_APPROVALS(pact_wcom_needed, unique_app) = True Then
								If right(elig_info, 6) = "Denied" Then
									' 60_days_from_app = ""
									' If IsDate(STAT_INFORMATION(month_ind).stat_prog_snap_appl_date) = True Then 60_days_from_app = DateAdd("d", 60, STAT_INFORMATION(month_ind).stat_prog_snap_appl_date)
									' "Your SNAP application has been denied because you did not provide: " & SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ".  This proof was needed by " & due_date & ".  If you need assistance getting this proof please contact us at the number listed on this notice by " & 60_days_from_app"." ''(This date will be 60 days after the application date).
									CALL write_variable_in_SPEC_MEMO("Your MFIP application has been denied because you did not provide: " & MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ".  This proof was needed by " & due_date & ".  If you need assistance getting this proof please contact us at the number listed on this notice by " & DateAdd("d", 30, date) & ".") ''(This date will be 30 days from today).
								End If

								If right(elig_info, 6) = "Closed" Then
									first_of_closure = ft_mo & "/1/" & ft_yr
									first_of_closure = DateAdd("d", 0, first_of_closure)
									end_of_closure_mo = DateAdd("m", 1, first_of_closure)
									end_of_closure_mo = DateAdd("d", -1, end_of_closure_mo)
									CALL write_variable_in_SPEC_MEMO("Your MFIP case will close because you did not provide: " & MFIP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ".  This proof was needed by " & due_date & ".  If you need assistance getting this proof please contact us at the number listed on this notice by " & end_of_closure_mo & ".")  ''(Enter the last day of the month prior to the effective date of the closing)"
								End If
								MFIP_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True
							End if

							PF4
							PF3
						End If
						Exit Do
					End If
				End if
				wcom_row = wcom_row + 1
			Loop until notc_date = "        "
			Call back_to_SELF
		End If
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		Call mfip_elig_case_note

		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE" & vbCr & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3
	Next
End If

If special_diet_check_exists = True Then
	For info_month = 0 to UBound(SPECIAL_PROCESSES_BY_MONTH, 2)
		month_select = ""
		memb_select = ""
		If SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_const, info_month) = True and SPECIAL_PROCESSES_BY_MONTH(MFIP_special_diet_confirm, info_month) = True Then
			elig_select = SPECIAL_PROCESSES_BY_MONTH(MF_elig_index, info_month)
			for stat_month = 0 to UBound(STAT_INFORMATION)
				If SPECIAL_PROCESSES_BY_MONTH(MX_foot_mo_const, info_month)  = STAT_INFORMATION(stat_month).footer_month and SPECIAL_PROCESSES_BY_MONTH(MX_foot_yr_const, info_month) = STAT_INFORMATION(stat_month).footer_year Then month_select = stat_month
			next

			STATS_manualtime = STATS_manualtime + 90			'1.5 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

			Call mfip_special_diet_case_note

			If developer_mode = True Then
				MsgBox "STOP HERE AND DELETE THE NOTE" & vbCr & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result		'TESTING OPTION'
				PF10
				Msgbox "You forgot - but the NOTE is gone"
			End If
			PF3
		End If
	Next
End If

if enter_CNOTE_for_MSA = True Then
	For unique_app = 0 to UBound(MSA_UNIQUE_APPROVALS, 2)
		first_month = left(MSA_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(MSA_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(MSA_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		one_month_is_elig = False
		For approval = 0 to UBound(MSA_ELIG_APPROVALS)
			If MSA_ELIG_APPROVALS(approval).elig_footer_month & "/" & MSA_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		month_ind = ""
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- MSA"
		header_end = ""
		If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				header_end = " - Ongoing"
			ElseIf len(MSA_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			If MSA_UNIQUE_APPROVALS(package_is_expedited_const, unique_app) = True Then program_detail = "- EXPEDITED SNAP"
			elig_info = "ELIGIBLE"
			one_month_is_elig = True
		ElseIf MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"
			If msa_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			If msa_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			If msa_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
		End If
		due_date = ""
		If IsDate(MSA_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, MSA_UNIQUE_APPROVALS(verif_request_date, unique_app))
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		'Here we entere the CASENOTE
		Call msa_elig_case_note
		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3

		If QCR_MSA_Shelter_Needy = True Then
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
				For each_spec = 0 to UBound(MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_code)
					If MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_type_code(each_spec) = "SN" Then
						QCR_MSA_Shelter_Needy_Found = True
						If InStr(QCR_MSA_Shelter_Needy_Amount, MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_ref_numb(each_spec)) = 0 Then
							QCR_MSA_Shelter_Needy_Amount = QCR_MSA_Shelter_Needy_Amount & "MEMB " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_ref_numb(each_spec) & " $ " & MSA_ELIG_APPROVALS(elig_ind).msa_elig_budg_spec_standard_amount(each_spec)
						End If
					End If
				Next
			End If
		End If

		If QCR_MSA_SSI_Ended = True	Then
			If MSA_ELIG_APPROVALS(elig_ind).msa_elig_summ_eligibility_result = "ELIGIBLE" Then
				For msa_memb = 0 to UBound(MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs)
					unea_44_found = False
					For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
						If MSA_ELIG_APPROVALS(elig_ind).msa_elig_ref_numbs(msa_memb) = STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) Then
							If STAT_INFORMATION(month_ind).stat_unea_one_type_code(each_memb) = "44" Then unea_44_found = True
							If STAT_INFORMATION(month_ind).stat_unea_two_type_code(each_memb) = "44" Then unea_44_found = True
							If STAT_INFORMATION(month_ind).stat_unea_three_type_code(each_memb) = "44" Then unea_44_found = True
							If STAT_INFORMATION(month_ind).stat_unea_four_type_code(each_memb) = "44" Then unea_44_found = True
							If STAT_INFORMATION(month_ind).stat_unea_five_type_code(each_memb) = "44" Then unea_44_found = True
							If unea_44_found = True Then
								If InStr(QCR_MSA_SSI_Ended_String, STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)) = 0 Then
									QCR_MSA_SSI_Ended_String = QCR_MSA_SSI_Ended_String & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " "
								End If
							End If
						End If
					Next
				Next
			End If
		End If
	Next

	If QCR_MSA_Shelter_Needy_Amount <> "" Then
		If MX_region <> "TRAINING" Then
			'RECORD QCR Cookie here
			txt_file_name = "MSA_Shelter_Needy_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
			qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

			'CREATING THE TESTING REPORT
			With (CreateObject("Scripting.FileSystemObject"))
				'Creating an object for the stream of text which we'll use frequently
				Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

				objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
				objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
				objTextStream.WriteLine "RunDateTime^&*^&*" & now
				objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
				objTextStream.WriteLine "ELIGProgram^&*^&*MSA with Shelter Needy"
				objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & left(MSA_UNIQUE_APPROVALS(months_in_approval, 0), 5)
				objTextStream.WriteLine "ShelterNeedyAmount^&*^&*" & trim(QCR_MSA_Shelter_Needy_Amount)

				objTextStream.Close
			End With
		End If
	End If
	If QCR_MSA_SSI_Ended_String <> "" Then
		If MX_region <> "TRAINING" Then
			'RECORD QCR Cookie here
			txt_file_name = "MSA_UNEA_44_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
			qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

			'CREATING THE TESTING REPORT
			With (CreateObject("Scripting.FileSystemObject"))
				'Creating an object for the stream of text which we'll use frequently
				Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

				objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
				objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
				objTextStream.WriteLine "RunDateTime^&*^&*" & now
				objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
				objTextStream.WriteLine "ELIGProgram^&*^&*MSA with UNEA 44"
				objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & left(MSA_UNIQUE_APPROVALS(months_in_approval, 0), 5)
				objTextStream.WriteLine "UNEA44Membs^&*^&*MEMB " & replace(trim(QCR_MSA_SSI_Ended_String), " ", ", MEMB ")

				objTextStream.Close
			End With
		End If
	End If
End If

if enter_CNOTE_for_GA = True Then
	For unique_app = 0 to UBound(GA_UNIQUE_APPROVALS, 2)
		first_month = left(GA_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(GA_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(GA_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		one_month_is_elig = False
		For approval = 0 to UBound(GA_ELIG_APPROVALS)
			If GA_ELIG_APPROVALS(approval).elig_footer_month & "/" & GA_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		month_ind = ""
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- GA"
		header_end = ""
		If GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				header_end = " - Ongoing"
			ElseIf len(GA_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			If GA_UNIQUE_APPROVALS(package_is_expedited_const, unique_app) = True Then program_detail = "- EXPEDITED SNAP"
			elig_info = "ELIGIBLE"
			one_month_is_elig = True
		ElseIf GA_ELIG_APPROVALS(elig_ind).ga_elig_summ_eligibility_result = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"
			If ga_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			If ga_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			If ga_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
		End If
		due_date = ""
		If IsDate(GA_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, GA_UNIQUE_APPROVALS(verif_request_date, unique_app))
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		'Here we entere the CASENOTE
		Call ga_elig_case_note

		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3
	Next
End If

If enter_CNOTE_for_DENY = True Then
	For unique_app = 0 to UBound(DENY_UNIQUE_APPROVALS, 2)
		first_month = left(DENY_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(DENY_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(DENY_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		one_month_is_elig = False
		For approval = 0 to UBound(CASH_DENIAL_APPROVALS)
			If CASH_DENIAL_APPROVALS(approval).elig_footer_month & "/" & CASH_DENIAL_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		month_ind = ""
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next
		due_date = ""
		If IsDate(DENY_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, DENY_UNIQUE_APPROVALS(verif_request_date, unique_app))

		'This is the WCOM part
		If DENY_UNIQUE_APPROVALS(wcom_needed, unique_app) = True Then
			ft_mo = left(first_month, 2)
			ft_yr = right(first_month, 2)

			Call navigate_to_MAXIS_screen("SPEC", "WCOM")
			EMWriteScreen ft_mo, 03, 46
			EMWriteScreen ft_yr, 03, 51
			transmit

			wcom_row = 7
			Do
				EMReadScreen notc_date, 8, wcom_row, 16
				EMReadScreen notc_type, 2, wcom_row, 26
				EMReadScreen notc_description, 30, wcom_row, 30
				EMReadScreen notc_print_status, 8, wcom_row, 71

				If notc_date <> "        " Then
					notc_date = DateAdd("d", 0, notc_date)
					notc_description = trim(notc_description)
					notc_print_status = trim(notc_print_status)
					If DateDiff("d", date, notc_date) = 0 AND notc_type = "CA" AND notc_description = "ELIG Approval Notice" AND notc_print_status = "Waiting" Then
						Call write_value_and_transmit("X", wcom_row, 13)

						PF9
						EMReadScreen wcom_line, 60, 3, 17
						' MsgBox "~" & wcom_line & "~"
						If trim(wcom_line) = "" Then
							DENY_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True
							CALL write_variable_in_SPEC_MEMO("Explanation of CASH DENIALS:")
					  		If STAT_INFORMATION(month_ind).stat_pact_cash_one_code = "1" or STAT_INFORMATION(month_ind).stat_pact_cash_two_code = "1" Then
								CALL write_variable_in_SPEC_MEMO("All cash programs have been denied because you have withdrawn the request.")
								CALL write_variable_in_SPEC_MEMO("    You can reapply at any time if your situation changes or want to be reassessed.")
							Else
								CALL write_variable_in_SPEC_MEMO("RCA: Refugee Cash apply at your resettlement agency.")
								If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_dwp_reason_code = "01" and CASH_DENIAL_APPROVALS(elig_ind).deny_cash_mfip_reason_code = "01" Then
									CALL write_variable_in_SPEC_MEMO("DWP/MFIP: These are Family Cash programs.")
									CALL write_variable_in_SPEC_MEMO("    Requires an eligible child/pregnant person to be elig.")
								End If
								If CASH_DENIAL_APPROVALS(elig_ind).deny_cash_msa_reason_code = "01" and CASH_DENIAL_APPROVALS(elig_ind).deny_cash_ga_reason_code = "01" Then
									CALL write_variable_in_SPEC_MEMO("GA/MSA: These are Adult Cash programs.")
									CALL write_variable_in_SPEC_MEMO("    Available only for households without children.")
								End if
							End If

							If DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app) <> "" or DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app) <> "" or DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app) <> "" Then
								CALL write_variable_in_SPEC_MEMO("Reasons for Cash Denial:")
							End If

							If DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app) <> "" Then
								CALL write_variable_in_SPEC_MEMO(" - " & DENY_UNIQUE_APPROVALS(wcom_details_one, unique_app))
							End If
							If DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app) <> "" Then
								CALL write_variable_in_SPEC_MEMO(" - " & DENY_UNIQUE_APPROVALS(wcom_details_two, unique_app))
							End If
							If DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app) <> "" Then
								CALL write_variable_in_SPEC_MEMO(" - " & DENY_UNIQUE_APPROVALS(wcom_details_three, unique_app))
							End If

							PF4
							PF3
						End If
						Exit Do
					End If
				End if
				wcom_row = wcom_row + 1
			Loop until notc_date = "        "
			Call back_to_SELF
		End If
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		Call deny_elig_case_note

		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3
	Next
End if

If enter_CNOTE_for_GRH = True Then
	For unique_app = 0 to UBound(GRH_UNIQUE_APPROVALS, 2)
		first_month = left(GRH_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(GRH_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(GRH_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		month_ind = ""
		For approval = 0 to UBound(GRH_ELIG_APPROVALS)
			If GRH_ELIG_APPROVALS(approval).elig_footer_month & "/" & GRH_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- HS/GRH"
		header_end = ""
		If GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				header_end = " - Ongoing"
			ElseIf len(GRH_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			elig_info = "ELIGIBLE"
			one_month_is_elig = True
		ElseIf GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"
			If grh_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			If grh_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			If grh_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
		End If
		due_date = ""
		If IsDate(GRH_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, GRH_UNIQUE_APPROVALS(verif_request_date, unique_app))

		'This is the WCOM part
		If GRH_UNIQUE_APPROVALS(pact_wcom_needed, unique_app) = True Then GRH_UNIQUE_APPROVALS(wcom_needed, unique_app) = True
		If GRH_UNIQUE_APPROVALS(wcom_needed, unique_app) = True Then
			ft_mo = left(first_month, 2)
			ft_yr = right(first_month, 2)

			Call navigate_to_MAXIS_screen("SPEC", "WCOM")
			EMWriteScreen ft_mo, 03, 46
			EMWriteScreen ft_yr, 03, 51
			transmit

			wcom_row = 7
			Do
				EMReadScreen notc_date, 8, wcom_row, 16
				EMReadScreen notc_type, 2, wcom_row, 26
				EMReadScreen notc_description, 30, wcom_row, 30
				EMReadScreen notc_print_status, 8, wcom_row, 71

				If notc_date <> "        " Then
					notc_date = DateAdd("d", 0, notc_date)
					notc_description = trim(notc_description)
					notc_print_status = trim(notc_print_status)
					If DateDiff("d", date, notc_date) = 0 AND notc_type = "GR" AND notc_description = "ELIG Approval Notice" AND notc_print_status = "Waiting" Then
						Call write_value_and_transmit("X", wcom_row, 13)

						PF9
						EMReadScreen wcom_line, 60, 3, 17
						If trim(wcom_line) = "" Then


							If GRH_UNIQUE_APPROVALS(pact_wcom_needed, unique_app) = True Then
								If right(elig_info, 6) = "Denied" Then
									CALL write_variable_in_SPEC_MEMO("Your Housing Support application has been denied. Details:")
									CALL write_variable_in_SPEC_MEMO(GRH_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app))
									CALL write_variable_in_SPEC_MEMO("This was needed by " & due_date & ".")
								End If

								If right(elig_info, 6) = "Closed" Then
									first_of_closure = ft_mo & "/1/" & ft_yr
									first_of_closure = DateAdd("d", 0, first_of_closure)
									end_of_elig_mo = DateAdd("d", -1, first_of_closure)
									CALL write_variable_in_SPEC_MEMO("Your Housing Support case will close. Details:")
									CALL write_variable_in_SPEC_MEMO(GRH_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app))
									'TODO - figure out if the date to reinstate is the end of the month of eligibility or the end of the month of closure (closed eff April, is it 3/31 or 4/30)
									CALL write_variable_in_SPEC_MEMO("This was needed by " & due_date & ".")
									' CALL write_variable_in_SPEC_MEMO("This was needed by " & due_date & ". If you resolve this before " & end_of_elig_mo & " your case can be reevaluated.")  ''(Enter the last day of the month prior to the effective date of the closing)"
								End If
								GRH_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True
							End if

							If GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_needed, unique_app) = True Then
								If GRH_UNIQUE_APPROVALS(pact_wcom_needed, unique_app) = True Then CALL write_variable_in_SPEC_MEMO("---")
								CALL write_variable_in_SPEC_MEMO("You are eligible to receive a supportive housing disregard because you have unearned income and living in a community-based supportive housing location.")
								CALL write_variable_in_SPEC_MEMO("Disregard amount $ " & GRH_ELIG_APPROVALS(elig_ind).grh_elig_supp_hsg_disregard)
								GRH_UNIQUE_APPROVALS(grh_supp_hsg_disrgd_wcom_sent, unique_app) = True
							End If
							PF4
							PF3
						End If
						Exit Do
					End If
				End if
				wcom_row = wcom_row + 1
			Loop until notc_date = "        "
			Call back_to_SELF
		End If
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		Call grh_elig_case_note

		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE" & vbCr & GRH_ELIG_APPROVALS(elig_ind).grh_elig_eligibility_result		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3
	Next
End If

If cancel_out_of_hc = False Then
	If complete_ex_parte_as_closed = True Then
		sql_review_date = CM_plus_1_mo & "/1/" & CM_plus_1_yr			'This sets a date as the review date to compare it to information in the data list and make sure it's a date
		sql_review_date = DateAdd("d", 0, sql_review_date)
		'sql_review_date
		If developer_mode = True Then
			MsgBox "This is where the SQL update would happen" & vbCr & vbCr & "appears_ex_parte - Closed HC" & vbCr& "user_ID_for_validation - " & user_ID_for_validation
		Else
			end_msg_info = end_msg_info & vbCr & "*** THIS IS AN EX PARTE CASE ***" & vbCr & vbCr & "The data table has been updated to complete the Phase 2 steps so this case does not get reassigned." & vbCr & vbCr

			sql_format_ex_parte_denial_explanation = replace(ex_parte_denial_explanation, "'", "")
			objUpdateSQL = "UPDATE ES.ES_ExParte_CaseList SET Phase2HSR = '" & user_ID_for_validation & "', ExParteAfterPhase2 = 'Closed HC' WHERE CaseNumber = '" & SQL_Case_Number & "' and HCEligReviewDate = '" & sql_review_date & "'"

			'Creating objects for Access
			Set objUpdateConnection = CreateObject("ADODB.Connection")
			Set objUpdateRecordSet = CreateObject("ADODB.Recordset")

			'This is the file path for the statistics Access database.
			objUpdateConnection.Open "Provider = SQLOLEDB.1;Data Source= " & "" &  "hssqlpw139;Initial Catalog= BlueZone_Statistics; Integrated Security=SSPI;Auto Translate=False;" & ""
			objUpdateRecordSet.Open objUpdateSQL, objUpdateConnection
		End If
	End If

	If ex_parte_approval = True Then
		STATS_manualtime = STATS_manualtime + 180			'3 minutes for Ex parte Note and data update

		If developer_mode = True Then
			MsgBox "This is where the SQL update would happen" & vbCr & vbCr & "appears_ex_parte - Approved as Ex Parte" & vbCr& "user_ID_for_validation - " & user_ID_for_validation
		Else
			sql_format_ex_parte_denial_explanation = replace(ex_parte_denial_explanation, "'", "")
			objUpdateSQL = "UPDATE ES.ES_ExParte_CaseList SET Phase2HSR = '" & user_ID_for_validation & "', ExParteAfterPhase2 = 'Approved as Ex Parte' WHERE CaseNumber = '" & SQL_Case_Number & "' and HCEligReviewDate = '" & sql_review_date & "'"

			'Creating objects for Access
			Set objUpdateConnection = CreateObject("ADODB.Connection")
			Set objUpdateRecordSet = CreateObject("ADODB.Recordset")

			'This is the file path for the statistics Access database.
			objUpdateConnection.Open "Provider = SQLOLEDB.1;Data Source= " & "" &  "hssqlpw139;Initial Catalog= BlueZone_Statistics; Integrated Security=SSPI;Auto Translate=False;" & ""
			objUpdateRecordSet.Open objUpdateSQL, objUpdateConnection
		End If

		Call start_a_blank_CASE_NOTE

		Call write_variable_in_CASE_NOTE(CM_plus_1_mo & "/" & CM_plus_1_yr & " Ex Parte Renewal Complete - HEALTH CARE")
		Call write_variable_in_CASE_NOTE("Approved HC for " & CM_plus_1_mo & "/" & CM_plus_1_yr & " renewal.")
		Call write_variable_in_CASE_NOTE("Renewal was completed using the Ex Parte process.")
		Call write_variable_in_CASE_NOTE("   - This is also known as an 'Auto Renewal'.")
		Call write_variable_in_CASE_NOTE("-------------------------------------------------")
		Call write_variable_in_CASE_NOTE("All eligibility details are in a previous NOTE.")
		If MSP_approvals_only = True and MSP_memo_success = True Then
			Call write_variable_in_CASE_NOTE("MEMO sent to resident with Approval Information.")
		End If
		Call write_variable_in_CASE_NOTE("---")
		Call write_variable_in_CASE_NOTE(worker_signature)

		If developer_mode = True Then
			MsgBox "Ex Parte NOTE REVIEW"			'TESTING OPTION'
			PF10
			MsgBox "Ex Parte note Gone?"
		End If
		PF3
	End If
End If

If enter_CNOTE_for_HC = True Then
	For unique_app = 0 to UBound(HC_UNIQUE_APPROVALS, 2)
		first_month = left(HC_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(HC_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(HC_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		month_ind = ""
		For approval = 0 to UBound(HC_ELIG_APPROVALS)
			For member = 0 to UBound(HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs)

				If HC_ELIG_APPROVALS(approval).elig_footer_month & "/" & HC_ELIG_APPROVALS(approval).elig_footer_year = first_month and HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app) = HC_ELIG_APPROVALS(approval).hc_elig_ref_numbs(member) and HC_UNIQUE_APPROVALS(major_prog_for_hc_app, unique_app) = HC_ELIG_APPROVALS(approval).hc_prog_elig_major_program(member) Then
					elig_ind = approval
					memb_ind = member
				End If
			Next
		Next
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- " & HC_UNIQUE_APPROVALS(major_prog_for_hc_app, unique_app) & " for MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app)
		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_elig_type(memb_ind) = "DP" Then program_detail = "- MA-EPD for MEMB " & HC_UNIQUE_APPROVALS(ref_numb_for_hc_app, unique_app)
		header_end = ""
		If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				header_end = " - Ongoing"
			ElseIf len(HC_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			elig_info = "ELIGIBLE"
			one_month_is_elig = True
		ElseIf HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind) = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"

			'THIS IS UNRELIABLE AND WE ARE REMOVING IT UNTIL WE HAVE A BETTER METHOD TO DETERMINE IF CLOSED OR DENIED
			' If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "MA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "EMA" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "IMD" Then
			' 	If ma_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			' 	If ma_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			' 	If ma_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			' 	If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
			' End If
			' If HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "SLMB" or HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_major_program(memb_ind) = "QI1" Then
			' 	If msp_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			' 	If msp_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			' 	If msp_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			' 	If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
			' End If
		End If
		due_date = ""
		If IsDate(HC_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, HC_UNIQUE_APPROVALS(verif_request_date, unique_app))
		STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

		Call hc_elig_case_note

		If developer_mode = True Then
			MsgBox "STOP HERE AND DELETE THE NOTE" & vbCr & HC_ELIG_APPROVALS(elig_ind).hc_prog_elig_eligibility_result(memb_ind)		'TESTING OPTION'
			PF10
			Msgbox "You forgot - but the NOTE is gone"
		End If
		PF3
	Next
End If

If enter_CNOTE_for_EMER = True Then
	due_date = ""
	If IsDate(emer_verif_request_date) = True Then due_date = DateAdd("d", 10, emer_verif_request_date)
	STATS_manualtime = STATS_manualtime + 240			'4 minutes for each CASE/NOTE entered - with the detail and formatting would take 4 minutes on average

	Call emer_elig_case_note

	If developer_mode = True Then
		MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
		PF10
		Msgbox "You forgot - but the NOTE is gone"
	End If
	PF3

End If

If enter_CNOTE_for_SNAP = True Then
	For unique_app = 0 to UBound(SNAP_UNIQUE_APPROVALS, 2)
		first_month = left(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		If len(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
			last_month = right(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app), 5)
		Else
			last_month = first_month
		End If

		elig_ind = ""
		one_month_is_elig = False
		For approval = 0 to UBound(SNAP_ELIG_APPROVALS)
			If SNAP_ELIG_APPROVALS(approval).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(approval).elig_footer_year = first_month Then elig_ind = approval
		Next
		month_ind = ""
		For each_month = 0 to UBound(STAT_INFORMATION)
			If STAT_INFORMATION(each_month).footer_month & "/" & STAT_INFORMATION(each_month).footer_year = first_month Then month_ind = each_month
		Next

		program_detail = "- SNAP"
		header_end = ""
		SNAP_UNIQUE_APPROVALS(limit_benefit_months, unique_app) = ""
		If SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "ELIGIBLE" Then
			If last_month = curr_month_plus_one or first_month = curr_month_plus_one Then
				If SNAP_UNIQUE_APPROVALS(package_is_expedited_const, unique_app) = False Then
					header_end = " - Ongoing"
				ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_exp_verif_status_all_provided = True Then
					header_end = " - Ongoing"
				ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_exp_package_includes_month_two = False Then
					header_end = " only"
					SNAP_UNIQUE_APPROVALS(limit_benefit_months, unique_app) = first_month
				Else
					header_end = " and " & mid(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app), 7, 5) & " only"
					SNAP_UNIQUE_APPROVALS(limit_benefit_months, unique_app) = first_month & "~" & mid(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app), 7, 5)
				End If
			ElseIf len(SNAP_UNIQUE_APPROVALS(months_in_approval, unique_app)) > 5 Then
				header_end = " - " & last_month
			Else
				header_end = " only"
			End If
			If SNAP_UNIQUE_APPROVALS(package_is_expedited_const, unique_app) = True Then program_detail = "- EXPEDITED SNAP"
			elig_info = "ELIGIBLE"
			one_month_is_elig = True
		ElseIf SNAP_ELIG_APPROVALS(elig_ind).snap_elig_result = "INELIGIBLE" Then
			elig_info = "INELIGIBLE"
			If snap_status = "INACTIVE" Then elig_info = "INELIGIBLE - Denied"
			If snap_status = "APP OPEN" Then elig_info = "INELIGIBLE - Denied"
			If snap_status = "APP CLOSE" Then elig_info = "INELIGIBLE - Closed"
			If one_month_is_elig = True Then elig_info = "INELIGIBLE - Closed"
		End If
		due_date = ""
		If IsDate(SNAP_UNIQUE_APPROVALS(verif_request_date, unique_app)) = True Then due_date = DateAdd("d", 10, SNAP_UNIQUE_APPROVALS(verif_request_date, unique_app))

		'This is the WCOM part
		If SNAP_UNIQUE_APPROVALS(wcom_needed, unique_app) = True Then
			ft_mo = left(first_month, 2)
			ft_yr = right(first_month, 2)

			Call navigate_to_MAXIS_screen("SPEC", "WCOM")
			EMWriteScreen ft_mo, 03, 46
			EMWriteScreen ft_yr, 03, 51
			transmit

			wcom_row = 7
			Do
				EMReadScreen notc_date, 8, wcom_row, 16
				EMReadScreen notc_type, 2, wcom_row, 26
				EMReadScreen notc_description, 30, wcom_row, 30
				EMReadScreen notc_print_status, 8, wcom_row, 71

				If notc_date <> "        " Then
					notc_date = DateAdd("d", 0, notc_date)
					notc_description = trim(notc_description)
					notc_print_status = trim(notc_print_status)
					If DateDiff("d", date, notc_date) = 0 AND notc_type = "FS" AND notc_description = "ELIG Approval Notice" AND notc_print_status = "Waiting" Then
						Call write_value_and_transmit("X", wcom_row, 13)

						PF9
						EMReadScreen wcom_line, 60, 3, 17
						If trim(wcom_line) = "" Then

							If SNAP_UNIQUE_APPROVALS(pact_wcom_needed, unique_app) = True Then
								If right(elig_info, 6) = "Denied" Then
									' 60_days_from_app = ""
									' If IsDate(STAT_INFORMATION(month_ind).stat_prog_snap_appl_date) = True Then 60_days_from_app = DateAdd("d", 60, STAT_INFORMATION(month_ind).stat_prog_snap_appl_date)
									' "Your SNAP application has been denied because you did not provide: " & SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ".  This proof was needed by " & due_date & ".  If you need assistance getting this proof please contact us at the number listed on this notice by " & 60_days_from_app"." ''(This date will be 60 days after the application date).
									CALL write_variable_in_SPEC_MEMO("Your SNAP application has been denied because you did not provide: " & SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ".  This proof was needed by " & due_date & ".  If you need assistance getting this proof please contact us at the number listed on this notice by " & DateAdd("d", 30, date) & ".") ''(This date will be 30 days from today).
								End If

								If right(elig_info, 6) = "Closed" Then
									first_of_closure = ft_mo & "/1/" & ft_yr
									first_of_closure = DateAdd("d", 0, first_of_closure)
									end_of_closure_mo = DateAdd("m", 1, first_of_closure)
									end_of_closure_mo = DateAdd("d", -1, end_of_closure_mo)
									CALL write_variable_in_SPEC_MEMO("Your SNAP case will close because you did not provide: " & SNAP_UNIQUE_APPROVALS(pact_inelig_reasons, unique_app) & ".  This proof was needed by " & due_date & ".  If you need assistance getting this proof please contact us at the number listed on this notice by " & end_of_closure_mo & ".")  ''(Enter the last day of the month prior to the effective date of the closing)"
								End If
								SNAP_UNIQUE_APPROVALS(pact_wcom_sent, unique_app) = True
							End if
							If SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_needed, unique_app) = True Then
								CALL write_variable_in_SPEC_MEMO("The monthly gross income for your household is higher than 130% FPG for your household size. This amount is listed above in this notice.  You do not need to report changes in income until your next renewal.  If you have a decrease in income you may be eligible for more benefits.  You may contact the phone number in this letter if this occurs.")
								SNAP_UNIQUE_APPROVALS(snap_over_130_wcom_sent, unique_app) = True
							End If
							PF4
							PF3
						End If
						Exit Do
					End If
				End if
				wcom_row = wcom_row + 1
			Loop until notc_date = "        "
			Call back_to_SELF
		End If

		'Here we entere the CASENOTE
		Call snap_elig_case_note

		For month_count = 0 to UBound(SPECIAL_PROCESSES_BY_MONTH, 2)
			If SPECIAL_PROCESSES_BY_MONTH(footer_mo_const, month_count) = SNAP_ELIG_APPROVALS(elig_ind).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(elig_ind).elig_footer_year Then
				If QCR_SNAP_Homeless_SHELTER_Expense_All = True Then
					record_for_review = False
					If SPECIAL_PROCESSES_BY_MONTH(Homeless_SHELTER_deducation, month_count) = True Then
						If SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_expenses = "" Then
							record_for_review = True
						Else
							numb_snap_budg_shel_exp = SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_expenses * 1
							If numb_snap_budg_shel_exp < SNAP_Homeless_SHELTER_Expense_Min Then record_for_review = True
						End If
					End If
					If MX_region = "TRAINING" Then record_for_review = False
					If developer_mode = True Then record_for_review = False

					If record_for_review = True Then
						'RECORD QCR Cookie here
						txt_file_name = "SNAP_review_homeless_shelter_expense_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
						qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

						'CREATING THE TESTING REPORT
						With (CreateObject("Scripting.FileSystemObject"))
							'Creating an object for the stream of text which we'll use frequently
							Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

							objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
							objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
							objTextStream.WriteLine "RunDateTime^&*^&*" & now
							objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
							objTextStream.WriteLine "ELIGProgram^&*^&*SNAP"
							objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & SNAP_ELIG_APPROVALS(elig_ind).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(elig_ind).elig_footer_year
							objTextStream.WriteLine "Homeless^&*^&*Y"
							objTextStream.WriteLine "BudgetedSHELExpense^&*^&*" & SNAP_ELIG_APPROVALS(elig_ind).snap_budg_shel_expenses
							objTextStream.WriteLine "POLICY^&*^&*CM 0018_15"

							objTextStream.Close
						End With
					End If
				End If
			End If
		Next

		If developer_mode = True Then
			MsgBox "SNAP NOTE REVIEW"			'TESTING OPTION'
			PF10
			MsgBox "SNAP Gone?"
		End If
		PF3
	Next

	If QCR_UHFS_SHEL_Expense = True Then
		uhfs_membs_list = " "
		shel_membs_list = " "
		For each_month = 0 to UBound(SNAP_ELIG_APPROVALS)
			shel_exists_on_case = False
			shel_exists_for_snap_memb = False
			If SNAP_ELIG_APPROVALS(each_month).snap_uhfs = True Then
				For stat_month = 0 to UBound(STAT_INFORMATION)
					If SNAP_ELIG_APPROVALS(each_month).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(each_month).elig_footer_year = STAT_INFORMATION(stat_month).footer_month & "/" & STAT_INFORMATION(stat_month).footer_year Then
						For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
							If STAT_INFORMATION(month_ind).stat_shel_exists(each_memb) = True Then
								shel_exists_on_case = True
								If InStr(shel_membs_list, STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)) = 0 Then
									shel_membs_list = shel_membs_list & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " "
								End If
							End If
							If InStr(SNAP_ELIG_APPROVALS(elig_ind).elig_membs_list, STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)) <> 0 Then
								If InStr(uhfs_membs_list, STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)) = 0 Then
									uhfs_membs_list = uhfs_membs_list & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " "
								End If
								If STAT_INFORMATION(month_ind).stat_disa_exists(each_memb) = True Then
									If STAT_INFORMATION(month_ind).stat_shel_exists(each_memb) = True Then shel_exists_for_snap_memb = True
								End If
							End If
						Next
					End If
				Next
			End If
			If shel_exists_on_case = True and shel_exists_for_snap_memb = False Then QCR_UHFS_SHEL_Potential_Error = True
		Next
		If QCR_UHFS_SHEL_Potential_Error = True Then
			If MX_region <> "TRAINING" Then
				'RECORD QCR Cookie here
				txt_file_name = "SNAP_UHFS_SHEL_Expense_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
				qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

				'CREATING THE TESTING REPORT
				With (CreateObject("Scripting.FileSystemObject"))
					'Creating an object for the stream of text which we'll use frequently
					Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

					objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
					objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
					objTextStream.WriteLine "RunDateTime^&*^&*" & now
					objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
					objTextStream.WriteLine "ELIGProgram^&*^&*Uncle Harry SNAP"
					For each_month = 0 to UBound(SNAP_ELIG_APPROVALS)
						If SNAP_ELIG_APPROVALS(each_month).snap_uhfs = True Then
							objTextStream.WriteLine "BUDGETED Shelter Expenses for " & SNAP_ELIG_APPROVALS(each_month).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(each_month).elig_footer_year & " - $ " & SNAP_ELIG_APPROVALS(each_month).snap_budg_shel_expenses
						End If
					Next
					objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & left(SNAP_UNIQUE_APPROVALS(months_in_approval, 0), 5)
					objTextStream.WriteLine "UHFSMembs^&*^&*MEMB " & replace(trim(uhfs_membs_list), " ", ", MEMB ")
					objTextStream.WriteLine "SHELMembs^&*^&*MEMB " & replace(trim(shel_membs_list), " ", ", MEMB ")
					objTextStream.WriteLine "POLICY^&*^&*CM 0018_15"

					objTextStream.Close
				End With
			End If
		End If
	End If


	If QCR_SNAP_ABAWD_30_09_Eligible = True Then
		For each_month = 0 to UBound(SNAP_ELIG_APPROVALS)
			If SNAP_ELIG_APPROVALS(each_month).snap_elig_result = "ELIGIBLE" Then
				For stat_month = 0 to UBound(STAT_INFORMATION)
					If SNAP_ELIG_APPROVALS(each_month).elig_footer_month & "/" & SNAP_ELIG_APPROVALS(each_month).elig_footer_year = STAT_INFORMATION(stat_month).footer_month & "/" & STAT_INFORMATION(stat_month).footer_year Then
						For each_memb = 0 to UBound(STAT_INFORMATION(month_ind).stat_memb_ref_numb)
							If InStr(SNAP_ELIG_APPROVALS(elig_ind).elig_membs_list, STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)) <> 0 Then
								If STAT_INFORMATION(month_ind).stat_wreg_fset_status_code(each_memb) = "30" and STAT_INFORMATION(month_ind).stat_wreg_abawd_status_code(each_memb) = "09" and STAT_INFORMATION(month_ind).stat_memi_military_service_yn(each_memb) <> "Y" Then
									If InStr(QCR_SNAP_ABAWD_30_09_String, STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb)) = 0 Then
										QCR_SNAP_ABAWD_30_09_String = QCR_SNAP_ABAWD_30_09_String & STAT_INFORMATION(month_ind).stat_memb_ref_numb(each_memb) & " "
									End If
								End If
							End If
						Next
					End If
				Next
			End If
		Next

		QCR_SNAP_ABAWD_30_09_String = trim(QCR_SNAP_ABAWD_30_09_String)
		If MX_region = "TRAINING" and user_ID_for_validation <> "CALO001" Then QCR_SNAP_ABAWD_30_09_String = ""
		If developer_mode = True Then QCR_SNAP_ABAWD_30_09_String = ""

		If QCR_SNAP_ABAWD_30_09_String <> "" Then
			If MX_region <> "TRAINING" Then
				'RECORD QCR Cookie here
				txt_file_name = "SNAP_WREG_30_09_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
				qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

				'CREATING THE TESTING REPORT
				With (CreateObject("Scripting.FileSystemObject"))
					'Creating an object for the stream of text which we'll use frequently
					Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

					objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
					objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
					objTextStream.WriteLine "RunDateTime^&*^&*" & now
					objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
					objTextStream.WriteLine "ELIGProgram^&*^&*SNAP"
					objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & left(SNAP_UNIQUE_APPROVALS(months_in_approval, 0), 5)
					objTextStream.WriteLine "ABAWDMembs^&*^&*MEMB " & replace(QCR_SNAP_ABAWD_30_09_String, " ", ", MEMB ")
					objTextStream.WriteLine "POLICY^&*^&*CM 0011_24"

					objTextStream.Close
				End With
			End If
			email_subject = "TEST - SNAP Case with WREG coded 30/09 - Case: " & MAXIS_case_number
			email_body = "A case was just approved with an eligible member coded as residing in a waivered area."
			email_body = email_body & vbCr & vbCr &"Worker: " & script_run_worker & " - " & windows_user_ID
			email_body = email_body & vbCr & "Case Number: " & MAXIS_case_number
			email_body = email_body & vbCr & "SNAP Eligible"
			email_body = email_body & vbCr & "Initial month of approval: " & left(SNAP_UNIQUE_APPROVALS(months_in_approval, 0), 5)
			email_body = email_body & vbCr & "ABAWD Members coded 30/09: MEMB " & replace(QCR_SNAP_ABAWD_30_09_String, " ", ", MEMB ")
			email_body = email_body & vbCr & ""
			email_body = email_body & vbCr & "Email generated from the NOTES - Eligibility Summary Script, run at " & now

			email_recip = "kerry.walsh@hennepin.us; brooke.reilley@hennepin.us"
			email_recip_CC = "tanya.payne@hennepin.us"
			If MX_region <> "TRAINING" Then Call create_outlook_email("", email_recip, email_recip_CC, email_recip_bcc, email_subject, 1, False, "", "", False, "", email_body, False, "", True)
			If MX_region = "TRAINING" Then Call create_outlook_email("", email_recip, email_recip_CC, email_recip_bcc, email_subject, 1, False, "", "", False, "", email_body, False, "", False)
		End If
	End If
End If

If denials_found_on_pnd2 = True Then
	denial_accurate = ""

	Do
		Do
			Call rept_pnd2_dialog

			dialog Dialog1
			cancel_confirmation

			If denial_accurate = "Indicate if the Denial is Accurate" Then MsgBox "*** Review the information on REPT/PND2 Denials ***" & vbCr & vbCr & "Ensure this is the intended result, this case will deny in the overnight process based on this information." & vbCr &vbCr & "Enter the answer for if the denials are accurate."

		Loop until denial_accurate <> "Indicate if the Denial is Accurate"
		Call check_for_password(are_we_passworded_out)
	Loop until are_we_passworded_out = False
	Call back_to_SELF

	If denial_accurate = "No - I need to update the denial" Then end_msg_info = end_msg_info & "CASE/NOTE has NOT been entered for REPT/PND2 denial as it was indicated the information was not accurate." & vbCr

	If denial_accurate = "Yes - denial is Accurate" Then

		If deny_app_one = True Then
			progs_denied_for_intv = ""
			progs_denied_for_wthdrw = ""

			appt_notc_date = ""
			nomi_date = ""

			If pnd2_cash_status = "I" Then
				If pnd2_cash_prog_one <> "" Then progs_denied_for_intv = progs_denied_for_intv & pnd2_cash_prog_one & ", "
				If pnd2_cash_prog_two <> "" Then progs_denied_for_intv = progs_denied_for_intv & pnd2_cash_prog_two & ", "
			End If
			If pnd2_snap_status = "I" Then progs_denied_for_intv = progs_denied_for_intv & "SNAP, "
			If pnd2_emer_status = "I" Then progs_denied_for_intv = progs_denied_for_intv & "EMER, "
			If pnd2_grh_status = "I" Then progs_denied_for_intv = progs_denied_for_intv & "GRH, "

			If pnd2_cash_status = "R" Then
				If pnd2_cash_prog_one <> "" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & pnd2_cash_prog_one & ", "
				If pnd2_cash_prog_two <> "" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & pnd2_cash_prog_two & ", "
			End If
			If pnd2_snap_status = "R" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & "SNAP, "
			If pnd2_emer_status = "R" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & "EMER, "
			If pnd2_grh_status = "R" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & "GRH, "

			If right(progs_denied_for_intv, 2) = ", " Then progs_denied_for_intv = left(progs_denied_for_intv, len(progs_denied_for_intv)-2)
			If right(progs_denied_for_wthdrw, 2) = ", " Then progs_denied_for_wthdrw = left(progs_denied_for_wthdrw, len(progs_denied_for_wthdrw)-2)

			If progs_denied_for_intv <> "" Then

				Call navigate_to_MAXIS_screen("CASE", "NOTE")       'First to case note to find what has ahppened'
				day_before_app = DateAdd("d", -1, pnd2_appl_date) 'will set the date one day prior to app date'

				note_row = 5            'resetting the variables on the loop
				note_date = ""
				note_title = ""
				appt_date = ""
				Do
					EMReadScreen note_date, 8, note_row, 6      'reading the note date
					EMReadScreen note_title, 55, note_row, 25   'reading the note header
					note_title = trim(note_title)
					IF left(note_title, 35) = "~ Appointment letter sent in MEMO ~" then appt_notc_date = note_date
					IF left(note_title, 42) = "~ Appointment letter sent in MEMO for SNAP" then appt_notc_date = note_date
					IF left(note_title, 37) = "~ Appointment letter sent in MEMO for" then appt_notc_date = note_date

					IF note_title = "~ Client missed application interview, NOMI sent via sc" then nomi_date = note_date
					IF left(note_title, 32) = "**Client missed SNAP interview**" then nomi_date = note_date
					IF left(note_title, 32) = "**Client missed CASH interview**" then nomi_date = note_date
					IF left(note_title, 37) = "**Client missed SNAP/CASH interview**" then nomi_date = note_date
					IF note_title = "~ Client has not completed application interview, NOMI" then nomi_date = note_date
					IF note_title = "~ Client has not completed CASH APP interview, NOMI sen" then nomi_date = note_date
					IF note_title = "* A notice was previously sent to client with detail ab" then nomi_date = note_date

					IF note_date = "        " then Exit Do
					note_row = note_row + 1
					IF note_row = 19 THEN
						PF8
						note_row = 5
					END IF
					EMReadScreen next_note_date, 8, note_row, 6
					IF next_note_date = "        " then Exit Do
				Loop until datevalue(next_note_date) < day_before_app 'looking ahead at the next case note kicking out the dates before app'
				PF3

				end_msg_info = end_msg_info & "CASE/NOTE entered for Denial of " & pnd2_appl_date & " application of " & progs_denied_for_intv & " - denied on REPT/PND2 for no Interview." & vbCr
				CASE_NOTE_entered = True
				Call start_a_blank_CASE_NOTE

				Call write_variable_in_CASE_NOTE("DENIAL of " & pnd2_appl_date & " Application for No Interview: " & progs_denied_for_intv)
				Call write_variable_in_CASE_NOTE("REPT/PND2 has been updated to deny this case in an overnight system process.")
				Call write_bullet_and_variable_in_CASE_NOTE("Application Date", pnd2_appl_date)
				Call write_bullet_and_variable_in_CASE_NOTE("Programs to Deny", progs_denied_for_intv)
				Call write_bullet_and_variable_in_CASE_NOTE("Notice of Interview Sent Date", appt_notc_date)
				Call write_bullet_and_variable_in_CASE_NOTE("NOMI (Notice of Missed Interview) Send Date", nomi_date)
				Call write_variable_in_CASE_NOTE("---")
				Call write_variable_in_CASE_NOTE(worker_signature)

				If developer_mode = True Then
					MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
					PF10
					Msgbox "You forgot - but the NOTE is gone"
				End If
				PF3
			End If

			If progs_denied_for_wthdrw <> "" Then
				end_msg_info = end_msg_info & "CASE/NOTE entered for Denial of " & pnd2_appl_date & " application of " & progs_denied_for_wthdrw & " - denied on REPT/PND2 for Withdraw of Request." & vbCr

				CASE_NOTE_entered = True
				Call start_a_blank_CASE_NOTE

				Call write_variable_in_CASE_NOTE("DENIAL of " & pnd2_appl_date & " Application by resident Request: " & progs_denied_for_wthdrw)
				Call write_variable_in_CASE_NOTE("REPT/PND2 has been updated to deny this case in an overnight system process.")
				Call write_bullet_and_variable_in_CASE_NOTE("Application Date", pnd2_appl_date)
				Call write_bullet_and_variable_in_CASE_NOTE("Programs to Deny", progs_denied_for_intv)
				Call write_variable_in_CASE_NOTE("* Resident requested to withdraw application.")
				Call write_variable_in_CASE_NOTE("---")
				Call write_variable_in_CASE_NOTE(worker_signature)

				If developer_mode = True Then
					MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
					PF10
					Msgbox "You forgot - but the NOTE is gone"
				End If
				PF3
			End If

		End If

		If deny_app_two = True Then
			progs_denied_for_intv = ""
			progs_denied_for_wthdrw = ""

			appt_notc_date = ""
			nomi_date = ""

			If pnd2_2nd_cash_status = "I" Then
				If pnd2_2nd_cash_prog_one <> "" Then progs_denied_for_intv = progs_denied_for_intv & pnd2_2nd_cash_prog_one & ", "
				If pnd2_2nd_cash_prog_two <> "" Then progs_denied_for_intv = progs_denied_for_intv & pnd2_2nd_cash_prog_two & ", "
			End If
			If pnd2_2nd_snap_status = "I" Then progs_denied_for_intv = progs_denied_for_intv & "SNAP, "
			If pnd2_2nd_emer_status = "I" Then progs_denied_for_intv = progs_denied_for_intv & "EMER, "
			If pnd2_2nd_grh_status = "I" Then progs_denied_for_intv = progs_denied_for_intv & "GRH, "

			If pnd2_2nd_cash_status = "R" Then
				If pnd2_2nd_cash_prog_one <> "" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & pnd2_2nd_cash_prog_one & ", "
				If pnd2_2nd_cash_prog_two <> "" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & pnd2_2nd_cash_prog_two & ", "
			End If
			If pnd2_2nd_snap_status = "R" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & "SNAP, "
			If pnd2_2nd_emer_status = "R" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & "EMER, "
			If pnd2_2nd_grh_status = "R" Then progs_denied_for_wthdrw = progs_denied_for_wthdrw & "GRH, "

			If right(progs_denied_for_intv, 2) = ", " Then progs_denied_for_intv = left(progs_denied_for_intv, len(progs_denied_for_intv)-2)
			If right(progs_denied_for_wthdrw, 2) = ", " Then progs_denied_for_wthdrw = left(progs_denied_for_wthdrw, len(progs_denied_for_wthdrw)-2)

			If progs_denied_for_intv <> "" Then

				Call navigate_to_MAXIS_screen("CASE", "NOTE")       'First to case note to find what has ahppened'
				day_before_app = DateAdd("d", -1, pnd2_2nd_appl_date) 'will set the date one day prior to app date'

				note_row = 5            'resetting the variables on the loop
				note_date = ""
				note_title = ""
				appt_date = ""
				Do
					EMReadScreen note_date, 8, note_row, 6      'reading the note date
					EMReadScreen note_title, 55, note_row, 25   'reading the note header
					note_title = trim(note_title)
					IF left(note_title, 35) = "~ Appointment letter sent in MEMO ~" then appt_notc_date = note_date
					IF left(note_title, 42) = "~ Appointment letter sent in MEMO for SNAP" then appt_notc_date = note_date
					IF left(note_title, 37) = "~ Appointment letter sent in MEMO for" then appt_notc_date = note_date

					IF note_title = "~ Client missed application interview, NOMI sent via sc" then nomi_date = note_date
					IF left(note_title, 32) = "**Client missed SNAP interview**" then nomi_date = note_date
					IF left(note_title, 32) = "**Client missed CASH interview**" then nomi_date = note_date
					IF left(note_title, 37) = "**Client missed SNAP/CASH interview**" then nomi_date = note_date
					IF note_title = "~ Client has not completed application interview, NOMI" then nomi_date = note_date
					IF note_title = "~ Client has not completed CASH APP interview, NOMI sen" then nomi_date = note_date
					IF note_title = "* A notice was previously sent to client with detail ab" then nomi_date = note_date

					IF note_date = "        " then Exit Do
					note_row = note_row + 1
					IF note_row = 19 THEN
						PF8
						note_row = 5
					END IF
					EMReadScreen next_note_date, 8, note_row, 6
					IF next_note_date = "        " then Exit Do
				Loop until datevalue(next_note_date) < day_before_app 'looking ahead at the next case note kicking out the dates before app'
				PF3

				end_msg_info = end_msg_info & "CASE/NOTE entered for Denial of " & pnd2_2nd_appl_date & " application of " & progs_denied_for_intv & " - denied on REPT/PND2 for no Interview." & vbCr

				CASE_NOTE_entered = True
				Call start_a_blank_CASE_NOTE

				Call write_variable_in_CASE_NOTE("DENIAL of " & pnd2_2nd_appl_date & " Application for No Interview: " & progs_denied_for_intv)
				Call write_variable_in_CASE_NOTE("REPT/PND2 has been updated to deny this case in an overnight system process.")
				Call write_bullet_and_variable_in_CASE_NOTE("Application Date", pnd2_2nd_appl_date)
				Call write_bullet_and_variable_in_CASE_NOTE("Programs to Deny", progs_denied_for_intv)
				Call write_bullet_and_variable_in_CASE_NOTE("Notice of Interview Sent Date", appt_notc_date)
				Call write_bullet_and_variable_in_CASE_NOTE("NOMI (Notice of Missed Interview) Send Date", nomi_date)
				Call write_variable_in_CASE_NOTE("---")
				Call write_variable_in_CASE_NOTE(worker_signature)

				If developer_mode = True Then
					MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
					PF10
					Msgbox "You forgot - but the NOTE is gone"
				End If
				PF3
			End If

			If progs_denied_for_wthdrw <> "" Then
				end_msg_info = end_msg_info & "CASE/NOTE entered for Denial of " & pnd2_2nd_appl_date & " application of " & progs_denied_for_wthdrw & " - denied on REPT/PND2 for Withdraw of Request." & vbCr

				CASE_NOTE_entered = True
				Call start_a_blank_CASE_NOTE

				Call write_variable_in_CASE_NOTE("DENIAL of " & pnd2_2nd_appl_date & " Application by resident Request: " & progs_denied_for_wthdrw)
				Call write_variable_in_CASE_NOTE("REPT/PND2 has been updated to deny this case in an overnight system process.")
				Call write_bullet_and_variable_in_CASE_NOTE("Application Date", pnd2_2nd_appl_date)
				Call write_bullet_and_variable_in_CASE_NOTE("Programs to Deny", progs_denied_for_intv)
				Call write_variable_in_CASE_NOTE("* Resident requested to withdraw application.")
				Call write_variable_in_CASE_NOTE("---")
				Call write_variable_in_CASE_NOTE(worker_signature)

				If developer_mode = True Then
					MsgBox "STOP HERE AND DELETE THE NOTE"		'TESTING OPTION'
					PF10
					Msgbox "You forgot - but the NOTE is gone"
				End If
				PF3
			End If
		End If
	End If
End If

If enter_CNOTE_for_MFIP = True Then
	sig_change_months = trim(sig_change_months)
	If sig_change_months <> "" Then
		case_note_sig_change = False
		elig_month_one = ""
		elig_month_two = ""
		If len(sig_change_months) = 5 Then
			For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
				If MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year = sig_change_months Then
					elig_month_one = approval
					case_note_sig_change = True
				End If
			Next
		ElseIf len(sig_change_months) = 11 Then
			For approval = 0 to UBound(MFIP_ELIG_APPROVALS)
				If MFIP_ELIG_APPROVALS(approval).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(approval).elig_footer_year = sig_change_months Then
					If elig_month_one = "" Then
						elig_month_one = approval
					Else
						elig_month_two = approval
					End If
					case_note_sig_change = True
				End If
			Next
		End If
		If case_note_sig_change = True Then
			end_msg_info = end_msg_info & "NOTE for MFIP Significant Change Approved" & vbCr

			sig_change_header_months = replace(sig_change_months, " ", " and ")
			Call start_a_blank_CASE_NOTE
			Call write_variable_in_CASE_NOTE("Significant Change APPROVED for " & sig_change_header_months)
			Call write_variable_in_CASE_NOTE("  MFIP budget adjusted due to a")
			Call write_variable_in_CASE_NOTE("  Significant Change between the Budget Month and Payment Month.")

			Call write_variable_in_CASE_NOTE("---")
			Call write_bullet_and_variable_in_CASE_NOTE("Benefit Month", MFIP_ELIG_APPROVALS(elig_month_one).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(elig_month_one).elig_footer_year)
			months_used = MFIP_ELIG_APPROVALS(elig_month_one).mfsc_month_one_of_sig_change & " " & MFIP_ELIG_APPROVALS(elig_month_one).mfsc_month_two_of_sig_change
			months_used = replace(trim(months_used), " ", " and ")
			Call write_bullet_and_variable_in_CASE_NOTE("Sig Change Months Used", months_used)
			Call write_variable_in_CASE_NOTE("* Budget Month Total Income  - $ " & MFIP_ELIG_APPROVALS(elig_month_one).mfsc_budg_mo_total_inc)
			Call write_variable_in_CASE_NOTE("* Payment Month Total Income - $ " & MFIP_ELIG_APPROVALS(elig_month_one).mfsc_pay_mo_total_inc)
			If elig_month_two <> "" Then
				Call write_variable_in_CASE_NOTE("---")
				Call write_bullet_and_variable_in_CASE_NOTE("Benefit Month", MFIP_ELIG_APPROVALS(elig_month_two).elig_footer_month & "/" & MFIP_ELIG_APPROVALS(elig_month_two).elig_footer_year)
				months_used = MFIP_ELIG_APPROVALS(elig_month_two).mfsc_month_one_of_sig_change & " " & MFIP_ELIG_APPROVALS(elig_month_two).mfsc_month_two_of_sig_change
				months_used = replace(trim(months_used), " ", " and ")
				Call write_bullet_and_variable_in_CASE_NOTE("Sig Change Months Used", months_used)
				Call write_variable_in_CASE_NOTE("* Budget Month Total Income  - $ " & MFIP_ELIG_APPROVALS(elig_month_two).mfsc_budg_mo_total_inc)
				Call write_variable_in_CASE_NOTE("* Payment Month Total Income - $ " & MFIP_ELIG_APPROVALS(elig_month_two).mfsc_pay_mo_total_inc)
			End If
			Call write_variable_in_CASE_NOTE("---")
			Call write_variable_in_CASE_NOTE(worker_signature)

			If developer_mode = True Then
				MsgBox "STOP HERE AND DELETE THE NOTE" & vbCr & MFIP_ELIG_APPROVALS(elig_ind).mfip_case_eligibility_result		'TESTING OPTION'
				PF10
				Msgbox "You forgot - but the NOTE is gone"
			End If
			PF3
		End If
	End If
End If

For each_month = 0 to UBound(REPORTING_COMPLETE_ARRAY, 2)
	If REPORTING_COMPLETE_ARRAY(er_revw_completed_const, each_month) = True and REPORTING_COMPLETE_ARRAY(cash_revw_completed_const, each_month) = True Then

		multiple_cash_programs_on_case = False
		If mfip_status <> "INACTIVE" Then
			If ga_status <> "INACTIVE" Then multiple_cash_programs_on_case = True
			If msa_status <> "INACTIVE" Then multiple_cash_programs_on_case = True
			If grh_status <> "INACTIVE" Then multiple_cash_programs_on_case = True
		End If
		If ga_status <> "INACTIVE" Then
			If msa_status <> "INACTIVE" Then multiple_cash_programs_on_case = True
			If grh_status <> "INACTIVE" Then multiple_cash_programs_on_case = True
		End If
		If msa_status <> "INACTIVE" and grh_status <> "INACTIVE" Then multiple_cash_programs_on_case = True

		If REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = True Then
			mfip_checkbox = checked
			If ga_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If msa_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If grh_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = False and InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "GRH") <> 0 Then multiple_cash_programs_on_case = True
		End If

		If REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = True Then
			ga_checkbox = checked
			If mfip_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If msa_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If grh_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = False and InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "GRH") <> 0 Then multiple_cash_programs_on_case = True
		End If
		If REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = True Then
			msa_checkbox = checked
			If ga_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If mfip_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If grh_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = False and InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "GRH") <> 0 Then multiple_cash_programs_on_case = True
		End If
		If REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = True and InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "GRH") <> 0 Then
			grh_checkbox = checked
			If ga_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If msa_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
			If mfip_status <> "INACTIVE" and  REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = False Then multiple_cash_programs_on_case = True
		End If

		If multiple_cash_programs_on_case = True Then
			Dialog1 = ""
			BeginDialog Dialog1, 0, 0, 176, 170, "Cash REVW Completed " & REPORTING_COMPLETE_ARRAY(month_const, each_month)
			  CheckBox 20, 55, 50, 10, "MFIP", mfip_checkbox
			  CheckBox 20, 65, 50, 10, "GA", ga_checkbox
			  CheckBox 20, 75, 50, 10, "MSA", msa_checkbox
			  CheckBox 20, 85, 50, 10, "HS/GRH", grh_checkbox
			  DropListBox 10, 125, 160, 45, "Review was completed with Approval"+chr(9)+"No Review for Programs in this Approval", review_processed_selection
			  ButtonGroup ButtonPressed
			    OkButton 70, 150, 100, 15
			  Text 10, 10, 175, 10, "STAT/REVW Indicates a completed CASH Review"
			  Text 15, 30, 160, 20, "Confirm which CASH Programs had a Review completed for " & REPORTING_COMPLETE_ARRAY(month_const, each_month) & ":"
			  Text 10, 105, 140, 20, "If you did NOT complete an approval for Revew processing, indicate that here:"
			EndDialog

			Do
				Do
					err_msg = ""

					dialog Dialog1

					If mfip_checkbox = unchecked and ga_checkbox = unchecked and msa_checkbox = unchecked and grh_checkbox = unchecked and review_processed_selection ="Review was completed with Approval" Then err_msg = err_msg & vbCr & "You must select a program you are processing a ER for " & REPORTING_COMPLETE_ARRAY(month_const, each_month) & "." & vbCr & vbCr & "If there is no REVW program that you are approving, select 'No Review for Programs in this Approval'."
					If err_msg <> "" Then MsgBox "*** NOTICE **" & vbCr & err_msg

				Loop until err_msg = ""
				Call check_for_password(are_we_passworded_out)
			Loop until are_we_passworded_out = False
			Call back_to_SELF

			If review_processed_selection = "No Review for Programs in this Approval" Then REPORTING_COMPLETE_ARRAY(er_revw_completed_const, each_month) = False
			If mfip_checkbox = unchecked Then REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = False
			If ga_checkbox = unchecked Then REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = False
			If msa_checkbox = unchecked Then REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = False
			If grh_checkbox = unchecked Then REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = False
			If review_processed_selection = "Review was completed with Approval" Then
				include_snap = False
				If InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "SNAP") <> 0 Then include_snap  True

				REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) = ""
				If mfip_checkbox = checked Then
					REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = True
					REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) = REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) & "/MFIP"
				End If
				If ga_checkbox = checked Then
					REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = True
					REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) = REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) & "/GA"
				End if
				If msa_checkbox = checked Then
					REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = True
					REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) = REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) & "/MSA"
				End If
				If grh_checkbox = checked Then
					REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = True
					REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) = REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) & "/GRH"
				End if
			End if
		End If
	End If

	If REPORTING_COMPLETE_ARRAY(er_revw_completed_const, each_month) = True Then
		If left(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), 1) = "/" Then REPORTING_COMPLETE_ARRAY(er_programs_const, each_month) = right(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), len(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month))-1)

		Call start_a_blank_CASE_NOTE

		Call write_variable_in_CASE_NOTE("REVW COMPLETE - " & REPORTING_COMPLETE_ARRAY(month_const, each_month) & " ER for " & REPORTING_COMPLETE_ARRAY(er_programs_const, each_month))
		Call write_variable_in_CASE_NOTE("* Approval Detail and Eligibility in Previous Note(s)")
		Call write_bullet_and_variable_in_CASE_NOTE("Review Completed on", date)
		Call write_bullet_and_variable_in_CASE_NOTE("Review Form Received", REPORTING_COMPLETE_ARRAY(revw_form_date_const, each_month))
		Call write_bullet_and_variable_in_CASE_NOTE("Interview Completed", REPORTING_COMPLETE_ARRAY(revw_intvw_date_const, each_month))

		If REPORTING_COMPLETE_ARRAY(mfip_revw_completed_const, each_month) = True Then
			Call write_variable_in_CASE_NOTE("======================= MFIP =======================")
			Call write_bullet_and_variable_in_CASE_NOTE("MFIP Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(mfip_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("MFIP Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(mfip_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next Cash Review", REPORTING_COMPLETE_ARRAY(mfip_next_revw_const, each_month))
		End If
		If REPORTING_COMPLETE_ARRAY(ga_revw_completed_const, each_month) = True Then
			Call write_variable_in_CASE_NOTE("======================== GA ========================")
			Call write_bullet_and_variable_in_CASE_NOTE("GA Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(ga_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("GA Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(ga_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next Cash Review", REPORTING_COMPLETE_ARRAY(ga_next_revw_const, each_month))
		End If
		If REPORTING_COMPLETE_ARRAY(msa_revw_completed_const, each_month) = True Then
			Call write_variable_in_CASE_NOTE("======================= MSA ========================")
			Call write_bullet_and_variable_in_CASE_NOTE("MSA Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(msa_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("MSA Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(msa_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next Cash Review", REPORTING_COMPLETE_ARRAY(msa_next_revw_const, each_month))
		End If
		If REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = True and InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "GRH") <> 0 Then
			Call write_variable_in_CASE_NOTE("======================= GRH ========================")
			Call write_bullet_and_variable_in_CASE_NOTE("GRH Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(grh_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("GRH Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(grh_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next Cash Review", REPORTING_COMPLETE_ARRAY(grh_next_revw_const, each_month))
		End If
		If REPORTING_COMPLETE_ARRAY(snap_revw_completed_const, each_month) = True and InStr(REPORTING_COMPLETE_ARRAY(er_programs_const, each_month), "SNAP") <> 0 Then
			Call write_variable_in_CASE_NOTE("======================= SNAP =======================")
			Call write_bullet_and_variable_in_CASE_NOTE("SNAP Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(snap_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("SNAP Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(snap_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next SNAP Review", REPORTING_COMPLETE_ARRAY(snap_next_revw_const, each_month))
		End If

		Call write_variable_in_CASE_NOTE("---")
		Call write_variable_in_CASE_NOTE(worker_signature)

		If developer_mode = True Then
			MsgBox "ER NOTE REVIEW"			'TESTING OPTION'
			PF10
			MsgBox "ER Note Gone?"
		End If
		PF3
	End If


	If REPORTING_COMPLETE_ARRAY(sr_revw_completed_const, each_month) = True Then
		If left(REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month), 1) = "/" Then REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month) = right(REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month), len(REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month))-1)

		Call start_a_blank_CASE_NOTE

		Call write_variable_in_CASE_NOTE("REVW COMPLETE - " & REPORTING_COMPLETE_ARRAY(month_const, each_month) & " SR for " & REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month))
		Call write_variable_in_CASE_NOTE("* Approval Detail and Eligibility in Previous Note(s)")
		Call write_bullet_and_variable_in_CASE_NOTE("Review Completed on", date)
		Call write_bullet_and_variable_in_CASE_NOTE("Review Form Received", REPORTING_COMPLETE_ARRAY(revw_form_date_const, each_month))

		If REPORTING_COMPLETE_ARRAY(grh_revw_completed_const, each_month) = True and InStr(REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month), "GRH") <> 0 Then
			Call write_variable_in_CASE_NOTE("======================= GRH ========================")
			Call write_bullet_and_variable_in_CASE_NOTE("GRH Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(grh_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("GRH Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(grh_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next Cash Review", REPORTING_COMPLETE_ARRAY(grh_next_revw_const, each_month))
		End If
		If REPORTING_COMPLETE_ARRAY(snap_revw_completed_const, each_month) = True and InStr(REPORTING_COMPLETE_ARRAY(sr_programs_const, each_month), "SNAP") <> 0 Then
			Call write_variable_in_CASE_NOTE("======================= SNAP =======================")
			Call write_bullet_and_variable_in_CASE_NOTE("SNAP Eligibility in REVW Month " & REPORTING_COMPLETE_ARRAY(month_const, each_month), REPORTING_COMPLETE_ARRAY(snap_elig_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("SNAP Budget Cycle upon REVW", REPORTING_COMPLETE_ARRAY(snap_budg_cycle_const, each_month))
			Call write_bullet_and_variable_in_CASE_NOTE("Next SNAP Review", REPORTING_COMPLETE_ARRAY(snap_next_revw_const, each_month))
		End If

		Call write_variable_in_CASE_NOTE("---")
		Call write_variable_in_CASE_NOTE(worker_signature)

		If developer_mode = True Then
			MsgBox "SR NOTE REVIEW"			'TESTING OPTION'
			PF10
			MsgBox "SR NOTE Gone?"
		End If
		PF3
	End If
Next


script_run_lowdown = script_run_lowdown & vbCr & "ga_status - " & ga_status
script_run_lowdown = script_run_lowdown & vbCr & "msa_status - " & msa_status
script_run_lowdown = script_run_lowdown & vbCr & "mfip_status - " & mfip_status
script_run_lowdown = script_run_lowdown & vbCr & "special_diet_check_exists - " & special_diet_check_exists
script_run_lowdown = script_run_lowdown & vbCr & "dwp_status - " & dwp_status
script_run_lowdown = script_run_lowdown & vbCr & "grh_status - " & grh_status
script_run_lowdown = script_run_lowdown & vbCr & "snap_status - " & snap_status
script_run_lowdown = script_run_lowdown & vbCr & "ma_status - " & ma_status
script_run_lowdown = script_run_lowdown & vbCr & "msp_status - " & msp_status
script_run_lowdown = script_run_lowdown & vbCr & "emer_status - " & emer_status
script_run_lowdown = script_run_lowdown & vbCr & "case_status - " & case_status

script_run_lowdown = script_run_lowdown & vbCr & vbCr & "Active Programs:" & vbCr & list_active_programs
script_run_lowdown = script_run_lowdown & vbCr & "Pending Programs:" & vbCr & list_pending_programs

If CASE_NOTE_entered = False Then end_msg_info = vbCr & "No CASE/NOTE created." & vbCr & " - NO ELIG results generated AND approved today." & vbCr & " - This script for already completed approvals" & vbCr & vbCr & end_msg_info & vbCr & "If this case has a program that is ready to approve, ensure the ELIG results were generated today and the approval was completed." & vbCr
If approvals_not_created_today <> "" Then end_msg_info = end_msg_info & vbCr & "It appears there were approvals completed today on ELIG Results that were created on a different day:" & vbCr & approvals_not_created_today
If pnd2_display_limit_hit = True AND denials_found_on_pnd2 = False Then end_msg_info = end_msg_info & vbCr & vbCr & "The script could not read REPT/PND2 because the X-Number it is in has hit the MAXIS REPT/PND2 display limit. If you are trying to deny the case via REPT/PND2, the case will need to be in an X-Number that is not at the REPT/PND2 display limit."
end_msg_info = end_msg_info & vbCr
If list_active_programs <> "" Then end_msg_info = end_msg_info & vbCr & "Active programs: " & list_active_programs
If list_pending_programs <> "" Then end_msg_info = end_msg_info & vbCr & "Pending programs: " & list_pending_programs
If list_active_programs = "" and list_pending_programs = "" Then end_msg_info = end_msg_info & vbCr & "This case currently has no pending or active programs."

end_msg_info = end_msg_info & "Eligibility Approvals review and documentation script run is complete."

If QCR_HC_Remedial_Care_Review_Needed = True Then
	If MX_region <> "TRAINING" Then
		'RECORD QCR Cookie here
		txt_file_name = "HC_Remedial_Care_" & MAXIS_case_number & "_" & windows_user_ID & "_" & replace(replace(replace(now, "/", "_"),":", "_")," ", "_") & ".txt"
		qcr_file_path = t_drive & "\Eligibility Support\Assignments\QCR Logs\" & txt_file_name

		'CREATING THE TESTING REPORT
		With (CreateObject("Scripting.FileSystemObject"))
			'Creating an object for the stream of text which we'll use frequently
			Set objTextStream = .OpenTextFile(qcr_file_path, ForWriting, true)

			objTextStream.WriteLine "WorkerNumber^&*^&*" & windows_user_ID
			objTextStream.WriteLine "WorkerName^&*^&*" & script_run_worker
			objTextStream.WriteLine "RunDateTime^&*^&*" & now
			objTextStream.WriteLine "Case Number^&*^&*" & MAXIS_case_number
			objTextStream.WriteLine "ELIGProgram^&*^&*HC"
			objTextStream.WriteLine "InitialELIGMonthInPackage^&*^&*" & left(HC_UNIQUE_APPROVALS(months_in_approval, 0), 5)
			objTextStream.WriteLine "HCBudgNoRemedialCareInput^&*^&*MEMB " & budget_without_remedial_care
			objTextStream.WriteLine "POLICY^&*^&*EPM 2.4.2.5.1"

			objTextStream.Close
		End With
	End If

	email_subject = "TEST - HC Case in FACI Type (55 or 56): " & MAXIS_case_number
	email_body = "A case was processed that appears to have Health Care and an OPEN FACI of Type 55 or 56."
	email_body = email_body & vbCr & "budget_without_remedial_care: " & budget_without_remedial_care
	email_body = email_body & vbCr & vbCr &"Worker: " & script_run_worker & " - " & windows_user_ID
	email_body = email_body & vbCr & "Case Number: " & MAXIS_case_number
	email_body = email_body & vbCr & vbCr & "Email generated from the NOTES - Eligibility Summary Script, run at " & now

	email_recip = "ben.teskey@hennepin.us"
	email_recip_CC = ""
	Call create_outlook_email("", email_recip, email_recip_CC, email_recip_bcc, email_subject, 1, False, "", "", False, "", email_body, False, "", True)
End If

Call script_end_procedure_with_error_report("All approval information has been reviewed." & vbCr & end_msg_info)

'----------------------------------------------------------------------------------------------------Closing Project Documentation - Version date 05/23/2024
'------Task/Step--------------------------------------------------------------Date completed---------------Notes-----------------------
'
'------Dialogs--------------------------------------------------------------------------------------------------------------------
'--Dialog1 = "" on all dialogs -------------------------------------------------07/01/2024
'--Tab orders reviewed & confirmed----------------------------------------------07/01/2024					I think this is pretty solid but it can get a little weird - and there are 30 dialogs so there might be some missed
'--Mandatory fields all present & Reviewed--------------------------------------07/01/2024
'--All variables in dialog match mandatory fields-------------------------------07/01/2024
'Review dialog names for content and content fit in dialog----------------------07/01/2024
'--FIRST DIALOG--NEW EFF 5/23/2024----------------------------------------------
'--Include script category and name somewhere on first dialog-------------------07/01/2024
'--Create a button to reference instructions------------------------------------07/01/2024
'
'-----CASE:NOTE-------------------------------------------------------------------------------------------------------------------
'--All variables are CASE:NOTEing (if required)---------------------------------07/01/2024
'--CASE:NOTE Header doesn't look funky------------------------------------------07/01/2024
'--Leave CASE:NOTE in edit mode if applicable-----------------------------------N/A
'--write_variable_in_CASE_NOTE function: confirm that proper punctuation is used -----------------------------------07/01/2024
'
'-----General Supports-------------------------------------------------------------------------------------------------------------
'--Check_for_MAXIS/Check_for_MMIS reviewed--------------------------------------07/01/2024
'--MAXIS_background_check reviewed (if applicable)------------------------------07/01/2024
'--PRIV Case handling reviewed -------------------------------------------------07/01/2024
'--Out-of-County handling reviewed----------------------------------------------07/01/2024
'--script_end_procedures (w/ or w/o error messaging)----------------------------07/01/2024
'--BULK - review output of statistics and run time/count (if applicable)--------N/A
'--All strings for MAXIS entry are uppercase vs. lower case (Ex: "X")-----------07/01/2024
'
'-----Statistics--------------------------------------------------------------------------------------------------------------------
'--Manual time study reviewed --------------------------------------------------07/01/2024
'--Incrementors reviewed (if necessary)-----------------------------------------07/01/2024
'--Denomination reviewed -------------------------------------------------------07/01/2024
'--Script name reviewed---------------------------------------------------------07/01/2024
'--BULK - remove 1 incrementor at end of script reviewed------------------------N/A

'-----Finishing up------------------------------------------------------------------------------------------------------------------
'--Confirm all GitHub tasks are complete----------------------------------------07/01/2024					Any tasks that are not completed will have their own issues created for follow up
'--comment Code-----------------------------------------------------------------07/01/2024
'--Update Changelog for release/update------------------------------------------07/01/2024
'--Remove testing message boxes-------------------------------------------------07/01/2024
'--Remove testing code/unnecessary code-----------------------------------------07/01/2024
'--Review/update SharePoint instructions----------------------------------------07/01/2024
'--Other SharePoint sites review (HSR Manual, etc.)-----------------------------07/01/2024
'--COMPLETE LIST OF SCRIPTS reviewed--------------------------------------------07/01/2024
'--COMPLETE LIST OF SCRIPTS update policy references----------------------------07/01/2024
'--Complete misc. documentation (if applicable)---------------------------------N/A
'--Update project team/issue contact (if applicable)----------------------------N/A